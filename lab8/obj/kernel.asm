
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 00 15 00 	lgdtl  0x150018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 00 15 c0       	mov    $0xc0150000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 04 00 00 00       	call   c010002c <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>
	...

c010002c <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002c:	55                   	push   %ebp
c010002d:	89 e5                	mov    %esp,%ebp
c010002f:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100032:	ba 04 52 15 c0       	mov    $0xc0155204,%edx
c0100037:	b8 d0 0e 15 c0       	mov    $0xc0150ed0,%eax
c010003c:	89 d1                	mov    %edx,%ecx
c010003e:	29 c1                	sub    %eax,%ecx
c0100040:	89 c8                	mov    %ecx,%eax
c0100042:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100046:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010004d:	00 
c010004e:	c7 04 24 d0 0e 15 c0 	movl   $0xc0150ed0,(%esp)
c0100055:	e8 1a 57 01 00       	call   c0115774 <memset>

    cons_init();                // init the console
c010005a:	e8 0d 18 00 00       	call   c010186c <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005f:	c7 45 f4 40 59 11 c0 	movl   $0xc0115940,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100066:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100069:	89 44 24 04          	mov    %eax,0x4(%esp)
c010006d:	c7 04 24 5c 59 11 c0 	movl   $0xc011595c,(%esp)
c0100074:	e8 f7 02 00 00       	call   c0100370 <cprintf>

    print_kerninfo();
c0100079:	e8 de 09 00 00       	call   c0100a5c <print_kerninfo>

    grade_backtrace();
c010007e:	e8 a7 00 00 00       	call   c010012a <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100083:	e8 87 58 00 00       	call   c010590f <pmm_init>

    pic_init();                 // init interrupt controller
c0100088:	e8 ec 21 00 00       	call   c0102279 <pic_init>
    idt_init();                 // init interrupt descriptor table
c010008d:	e8 64 23 00 00       	call   c01023f6 <idt_init>

    vmm_init();                 // init virtual memory management
c0100092:	e8 f9 87 00 00       	call   c0108890 <vmm_init>
    sched_init();               // init scheduler
c0100097:	e8 67 e6 00 00       	call   c010e703 <sched_init>
    proc_init();                // init process table
c010009c:	e8 06 dd 00 00       	call   c010dda7 <proc_init>
    
    ide_init();                 // init ide devices
c01000a1:	e8 05 19 00 00       	call   c01019ab <ide_init>
    swap_init();                // init swap
c01000a6:	e8 0c 6f 00 00       	call   c0106fb7 <swap_init>
    fs_init();                  // init fs
c01000ab:	e8 f7 b0 00 00       	call   c010b1a7 <fs_init>
    
    clock_init();               // init clock interrupt
c01000b0:	e8 c5 0e 00 00       	call   c0100f7a <clock_init>
    intr_enable();              // enable irq interrupt
c01000b5:	e8 26 21 00 00       	call   c01021e0 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    cpu_idle();                 // run idle process
c01000ba:	e8 f6 de 00 00       	call   c010dfb5 <cpu_idle>

c01000bf <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bf:	55                   	push   %ebp
c01000c0:	89 e5                	mov    %esp,%ebp
c01000c2:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000cc:	00 
c01000cd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000d4:	00 
c01000d5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000dc:	e8 b9 0d 00 00       	call   c0100e9a <mon_backtrace>
}
c01000e1:	c9                   	leave  
c01000e2:	c3                   	ret    

c01000e3 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000e3:	55                   	push   %ebp
c01000e4:	89 e5                	mov    %esp,%ebp
c01000e6:	53                   	push   %ebx
c01000e7:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000ea:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000ed:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000f0:	8d 55 08             	lea    0x8(%ebp),%edx
c01000f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f6:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000fa:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000fe:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100102:	89 04 24             	mov    %eax,(%esp)
c0100105:	e8 b5 ff ff ff       	call   c01000bf <grade_backtrace2>
}
c010010a:	83 c4 14             	add    $0x14,%esp
c010010d:	5b                   	pop    %ebx
c010010e:	5d                   	pop    %ebp
c010010f:	c3                   	ret    

c0100110 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100110:	55                   	push   %ebp
c0100111:	89 e5                	mov    %esp,%ebp
c0100113:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100116:	8b 45 10             	mov    0x10(%ebp),%eax
c0100119:	89 44 24 04          	mov    %eax,0x4(%esp)
c010011d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100120:	89 04 24             	mov    %eax,(%esp)
c0100123:	e8 bb ff ff ff       	call   c01000e3 <grade_backtrace1>
}
c0100128:	c9                   	leave  
c0100129:	c3                   	ret    

c010012a <grade_backtrace>:

void
grade_backtrace(void) {
c010012a:	55                   	push   %ebp
c010012b:	89 e5                	mov    %esp,%ebp
c010012d:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100130:	b8 2c 00 10 c0       	mov    $0xc010002c,%eax
c0100135:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c010013c:	ff 
c010013d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100141:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100148:	e8 c3 ff ff ff       	call   c0100110 <grade_backtrace0>
}
c010014d:	c9                   	leave  
c010014e:	c3                   	ret    

c010014f <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010014f:	55                   	push   %ebp
c0100150:	89 e5                	mov    %esp,%ebp
c0100152:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100155:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100158:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c010015b:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010015e:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100161:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100165:	0f b7 c0             	movzwl %ax,%eax
c0100168:	89 c2                	mov    %eax,%edx
c010016a:	83 e2 03             	and    $0x3,%edx
c010016d:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c0100172:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100176:	89 44 24 04          	mov    %eax,0x4(%esp)
c010017a:	c7 04 24 61 59 11 c0 	movl   $0xc0115961,(%esp)
c0100181:	e8 ea 01 00 00       	call   c0100370 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100186:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010018a:	0f b7 d0             	movzwl %ax,%edx
c010018d:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c0100192:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100196:	89 44 24 04          	mov    %eax,0x4(%esp)
c010019a:	c7 04 24 6f 59 11 c0 	movl   $0xc011596f,(%esp)
c01001a1:	e8 ca 01 00 00       	call   c0100370 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a6:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001aa:	0f b7 d0             	movzwl %ax,%edx
c01001ad:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c01001b2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001ba:	c7 04 24 7d 59 11 c0 	movl   $0xc011597d,(%esp)
c01001c1:	e8 aa 01 00 00       	call   c0100370 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001ca:	0f b7 d0             	movzwl %ax,%edx
c01001cd:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c01001d2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001da:	c7 04 24 8b 59 11 c0 	movl   $0xc011598b,(%esp)
c01001e1:	e8 8a 01 00 00       	call   c0100370 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001ea:	0f b7 d0             	movzwl %ax,%edx
c01001ed:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c01001f2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001fa:	c7 04 24 99 59 11 c0 	movl   $0xc0115999,(%esp)
c0100201:	e8 6a 01 00 00       	call   c0100370 <cprintf>
    round ++;
c0100206:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c010020b:	83 c0 01             	add    $0x1,%eax
c010020e:	a3 e0 0e 15 c0       	mov    %eax,0xc0150ee0
}
c0100213:	c9                   	leave  
c0100214:	c3                   	ret    

c0100215 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100215:	55                   	push   %ebp
c0100216:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100218:	5d                   	pop    %ebp
c0100219:	c3                   	ret    

c010021a <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c010021a:	55                   	push   %ebp
c010021b:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c010021d:	5d                   	pop    %ebp
c010021e:	c3                   	ret    

c010021f <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010021f:	55                   	push   %ebp
c0100220:	89 e5                	mov    %esp,%ebp
c0100222:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100225:	e8 25 ff ff ff       	call   c010014f <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c010022a:	c7 04 24 a8 59 11 c0 	movl   $0xc01159a8,(%esp)
c0100231:	e8 3a 01 00 00       	call   c0100370 <cprintf>
    lab1_switch_to_user();
c0100236:	e8 da ff ff ff       	call   c0100215 <lab1_switch_to_user>
    lab1_print_cur_status();
c010023b:	e8 0f ff ff ff       	call   c010014f <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100240:	c7 04 24 c8 59 11 c0 	movl   $0xc01159c8,(%esp)
c0100247:	e8 24 01 00 00       	call   c0100370 <cprintf>
    lab1_switch_to_kernel();
c010024c:	e8 c9 ff ff ff       	call   c010021a <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100251:	e8 f9 fe ff ff       	call   c010014f <lab1_print_cur_status>
}
c0100256:	c9                   	leave  
c0100257:	c3                   	ret    

c0100258 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100258:	55                   	push   %ebp
c0100259:	89 e5                	mov    %esp,%ebp
c010025b:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c010025e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100262:	74 13                	je     c0100277 <readline+0x1f>
        cprintf("%s", prompt);
c0100264:	8b 45 08             	mov    0x8(%ebp),%eax
c0100267:	89 44 24 04          	mov    %eax,0x4(%esp)
c010026b:	c7 04 24 e7 59 11 c0 	movl   $0xc01159e7,(%esp)
c0100272:	e8 f9 00 00 00       	call   c0100370 <cprintf>
    }
    int i = 0, c;
c0100277:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010027e:	eb 01                	jmp    c0100281 <readline+0x29>
        else if (c == '\n' || c == '\r') {
            cputchar(c);
            buf[i] = '\0';
            return buf;
        }
    }
c0100280:	90                   	nop
    if (prompt != NULL) {
        cprintf("%s", prompt);
    }
    int i = 0, c;
    while (1) {
        c = getchar();
c0100281:	e8 77 01 00 00       	call   c01003fd <getchar>
c0100286:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100289:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010028d:	79 07                	jns    c0100296 <readline+0x3e>
            return NULL;
c010028f:	b8 00 00 00 00       	mov    $0x0,%eax
c0100294:	eb 79                	jmp    c010030f <readline+0xb7>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100296:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010029a:	7e 28                	jle    c01002c4 <readline+0x6c>
c010029c:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c01002a3:	7f 1f                	jg     c01002c4 <readline+0x6c>
            cputchar(c);
c01002a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a8:	89 04 24             	mov    %eax,(%esp)
c01002ab:	e8 e8 00 00 00       	call   c0100398 <cputchar>
            buf[i ++] = c;
c01002b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01002b6:	81 c2 00 0f 15 c0    	add    $0xc0150f00,%edx
c01002bc:	88 02                	mov    %al,(%edx)
c01002be:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01002c2:	eb 46                	jmp    c010030a <readline+0xb2>
        }
        else if (c == '\b' && i > 0) {
c01002c4:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c8:	75 17                	jne    c01002e1 <readline+0x89>
c01002ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002ce:	7e 11                	jle    c01002e1 <readline+0x89>
            cputchar(c);
c01002d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002d3:	89 04 24             	mov    %eax,(%esp)
c01002d6:	e8 bd 00 00 00       	call   c0100398 <cputchar>
            i --;
c01002db:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002df:	eb 29                	jmp    c010030a <readline+0xb2>
        }
        else if (c == '\n' || c == '\r') {
c01002e1:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002e5:	74 06                	je     c01002ed <readline+0x95>
c01002e7:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002eb:	75 93                	jne    c0100280 <readline+0x28>
            cputchar(c);
c01002ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002f0:	89 04 24             	mov    %eax,(%esp)
c01002f3:	e8 a0 00 00 00       	call   c0100398 <cputchar>
            buf[i] = '\0';
c01002f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002fb:	05 00 0f 15 c0       	add    $0xc0150f00,%eax
c0100300:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c0100303:	b8 00 0f 15 c0       	mov    $0xc0150f00,%eax
c0100308:	eb 05                	jmp    c010030f <readline+0xb7>
        }
    }
c010030a:	e9 71 ff ff ff       	jmp    c0100280 <readline+0x28>
}
c010030f:	c9                   	leave  
c0100310:	c3                   	ret    
c0100311:	00 00                	add    %al,(%eax)
	...

c0100314 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100314:	55                   	push   %ebp
c0100315:	89 e5                	mov    %esp,%ebp
c0100317:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010031a:	8b 45 08             	mov    0x8(%ebp),%eax
c010031d:	89 04 24             	mov    %eax,(%esp)
c0100320:	e8 73 15 00 00       	call   c0101898 <cons_putc>
    (*cnt) ++;
c0100325:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100328:	8b 00                	mov    (%eax),%eax
c010032a:	8d 50 01             	lea    0x1(%eax),%edx
c010032d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100330:	89 10                	mov    %edx,(%eax)
}
c0100332:	c9                   	leave  
c0100333:	c3                   	ret    

c0100334 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100334:	55                   	push   %ebp
c0100335:	89 e5                	mov    %esp,%ebp
c0100337:	83 ec 38             	sub    $0x38,%esp
    int cnt = 0;
c010033a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c0100341:	b8 14 03 10 c0       	mov    $0xc0100314,%eax
c0100346:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100349:	89 54 24 10          	mov    %edx,0x10(%esp)
c010034d:	8b 55 08             	mov    0x8(%ebp),%edx
c0100350:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0100354:	8d 55 f4             	lea    -0xc(%ebp),%edx
c0100357:	89 54 24 08          	mov    %edx,0x8(%esp)
c010035b:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0100362:	ff 
c0100363:	89 04 24             	mov    %eax,(%esp)
c0100366:	e8 6f 4a 01 00       	call   c0114dda <vprintfmt>
    return cnt;
c010036b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010036e:	c9                   	leave  
c010036f:	c3                   	ret    

c0100370 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100370:	55                   	push   %ebp
c0100371:	89 e5                	mov    %esp,%ebp
c0100373:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0100376:	8d 55 0c             	lea    0xc(%ebp),%edx
c0100379:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010037c:	89 10                	mov    %edx,(%eax)
    cnt = vcprintf(fmt, ap);
c010037e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100381:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100385:	8b 45 08             	mov    0x8(%ebp),%eax
c0100388:	89 04 24             	mov    %eax,(%esp)
c010038b:	e8 a4 ff ff ff       	call   c0100334 <vcprintf>
c0100390:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100393:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100396:	c9                   	leave  
c0100397:	c3                   	ret    

c0100398 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c0100398:	55                   	push   %ebp
c0100399:	89 e5                	mov    %esp,%ebp
c010039b:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010039e:	8b 45 08             	mov    0x8(%ebp),%eax
c01003a1:	89 04 24             	mov    %eax,(%esp)
c01003a4:	e8 ef 14 00 00       	call   c0101898 <cons_putc>
}
c01003a9:	c9                   	leave  
c01003aa:	c3                   	ret    

c01003ab <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01003ab:	55                   	push   %ebp
c01003ac:	89 e5                	mov    %esp,%ebp
c01003ae:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003b1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003b8:	eb 13                	jmp    c01003cd <cputs+0x22>
        cputch(c, &cnt);
c01003ba:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003be:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003c1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003c5:	89 04 24             	mov    %eax,(%esp)
c01003c8:	e8 47 ff ff ff       	call   c0100314 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01003d0:	0f b6 00             	movzbl (%eax),%eax
c01003d3:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003d6:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003da:	0f 95 c0             	setne  %al
c01003dd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01003e1:	84 c0                	test   %al,%al
c01003e3:	75 d5                	jne    c01003ba <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003e5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003ec:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003f3:	e8 1c ff ff ff       	call   c0100314 <cputch>
    return cnt;
c01003f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003fb:	c9                   	leave  
c01003fc:	c3                   	ret    

c01003fd <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003fd:	55                   	push   %ebp
c01003fe:	89 e5                	mov    %esp,%ebp
c0100400:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100403:	e8 cc 14 00 00       	call   c01018d4 <cons_getc>
c0100408:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010040b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010040f:	74 f2                	je     c0100403 <getchar+0x6>
        /* do nothing */;
    return c;
c0100411:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100414:	c9                   	leave  
c0100415:	c3                   	ret    
	...

c0100418 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100418:	55                   	push   %ebp
c0100419:	89 e5                	mov    %esp,%ebp
c010041b:	83 ec 28             	sub    $0x28,%esp
    char *dst;
    size_t len = strlen(src);
c010041e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100421:	89 04 24             	mov    %eax,(%esp)
c0100424:	e8 eb 4f 01 00       	call   c0115414 <strlen>
c0100429:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c010042c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010042f:	83 c0 01             	add    $0x1,%eax
c0100432:	89 04 24             	mov    %eax,(%esp)
c0100435:	e8 1c 4a 00 00       	call   c0104e56 <kmalloc>
c010043a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010043d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100441:	74 24                	je     c0100467 <strdup+0x4f>
        memcpy(dst, src, len);
c0100443:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100446:	89 44 24 08          	mov    %eax,0x8(%esp)
c010044a:	8b 45 08             	mov    0x8(%ebp),%eax
c010044d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100451:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100454:	89 04 24             	mov    %eax,(%esp)
c0100457:	e8 17 54 01 00       	call   c0115873 <memcpy>
        dst[len] = '\0';
c010045c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010045f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100462:	01 d0                	add    %edx,%eax
c0100464:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c0100467:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010046a:	c9                   	leave  
c010046b:	c3                   	ret    

c010046c <stradd>:

char *
stradd(const char *src1, const char *src2) {
c010046c:	55                   	push   %ebp
c010046d:	89 e5                	mov    %esp,%ebp
c010046f:	83 ec 28             	sub    $0x28,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c0100472:	8b 45 08             	mov    0x8(%ebp),%eax
c0100475:	89 04 24             	mov    %eax,(%esp)
c0100478:	e8 97 4f 01 00       	call   c0115414 <strlen>
c010047d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100480:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100483:	89 04 24             	mov    %eax,(%esp)
c0100486:	e8 89 4f 01 00       	call   c0115414 <strlen>
c010048b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c010048e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100491:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100494:	01 d0                	add    %edx,%eax
c0100496:	83 c0 01             	add    $0x1,%eax
c0100499:	89 04 24             	mov    %eax,(%esp)
c010049c:	e8 b5 49 00 00       	call   c0104e56 <kmalloc>
c01004a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01004a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01004aa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01004ae:	74 44                	je     c01004f4 <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c01004b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004b3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01004ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004c1:	89 04 24             	mov    %eax,(%esp)
c01004c4:	e8 aa 53 01 00       	call   c0115873 <memcpy>
c01004c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004cc:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c01004cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004e0:	89 04 24             	mov    %eax,(%esp)
c01004e3:	e8 8b 53 01 00       	call   c0115873 <memcpy>
c01004e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004eb:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c01004ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004f1:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c01004f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01004f7:	c9                   	leave  
c01004f8:	c3                   	ret    
c01004f9:	00 00                	add    %al,(%eax)
	...

c01004fc <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004fc:	55                   	push   %ebp
c01004fd:	89 e5                	mov    %esp,%ebp
c01004ff:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c0100502:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100505:	8b 00                	mov    (%eax),%eax
c0100507:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010050a:	8b 45 10             	mov    0x10(%ebp),%eax
c010050d:	8b 00                	mov    (%eax),%eax
c010050f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100512:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100519:	e9 c6 00 00 00       	jmp    c01005e4 <stab_binsearch+0xe8>
        int true_m = (l + r) / 2, m = true_m;
c010051e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100521:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100524:	01 d0                	add    %edx,%eax
c0100526:	89 c2                	mov    %eax,%edx
c0100528:	c1 ea 1f             	shr    $0x1f,%edx
c010052b:	01 d0                	add    %edx,%eax
c010052d:	d1 f8                	sar    %eax
c010052f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100532:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100535:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100538:	eb 04                	jmp    c010053e <stab_binsearch+0x42>
            m --;
c010053a:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010053e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100541:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100544:	7c 1b                	jl     c0100561 <stab_binsearch+0x65>
c0100546:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100549:	89 d0                	mov    %edx,%eax
c010054b:	01 c0                	add    %eax,%eax
c010054d:	01 d0                	add    %edx,%eax
c010054f:	c1 e0 02             	shl    $0x2,%eax
c0100552:	03 45 08             	add    0x8(%ebp),%eax
c0100555:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100559:	0f b6 c0             	movzbl %al,%eax
c010055c:	3b 45 14             	cmp    0x14(%ebp),%eax
c010055f:	75 d9                	jne    c010053a <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100561:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100564:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100567:	7d 0b                	jge    c0100574 <stab_binsearch+0x78>
            l = true_m + 1;
c0100569:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010056c:	83 c0 01             	add    $0x1,%eax
c010056f:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100572:	eb 70                	jmp    c01005e4 <stab_binsearch+0xe8>
        }

        // actual binary search
        any_matches = 1;
c0100574:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010057b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010057e:	89 d0                	mov    %edx,%eax
c0100580:	01 c0                	add    %eax,%eax
c0100582:	01 d0                	add    %edx,%eax
c0100584:	c1 e0 02             	shl    $0x2,%eax
c0100587:	03 45 08             	add    0x8(%ebp),%eax
c010058a:	8b 40 08             	mov    0x8(%eax),%eax
c010058d:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100590:	73 13                	jae    c01005a5 <stab_binsearch+0xa9>
            *region_left = m;
c0100592:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100595:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100598:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010059a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010059d:	83 c0 01             	add    $0x1,%eax
c01005a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01005a3:	eb 3f                	jmp    c01005e4 <stab_binsearch+0xe8>
        } else if (stabs[m].n_value > addr) {
c01005a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005a8:	89 d0                	mov    %edx,%eax
c01005aa:	01 c0                	add    %eax,%eax
c01005ac:	01 d0                	add    %edx,%eax
c01005ae:	c1 e0 02             	shl    $0x2,%eax
c01005b1:	03 45 08             	add    0x8(%ebp),%eax
c01005b4:	8b 40 08             	mov    0x8(%eax),%eax
c01005b7:	3b 45 18             	cmp    0x18(%ebp),%eax
c01005ba:	76 16                	jbe    c01005d2 <stab_binsearch+0xd6>
            *region_right = m - 1;
c01005bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005bf:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005c2:	8b 45 10             	mov    0x10(%ebp),%eax
c01005c5:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ca:	83 e8 01             	sub    $0x1,%eax
c01005cd:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005d0:	eb 12                	jmp    c01005e4 <stab_binsearch+0xe8>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005d8:	89 10                	mov    %edx,(%eax)
            l = m;
c01005da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005e0:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005e7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005ea:	0f 8e 2e ff ff ff    	jle    c010051e <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005f4:	75 0f                	jne    c0100605 <stab_binsearch+0x109>
        *region_right = *region_left - 1;
c01005f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f9:	8b 00                	mov    (%eax),%eax
c01005fb:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005fe:	8b 45 10             	mov    0x10(%ebp),%eax
c0100601:	89 10                	mov    %edx,(%eax)
c0100603:	eb 3b                	jmp    c0100640 <stab_binsearch+0x144>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c0100605:	8b 45 10             	mov    0x10(%ebp),%eax
c0100608:	8b 00                	mov    (%eax),%eax
c010060a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c010060d:	eb 04                	jmp    c0100613 <stab_binsearch+0x117>
c010060f:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c0100613:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100616:	8b 00                	mov    (%eax),%eax
c0100618:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010061b:	7d 1b                	jge    c0100638 <stab_binsearch+0x13c>
c010061d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100620:	89 d0                	mov    %edx,%eax
c0100622:	01 c0                	add    %eax,%eax
c0100624:	01 d0                	add    %edx,%eax
c0100626:	c1 e0 02             	shl    $0x2,%eax
c0100629:	03 45 08             	add    0x8(%ebp),%eax
c010062c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100630:	0f b6 c0             	movzbl %al,%eax
c0100633:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100636:	75 d7                	jne    c010060f <stab_binsearch+0x113>
            /* do nothing */;
        *region_left = l;
c0100638:	8b 45 0c             	mov    0xc(%ebp),%eax
c010063b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010063e:	89 10                	mov    %edx,(%eax)
    }
}
c0100640:	c9                   	leave  
c0100641:	c3                   	ret    

c0100642 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100642:	55                   	push   %ebp
c0100643:	89 e5                	mov    %esp,%ebp
c0100645:	53                   	push   %ebx
c0100646:	83 ec 54             	sub    $0x54,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100649:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064c:	c7 00 ec 59 11 c0    	movl   $0xc01159ec,(%eax)
    info->eip_line = 0;
c0100652:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100655:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c010065c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010065f:	c7 40 08 ec 59 11 c0 	movl   $0xc01159ec,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100666:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100669:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100670:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100673:	8b 55 08             	mov    0x8(%ebp),%edx
c0100676:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100679:	8b 45 0c             	mov    0xc(%ebp),%eax
c010067c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100683:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010068a:	76 21                	jbe    c01006ad <debuginfo_eip+0x6b>
        stabs = __STAB_BEGIN__;
c010068c:	c7 45 f4 c0 9f 11 c0 	movl   $0xc0119fc0,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100693:	c7 45 f0 1c 08 14 c0 	movl   $0xc014081c,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c010069a:	c7 45 ec 1d 08 14 c0 	movl   $0xc014081d,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01006a1:	c7 45 e8 2c d2 14 c0 	movl   $0xc014d22c,-0x18(%ebp)
c01006a8:	e9 ec 00 00 00       	jmp    c0100799 <debuginfo_eip+0x157>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01006ad:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01006b4:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c01006b9:	85 c0                	test   %eax,%eax
c01006bb:	74 11                	je     c01006ce <debuginfo_eip+0x8c>
c01006bd:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c01006c2:	8b 40 18             	mov    0x18(%eax),%eax
c01006c5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006c8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006cc:	75 0a                	jne    c01006d8 <debuginfo_eip+0x96>
            return -1;
c01006ce:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006d3:	e9 7e 03 00 00       	jmp    c0100a56 <debuginfo_eip+0x414>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006db:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01006e2:	00 
c01006e3:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01006ea:	00 
c01006eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01006f2:	89 04 24             	mov    %eax,(%esp)
c01006f5:	e8 94 8a 00 00       	call   c010918e <user_mem_check>
c01006fa:	85 c0                	test   %eax,%eax
c01006fc:	75 0a                	jne    c0100708 <debuginfo_eip+0xc6>
            return -1;
c01006fe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100703:	e9 4e 03 00 00       	jmp    c0100a56 <debuginfo_eip+0x414>
        }

        stabs = usd->stabs;
c0100708:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010070b:	8b 00                	mov    (%eax),%eax
c010070d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c0100710:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100713:	8b 40 04             	mov    0x4(%eax),%eax
c0100716:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100719:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010071c:	8b 40 08             	mov    0x8(%eax),%eax
c010071f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c0100722:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100725:	8b 40 0c             	mov    0xc(%eax),%eax
c0100728:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c010072b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010072e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100731:	29 c2                	sub    %eax,%edx
c0100733:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100736:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010073d:	00 
c010073e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100742:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100746:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100749:	89 04 24             	mov    %eax,(%esp)
c010074c:	e8 3d 8a 00 00       	call   c010918e <user_mem_check>
c0100751:	85 c0                	test   %eax,%eax
c0100753:	75 0a                	jne    c010075f <debuginfo_eip+0x11d>
            return -1;
c0100755:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010075a:	e9 f7 02 00 00       	jmp    c0100a56 <debuginfo_eip+0x414>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010075f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100762:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100765:	89 d1                	mov    %edx,%ecx
c0100767:	29 c1                	sub    %eax,%ecx
c0100769:	89 c8                	mov    %ecx,%eax
c010076b:	89 c2                	mov    %eax,%edx
c010076d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100770:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100777:	00 
c0100778:	89 54 24 08          	mov    %edx,0x8(%esp)
c010077c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100780:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100783:	89 04 24             	mov    %eax,(%esp)
c0100786:	e8 03 8a 00 00       	call   c010918e <user_mem_check>
c010078b:	85 c0                	test   %eax,%eax
c010078d:	75 0a                	jne    c0100799 <debuginfo_eip+0x157>
            return -1;
c010078f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100794:	e9 bd 02 00 00       	jmp    c0100a56 <debuginfo_eip+0x414>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100799:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010079c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010079f:	76 0d                	jbe    c01007ae <debuginfo_eip+0x16c>
c01007a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01007a4:	83 e8 01             	sub    $0x1,%eax
c01007a7:	0f b6 00             	movzbl (%eax),%eax
c01007aa:	84 c0                	test   %al,%al
c01007ac:	74 0a                	je     c01007b8 <debuginfo_eip+0x176>
        return -1;
c01007ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007b3:	e9 9e 02 00 00       	jmp    c0100a56 <debuginfo_eip+0x414>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01007b8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01007bf:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007c5:	89 d3                	mov    %edx,%ebx
c01007c7:	29 c3                	sub    %eax,%ebx
c01007c9:	89 d8                	mov    %ebx,%eax
c01007cb:	c1 f8 02             	sar    $0x2,%eax
c01007ce:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01007d4:	83 e8 01             	sub    $0x1,%eax
c01007d7:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01007da:	8b 45 08             	mov    0x8(%ebp),%eax
c01007dd:	89 44 24 10          	mov    %eax,0x10(%esp)
c01007e1:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01007e8:	00 
c01007e9:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01007ec:	89 44 24 08          	mov    %eax,0x8(%esp)
c01007f0:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007fa:	89 04 24             	mov    %eax,(%esp)
c01007fd:	e8 fa fc ff ff       	call   c01004fc <stab_binsearch>
    if (lfile == 0)
c0100802:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100805:	85 c0                	test   %eax,%eax
c0100807:	75 0a                	jne    c0100813 <debuginfo_eip+0x1d1>
        return -1;
c0100809:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010080e:	e9 43 02 00 00       	jmp    c0100a56 <debuginfo_eip+0x414>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100813:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100816:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100819:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010081c:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c010081f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100822:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100826:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c010082d:	00 
c010082e:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100831:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100835:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100838:	89 44 24 04          	mov    %eax,0x4(%esp)
c010083c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010083f:	89 04 24             	mov    %eax,(%esp)
c0100842:	e8 b5 fc ff ff       	call   c01004fc <stab_binsearch>

    if (lfun <= rfun) {
c0100847:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010084a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010084d:	39 c2                	cmp    %eax,%edx
c010084f:	7f 72                	jg     c01008c3 <debuginfo_eip+0x281>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100851:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100854:	89 c2                	mov    %eax,%edx
c0100856:	89 d0                	mov    %edx,%eax
c0100858:	01 c0                	add    %eax,%eax
c010085a:	01 d0                	add    %edx,%eax
c010085c:	c1 e0 02             	shl    $0x2,%eax
c010085f:	03 45 f4             	add    -0xc(%ebp),%eax
c0100862:	8b 10                	mov    (%eax),%edx
c0100864:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100867:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010086a:	89 cb                	mov    %ecx,%ebx
c010086c:	29 c3                	sub    %eax,%ebx
c010086e:	89 d8                	mov    %ebx,%eax
c0100870:	39 c2                	cmp    %eax,%edx
c0100872:	73 1e                	jae    c0100892 <debuginfo_eip+0x250>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100874:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100877:	89 c2                	mov    %eax,%edx
c0100879:	89 d0                	mov    %edx,%eax
c010087b:	01 c0                	add    %eax,%eax
c010087d:	01 d0                	add    %edx,%eax
c010087f:	c1 e0 02             	shl    $0x2,%eax
c0100882:	03 45 f4             	add    -0xc(%ebp),%eax
c0100885:	8b 00                	mov    (%eax),%eax
c0100887:	89 c2                	mov    %eax,%edx
c0100889:	03 55 ec             	add    -0x14(%ebp),%edx
c010088c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010088f:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100892:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100895:	89 c2                	mov    %eax,%edx
c0100897:	89 d0                	mov    %edx,%eax
c0100899:	01 c0                	add    %eax,%eax
c010089b:	01 d0                	add    %edx,%eax
c010089d:	c1 e0 02             	shl    $0x2,%eax
c01008a0:	03 45 f4             	add    -0xc(%ebp),%eax
c01008a3:	8b 50 08             	mov    0x8(%eax),%edx
c01008a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a9:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01008ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008af:	8b 40 10             	mov    0x10(%eax),%eax
c01008b2:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01008b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01008bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008be:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01008c1:	eb 15                	jmp    c01008d8 <debuginfo_eip+0x296>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01008c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01008c9:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01008cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01008d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01008d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008db:	8b 40 08             	mov    0x8(%eax),%eax
c01008de:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01008e5:	00 
c01008e6:	89 04 24             	mov    %eax,(%esp)
c01008e9:	e8 fe 4c 01 00       	call   c01155ec <strfind>
c01008ee:	89 c2                	mov    %eax,%edx
c01008f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008f3:	8b 40 08             	mov    0x8(%eax),%eax
c01008f6:	29 c2                	sub    %eax,%edx
c01008f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008fb:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0100901:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100905:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010090c:	00 
c010090d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100910:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100914:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100917:	89 44 24 04          	mov    %eax,0x4(%esp)
c010091b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091e:	89 04 24             	mov    %eax,(%esp)
c0100921:	e8 d6 fb ff ff       	call   c01004fc <stab_binsearch>
    if (lline <= rline) {
c0100926:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100929:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010092c:	39 c2                	cmp    %eax,%edx
c010092e:	7f 20                	jg     c0100950 <debuginfo_eip+0x30e>
        info->eip_line = stabs[rline].n_desc;
c0100930:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100933:	89 c2                	mov    %eax,%edx
c0100935:	89 d0                	mov    %edx,%eax
c0100937:	01 c0                	add    %eax,%eax
c0100939:	01 d0                	add    %edx,%eax
c010093b:	c1 e0 02             	shl    $0x2,%eax
c010093e:	03 45 f4             	add    -0xc(%ebp),%eax
c0100941:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100945:	0f b7 d0             	movzwl %ax,%edx
c0100948:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094b:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c010094e:	eb 13                	jmp    c0100963 <debuginfo_eip+0x321>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100950:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100955:	e9 fc 00 00 00       	jmp    c0100a56 <debuginfo_eip+0x414>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010095a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010095d:	83 e8 01             	sub    $0x1,%eax
c0100960:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100963:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100966:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100969:	39 c2                	cmp    %eax,%edx
c010096b:	7c 4a                	jl     c01009b7 <debuginfo_eip+0x375>
           && stabs[lline].n_type != N_SOL
c010096d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100970:	89 c2                	mov    %eax,%edx
c0100972:	89 d0                	mov    %edx,%eax
c0100974:	01 c0                	add    %eax,%eax
c0100976:	01 d0                	add    %edx,%eax
c0100978:	c1 e0 02             	shl    $0x2,%eax
c010097b:	03 45 f4             	add    -0xc(%ebp),%eax
c010097e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100982:	3c 84                	cmp    $0x84,%al
c0100984:	74 31                	je     c01009b7 <debuginfo_eip+0x375>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100986:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100989:	89 c2                	mov    %eax,%edx
c010098b:	89 d0                	mov    %edx,%eax
c010098d:	01 c0                	add    %eax,%eax
c010098f:	01 d0                	add    %edx,%eax
c0100991:	c1 e0 02             	shl    $0x2,%eax
c0100994:	03 45 f4             	add    -0xc(%ebp),%eax
c0100997:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010099b:	3c 64                	cmp    $0x64,%al
c010099d:	75 bb                	jne    c010095a <debuginfo_eip+0x318>
c010099f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009a2:	89 c2                	mov    %eax,%edx
c01009a4:	89 d0                	mov    %edx,%eax
c01009a6:	01 c0                	add    %eax,%eax
c01009a8:	01 d0                	add    %edx,%eax
c01009aa:	c1 e0 02             	shl    $0x2,%eax
c01009ad:	03 45 f4             	add    -0xc(%ebp),%eax
c01009b0:	8b 40 08             	mov    0x8(%eax),%eax
c01009b3:	85 c0                	test   %eax,%eax
c01009b5:	74 a3                	je     c010095a <debuginfo_eip+0x318>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01009b7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009bd:	39 c2                	cmp    %eax,%edx
c01009bf:	7c 40                	jl     c0100a01 <debuginfo_eip+0x3bf>
c01009c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009c4:	89 c2                	mov    %eax,%edx
c01009c6:	89 d0                	mov    %edx,%eax
c01009c8:	01 c0                	add    %eax,%eax
c01009ca:	01 d0                	add    %edx,%eax
c01009cc:	c1 e0 02             	shl    $0x2,%eax
c01009cf:	03 45 f4             	add    -0xc(%ebp),%eax
c01009d2:	8b 10                	mov    (%eax),%edx
c01009d4:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01009d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009da:	89 cb                	mov    %ecx,%ebx
c01009dc:	29 c3                	sub    %eax,%ebx
c01009de:	89 d8                	mov    %ebx,%eax
c01009e0:	39 c2                	cmp    %eax,%edx
c01009e2:	73 1d                	jae    c0100a01 <debuginfo_eip+0x3bf>
        info->eip_file = stabstr + stabs[lline].n_strx;
c01009e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009e7:	89 c2                	mov    %eax,%edx
c01009e9:	89 d0                	mov    %edx,%eax
c01009eb:	01 c0                	add    %eax,%eax
c01009ed:	01 d0                	add    %edx,%eax
c01009ef:	c1 e0 02             	shl    $0x2,%eax
c01009f2:	03 45 f4             	add    -0xc(%ebp),%eax
c01009f5:	8b 00                	mov    (%eax),%eax
c01009f7:	89 c2                	mov    %eax,%edx
c01009f9:	03 55 ec             	add    -0x14(%ebp),%edx
c01009fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009ff:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a01:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a04:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a07:	39 c2                	cmp    %eax,%edx
c0100a09:	7d 46                	jge    c0100a51 <debuginfo_eip+0x40f>
        for (lline = lfun + 1;
c0100a0b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100a0e:	83 c0 01             	add    $0x1,%eax
c0100a11:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100a14:	eb 18                	jmp    c0100a2e <debuginfo_eip+0x3ec>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100a16:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a19:	8b 40 14             	mov    0x14(%eax),%eax
c0100a1c:	8d 50 01             	lea    0x1(%eax),%edx
c0100a1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a22:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100a25:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a28:	83 c0 01             	add    $0x1,%eax
c0100a2b:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a2e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a31:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100a34:	39 c2                	cmp    %eax,%edx
c0100a36:	7d 19                	jge    c0100a51 <debuginfo_eip+0x40f>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a38:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a3b:	89 c2                	mov    %eax,%edx
c0100a3d:	89 d0                	mov    %edx,%eax
c0100a3f:	01 c0                	add    %eax,%eax
c0100a41:	01 d0                	add    %edx,%eax
c0100a43:	c1 e0 02             	shl    $0x2,%eax
c0100a46:	03 45 f4             	add    -0xc(%ebp),%eax
c0100a49:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a4d:	3c a0                	cmp    $0xa0,%al
c0100a4f:	74 c5                	je     c0100a16 <debuginfo_eip+0x3d4>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a51:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a56:	83 c4 54             	add    $0x54,%esp
c0100a59:	5b                   	pop    %ebx
c0100a5a:	5d                   	pop    %ebp
c0100a5b:	c3                   	ret    

c0100a5c <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a5c:	55                   	push   %ebp
c0100a5d:	89 e5                	mov    %esp,%ebp
c0100a5f:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a62:	c7 04 24 f6 59 11 c0 	movl   $0xc01159f6,(%esp)
c0100a69:	e8 02 f9 ff ff       	call   c0100370 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a6e:	c7 44 24 04 2c 00 10 	movl   $0xc010002c,0x4(%esp)
c0100a75:	c0 
c0100a76:	c7 04 24 0f 5a 11 c0 	movl   $0xc0115a0f,(%esp)
c0100a7d:	e8 ee f8 ff ff       	call   c0100370 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a82:	c7 44 24 04 2c 59 11 	movl   $0xc011592c,0x4(%esp)
c0100a89:	c0 
c0100a8a:	c7 04 24 27 5a 11 c0 	movl   $0xc0115a27,(%esp)
c0100a91:	e8 da f8 ff ff       	call   c0100370 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100a96:	c7 44 24 04 d0 0e 15 	movl   $0xc0150ed0,0x4(%esp)
c0100a9d:	c0 
c0100a9e:	c7 04 24 3f 5a 11 c0 	movl   $0xc0115a3f,(%esp)
c0100aa5:	e8 c6 f8 ff ff       	call   c0100370 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100aaa:	c7 44 24 04 04 52 15 	movl   $0xc0155204,0x4(%esp)
c0100ab1:	c0 
c0100ab2:	c7 04 24 57 5a 11 c0 	movl   $0xc0115a57,(%esp)
c0100ab9:	e8 b2 f8 ff ff       	call   c0100370 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100abe:	b8 04 52 15 c0       	mov    $0xc0155204,%eax
c0100ac3:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100ac9:	b8 2c 00 10 c0       	mov    $0xc010002c,%eax
c0100ace:	89 d1                	mov    %edx,%ecx
c0100ad0:	29 c1                	sub    %eax,%ecx
c0100ad2:	89 c8                	mov    %ecx,%eax
c0100ad4:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100ada:	85 c0                	test   %eax,%eax
c0100adc:	0f 48 c2             	cmovs  %edx,%eax
c0100adf:	c1 f8 0a             	sar    $0xa,%eax
c0100ae2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ae6:	c7 04 24 70 5a 11 c0 	movl   $0xc0115a70,(%esp)
c0100aed:	e8 7e f8 ff ff       	call   c0100370 <cprintf>
}
c0100af2:	c9                   	leave  
c0100af3:	c3                   	ret    

c0100af4 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100af4:	55                   	push   %ebp
c0100af5:	89 e5                	mov    %esp,%ebp
c0100af7:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100afd:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100b00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b04:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b07:	89 04 24             	mov    %eax,(%esp)
c0100b0a:	e8 33 fb ff ff       	call   c0100642 <debuginfo_eip>
c0100b0f:	85 c0                	test   %eax,%eax
c0100b11:	74 15                	je     c0100b28 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100b13:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b1a:	c7 04 24 9a 5a 11 c0 	movl   $0xc0115a9a,(%esp)
c0100b21:	e8 4a f8 ff ff       	call   c0100370 <cprintf>
c0100b26:	eb 69                	jmp    c0100b91 <print_debuginfo+0x9d>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100b2f:	eb 1a                	jmp    c0100b4b <print_debuginfo+0x57>
            fnname[j] = info.eip_fn_name[j];
c0100b31:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100b34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b37:	01 d0                	add    %edx,%eax
c0100b39:	0f b6 10             	movzbl (%eax),%edx
c0100b3c:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
c0100b42:	03 45 f4             	add    -0xc(%ebp),%eax
c0100b45:	88 10                	mov    %dl,(%eax)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b47:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b4e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b51:	7f de                	jg     c0100b31 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b53:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
c0100b59:	03 45 f4             	add    -0xc(%ebp),%eax
c0100b5c:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b62:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b65:	89 d1                	mov    %edx,%ecx
c0100b67:	29 c1                	sub    %eax,%ecx
c0100b69:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b6c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b6f:	89 4c 24 10          	mov    %ecx,0x10(%esp)
                fnname, eip - info.eip_fn_addr);
c0100b73:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b79:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b7d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100b81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b85:	c7 04 24 b6 5a 11 c0 	movl   $0xc0115ab6,(%esp)
c0100b8c:	e8 df f7 ff ff       	call   c0100370 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100b91:	c9                   	leave  
c0100b92:	c3                   	ret    

c0100b93 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100b93:	55                   	push   %ebp
c0100b94:	89 e5                	mov    %esp,%ebp
c0100b96:	53                   	push   %ebx
c0100b97:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100b9a:	8b 5d 04             	mov    0x4(%ebp),%ebx
c0100b9d:	89 5d f8             	mov    %ebx,-0x8(%ebp)
    return eip;
c0100ba0:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0100ba3:	83 c4 10             	add    $0x10,%esp
c0100ba6:	5b                   	pop    %ebx
c0100ba7:	5d                   	pop    %ebp
c0100ba8:	c3                   	ret    

c0100ba9 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ba9:	55                   	push   %ebp
c0100baa:	89 e5                	mov    %esp,%ebp
c0100bac:	53                   	push   %ebx
c0100bad:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100bb0:	89 eb                	mov    %ebp,%ebx
c0100bb2:	89 5d e0             	mov    %ebx,-0x20(%ebp)
    return ebp;
c0100bb5:	8b 45 e0             	mov    -0x20(%ebp),%eax
	 *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
	 *    (3.5) popup a calling stackframe
	 *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
	 *                   the calling funciton's ebp = ss:[ebp]
	 */
	uint32_t ebp = read_ebp(), eip = read_eip();
c0100bb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100bbb:	e8 d3 ff ff ff       	call   c0100b93 <read_eip>
c0100bc0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100bc3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100bca:	e9 82 00 00 00       	jmp    c0100c51 <print_stackframe+0xa8>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100bcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100bd2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bd9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bdd:	c7 04 24 c8 5a 11 c0 	movl   $0xc0115ac8,(%esp)
c0100be4:	e8 87 f7 ff ff       	call   c0100370 <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100be9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bec:	83 c0 08             	add    $0x8,%eax
c0100bef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0100bf2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100bf9:	eb 1f                	jmp    c0100c1a <print_stackframe+0x71>
            cprintf("0x%08x ", args[j]);
c0100bfb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bfe:	c1 e0 02             	shl    $0x2,%eax
c0100c01:	03 45 e4             	add    -0x1c(%ebp),%eax
c0100c04:	8b 00                	mov    (%eax),%eax
c0100c06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c0a:	c7 04 24 e4 5a 11 c0 	movl   $0xc0115ae4,(%esp)
c0100c11:	e8 5a f7 ff ff       	call   c0100370 <cprintf>

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0100c16:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100c1a:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100c1e:	7e db                	jle    c0100bfb <print_stackframe+0x52>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0100c20:	c7 04 24 ec 5a 11 c0 	movl   $0xc0115aec,(%esp)
c0100c27:	e8 44 f7 ff ff       	call   c0100370 <cprintf>
        print_debuginfo(eip - 1);
c0100c2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c2f:	83 e8 01             	sub    $0x1,%eax
c0100c32:	89 04 24             	mov    %eax,(%esp)
c0100c35:	e8 ba fe ff ff       	call   c0100af4 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100c3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c3d:	83 c0 04             	add    $0x4,%eax
c0100c40:	8b 00                	mov    (%eax),%eax
c0100c42:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c48:	8b 00                	mov    (%eax),%eax
c0100c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 *                   the calling funciton's ebp = ss:[ebp]
	 */
	uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100c4d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c55:	74 0a                	je     c0100c61 <print_stackframe+0xb8>
c0100c57:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c5b:	0f 8e 6e ff ff ff    	jle    c0100bcf <print_stackframe+0x26>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0100c61:	83 c4 34             	add    $0x34,%esp
c0100c64:	5b                   	pop    %ebx
c0100c65:	5d                   	pop    %ebp
c0100c66:	c3                   	ret    
	...

c0100c68 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c68:	55                   	push   %ebp
c0100c69:	89 e5                	mov    %esp,%ebp
c0100c6b:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100c6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c75:	eb 0d                	jmp    c0100c84 <parse+0x1c>
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
c0100c77:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c78:	eb 0a                	jmp    c0100c84 <parse+0x1c>
            *buf ++ = '\0';
c0100c7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c7d:	c6 00 00             	movb   $0x0,(%eax)
c0100c80:	83 45 08 01          	addl   $0x1,0x8(%ebp)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c84:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c87:	0f b6 00             	movzbl (%eax),%eax
c0100c8a:	84 c0                	test   %al,%al
c0100c8c:	74 1d                	je     c0100cab <parse+0x43>
c0100c8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c91:	0f b6 00             	movzbl (%eax),%eax
c0100c94:	0f be c0             	movsbl %al,%eax
c0100c97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c9b:	c7 04 24 70 5b 11 c0 	movl   $0xc0115b70,(%esp)
c0100ca2:	e8 12 49 01 00       	call   c01155b9 <strchr>
c0100ca7:	85 c0                	test   %eax,%eax
c0100ca9:	75 cf                	jne    c0100c7a <parse+0x12>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100cab:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cae:	0f b6 00             	movzbl (%eax),%eax
c0100cb1:	84 c0                	test   %al,%al
c0100cb3:	74 5e                	je     c0100d13 <parse+0xab>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100cb5:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100cb9:	75 14                	jne    c0100ccf <parse+0x67>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100cbb:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100cc2:	00 
c0100cc3:	c7 04 24 75 5b 11 c0 	movl   $0xc0115b75,(%esp)
c0100cca:	e8 a1 f6 ff ff       	call   c0100370 <cprintf>
        }
        argv[argc ++] = buf;
c0100ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cd2:	c1 e0 02             	shl    $0x2,%eax
c0100cd5:	03 45 0c             	add    0xc(%ebp),%eax
c0100cd8:	8b 55 08             	mov    0x8(%ebp),%edx
c0100cdb:	89 10                	mov    %edx,(%eax)
c0100cdd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ce1:	eb 04                	jmp    c0100ce7 <parse+0x7f>
            buf ++;
c0100ce3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ce7:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cea:	0f b6 00             	movzbl (%eax),%eax
c0100ced:	84 c0                	test   %al,%al
c0100cef:	74 86                	je     c0100c77 <parse+0xf>
c0100cf1:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cf4:	0f b6 00             	movzbl (%eax),%eax
c0100cf7:	0f be c0             	movsbl %al,%eax
c0100cfa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cfe:	c7 04 24 70 5b 11 c0 	movl   $0xc0115b70,(%esp)
c0100d05:	e8 af 48 01 00       	call   c01155b9 <strchr>
c0100d0a:	85 c0                	test   %eax,%eax
c0100d0c:	74 d5                	je     c0100ce3 <parse+0x7b>
            buf ++;
        }
    }
c0100d0e:	e9 64 ff ff ff       	jmp    c0100c77 <parse+0xf>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100d13:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100d17:	c9                   	leave  
c0100d18:	c3                   	ret    

c0100d19 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100d19:	55                   	push   %ebp
c0100d1a:	89 e5                	mov    %esp,%ebp
c0100d1c:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100d1f:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d22:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d26:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d29:	89 04 24             	mov    %eax,(%esp)
c0100d2c:	e8 37 ff ff ff       	call   c0100c68 <parse>
c0100d31:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100d34:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100d38:	75 0a                	jne    c0100d44 <runcmd+0x2b>
        return 0;
c0100d3a:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d3f:	e9 85 00 00 00       	jmp    c0100dc9 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d44:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d4b:	eb 5c                	jmp    c0100da9 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d4d:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d50:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d53:	89 d0                	mov    %edx,%eax
c0100d55:	01 c0                	add    %eax,%eax
c0100d57:	01 d0                	add    %edx,%eax
c0100d59:	c1 e0 02             	shl    $0x2,%eax
c0100d5c:	05 20 00 15 c0       	add    $0xc0150020,%eax
c0100d61:	8b 00                	mov    (%eax),%eax
c0100d63:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100d67:	89 04 24             	mov    %eax,(%esp)
c0100d6a:	e8 a5 47 01 00       	call   c0115514 <strcmp>
c0100d6f:	85 c0                	test   %eax,%eax
c0100d71:	75 32                	jne    c0100da5 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d73:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d76:	89 d0                	mov    %edx,%eax
c0100d78:	01 c0                	add    %eax,%eax
c0100d7a:	01 d0                	add    %edx,%eax
c0100d7c:	c1 e0 02             	shl    $0x2,%eax
c0100d7f:	05 20 00 15 c0       	add    $0xc0150020,%eax
c0100d84:	8b 50 08             	mov    0x8(%eax),%edx
c0100d87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100d8a:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0100d8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100d90:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100d94:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d97:	83 c0 04             	add    $0x4,%eax
c0100d9a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d9e:	89 0c 24             	mov    %ecx,(%esp)
c0100da1:	ff d2                	call   *%edx
c0100da3:	eb 24                	jmp    c0100dc9 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100da5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100da9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dac:	83 f8 02             	cmp    $0x2,%eax
c0100daf:	76 9c                	jbe    c0100d4d <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100db1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100db4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100db8:	c7 04 24 93 5b 11 c0 	movl   $0xc0115b93,(%esp)
c0100dbf:	e8 ac f5 ff ff       	call   c0100370 <cprintf>
    return 0;
c0100dc4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dc9:	c9                   	leave  
c0100dca:	c3                   	ret    

c0100dcb <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100dcb:	55                   	push   %ebp
c0100dcc:	89 e5                	mov    %esp,%ebp
c0100dce:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100dd1:	c7 04 24 ac 5b 11 c0 	movl   $0xc0115bac,(%esp)
c0100dd8:	e8 93 f5 ff ff       	call   c0100370 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100ddd:	c7 04 24 d4 5b 11 c0 	movl   $0xc0115bd4,(%esp)
c0100de4:	e8 87 f5 ff ff       	call   c0100370 <cprintf>

    if (tf != NULL) {
c0100de9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100ded:	74 0e                	je     c0100dfd <kmonitor+0x32>
        print_trapframe(tf);
c0100def:	8b 45 08             	mov    0x8(%ebp),%eax
c0100df2:	89 04 24             	mov    %eax,(%esp)
c0100df5:	e8 b1 17 00 00       	call   c01025ab <print_trapframe>
c0100dfa:	eb 01                	jmp    c0100dfd <kmonitor+0x32>
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
            }
        }
    }
c0100dfc:	90                   	nop
        print_trapframe(tf);
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100dfd:	c7 04 24 f9 5b 11 c0 	movl   $0xc0115bf9,(%esp)
c0100e04:	e8 4f f4 ff ff       	call   c0100258 <readline>
c0100e09:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100e0c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100e10:	74 ea                	je     c0100dfc <kmonitor+0x31>
            if (runcmd(buf, tf) < 0) {
c0100e12:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e1c:	89 04 24             	mov    %eax,(%esp)
c0100e1f:	e8 f5 fe ff ff       	call   c0100d19 <runcmd>
c0100e24:	85 c0                	test   %eax,%eax
c0100e26:	79 d4                	jns    c0100dfc <kmonitor+0x31>
                break;
c0100e28:	90                   	nop
            }
        }
    }
}
c0100e29:	c9                   	leave  
c0100e2a:	c3                   	ret    

c0100e2b <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e2b:	55                   	push   %ebp
c0100e2c:	89 e5                	mov    %esp,%ebp
c0100e2e:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e38:	eb 3f                	jmp    c0100e79 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e3d:	89 d0                	mov    %edx,%eax
c0100e3f:	01 c0                	add    %eax,%eax
c0100e41:	01 d0                	add    %edx,%eax
c0100e43:	c1 e0 02             	shl    $0x2,%eax
c0100e46:	05 20 00 15 c0       	add    $0xc0150020,%eax
c0100e4b:	8b 48 04             	mov    0x4(%eax),%ecx
c0100e4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e51:	89 d0                	mov    %edx,%eax
c0100e53:	01 c0                	add    %eax,%eax
c0100e55:	01 d0                	add    %edx,%eax
c0100e57:	c1 e0 02             	shl    $0x2,%eax
c0100e5a:	05 20 00 15 c0       	add    $0xc0150020,%eax
c0100e5f:	8b 00                	mov    (%eax),%eax
c0100e61:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e65:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e69:	c7 04 24 fd 5b 11 c0 	movl   $0xc0115bfd,(%esp)
c0100e70:	e8 fb f4 ff ff       	call   c0100370 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e75:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e7c:	83 f8 02             	cmp    $0x2,%eax
c0100e7f:	76 b9                	jbe    c0100e3a <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e81:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e86:	c9                   	leave  
c0100e87:	c3                   	ret    

c0100e88 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100e88:	55                   	push   %ebp
c0100e89:	89 e5                	mov    %esp,%ebp
c0100e8b:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100e8e:	e8 c9 fb ff ff       	call   c0100a5c <print_kerninfo>
    return 0;
c0100e93:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e98:	c9                   	leave  
c0100e99:	c3                   	ret    

c0100e9a <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100e9a:	55                   	push   %ebp
c0100e9b:	89 e5                	mov    %esp,%ebp
c0100e9d:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100ea0:	e8 04 fd ff ff       	call   c0100ba9 <print_stackframe>
    return 0;
c0100ea5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100eaa:	c9                   	leave  
c0100eab:	c3                   	ret    

c0100eac <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100eac:	55                   	push   %ebp
c0100ead:	89 e5                	mov    %esp,%ebp
c0100eaf:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100eb2:	a1 00 13 15 c0       	mov    0xc0151300,%eax
c0100eb7:	85 c0                	test   %eax,%eax
c0100eb9:	75 4c                	jne    c0100f07 <__panic+0x5b>
        goto panic_dead;
    }
    is_panic = 1;
c0100ebb:	c7 05 00 13 15 c0 01 	movl   $0x1,0xc0151300
c0100ec2:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100ec5:	8d 55 14             	lea    0x14(%ebp),%edx
c0100ec8:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100ecb:	89 10                	mov    %edx,(%eax)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100ecd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ed0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100ed4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ed7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100edb:	c7 04 24 06 5c 11 c0 	movl   $0xc0115c06,(%esp)
c0100ee2:	e8 89 f4 ff ff       	call   c0100370 <cprintf>
    vcprintf(fmt, ap);
c0100ee7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100eea:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100eee:	8b 45 10             	mov    0x10(%ebp),%eax
c0100ef1:	89 04 24             	mov    %eax,(%esp)
c0100ef4:	e8 3b f4 ff ff       	call   c0100334 <vcprintf>
    cprintf("\n");
c0100ef9:	c7 04 24 22 5c 11 c0 	movl   $0xc0115c22,(%esp)
c0100f00:	e8 6b f4 ff ff       	call   c0100370 <cprintf>
c0100f05:	eb 01                	jmp    c0100f08 <__panic+0x5c>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c0100f07:	90                   	nop
    vcprintf(fmt, ap);
    cprintf("\n");
    va_end(ap);

panic_dead:
    intr_disable();
c0100f08:	e8 d9 12 00 00       	call   c01021e6 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100f0d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f14:	e8 b2 fe ff ff       	call   c0100dcb <kmonitor>
    }
c0100f19:	eb f2                	jmp    c0100f0d <__panic+0x61>

c0100f1b <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100f1b:	55                   	push   %ebp
c0100f1c:	89 e5                	mov    %esp,%ebp
c0100f1e:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100f21:	8d 55 14             	lea    0x14(%ebp),%edx
c0100f24:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100f27:	89 10                	mov    %edx,(%eax)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100f29:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f2c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100f30:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f33:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f37:	c7 04 24 24 5c 11 c0 	movl   $0xc0115c24,(%esp)
c0100f3e:	e8 2d f4 ff ff       	call   c0100370 <cprintf>
    vcprintf(fmt, ap);
c0100f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f46:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f4a:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f4d:	89 04 24             	mov    %eax,(%esp)
c0100f50:	e8 df f3 ff ff       	call   c0100334 <vcprintf>
    cprintf("\n");
c0100f55:	c7 04 24 22 5c 11 c0 	movl   $0xc0115c22,(%esp)
c0100f5c:	e8 0f f4 ff ff       	call   c0100370 <cprintf>
    va_end(ap);
}
c0100f61:	c9                   	leave  
c0100f62:	c3                   	ret    

c0100f63 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100f63:	55                   	push   %ebp
c0100f64:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100f66:	a1 00 13 15 c0       	mov    0xc0151300,%eax
}
c0100f6b:	5d                   	pop    %ebp
c0100f6c:	c3                   	ret    
c0100f6d:	00 00                	add    %al,(%eax)
	...

c0100f70 <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c0100f70:	55                   	push   %ebp
c0100f71:	89 e5                	mov    %esp,%ebp
    return ticks;
c0100f73:	a1 10 50 15 c0       	mov    0xc0155010,%eax
}
c0100f78:	5d                   	pop    %ebp
c0100f79:	c3                   	ret    

c0100f7a <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100f7a:	55                   	push   %ebp
c0100f7b:	89 e5                	mov    %esp,%ebp
c0100f7d:	83 ec 28             	sub    $0x28,%esp
c0100f80:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100f86:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f8a:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100f8e:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100f92:	ee                   	out    %al,(%dx)
c0100f93:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100f99:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100f9d:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fa1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fa5:	ee                   	out    %al,(%dx)
c0100fa6:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100fac:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100fb0:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100fb4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100fb8:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100fb9:	c7 05 10 50 15 c0 00 	movl   $0x0,0xc0155010
c0100fc0:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100fc3:	c7 04 24 42 5c 11 c0 	movl   $0xc0115c42,(%esp)
c0100fca:	e8 a1 f3 ff ff       	call   c0100370 <cprintf>
    pic_enable(IRQ_TIMER);
c0100fcf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100fd6:	e8 69 12 00 00       	call   c0102244 <pic_enable>
}
c0100fdb:	c9                   	leave  
c0100fdc:	c3                   	ret    
c0100fdd:	00 00                	add    %al,(%eax)
	...

c0100fe0 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100fe0:	55                   	push   %ebp
c0100fe1:	89 e5                	mov    %esp,%ebp
c0100fe3:	53                   	push   %ebx
c0100fe4:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100fe7:	9c                   	pushf  
c0100fe8:	5b                   	pop    %ebx
c0100fe9:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0100fec:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100fef:	25 00 02 00 00       	and    $0x200,%eax
c0100ff4:	85 c0                	test   %eax,%eax
c0100ff6:	74 0c                	je     c0101004 <__intr_save+0x24>
        intr_disable();
c0100ff8:	e8 e9 11 00 00       	call   c01021e6 <intr_disable>
        return 1;
c0100ffd:	b8 01 00 00 00       	mov    $0x1,%eax
c0101002:	eb 05                	jmp    c0101009 <__intr_save+0x29>
    }
    return 0;
c0101004:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101009:	83 c4 14             	add    $0x14,%esp
c010100c:	5b                   	pop    %ebx
c010100d:	5d                   	pop    %ebp
c010100e:	c3                   	ret    

c010100f <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010100f:	55                   	push   %ebp
c0101010:	89 e5                	mov    %esp,%ebp
c0101012:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101015:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101019:	74 05                	je     c0101020 <__intr_restore+0x11>
        intr_enable();
c010101b:	e8 c0 11 00 00       	call   c01021e0 <intr_enable>
    }
}
c0101020:	c9                   	leave  
c0101021:	c3                   	ret    

c0101022 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0101022:	55                   	push   %ebp
c0101023:	89 e5                	mov    %esp,%ebp
c0101025:	53                   	push   %ebx
c0101026:	83 ec 14             	sub    $0x14,%esp
c0101029:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010102f:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101033:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101037:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010103b:	ec                   	in     (%dx),%al
c010103c:	89 c3                	mov    %eax,%ebx
c010103e:	88 5d f9             	mov    %bl,-0x7(%ebp)
    return data;
c0101041:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101047:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010104b:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010104f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101053:	ec                   	in     (%dx),%al
c0101054:	89 c3                	mov    %eax,%ebx
c0101056:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c0101059:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010105f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101063:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101067:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010106b:	ec                   	in     (%dx),%al
c010106c:	89 c3                	mov    %eax,%ebx
c010106e:	88 5d f1             	mov    %bl,-0xf(%ebp)
    return data;
c0101071:	66 c7 45 ee 84 00    	movw   $0x84,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101077:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010107b:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010107f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101083:	ec                   	in     (%dx),%al
c0101084:	89 c3                	mov    %eax,%ebx
c0101086:	88 5d ed             	mov    %bl,-0x13(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101089:	83 c4 14             	add    $0x14,%esp
c010108c:	5b                   	pop    %ebx
c010108d:	5d                   	pop    %ebp
c010108e:	c3                   	ret    

c010108f <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c010108f:	55                   	push   %ebp
c0101090:	89 e5                	mov    %esp,%ebp
c0101092:	53                   	push   %ebx
c0101093:	83 ec 24             	sub    $0x24,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0101096:	c7 45 f8 00 80 0b c0 	movl   $0xc00b8000,-0x8(%ebp)
    uint16_t was = *cp;
c010109d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01010a0:	0f b7 00             	movzwl (%eax),%eax
c01010a3:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    *cp = (uint16_t) 0xA55A;
c01010a7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01010aa:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01010af:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01010b2:	0f b7 00             	movzwl (%eax),%eax
c01010b5:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01010b9:	74 12                	je     c01010cd <cga_init+0x3e>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01010bb:	c7 45 f8 00 00 0b c0 	movl   $0xc00b0000,-0x8(%ebp)
        addr_6845 = MONO_BASE;
c01010c2:	66 c7 05 26 13 15 c0 	movw   $0x3b4,0xc0151326
c01010c9:	b4 03 
c01010cb:	eb 13                	jmp    c01010e0 <cga_init+0x51>
    } else {
        *cp = was;
c01010cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01010d0:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01010d4:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01010d7:	66 c7 05 26 13 15 c0 	movw   $0x3d4,0xc0151326
c01010de:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01010e0:	0f b7 05 26 13 15 c0 	movzwl 0xc0151326,%eax
c01010e7:	0f b7 c0             	movzwl %ax,%eax
c01010ea:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c01010ee:	c6 45 ed 0e          	movb   $0xe,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010f2:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01010f6:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01010fa:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c01010fb:	0f b7 05 26 13 15 c0 	movzwl 0xc0151326,%eax
c0101102:	83 c0 01             	add    $0x1,%eax
c0101105:	0f b7 c0             	movzwl %ax,%eax
c0101108:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010110c:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101110:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101114:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101118:	ec                   	in     (%dx),%al
c0101119:	89 c3                	mov    %eax,%ebx
c010111b:	88 5d e9             	mov    %bl,-0x17(%ebp)
    return data;
c010111e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101122:	0f b6 c0             	movzbl %al,%eax
c0101125:	c1 e0 08             	shl    $0x8,%eax
c0101128:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(addr_6845, 15);
c010112b:	0f b7 05 26 13 15 c0 	movzwl 0xc0151326,%eax
c0101132:	0f b7 c0             	movzwl %ax,%eax
c0101135:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
c0101139:	c6 45 e5 0f          	movb   $0xf,-0x1b(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010113d:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101141:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101145:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101146:	0f b7 05 26 13 15 c0 	movzwl 0xc0151326,%eax
c010114d:	83 c0 01             	add    $0x1,%eax
c0101150:	0f b7 c0             	movzwl %ax,%eax
c0101153:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101157:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010115b:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c010115f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101163:	ec                   	in     (%dx),%al
c0101164:	89 c3                	mov    %eax,%ebx
c0101166:	88 5d e1             	mov    %bl,-0x1f(%ebp)
    return data;
c0101169:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010116d:	0f b6 c0             	movzbl %al,%eax
c0101170:	09 45 f0             	or     %eax,-0x10(%ebp)

    crt_buf = (uint16_t*) cp;
c0101173:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101176:	a3 20 13 15 c0       	mov    %eax,0xc0151320
    crt_pos = pos;
c010117b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010117e:	66 a3 24 13 15 c0    	mov    %ax,0xc0151324
}
c0101184:	83 c4 24             	add    $0x24,%esp
c0101187:	5b                   	pop    %ebx
c0101188:	5d                   	pop    %ebp
c0101189:	c3                   	ret    

c010118a <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010118a:	55                   	push   %ebp
c010118b:	89 e5                	mov    %esp,%ebp
c010118d:	53                   	push   %ebx
c010118e:	83 ec 54             	sub    $0x54,%esp
c0101191:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101197:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010119b:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010119f:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01011a3:	ee                   	out    %al,(%dx)
c01011a4:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c01011aa:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c01011ae:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011b2:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011b6:	ee                   	out    %al,(%dx)
c01011b7:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c01011bd:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c01011c1:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011c5:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011c9:	ee                   	out    %al,(%dx)
c01011ca:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01011d0:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01011d4:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01011d8:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01011dc:	ee                   	out    %al,(%dx)
c01011dd:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01011e3:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01011e7:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01011eb:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01011ef:	ee                   	out    %al,(%dx)
c01011f0:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01011f6:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01011fa:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01011fe:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101202:	ee                   	out    %al,(%dx)
c0101203:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c0101209:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c010120d:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101211:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101215:	ee                   	out    %al,(%dx)
c0101216:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010121c:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101220:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c0101224:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c0101228:	ec                   	in     (%dx),%al
c0101229:	89 c3                	mov    %eax,%ebx
c010122b:	88 5d d9             	mov    %bl,-0x27(%ebp)
    return data;
c010122e:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101232:	3c ff                	cmp    $0xff,%al
c0101234:	0f 95 c0             	setne  %al
c0101237:	0f b6 c0             	movzbl %al,%eax
c010123a:	a3 28 13 15 c0       	mov    %eax,0xc0151328
c010123f:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101245:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101249:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c010124d:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c0101251:	ec                   	in     (%dx),%al
c0101252:	89 c3                	mov    %eax,%ebx
c0101254:	88 5d d5             	mov    %bl,-0x2b(%ebp)
    return data;
c0101257:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010125d:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101261:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c0101265:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c0101269:	ec                   	in     (%dx),%al
c010126a:	89 c3                	mov    %eax,%ebx
c010126c:	88 5d d1             	mov    %bl,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c010126f:	a1 28 13 15 c0       	mov    0xc0151328,%eax
c0101274:	85 c0                	test   %eax,%eax
c0101276:	74 0c                	je     c0101284 <serial_init+0xfa>
        pic_enable(IRQ_COM1);
c0101278:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010127f:	e8 c0 0f 00 00       	call   c0102244 <pic_enable>
    }
}
c0101284:	83 c4 54             	add    $0x54,%esp
c0101287:	5b                   	pop    %ebx
c0101288:	5d                   	pop    %ebp
c0101289:	c3                   	ret    

c010128a <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010128a:	55                   	push   %ebp
c010128b:	89 e5                	mov    %esp,%ebp
c010128d:	53                   	push   %ebx
c010128e:	83 ec 24             	sub    $0x24,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101291:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0101298:	eb 09                	jmp    c01012a3 <lpt_putc_sub+0x19>
        delay();
c010129a:	e8 83 fd ff ff       	call   c0101022 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010129f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01012a3:	66 c7 45 f6 79 03    	movw   $0x379,-0xa(%ebp)
c01012a9:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01012ad:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01012b1:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01012b5:	ec                   	in     (%dx),%al
c01012b6:	89 c3                	mov    %eax,%ebx
c01012b8:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c01012bb:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01012bf:	84 c0                	test   %al,%al
c01012c1:	78 09                	js     c01012cc <lpt_putc_sub+0x42>
c01012c3:	81 7d f8 ff 31 00 00 	cmpl   $0x31ff,-0x8(%ebp)
c01012ca:	7e ce                	jle    c010129a <lpt_putc_sub+0x10>
        delay();
    }
    outb(LPTPORT + 0, c);
c01012cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01012cf:	0f b6 c0             	movzbl %al,%eax
c01012d2:	66 c7 45 f2 78 03    	movw   $0x378,-0xe(%ebp)
c01012d8:	88 45 f1             	mov    %al,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01012db:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01012df:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01012e3:	ee                   	out    %al,(%dx)
c01012e4:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01012ea:	c6 45 ed 0d          	movb   $0xd,-0x13(%ebp)
c01012ee:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01012f2:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01012f6:	ee                   	out    %al,(%dx)
c01012f7:	66 c7 45 ea 7a 03    	movw   $0x37a,-0x16(%ebp)
c01012fd:	c6 45 e9 08          	movb   $0x8,-0x17(%ebp)
c0101301:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101305:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101309:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c010130a:	83 c4 24             	add    $0x24,%esp
c010130d:	5b                   	pop    %ebx
c010130e:	5d                   	pop    %ebp
c010130f:	c3                   	ret    

c0101310 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0101310:	55                   	push   %ebp
c0101311:	89 e5                	mov    %esp,%ebp
c0101313:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101316:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010131a:	74 0d                	je     c0101329 <lpt_putc+0x19>
        lpt_putc_sub(c);
c010131c:	8b 45 08             	mov    0x8(%ebp),%eax
c010131f:	89 04 24             	mov    %eax,(%esp)
c0101322:	e8 63 ff ff ff       	call   c010128a <lpt_putc_sub>
c0101327:	eb 24                	jmp    c010134d <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c0101329:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101330:	e8 55 ff ff ff       	call   c010128a <lpt_putc_sub>
        lpt_putc_sub(' ');
c0101335:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010133c:	e8 49 ff ff ff       	call   c010128a <lpt_putc_sub>
        lpt_putc_sub('\b');
c0101341:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101348:	e8 3d ff ff ff       	call   c010128a <lpt_putc_sub>
    }
}
c010134d:	c9                   	leave  
c010134e:	c3                   	ret    

c010134f <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c010134f:	55                   	push   %ebp
c0101350:	89 e5                	mov    %esp,%ebp
c0101352:	53                   	push   %ebx
c0101353:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101356:	8b 45 08             	mov    0x8(%ebp),%eax
c0101359:	b0 00                	mov    $0x0,%al
c010135b:	85 c0                	test   %eax,%eax
c010135d:	75 07                	jne    c0101366 <cga_putc+0x17>
        c |= 0x0700;
c010135f:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101366:	8b 45 08             	mov    0x8(%ebp),%eax
c0101369:	25 ff 00 00 00       	and    $0xff,%eax
c010136e:	83 f8 0a             	cmp    $0xa,%eax
c0101371:	74 4e                	je     c01013c1 <cga_putc+0x72>
c0101373:	83 f8 0d             	cmp    $0xd,%eax
c0101376:	74 59                	je     c01013d1 <cga_putc+0x82>
c0101378:	83 f8 08             	cmp    $0x8,%eax
c010137b:	0f 85 8c 00 00 00    	jne    c010140d <cga_putc+0xbe>
    case '\b':
        if (crt_pos > 0) {
c0101381:	0f b7 05 24 13 15 c0 	movzwl 0xc0151324,%eax
c0101388:	66 85 c0             	test   %ax,%ax
c010138b:	0f 84 a1 00 00 00    	je     c0101432 <cga_putc+0xe3>
            crt_pos --;
c0101391:	0f b7 05 24 13 15 c0 	movzwl 0xc0151324,%eax
c0101398:	83 e8 01             	sub    $0x1,%eax
c010139b:	66 a3 24 13 15 c0    	mov    %ax,0xc0151324
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c01013a1:	a1 20 13 15 c0       	mov    0xc0151320,%eax
c01013a6:	0f b7 15 24 13 15 c0 	movzwl 0xc0151324,%edx
c01013ad:	0f b7 d2             	movzwl %dx,%edx
c01013b0:	01 d2                	add    %edx,%edx
c01013b2:	01 c2                	add    %eax,%edx
c01013b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01013b7:	b0 00                	mov    $0x0,%al
c01013b9:	83 c8 20             	or     $0x20,%eax
c01013bc:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c01013bf:	eb 71                	jmp    c0101432 <cga_putc+0xe3>
    case '\n':
        crt_pos += CRT_COLS;
c01013c1:	0f b7 05 24 13 15 c0 	movzwl 0xc0151324,%eax
c01013c8:	83 c0 50             	add    $0x50,%eax
c01013cb:	66 a3 24 13 15 c0    	mov    %ax,0xc0151324
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c01013d1:	0f b7 1d 24 13 15 c0 	movzwl 0xc0151324,%ebx
c01013d8:	0f b7 0d 24 13 15 c0 	movzwl 0xc0151324,%ecx
c01013df:	0f b7 c1             	movzwl %cx,%eax
c01013e2:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c01013e8:	c1 e8 10             	shr    $0x10,%eax
c01013eb:	89 c2                	mov    %eax,%edx
c01013ed:	66 c1 ea 06          	shr    $0x6,%dx
c01013f1:	89 d0                	mov    %edx,%eax
c01013f3:	c1 e0 02             	shl    $0x2,%eax
c01013f6:	01 d0                	add    %edx,%eax
c01013f8:	c1 e0 04             	shl    $0x4,%eax
c01013fb:	89 ca                	mov    %ecx,%edx
c01013fd:	66 29 c2             	sub    %ax,%dx
c0101400:	89 d8                	mov    %ebx,%eax
c0101402:	66 29 d0             	sub    %dx,%ax
c0101405:	66 a3 24 13 15 c0    	mov    %ax,0xc0151324
        break;
c010140b:	eb 26                	jmp    c0101433 <cga_putc+0xe4>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c010140d:	8b 15 20 13 15 c0    	mov    0xc0151320,%edx
c0101413:	0f b7 05 24 13 15 c0 	movzwl 0xc0151324,%eax
c010141a:	0f b7 c8             	movzwl %ax,%ecx
c010141d:	01 c9                	add    %ecx,%ecx
c010141f:	01 d1                	add    %edx,%ecx
c0101421:	8b 55 08             	mov    0x8(%ebp),%edx
c0101424:	66 89 11             	mov    %dx,(%ecx)
c0101427:	83 c0 01             	add    $0x1,%eax
c010142a:	66 a3 24 13 15 c0    	mov    %ax,0xc0151324
        break;
c0101430:	eb 01                	jmp    c0101433 <cga_putc+0xe4>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101432:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101433:	0f b7 05 24 13 15 c0 	movzwl 0xc0151324,%eax
c010143a:	66 3d cf 07          	cmp    $0x7cf,%ax
c010143e:	76 5b                	jbe    c010149b <cga_putc+0x14c>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101440:	a1 20 13 15 c0       	mov    0xc0151320,%eax
c0101445:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c010144b:	a1 20 13 15 c0       	mov    0xc0151320,%eax
c0101450:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0101457:	00 
c0101458:	89 54 24 04          	mov    %edx,0x4(%esp)
c010145c:	89 04 24             	mov    %eax,(%esp)
c010145f:	e8 5b 43 01 00       	call   c01157bf <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101464:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010146b:	eb 15                	jmp    c0101482 <cga_putc+0x133>
            crt_buf[i] = 0x0700 | ' ';
c010146d:	a1 20 13 15 c0       	mov    0xc0151320,%eax
c0101472:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101475:	01 d2                	add    %edx,%edx
c0101477:	01 d0                	add    %edx,%eax
c0101479:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010147e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101482:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101489:	7e e2                	jle    c010146d <cga_putc+0x11e>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010148b:	0f b7 05 24 13 15 c0 	movzwl 0xc0151324,%eax
c0101492:	83 e8 50             	sub    $0x50,%eax
c0101495:	66 a3 24 13 15 c0    	mov    %ax,0xc0151324
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010149b:	0f b7 05 26 13 15 c0 	movzwl 0xc0151326,%eax
c01014a2:	0f b7 c0             	movzwl %ax,%eax
c01014a5:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01014a9:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c01014ad:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01014b1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01014b5:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c01014b6:	0f b7 05 24 13 15 c0 	movzwl 0xc0151324,%eax
c01014bd:	66 c1 e8 08          	shr    $0x8,%ax
c01014c1:	0f b6 c0             	movzbl %al,%eax
c01014c4:	0f b7 15 26 13 15 c0 	movzwl 0xc0151326,%edx
c01014cb:	83 c2 01             	add    $0x1,%edx
c01014ce:	0f b7 d2             	movzwl %dx,%edx
c01014d1:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c01014d5:	88 45 ed             	mov    %al,-0x13(%ebp)
c01014d8:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01014dc:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01014e0:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c01014e1:	0f b7 05 26 13 15 c0 	movzwl 0xc0151326,%eax
c01014e8:	0f b7 c0             	movzwl %ax,%eax
c01014eb:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c01014ef:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c01014f3:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01014f7:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01014fb:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c01014fc:	0f b7 05 24 13 15 c0 	movzwl 0xc0151324,%eax
c0101503:	0f b6 c0             	movzbl %al,%eax
c0101506:	0f b7 15 26 13 15 c0 	movzwl 0xc0151326,%edx
c010150d:	83 c2 01             	add    $0x1,%edx
c0101510:	0f b7 d2             	movzwl %dx,%edx
c0101513:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101517:	88 45 e5             	mov    %al,-0x1b(%ebp)
c010151a:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010151e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101522:	ee                   	out    %al,(%dx)
}
c0101523:	83 c4 34             	add    $0x34,%esp
c0101526:	5b                   	pop    %ebx
c0101527:	5d                   	pop    %ebp
c0101528:	c3                   	ret    

c0101529 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101529:	55                   	push   %ebp
c010152a:	89 e5                	mov    %esp,%ebp
c010152c:	53                   	push   %ebx
c010152d:	83 ec 14             	sub    $0x14,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101530:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0101537:	eb 09                	jmp    c0101542 <serial_putc_sub+0x19>
        delay();
c0101539:	e8 e4 fa ff ff       	call   c0101022 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c010153e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0101542:	66 c7 45 f6 fd 03    	movw   $0x3fd,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101548:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010154c:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101550:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101554:	ec                   	in     (%dx),%al
c0101555:	89 c3                	mov    %eax,%ebx
c0101557:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c010155a:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010155e:	0f b6 c0             	movzbl %al,%eax
c0101561:	83 e0 20             	and    $0x20,%eax
c0101564:	85 c0                	test   %eax,%eax
c0101566:	75 09                	jne    c0101571 <serial_putc_sub+0x48>
c0101568:	81 7d f8 ff 31 00 00 	cmpl   $0x31ff,-0x8(%ebp)
c010156f:	7e c8                	jle    c0101539 <serial_putc_sub+0x10>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101571:	8b 45 08             	mov    0x8(%ebp),%eax
c0101574:	0f b6 c0             	movzbl %al,%eax
c0101577:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c010157d:	88 45 f1             	mov    %al,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101580:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101584:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101588:	ee                   	out    %al,(%dx)
}
c0101589:	83 c4 14             	add    $0x14,%esp
c010158c:	5b                   	pop    %ebx
c010158d:	5d                   	pop    %ebp
c010158e:	c3                   	ret    

c010158f <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c010158f:	55                   	push   %ebp
c0101590:	89 e5                	mov    %esp,%ebp
c0101592:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101595:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101599:	74 0d                	je     c01015a8 <serial_putc+0x19>
        serial_putc_sub(c);
c010159b:	8b 45 08             	mov    0x8(%ebp),%eax
c010159e:	89 04 24             	mov    %eax,(%esp)
c01015a1:	e8 83 ff ff ff       	call   c0101529 <serial_putc_sub>
c01015a6:	eb 24                	jmp    c01015cc <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c01015a8:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01015af:	e8 75 ff ff ff       	call   c0101529 <serial_putc_sub>
        serial_putc_sub(' ');
c01015b4:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01015bb:	e8 69 ff ff ff       	call   c0101529 <serial_putc_sub>
        serial_putc_sub('\b');
c01015c0:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01015c7:	e8 5d ff ff ff       	call   c0101529 <serial_putc_sub>
    }
}
c01015cc:	c9                   	leave  
c01015cd:	c3                   	ret    

c01015ce <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c01015ce:	55                   	push   %ebp
c01015cf:	89 e5                	mov    %esp,%ebp
c01015d1:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c01015d4:	eb 32                	jmp    c0101608 <cons_intr+0x3a>
        if (c != 0) {
c01015d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01015da:	74 2c                	je     c0101608 <cons_intr+0x3a>
            cons.buf[cons.wpos ++] = c;
c01015dc:	a1 44 15 15 c0       	mov    0xc0151544,%eax
c01015e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01015e4:	88 90 40 13 15 c0    	mov    %dl,-0x3feaecc0(%eax)
c01015ea:	83 c0 01             	add    $0x1,%eax
c01015ed:	a3 44 15 15 c0       	mov    %eax,0xc0151544
            if (cons.wpos == CONSBUFSIZE) {
c01015f2:	a1 44 15 15 c0       	mov    0xc0151544,%eax
c01015f7:	3d 00 02 00 00       	cmp    $0x200,%eax
c01015fc:	75 0a                	jne    c0101608 <cons_intr+0x3a>
                cons.wpos = 0;
c01015fe:	c7 05 44 15 15 c0 00 	movl   $0x0,0xc0151544
c0101605:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101608:	8b 45 08             	mov    0x8(%ebp),%eax
c010160b:	ff d0                	call   *%eax
c010160d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101610:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101614:	75 c0                	jne    c01015d6 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101616:	c9                   	leave  
c0101617:	c3                   	ret    

c0101618 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101618:	55                   	push   %ebp
c0101619:	89 e5                	mov    %esp,%ebp
c010161b:	53                   	push   %ebx
c010161c:	83 ec 14             	sub    $0x14,%esp
c010161f:	66 c7 45 f6 fd 03    	movw   $0x3fd,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101625:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101629:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010162d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101631:	ec                   	in     (%dx),%al
c0101632:	89 c3                	mov    %eax,%ebx
c0101634:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c0101637:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c010163b:	0f b6 c0             	movzbl %al,%eax
c010163e:	83 e0 01             	and    $0x1,%eax
c0101641:	85 c0                	test   %eax,%eax
c0101643:	75 07                	jne    c010164c <serial_proc_data+0x34>
        return -1;
c0101645:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010164a:	eb 32                	jmp    c010167e <serial_proc_data+0x66>
c010164c:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101652:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101656:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010165a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010165e:	ec                   	in     (%dx),%al
c010165f:	89 c3                	mov    %eax,%ebx
c0101661:	88 5d f1             	mov    %bl,-0xf(%ebp)
    return data;
c0101664:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101668:	0f b6 c0             	movzbl %al,%eax
c010166b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (c == 127) {
c010166e:	83 7d f8 7f          	cmpl   $0x7f,-0x8(%ebp)
c0101672:	75 07                	jne    c010167b <serial_proc_data+0x63>
        c = '\b';
c0101674:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
    }
    return c;
c010167b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010167e:	83 c4 14             	add    $0x14,%esp
c0101681:	5b                   	pop    %ebx
c0101682:	5d                   	pop    %ebp
c0101683:	c3                   	ret    

c0101684 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101684:	55                   	push   %ebp
c0101685:	89 e5                	mov    %esp,%ebp
c0101687:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010168a:	a1 28 13 15 c0       	mov    0xc0151328,%eax
c010168f:	85 c0                	test   %eax,%eax
c0101691:	74 0c                	je     c010169f <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101693:	c7 04 24 18 16 10 c0 	movl   $0xc0101618,(%esp)
c010169a:	e8 2f ff ff ff       	call   c01015ce <cons_intr>
    }
}
c010169f:	c9                   	leave  
c01016a0:	c3                   	ret    

c01016a1 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c01016a1:	55                   	push   %ebp
c01016a2:	89 e5                	mov    %esp,%ebp
c01016a4:	53                   	push   %ebx
c01016a5:	83 ec 44             	sub    $0x44,%esp
c01016a8:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01016ae:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01016b2:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c01016b6:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01016ba:	ec                   	in     (%dx),%al
c01016bb:	89 c3                	mov    %eax,%ebx
c01016bd:	88 5d ef             	mov    %bl,-0x11(%ebp)
    return data;
c01016c0:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c01016c4:	0f b6 c0             	movzbl %al,%eax
c01016c7:	83 e0 01             	and    $0x1,%eax
c01016ca:	85 c0                	test   %eax,%eax
c01016cc:	75 0a                	jne    c01016d8 <kbd_proc_data+0x37>
        return -1;
c01016ce:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01016d3:	e9 61 01 00 00       	jmp    c0101839 <kbd_proc_data+0x198>
c01016d8:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01016de:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01016e2:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c01016e6:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01016ea:	ec                   	in     (%dx),%al
c01016eb:	89 c3                	mov    %eax,%ebx
c01016ed:	88 5d eb             	mov    %bl,-0x15(%ebp)
    return data;
c01016f0:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c01016f4:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c01016f7:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c01016fb:	75 17                	jne    c0101714 <kbd_proc_data+0x73>
        // E0 escape character
        shift |= E0ESC;
c01016fd:	a1 48 15 15 c0       	mov    0xc0151548,%eax
c0101702:	83 c8 40             	or     $0x40,%eax
c0101705:	a3 48 15 15 c0       	mov    %eax,0xc0151548
        return 0;
c010170a:	b8 00 00 00 00       	mov    $0x0,%eax
c010170f:	e9 25 01 00 00       	jmp    c0101839 <kbd_proc_data+0x198>
    } else if (data & 0x80) {
c0101714:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101718:	84 c0                	test   %al,%al
c010171a:	79 47                	jns    c0101763 <kbd_proc_data+0xc2>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c010171c:	a1 48 15 15 c0       	mov    0xc0151548,%eax
c0101721:	83 e0 40             	and    $0x40,%eax
c0101724:	85 c0                	test   %eax,%eax
c0101726:	75 09                	jne    c0101731 <kbd_proc_data+0x90>
c0101728:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010172c:	83 e0 7f             	and    $0x7f,%eax
c010172f:	eb 04                	jmp    c0101735 <kbd_proc_data+0x94>
c0101731:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101735:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101738:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010173c:	0f b6 80 60 00 15 c0 	movzbl -0x3feaffa0(%eax),%eax
c0101743:	83 c8 40             	or     $0x40,%eax
c0101746:	0f b6 c0             	movzbl %al,%eax
c0101749:	f7 d0                	not    %eax
c010174b:	89 c2                	mov    %eax,%edx
c010174d:	a1 48 15 15 c0       	mov    0xc0151548,%eax
c0101752:	21 d0                	and    %edx,%eax
c0101754:	a3 48 15 15 c0       	mov    %eax,0xc0151548
        return 0;
c0101759:	b8 00 00 00 00       	mov    $0x0,%eax
c010175e:	e9 d6 00 00 00       	jmp    c0101839 <kbd_proc_data+0x198>
    } else if (shift & E0ESC) {
c0101763:	a1 48 15 15 c0       	mov    0xc0151548,%eax
c0101768:	83 e0 40             	and    $0x40,%eax
c010176b:	85 c0                	test   %eax,%eax
c010176d:	74 11                	je     c0101780 <kbd_proc_data+0xdf>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c010176f:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101773:	a1 48 15 15 c0       	mov    0xc0151548,%eax
c0101778:	83 e0 bf             	and    $0xffffffbf,%eax
c010177b:	a3 48 15 15 c0       	mov    %eax,0xc0151548
    }

    shift |= shiftcode[data];
c0101780:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101784:	0f b6 80 60 00 15 c0 	movzbl -0x3feaffa0(%eax),%eax
c010178b:	0f b6 d0             	movzbl %al,%edx
c010178e:	a1 48 15 15 c0       	mov    0xc0151548,%eax
c0101793:	09 d0                	or     %edx,%eax
c0101795:	a3 48 15 15 c0       	mov    %eax,0xc0151548
    shift ^= togglecode[data];
c010179a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010179e:	0f b6 80 60 01 15 c0 	movzbl -0x3feafea0(%eax),%eax
c01017a5:	0f b6 d0             	movzbl %al,%edx
c01017a8:	a1 48 15 15 c0       	mov    0xc0151548,%eax
c01017ad:	31 d0                	xor    %edx,%eax
c01017af:	a3 48 15 15 c0       	mov    %eax,0xc0151548

    c = charcode[shift & (CTL | SHIFT)][data];
c01017b4:	a1 48 15 15 c0       	mov    0xc0151548,%eax
c01017b9:	83 e0 03             	and    $0x3,%eax
c01017bc:	8b 14 85 60 05 15 c0 	mov    -0x3feafaa0(,%eax,4),%edx
c01017c3:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01017c7:	01 d0                	add    %edx,%eax
c01017c9:	0f b6 00             	movzbl (%eax),%eax
c01017cc:	0f b6 c0             	movzbl %al,%eax
c01017cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c01017d2:	a1 48 15 15 c0       	mov    0xc0151548,%eax
c01017d7:	83 e0 08             	and    $0x8,%eax
c01017da:	85 c0                	test   %eax,%eax
c01017dc:	74 22                	je     c0101800 <kbd_proc_data+0x15f>
        if ('a' <= c && c <= 'z')
c01017de:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c01017e2:	7e 0c                	jle    c01017f0 <kbd_proc_data+0x14f>
c01017e4:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c01017e8:	7f 06                	jg     c01017f0 <kbd_proc_data+0x14f>
            c += 'A' - 'a';
c01017ea:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c01017ee:	eb 10                	jmp    c0101800 <kbd_proc_data+0x15f>
        else if ('A' <= c && c <= 'Z')
c01017f0:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c01017f4:	7e 0a                	jle    c0101800 <kbd_proc_data+0x15f>
c01017f6:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c01017fa:	7f 04                	jg     c0101800 <kbd_proc_data+0x15f>
            c += 'a' - 'A';
c01017fc:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101800:	a1 48 15 15 c0       	mov    0xc0151548,%eax
c0101805:	f7 d0                	not    %eax
c0101807:	83 e0 06             	and    $0x6,%eax
c010180a:	85 c0                	test   %eax,%eax
c010180c:	75 28                	jne    c0101836 <kbd_proc_data+0x195>
c010180e:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101815:	75 1f                	jne    c0101836 <kbd_proc_data+0x195>
        cprintf("Rebooting!\n");
c0101817:	c7 04 24 5d 5c 11 c0 	movl   $0xc0115c5d,(%esp)
c010181e:	e8 4d eb ff ff       	call   c0100370 <cprintf>
c0101823:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0101829:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010182d:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0101831:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101835:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101836:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101839:	83 c4 44             	add    $0x44,%esp
c010183c:	5b                   	pop    %ebx
c010183d:	5d                   	pop    %ebp
c010183e:	c3                   	ret    

c010183f <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c010183f:	55                   	push   %ebp
c0101840:	89 e5                	mov    %esp,%ebp
c0101842:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c0101845:	c7 04 24 a1 16 10 c0 	movl   $0xc01016a1,(%esp)
c010184c:	e8 7d fd ff ff       	call   c01015ce <cons_intr>
}
c0101851:	c9                   	leave  
c0101852:	c3                   	ret    

c0101853 <kbd_init>:

static void
kbd_init(void) {
c0101853:	55                   	push   %ebp
c0101854:	89 e5                	mov    %esp,%ebp
c0101856:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c0101859:	e8 e1 ff ff ff       	call   c010183f <kbd_intr>
    pic_enable(IRQ_KBD);
c010185e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0101865:	e8 da 09 00 00       	call   c0102244 <pic_enable>
}
c010186a:	c9                   	leave  
c010186b:	c3                   	ret    

c010186c <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c010186c:	55                   	push   %ebp
c010186d:	89 e5                	mov    %esp,%ebp
c010186f:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c0101872:	e8 18 f8 ff ff       	call   c010108f <cga_init>
    serial_init();
c0101877:	e8 0e f9 ff ff       	call   c010118a <serial_init>
    kbd_init();
c010187c:	e8 d2 ff ff ff       	call   c0101853 <kbd_init>
    if (!serial_exists) {
c0101881:	a1 28 13 15 c0       	mov    0xc0151328,%eax
c0101886:	85 c0                	test   %eax,%eax
c0101888:	75 0c                	jne    c0101896 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c010188a:	c7 04 24 69 5c 11 c0 	movl   $0xc0115c69,(%esp)
c0101891:	e8 da ea ff ff       	call   c0100370 <cprintf>
    }
}
c0101896:	c9                   	leave  
c0101897:	c3                   	ret    

c0101898 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101898:	55                   	push   %ebp
c0101899:	89 e5                	mov    %esp,%ebp
c010189b:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010189e:	e8 3d f7 ff ff       	call   c0100fe0 <__intr_save>
c01018a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c01018a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01018a9:	89 04 24             	mov    %eax,(%esp)
c01018ac:	e8 5f fa ff ff       	call   c0101310 <lpt_putc>
        cga_putc(c);
c01018b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01018b4:	89 04 24             	mov    %eax,(%esp)
c01018b7:	e8 93 fa ff ff       	call   c010134f <cga_putc>
        serial_putc(c);
c01018bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01018bf:	89 04 24             	mov    %eax,(%esp)
c01018c2:	e8 c8 fc ff ff       	call   c010158f <serial_putc>
    }
    local_intr_restore(intr_flag);
c01018c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01018ca:	89 04 24             	mov    %eax,(%esp)
c01018cd:	e8 3d f7 ff ff       	call   c010100f <__intr_restore>
}
c01018d2:	c9                   	leave  
c01018d3:	c3                   	ret    

c01018d4 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c01018d4:	55                   	push   %ebp
c01018d5:	89 e5                	mov    %esp,%ebp
c01018d7:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c01018da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c01018e1:	e8 fa f6 ff ff       	call   c0100fe0 <__intr_save>
c01018e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c01018e9:	e8 96 fd ff ff       	call   c0101684 <serial_intr>
        kbd_intr();
c01018ee:	e8 4c ff ff ff       	call   c010183f <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c01018f3:	8b 15 40 15 15 c0    	mov    0xc0151540,%edx
c01018f9:	a1 44 15 15 c0       	mov    0xc0151544,%eax
c01018fe:	39 c2                	cmp    %eax,%edx
c0101900:	74 30                	je     c0101932 <cons_getc+0x5e>
            c = cons.buf[cons.rpos ++];
c0101902:	a1 40 15 15 c0       	mov    0xc0151540,%eax
c0101907:	0f b6 90 40 13 15 c0 	movzbl -0x3feaecc0(%eax),%edx
c010190e:	0f b6 d2             	movzbl %dl,%edx
c0101911:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0101914:	83 c0 01             	add    $0x1,%eax
c0101917:	a3 40 15 15 c0       	mov    %eax,0xc0151540
            if (cons.rpos == CONSBUFSIZE) {
c010191c:	a1 40 15 15 c0       	mov    0xc0151540,%eax
c0101921:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101926:	75 0a                	jne    c0101932 <cons_getc+0x5e>
                cons.rpos = 0;
c0101928:	c7 05 40 15 15 c0 00 	movl   $0x0,0xc0151540
c010192f:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101932:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101935:	89 04 24             	mov    %eax,(%esp)
c0101938:	e8 d2 f6 ff ff       	call   c010100f <__intr_restore>
    return c;
c010193d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101940:	c9                   	leave  
c0101941:	c3                   	ret    
	...

c0101944 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0101944:	55                   	push   %ebp
c0101945:	89 e5                	mov    %esp,%ebp
c0101947:	53                   	push   %ebx
c0101948:	83 ec 14             	sub    $0x14,%esp
c010194b:	8b 45 08             	mov    0x8(%ebp),%eax
c010194e:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0101952:	90                   	nop
c0101953:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0101957:	83 c0 07             	add    $0x7,%eax
c010195a:	0f b7 c0             	movzwl %ax,%eax
c010195d:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101961:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101965:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101969:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010196d:	ec                   	in     (%dx),%al
c010196e:	89 c3                	mov    %eax,%ebx
c0101970:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c0101973:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101977:	0f b6 c0             	movzbl %al,%eax
c010197a:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010197d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101980:	25 80 00 00 00       	and    $0x80,%eax
c0101985:	85 c0                	test   %eax,%eax
c0101987:	75 ca                	jne    c0101953 <ide_wait_ready+0xf>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0101989:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010198d:	74 11                	je     c01019a0 <ide_wait_ready+0x5c>
c010198f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101992:	83 e0 21             	and    $0x21,%eax
c0101995:	85 c0                	test   %eax,%eax
c0101997:	74 07                	je     c01019a0 <ide_wait_ready+0x5c>
        return -1;
c0101999:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010199e:	eb 05                	jmp    c01019a5 <ide_wait_ready+0x61>
    }
    return 0;
c01019a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01019a5:	83 c4 14             	add    $0x14,%esp
c01019a8:	5b                   	pop    %ebx
c01019a9:	5d                   	pop    %ebp
c01019aa:	c3                   	ret    

c01019ab <ide_init>:

void
ide_init(void) {
c01019ab:	55                   	push   %ebp
c01019ac:	89 e5                	mov    %esp,%ebp
c01019ae:	57                   	push   %edi
c01019af:	56                   	push   %esi
c01019b0:	53                   	push   %ebx
c01019b1:	81 ec 6c 02 00 00    	sub    $0x26c,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01019b7:	66 c7 45 e6 00 00    	movw   $0x0,-0x1a(%ebp)
c01019bd:	e9 e3 02 00 00       	jmp    c0101ca5 <ide_init+0x2fa>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c01019c2:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01019c6:	c1 e0 03             	shl    $0x3,%eax
c01019c9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019d0:	29 c2                	sub    %eax,%edx
c01019d2:	8d 82 60 15 15 c0    	lea    -0x3feaeaa0(%edx),%eax
c01019d8:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c01019db:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01019df:	66 d1 e8             	shr    %ax
c01019e2:	0f b7 c0             	movzwl %ax,%eax
c01019e5:	0f b7 04 85 88 5c 11 	movzwl -0x3feea378(,%eax,4),%eax
c01019ec:	c0 
c01019ed:	66 89 45 da          	mov    %ax,-0x26(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c01019f1:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01019f5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01019fc:	00 
c01019fd:	89 04 24             	mov    %eax,(%esp)
c0101a00:	e8 3f ff ff ff       	call   c0101944 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101a05:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101a09:	83 e0 01             	and    $0x1,%eax
c0101a0c:	c1 e0 04             	shl    $0x4,%eax
c0101a0f:	83 c8 e0             	or     $0xffffffe0,%eax
c0101a12:	0f b6 c0             	movzbl %al,%eax
c0101a15:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101a19:	83 c2 06             	add    $0x6,%edx
c0101a1c:	0f b7 d2             	movzwl %dx,%edx
c0101a1f:	66 89 55 c2          	mov    %dx,-0x3e(%ebp)
c0101a23:	88 45 c1             	mov    %al,-0x3f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101a26:	0f b6 45 c1          	movzbl -0x3f(%ebp),%eax
c0101a2a:	0f b7 55 c2          	movzwl -0x3e(%ebp),%edx
c0101a2e:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101a2f:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101a33:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101a3a:	00 
c0101a3b:	89 04 24             	mov    %eax,(%esp)
c0101a3e:	e8 01 ff ff ff       	call   c0101944 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0101a43:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101a47:	83 c0 07             	add    $0x7,%eax
c0101a4a:	0f b7 c0             	movzwl %ax,%eax
c0101a4d:	66 89 45 be          	mov    %ax,-0x42(%ebp)
c0101a51:	c6 45 bd ec          	movb   $0xec,-0x43(%ebp)
c0101a55:	0f b6 45 bd          	movzbl -0x43(%ebp),%eax
c0101a59:	0f b7 55 be          	movzwl -0x42(%ebp),%edx
c0101a5d:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101a5e:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101a62:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101a69:	00 
c0101a6a:	89 04 24             	mov    %eax,(%esp)
c0101a6d:	e8 d2 fe ff ff       	call   c0101944 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0101a72:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101a76:	83 c0 07             	add    $0x7,%eax
c0101a79:	0f b7 c0             	movzwl %ax,%eax
c0101a7c:	66 89 45 ba          	mov    %ax,-0x46(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101a80:	0f b7 55 ba          	movzwl -0x46(%ebp),%edx
c0101a84:	66 89 95 a6 fd ff ff 	mov    %dx,-0x25a(%ebp)
c0101a8b:	0f b7 95 a6 fd ff ff 	movzwl -0x25a(%ebp),%edx
c0101a92:	ec                   	in     (%dx),%al
c0101a93:	89 c3                	mov    %eax,%ebx
c0101a95:	88 5d b9             	mov    %bl,-0x47(%ebp)
    return data;
c0101a98:	0f b6 45 b9          	movzbl -0x47(%ebp),%eax
c0101a9c:	84 c0                	test   %al,%al
c0101a9e:	0f 84 fb 01 00 00    	je     c0101c9f <ide_init+0x2f4>
c0101aa4:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101aa8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101aaf:	00 
c0101ab0:	89 04 24             	mov    %eax,(%esp)
c0101ab3:	e8 8c fe ff ff       	call   c0101944 <ide_wait_ready>
c0101ab8:	85 c0                	test   %eax,%eax
c0101aba:	0f 85 df 01 00 00    	jne    c0101c9f <ide_init+0x2f4>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101ac0:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101ac4:	c1 e0 03             	shl    $0x3,%eax
c0101ac7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ace:	29 c2                	sub    %eax,%edx
c0101ad0:	8d 82 60 15 15 c0    	lea    -0x3feaeaa0(%edx),%eax
c0101ad6:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101ad9:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101add:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0101ae0:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c0101ae6:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0101ae9:	c7 45 ac 80 00 00 00 	movl   $0x80,-0x54(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101af0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0101af3:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0101af6:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0101af9:	89 ce                	mov    %ecx,%esi
c0101afb:	89 d3                	mov    %edx,%ebx
c0101afd:	89 f7                	mov    %esi,%edi
c0101aff:	89 d9                	mov    %ebx,%ecx
c0101b01:	89 c2                	mov    %eax,%edx
c0101b03:	fc                   	cld    
c0101b04:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101b06:	89 cb                	mov    %ecx,%ebx
c0101b08:	89 fe                	mov    %edi,%esi
c0101b0a:	89 75 b0             	mov    %esi,-0x50(%ebp)
c0101b0d:	89 5d ac             	mov    %ebx,-0x54(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101b10:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c0101b16:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101b19:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101b1c:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101b22:	89 45 d0             	mov    %eax,-0x30(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101b25:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101b28:	25 00 00 00 04       	and    $0x4000000,%eax
c0101b2d:	85 c0                	test   %eax,%eax
c0101b2f:	74 0e                	je     c0101b3f <ide_init+0x194>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101b31:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101b34:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101b3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0101b3d:	eb 09                	jmp    c0101b48 <ide_init+0x19d>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101b3f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101b42:	8b 40 78             	mov    0x78(%eax),%eax
c0101b45:	89 45 e0             	mov    %eax,-0x20(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101b48:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101b4c:	c1 e0 03             	shl    $0x3,%eax
c0101b4f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b56:	29 c2                	sub    %eax,%edx
c0101b58:	81 c2 60 15 15 c0    	add    $0xc0151560,%edx
c0101b5e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101b61:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101b64:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101b68:	c1 e0 03             	shl    $0x3,%eax
c0101b6b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b72:	29 c2                	sub    %eax,%edx
c0101b74:	81 c2 60 15 15 c0    	add    $0xc0151560,%edx
c0101b7a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101b7d:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101b80:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101b83:	83 c0 62             	add    $0x62,%eax
c0101b86:	0f b7 00             	movzwl (%eax),%eax
c0101b89:	0f b7 c0             	movzwl %ax,%eax
c0101b8c:	25 00 02 00 00       	and    $0x200,%eax
c0101b91:	85 c0                	test   %eax,%eax
c0101b93:	75 24                	jne    c0101bb9 <ide_init+0x20e>
c0101b95:	c7 44 24 0c 90 5c 11 	movl   $0xc0115c90,0xc(%esp)
c0101b9c:	c0 
c0101b9d:	c7 44 24 08 d3 5c 11 	movl   $0xc0115cd3,0x8(%esp)
c0101ba4:	c0 
c0101ba5:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101bac:	00 
c0101bad:	c7 04 24 e8 5c 11 c0 	movl   $0xc0115ce8,(%esp)
c0101bb4:	e8 f3 f2 ff ff       	call   c0100eac <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101bb9:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101bbd:	c1 e0 03             	shl    $0x3,%eax
c0101bc0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bc7:	29 c2                	sub    %eax,%edx
c0101bc9:	8d 82 60 15 15 c0    	lea    -0x3feaeaa0(%edx),%eax
c0101bcf:	83 c0 0c             	add    $0xc,%eax
c0101bd2:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101bd5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101bd8:	83 c0 36             	add    $0x36,%eax
c0101bdb:	89 45 c8             	mov    %eax,-0x38(%ebp)
        unsigned int i, length = 40;
c0101bde:	c7 45 c4 28 00 00 00 	movl   $0x28,-0x3c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101be5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0101bec:	eb 30                	jmp    c0101c1e <ide_init+0x273>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101bee:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101bf1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101bf4:	01 c2                	add    %eax,%edx
c0101bf6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101bf9:	83 c0 01             	add    $0x1,%eax
c0101bfc:	03 45 c8             	add    -0x38(%ebp),%eax
c0101bff:	0f b6 00             	movzbl (%eax),%eax
c0101c02:	88 02                	mov    %al,(%edx)
c0101c04:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101c07:	83 c0 01             	add    $0x1,%eax
c0101c0a:	03 45 cc             	add    -0x34(%ebp),%eax
c0101c0d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101c10:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c0101c13:	01 ca                	add    %ecx,%edx
c0101c15:	0f b6 12             	movzbl (%edx),%edx
c0101c18:	88 10                	mov    %dl,(%eax)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101c1a:	83 45 dc 02          	addl   $0x2,-0x24(%ebp)
c0101c1e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101c21:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0101c24:	72 c8                	jb     c0101bee <ide_init+0x243>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101c26:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101c29:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101c2c:	01 d0                	add    %edx,%eax
c0101c2e:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101c31:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0101c35:	0f 95 c0             	setne  %al
c0101c38:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
c0101c3c:	84 c0                	test   %al,%al
c0101c3e:	74 0f                	je     c0101c4f <ide_init+0x2a4>
c0101c40:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101c43:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101c46:	01 d0                	add    %edx,%eax
c0101c48:	0f b6 00             	movzbl (%eax),%eax
c0101c4b:	3c 20                	cmp    $0x20,%al
c0101c4d:	74 d7                	je     c0101c26 <ide_init+0x27b>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101c4f:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101c53:	c1 e0 03             	shl    $0x3,%eax
c0101c56:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c5d:	29 c2                	sub    %eax,%edx
c0101c5f:	8d 82 60 15 15 c0    	lea    -0x3feaeaa0(%edx),%eax
c0101c65:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101c68:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101c6c:	c1 e0 03             	shl    $0x3,%eax
c0101c6f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c76:	29 c2                	sub    %eax,%edx
c0101c78:	8d 82 60 15 15 c0    	lea    -0x3feaeaa0(%edx),%eax
c0101c7e:	8b 50 08             	mov    0x8(%eax),%edx
c0101c81:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101c85:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101c89:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101c8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101c91:	c7 04 24 fa 5c 11 c0 	movl   $0xc0115cfa,(%esp)
c0101c98:	e8 d3 e6 ff ff       	call   c0100370 <cprintf>
c0101c9d:	eb 01                	jmp    c0101ca0 <ide_init+0x2f5>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c0101c9f:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101ca0:	66 83 45 e6 01       	addw   $0x1,-0x1a(%ebp)
c0101ca5:	66 83 7d e6 03       	cmpw   $0x3,-0x1a(%ebp)
c0101caa:	0f 86 12 fd ff ff    	jbe    c01019c2 <ide_init+0x17>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101cb0:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101cb7:	e8 88 05 00 00       	call   c0102244 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101cbc:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101cc3:	e8 7c 05 00 00       	call   c0102244 <pic_enable>
}
c0101cc8:	81 c4 6c 02 00 00    	add    $0x26c,%esp
c0101cce:	5b                   	pop    %ebx
c0101ccf:	5e                   	pop    %esi
c0101cd0:	5f                   	pop    %edi
c0101cd1:	5d                   	pop    %ebp
c0101cd2:	c3                   	ret    

c0101cd3 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101cd3:	55                   	push   %ebp
c0101cd4:	89 e5                	mov    %esp,%ebp
c0101cd6:	83 ec 04             	sub    $0x4,%esp
c0101cd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cdc:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101ce0:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101ce5:	77 24                	ja     c0101d0b <ide_device_valid+0x38>
c0101ce7:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101ceb:	c1 e0 03             	shl    $0x3,%eax
c0101cee:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101cf5:	29 c2                	sub    %eax,%edx
c0101cf7:	8d 82 60 15 15 c0    	lea    -0x3feaeaa0(%edx),%eax
c0101cfd:	0f b6 00             	movzbl (%eax),%eax
c0101d00:	84 c0                	test   %al,%al
c0101d02:	74 07                	je     c0101d0b <ide_device_valid+0x38>
c0101d04:	b8 01 00 00 00       	mov    $0x1,%eax
c0101d09:	eb 05                	jmp    c0101d10 <ide_device_valid+0x3d>
c0101d0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101d10:	c9                   	leave  
c0101d11:	c3                   	ret    

c0101d12 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101d12:	55                   	push   %ebp
c0101d13:	89 e5                	mov    %esp,%ebp
c0101d15:	83 ec 08             	sub    $0x8,%esp
c0101d18:	8b 45 08             	mov    0x8(%ebp),%eax
c0101d1b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101d1f:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101d23:	89 04 24             	mov    %eax,(%esp)
c0101d26:	e8 a8 ff ff ff       	call   c0101cd3 <ide_device_valid>
c0101d2b:	85 c0                	test   %eax,%eax
c0101d2d:	74 1b                	je     c0101d4a <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101d2f:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101d33:	c1 e0 03             	shl    $0x3,%eax
c0101d36:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101d3d:	29 c2                	sub    %eax,%edx
c0101d3f:	8d 82 60 15 15 c0    	lea    -0x3feaeaa0(%edx),%eax
c0101d45:	8b 40 08             	mov    0x8(%eax),%eax
c0101d48:	eb 05                	jmp    c0101d4f <ide_device_size+0x3d>
    }
    return 0;
c0101d4a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101d4f:	c9                   	leave  
c0101d50:	c3                   	ret    

c0101d51 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101d51:	55                   	push   %ebp
c0101d52:	89 e5                	mov    %esp,%ebp
c0101d54:	57                   	push   %edi
c0101d55:	56                   	push   %esi
c0101d56:	53                   	push   %ebx
c0101d57:	83 ec 5c             	sub    $0x5c,%esp
c0101d5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0101d5d:	66 89 45 b4          	mov    %ax,-0x4c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101d61:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101d68:	77 24                	ja     c0101d8e <ide_read_secs+0x3d>
c0101d6a:	66 83 7d b4 03       	cmpw   $0x3,-0x4c(%ebp)
c0101d6f:	77 1d                	ja     c0101d8e <ide_read_secs+0x3d>
c0101d71:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101d75:	c1 e0 03             	shl    $0x3,%eax
c0101d78:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101d7f:	29 c2                	sub    %eax,%edx
c0101d81:	8d 82 60 15 15 c0    	lea    -0x3feaeaa0(%edx),%eax
c0101d87:	0f b6 00             	movzbl (%eax),%eax
c0101d8a:	84 c0                	test   %al,%al
c0101d8c:	75 24                	jne    c0101db2 <ide_read_secs+0x61>
c0101d8e:	c7 44 24 0c 18 5d 11 	movl   $0xc0115d18,0xc(%esp)
c0101d95:	c0 
c0101d96:	c7 44 24 08 d3 5c 11 	movl   $0xc0115cd3,0x8(%esp)
c0101d9d:	c0 
c0101d9e:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101da5:	00 
c0101da6:	c7 04 24 e8 5c 11 c0 	movl   $0xc0115ce8,(%esp)
c0101dad:	e8 fa f0 ff ff       	call   c0100eac <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101db2:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101db9:	77 0f                	ja     c0101dca <ide_read_secs+0x79>
c0101dbb:	8b 45 14             	mov    0x14(%ebp),%eax
c0101dbe:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101dc1:	01 d0                	add    %edx,%eax
c0101dc3:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101dc8:	76 24                	jbe    c0101dee <ide_read_secs+0x9d>
c0101dca:	c7 44 24 0c 40 5d 11 	movl   $0xc0115d40,0xc(%esp)
c0101dd1:	c0 
c0101dd2:	c7 44 24 08 d3 5c 11 	movl   $0xc0115cd3,0x8(%esp)
c0101dd9:	c0 
c0101dda:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101de1:	00 
c0101de2:	c7 04 24 e8 5c 11 c0 	movl   $0xc0115ce8,(%esp)
c0101de9:	e8 be f0 ff ff       	call   c0100eac <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101dee:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101df2:	66 d1 e8             	shr    %ax
c0101df5:	0f b7 c0             	movzwl %ax,%eax
c0101df8:	0f b7 04 85 88 5c 11 	movzwl -0x3feea378(,%eax,4),%eax
c0101dff:	c0 
c0101e00:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
c0101e04:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101e08:	66 d1 e8             	shr    %ax
c0101e0b:	0f b7 c0             	movzwl %ax,%eax
c0101e0e:	0f b7 04 85 8a 5c 11 	movzwl -0x3feea376(,%eax,4),%eax
c0101e15:	c0 
c0101e16:	66 89 45 e0          	mov    %ax,-0x20(%ebp)

    ide_wait_ready(iobase, 0);
c0101e1a:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101e1e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101e25:	00 
c0101e26:	89 04 24             	mov    %eax,(%esp)
c0101e29:	e8 16 fb ff ff       	call   c0101944 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101e2e:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c0101e32:	83 c0 02             	add    $0x2,%eax
c0101e35:	0f b7 c0             	movzwl %ax,%eax
c0101e38:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101e3c:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101e40:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101e44:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101e48:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101e49:	8b 45 14             	mov    0x14(%ebp),%eax
c0101e4c:	0f b6 c0             	movzbl %al,%eax
c0101e4f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101e53:	83 c2 02             	add    $0x2,%edx
c0101e56:	0f b7 d2             	movzwl %dx,%edx
c0101e59:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101e5d:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101e60:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101e64:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101e68:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101e69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e6c:	0f b6 c0             	movzbl %al,%eax
c0101e6f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101e73:	83 c2 03             	add    $0x3,%edx
c0101e76:	0f b7 d2             	movzwl %dx,%edx
c0101e79:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c0101e7d:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101e80:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101e84:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101e88:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101e89:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e8c:	c1 e8 08             	shr    $0x8,%eax
c0101e8f:	0f b6 c0             	movzbl %al,%eax
c0101e92:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101e96:	83 c2 04             	add    $0x4,%edx
c0101e99:	0f b7 d2             	movzwl %dx,%edx
c0101e9c:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101ea0:	88 45 d1             	mov    %al,-0x2f(%ebp)
c0101ea3:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101ea7:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101eab:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101eac:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101eaf:	c1 e8 10             	shr    $0x10,%eax
c0101eb2:	0f b6 c0             	movzbl %al,%eax
c0101eb5:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101eb9:	83 c2 05             	add    $0x5,%edx
c0101ebc:	0f b7 d2             	movzwl %dx,%edx
c0101ebf:	66 89 55 ce          	mov    %dx,-0x32(%ebp)
c0101ec3:	88 45 cd             	mov    %al,-0x33(%ebp)
c0101ec6:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0101eca:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0101ece:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101ecf:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101ed3:	83 e0 01             	and    $0x1,%eax
c0101ed6:	89 c2                	mov    %eax,%edx
c0101ed8:	c1 e2 04             	shl    $0x4,%edx
c0101edb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ede:	c1 e8 18             	shr    $0x18,%eax
c0101ee1:	83 e0 0f             	and    $0xf,%eax
c0101ee4:	09 d0                	or     %edx,%eax
c0101ee6:	83 c8 e0             	or     $0xffffffe0,%eax
c0101ee9:	0f b6 c0             	movzbl %al,%eax
c0101eec:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101ef0:	83 c2 06             	add    $0x6,%edx
c0101ef3:	0f b7 d2             	movzwl %dx,%edx
c0101ef6:	66 89 55 ca          	mov    %dx,-0x36(%ebp)
c0101efa:	88 45 c9             	mov    %al,-0x37(%ebp)
c0101efd:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0101f01:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0101f05:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101f06:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101f0a:	83 c0 07             	add    $0x7,%eax
c0101f0d:	0f b7 c0             	movzwl %ax,%eax
c0101f10:	66 89 45 c6          	mov    %ax,-0x3a(%ebp)
c0101f14:	c6 45 c5 20          	movb   $0x20,-0x3b(%ebp)
c0101f18:	0f b6 45 c5          	movzbl -0x3b(%ebp),%eax
c0101f1c:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c0101f20:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101f21:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101f28:	eb 5c                	jmp    c0101f86 <ide_read_secs+0x235>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101f2a:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101f2e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101f35:	00 
c0101f36:	89 04 24             	mov    %eax,(%esp)
c0101f39:	e8 06 fa ff ff       	call   c0101944 <ide_wait_ready>
c0101f3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0101f41:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0101f45:	75 47                	jne    c0101f8e <ide_read_secs+0x23d>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101f47:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101f4b:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101f4e:	8b 45 10             	mov    0x10(%ebp),%eax
c0101f51:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0101f54:	c7 45 b8 80 00 00 00 	movl   $0x80,-0x48(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101f5b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0101f5e:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0101f61:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0101f64:	89 ce                	mov    %ecx,%esi
c0101f66:	89 d3                	mov    %edx,%ebx
c0101f68:	89 f7                	mov    %esi,%edi
c0101f6a:	89 d9                	mov    %ebx,%ecx
c0101f6c:	89 c2                	mov    %eax,%edx
c0101f6e:	fc                   	cld    
c0101f6f:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101f71:	89 cb                	mov    %ecx,%ebx
c0101f73:	89 fe                	mov    %edi,%esi
c0101f75:	89 75 bc             	mov    %esi,-0x44(%ebp)
c0101f78:	89 5d b8             	mov    %ebx,-0x48(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101f7b:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101f7f:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101f86:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101f8a:	75 9e                	jne    c0101f2a <ide_read_secs+0x1d9>
c0101f8c:	eb 01                	jmp    c0101f8f <ide_read_secs+0x23e>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101f8e:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101f8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c0101f92:	83 c4 5c             	add    $0x5c,%esp
c0101f95:	5b                   	pop    %ebx
c0101f96:	5e                   	pop    %esi
c0101f97:	5f                   	pop    %edi
c0101f98:	5d                   	pop    %ebp
c0101f99:	c3                   	ret    

c0101f9a <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101f9a:	55                   	push   %ebp
c0101f9b:	89 e5                	mov    %esp,%ebp
c0101f9d:	56                   	push   %esi
c0101f9e:	53                   	push   %ebx
c0101f9f:	83 ec 50             	sub    $0x50,%esp
c0101fa2:	8b 45 08             	mov    0x8(%ebp),%eax
c0101fa5:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101fa9:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101fb0:	77 24                	ja     c0101fd6 <ide_write_secs+0x3c>
c0101fb2:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101fb7:	77 1d                	ja     c0101fd6 <ide_write_secs+0x3c>
c0101fb9:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101fbd:	c1 e0 03             	shl    $0x3,%eax
c0101fc0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101fc7:	29 c2                	sub    %eax,%edx
c0101fc9:	8d 82 60 15 15 c0    	lea    -0x3feaeaa0(%edx),%eax
c0101fcf:	0f b6 00             	movzbl (%eax),%eax
c0101fd2:	84 c0                	test   %al,%al
c0101fd4:	75 24                	jne    c0101ffa <ide_write_secs+0x60>
c0101fd6:	c7 44 24 0c 18 5d 11 	movl   $0xc0115d18,0xc(%esp)
c0101fdd:	c0 
c0101fde:	c7 44 24 08 d3 5c 11 	movl   $0xc0115cd3,0x8(%esp)
c0101fe5:	c0 
c0101fe6:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101fed:	00 
c0101fee:	c7 04 24 e8 5c 11 c0 	movl   $0xc0115ce8,(%esp)
c0101ff5:	e8 b2 ee ff ff       	call   c0100eac <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101ffa:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0102001:	77 0f                	ja     c0102012 <ide_write_secs+0x78>
c0102003:	8b 45 14             	mov    0x14(%ebp),%eax
c0102006:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102009:	01 d0                	add    %edx,%eax
c010200b:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0102010:	76 24                	jbe    c0102036 <ide_write_secs+0x9c>
c0102012:	c7 44 24 0c 40 5d 11 	movl   $0xc0115d40,0xc(%esp)
c0102019:	c0 
c010201a:	c7 44 24 08 d3 5c 11 	movl   $0xc0115cd3,0x8(%esp)
c0102021:	c0 
c0102022:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0102029:	00 
c010202a:	c7 04 24 e8 5c 11 c0 	movl   $0xc0115ce8,(%esp)
c0102031:	e8 76 ee ff ff       	call   c0100eac <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0102036:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010203a:	66 d1 e8             	shr    %ax
c010203d:	0f b7 c0             	movzwl %ax,%eax
c0102040:	0f b7 04 85 88 5c 11 	movzwl -0x3feea378(,%eax,4),%eax
c0102047:	c0 
c0102048:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010204c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102050:	66 d1 e8             	shr    %ax
c0102053:	0f b7 c0             	movzwl %ax,%eax
c0102056:	0f b7 04 85 8a 5c 11 	movzwl -0x3feea376(,%eax,4),%eax
c010205d:	c0 
c010205e:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0102062:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102066:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010206d:	00 
c010206e:	89 04 24             	mov    %eax,(%esp)
c0102071:	e8 ce f8 ff ff       	call   c0101944 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0102076:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010207a:	83 c0 02             	add    $0x2,%eax
c010207d:	0f b7 c0             	movzwl %ax,%eax
c0102080:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0102084:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102088:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010208c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102090:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0102091:	8b 45 14             	mov    0x14(%ebp),%eax
c0102094:	0f b6 c0             	movzbl %al,%eax
c0102097:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010209b:	83 c2 02             	add    $0x2,%edx
c010209e:	0f b7 d2             	movzwl %dx,%edx
c01020a1:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c01020a5:	88 45 e9             	mov    %al,-0x17(%ebp)
c01020a8:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01020ac:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01020b0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c01020b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01020b4:	0f b6 c0             	movzbl %al,%eax
c01020b7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01020bb:	83 c2 03             	add    $0x3,%edx
c01020be:	0f b7 d2             	movzwl %dx,%edx
c01020c1:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01020c5:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01020c8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01020cc:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01020d0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01020d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01020d4:	c1 e8 08             	shr    $0x8,%eax
c01020d7:	0f b6 c0             	movzbl %al,%eax
c01020da:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01020de:	83 c2 04             	add    $0x4,%edx
c01020e1:	0f b7 d2             	movzwl %dx,%edx
c01020e4:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01020e8:	88 45 e1             	mov    %al,-0x1f(%ebp)
c01020eb:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01020ef:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01020f3:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01020f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01020f7:	c1 e8 10             	shr    $0x10,%eax
c01020fa:	0f b6 c0             	movzbl %al,%eax
c01020fd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102101:	83 c2 05             	add    $0x5,%edx
c0102104:	0f b7 d2             	movzwl %dx,%edx
c0102107:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c010210b:	88 45 dd             	mov    %al,-0x23(%ebp)
c010210e:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102112:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102116:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0102117:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010211b:	83 e0 01             	and    $0x1,%eax
c010211e:	89 c2                	mov    %eax,%edx
c0102120:	c1 e2 04             	shl    $0x4,%edx
c0102123:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102126:	c1 e8 18             	shr    $0x18,%eax
c0102129:	83 e0 0f             	and    $0xf,%eax
c010212c:	09 d0                	or     %edx,%eax
c010212e:	83 c8 e0             	or     $0xffffffe0,%eax
c0102131:	0f b6 c0             	movzbl %al,%eax
c0102134:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102138:	83 c2 06             	add    $0x6,%edx
c010213b:	0f b7 d2             	movzwl %dx,%edx
c010213e:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0102142:	88 45 d9             	mov    %al,-0x27(%ebp)
c0102145:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102149:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010214d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c010214e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102152:	83 c0 07             	add    $0x7,%eax
c0102155:	0f b7 c0             	movzwl %ax,%eax
c0102158:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c010215c:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0102160:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102164:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102168:	ee                   	out    %al,(%dx)

    int ret = 0;
c0102169:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102170:	eb 58                	jmp    c01021ca <ide_write_secs+0x230>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0102172:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102176:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010217d:	00 
c010217e:	89 04 24             	mov    %eax,(%esp)
c0102181:	e8 be f7 ff ff       	call   c0101944 <ide_wait_ready>
c0102186:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102189:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010218d:	75 43                	jne    c01021d2 <ide_write_secs+0x238>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c010218f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102193:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0102196:	8b 45 10             	mov    0x10(%ebp),%eax
c0102199:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010219c:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c01021a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01021a6:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01021a9:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01021ac:	89 ce                	mov    %ecx,%esi
c01021ae:	89 d3                	mov    %edx,%ebx
c01021b0:	89 d9                	mov    %ebx,%ecx
c01021b2:	89 c2                	mov    %eax,%edx
c01021b4:	fc                   	cld    
c01021b5:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01021b7:	89 cb                	mov    %ecx,%ebx
c01021b9:	89 75 cc             	mov    %esi,-0x34(%ebp)
c01021bc:	89 5d c8             	mov    %ebx,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01021bf:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01021c3:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c01021ca:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01021ce:	75 a2                	jne    c0102172 <ide_write_secs+0x1d8>
c01021d0:	eb 01                	jmp    c01021d3 <ide_write_secs+0x239>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c01021d2:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01021d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01021d6:	83 c4 50             	add    $0x50,%esp
c01021d9:	5b                   	pop    %ebx
c01021da:	5e                   	pop    %esi
c01021db:	5d                   	pop    %ebp
c01021dc:	c3                   	ret    
c01021dd:	00 00                	add    %al,(%eax)
	...

c01021e0 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01021e0:	55                   	push   %ebp
c01021e1:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01021e3:	fb                   	sti    
    sti();
}
c01021e4:	5d                   	pop    %ebp
c01021e5:	c3                   	ret    

c01021e6 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01021e6:	55                   	push   %ebp
c01021e7:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01021e9:	fa                   	cli    
    cli();
}
c01021ea:	5d                   	pop    %ebp
c01021eb:	c3                   	ret    

c01021ec <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c01021ec:	55                   	push   %ebp
c01021ed:	89 e5                	mov    %esp,%ebp
c01021ef:	83 ec 14             	sub    $0x14,%esp
c01021f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01021f5:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c01021f9:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01021fd:	66 a3 70 05 15 c0    	mov    %ax,0xc0150570
    if (did_init) {
c0102203:	a1 40 16 15 c0       	mov    0xc0151640,%eax
c0102208:	85 c0                	test   %eax,%eax
c010220a:	74 36                	je     c0102242 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c010220c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102210:	0f b6 c0             	movzbl %al,%eax
c0102213:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102219:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010221c:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102220:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102224:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102225:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102229:	66 c1 e8 08          	shr    $0x8,%ax
c010222d:	0f b6 c0             	movzbl %al,%eax
c0102230:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0102236:	88 45 f9             	mov    %al,-0x7(%ebp)
c0102239:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010223d:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102241:	ee                   	out    %al,(%dx)
    }
}
c0102242:	c9                   	leave  
c0102243:	c3                   	ret    

c0102244 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102244:	55                   	push   %ebp
c0102245:	89 e5                	mov    %esp,%ebp
c0102247:	53                   	push   %ebx
c0102248:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c010224b:	8b 45 08             	mov    0x8(%ebp),%eax
c010224e:	ba 01 00 00 00       	mov    $0x1,%edx
c0102253:	89 d3                	mov    %edx,%ebx
c0102255:	89 c1                	mov    %eax,%ecx
c0102257:	d3 e3                	shl    %cl,%ebx
c0102259:	89 d8                	mov    %ebx,%eax
c010225b:	89 c2                	mov    %eax,%edx
c010225d:	f7 d2                	not    %edx
c010225f:	0f b7 05 70 05 15 c0 	movzwl 0xc0150570,%eax
c0102266:	21 d0                	and    %edx,%eax
c0102268:	0f b7 c0             	movzwl %ax,%eax
c010226b:	89 04 24             	mov    %eax,(%esp)
c010226e:	e8 79 ff ff ff       	call   c01021ec <pic_setmask>
}
c0102273:	83 c4 04             	add    $0x4,%esp
c0102276:	5b                   	pop    %ebx
c0102277:	5d                   	pop    %ebp
c0102278:	c3                   	ret    

c0102279 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0102279:	55                   	push   %ebp
c010227a:	89 e5                	mov    %esp,%ebp
c010227c:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c010227f:	c7 05 40 16 15 c0 01 	movl   $0x1,0xc0151640
c0102286:	00 00 00 
c0102289:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010228f:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c0102293:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102297:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010229b:	ee                   	out    %al,(%dx)
c010229c:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01022a2:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01022a6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01022aa:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01022ae:	ee                   	out    %al,(%dx)
c01022af:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01022b5:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01022b9:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01022bd:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01022c1:	ee                   	out    %al,(%dx)
c01022c2:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c01022c8:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c01022cc:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01022d0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01022d4:	ee                   	out    %al,(%dx)
c01022d5:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c01022db:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c01022df:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01022e3:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01022e7:	ee                   	out    %al,(%dx)
c01022e8:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c01022ee:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c01022f2:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01022f6:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01022fa:	ee                   	out    %al,(%dx)
c01022fb:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102301:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102305:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102309:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010230d:	ee                   	out    %al,(%dx)
c010230e:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102314:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102318:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010231c:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102320:	ee                   	out    %al,(%dx)
c0102321:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102327:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c010232b:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010232f:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102333:	ee                   	out    %al,(%dx)
c0102334:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010233a:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c010233e:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102342:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102346:	ee                   	out    %al,(%dx)
c0102347:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c010234d:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0102351:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102355:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102359:	ee                   	out    %al,(%dx)
c010235a:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c0102360:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c0102364:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0102368:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010236c:	ee                   	out    %al,(%dx)
c010236d:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c0102373:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c0102377:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c010237b:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c010237f:	ee                   	out    %al,(%dx)
c0102380:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c0102386:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c010238a:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c010238e:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0102392:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0102393:	0f b7 05 70 05 15 c0 	movzwl 0xc0150570,%eax
c010239a:	66 83 f8 ff          	cmp    $0xffff,%ax
c010239e:	74 12                	je     c01023b2 <pic_init+0x139>
        pic_setmask(irq_mask);
c01023a0:	0f b7 05 70 05 15 c0 	movzwl 0xc0150570,%eax
c01023a7:	0f b7 c0             	movzwl %ax,%eax
c01023aa:	89 04 24             	mov    %eax,(%esp)
c01023ad:	e8 3a fe ff ff       	call   c01021ec <pic_setmask>
    }
}
c01023b2:	c9                   	leave  
c01023b3:	c3                   	ret    

c01023b4 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01023b4:	55                   	push   %ebp
c01023b5:	89 e5                	mov    %esp,%ebp
c01023b7:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01023ba:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01023c1:	00 
c01023c2:	c7 04 24 80 5d 11 c0 	movl   $0xc0115d80,(%esp)
c01023c9:	e8 a2 df ff ff       	call   c0100370 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c01023ce:	c7 04 24 8a 5d 11 c0 	movl   $0xc0115d8a,(%esp)
c01023d5:	e8 96 df ff ff       	call   c0100370 <cprintf>
    panic("EOT: kernel seems ok.");
c01023da:	c7 44 24 08 98 5d 11 	movl   $0xc0115d98,0x8(%esp)
c01023e1:	c0 
c01023e2:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c01023e9:	00 
c01023ea:	c7 04 24 ae 5d 11 c0 	movl   $0xc0115dae,(%esp)
c01023f1:	e8 b6 ea ff ff       	call   c0100eac <__panic>

c01023f6 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01023f6:	55                   	push   %ebp
c01023f7:	89 e5                	mov    %esp,%ebp
c01023f9:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 2011010312 */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
	extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c01023fc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102403:	e9 c3 00 00 00       	jmp    c01024cb <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102408:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010240b:	8b 04 85 00 06 15 c0 	mov    -0x3feafa00(,%eax,4),%eax
c0102412:	89 c2                	mov    %eax,%edx
c0102414:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102417:	66 89 14 c5 60 16 15 	mov    %dx,-0x3feae9a0(,%eax,8)
c010241e:	c0 
c010241f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102422:	66 c7 04 c5 62 16 15 	movw   $0x8,-0x3feae99e(,%eax,8)
c0102429:	c0 08 00 
c010242c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010242f:	0f b6 14 c5 64 16 15 	movzbl -0x3feae99c(,%eax,8),%edx
c0102436:	c0 
c0102437:	83 e2 e0             	and    $0xffffffe0,%edx
c010243a:	88 14 c5 64 16 15 c0 	mov    %dl,-0x3feae99c(,%eax,8)
c0102441:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102444:	0f b6 14 c5 64 16 15 	movzbl -0x3feae99c(,%eax,8),%edx
c010244b:	c0 
c010244c:	83 e2 1f             	and    $0x1f,%edx
c010244f:	88 14 c5 64 16 15 c0 	mov    %dl,-0x3feae99c(,%eax,8)
c0102456:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102459:	0f b6 14 c5 65 16 15 	movzbl -0x3feae99b(,%eax,8),%edx
c0102460:	c0 
c0102461:	83 e2 f0             	and    $0xfffffff0,%edx
c0102464:	83 ca 0e             	or     $0xe,%edx
c0102467:	88 14 c5 65 16 15 c0 	mov    %dl,-0x3feae99b(,%eax,8)
c010246e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102471:	0f b6 14 c5 65 16 15 	movzbl -0x3feae99b(,%eax,8),%edx
c0102478:	c0 
c0102479:	83 e2 ef             	and    $0xffffffef,%edx
c010247c:	88 14 c5 65 16 15 c0 	mov    %dl,-0x3feae99b(,%eax,8)
c0102483:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102486:	0f b6 14 c5 65 16 15 	movzbl -0x3feae99b(,%eax,8),%edx
c010248d:	c0 
c010248e:	83 e2 9f             	and    $0xffffff9f,%edx
c0102491:	88 14 c5 65 16 15 c0 	mov    %dl,-0x3feae99b(,%eax,8)
c0102498:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010249b:	0f b6 14 c5 65 16 15 	movzbl -0x3feae99b(,%eax,8),%edx
c01024a2:	c0 
c01024a3:	83 ca 80             	or     $0xffffff80,%edx
c01024a6:	88 14 c5 65 16 15 c0 	mov    %dl,-0x3feae99b(,%eax,8)
c01024ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01024b0:	8b 04 85 00 06 15 c0 	mov    -0x3feafa00(,%eax,4),%eax
c01024b7:	c1 e8 10             	shr    $0x10,%eax
c01024ba:	89 c2                	mov    %eax,%edx
c01024bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01024bf:	66 89 14 c5 66 16 15 	mov    %dx,-0x3feae99a(,%eax,8)
c01024c6:	c0 
     /* LAB5 2011010312 */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
	extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c01024c7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01024cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01024ce:	3d ff 00 00 00       	cmp    $0xff,%eax
c01024d3:	0f 86 2f ff ff ff    	jbe    c0102408 <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c01024d9:	a1 00 08 15 c0       	mov    0xc0150800,%eax
c01024de:	66 a3 60 1a 15 c0    	mov    %ax,0xc0151a60
c01024e4:	66 c7 05 62 1a 15 c0 	movw   $0x8,0xc0151a62
c01024eb:	08 00 
c01024ed:	0f b6 05 64 1a 15 c0 	movzbl 0xc0151a64,%eax
c01024f4:	83 e0 e0             	and    $0xffffffe0,%eax
c01024f7:	a2 64 1a 15 c0       	mov    %al,0xc0151a64
c01024fc:	0f b6 05 64 1a 15 c0 	movzbl 0xc0151a64,%eax
c0102503:	83 e0 1f             	and    $0x1f,%eax
c0102506:	a2 64 1a 15 c0       	mov    %al,0xc0151a64
c010250b:	0f b6 05 65 1a 15 c0 	movzbl 0xc0151a65,%eax
c0102512:	83 c8 0f             	or     $0xf,%eax
c0102515:	a2 65 1a 15 c0       	mov    %al,0xc0151a65
c010251a:	0f b6 05 65 1a 15 c0 	movzbl 0xc0151a65,%eax
c0102521:	83 e0 ef             	and    $0xffffffef,%eax
c0102524:	a2 65 1a 15 c0       	mov    %al,0xc0151a65
c0102529:	0f b6 05 65 1a 15 c0 	movzbl 0xc0151a65,%eax
c0102530:	83 c8 60             	or     $0x60,%eax
c0102533:	a2 65 1a 15 c0       	mov    %al,0xc0151a65
c0102538:	0f b6 05 65 1a 15 c0 	movzbl 0xc0151a65,%eax
c010253f:	83 c8 80             	or     $0xffffff80,%eax
c0102542:	a2 65 1a 15 c0       	mov    %al,0xc0151a65
c0102547:	a1 00 08 15 c0       	mov    0xc0150800,%eax
c010254c:	c1 e8 10             	shr    $0x10,%eax
c010254f:	66 a3 66 1a 15 c0    	mov    %ax,0xc0151a66
c0102555:	c7 45 f8 80 05 15 c0 	movl   $0xc0150580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010255c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010255f:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c0102562:	c9                   	leave  
c0102563:	c3                   	ret    

c0102564 <trapname>:

static const char *
trapname(int trapno) {
c0102564:	55                   	push   %ebp
c0102565:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c0102567:	8b 45 08             	mov    0x8(%ebp),%eax
c010256a:	83 f8 13             	cmp    $0x13,%eax
c010256d:	77 0c                	ja     c010257b <trapname+0x17>
        return excnames[trapno];
c010256f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102572:	8b 04 85 00 62 11 c0 	mov    -0x3fee9e00(,%eax,4),%eax
c0102579:	eb 18                	jmp    c0102593 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c010257b:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c010257f:	7e 0d                	jle    c010258e <trapname+0x2a>
c0102581:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102585:	7f 07                	jg     c010258e <trapname+0x2a>
        return "Hardware Interrupt";
c0102587:	b8 bf 5d 11 c0       	mov    $0xc0115dbf,%eax
c010258c:	eb 05                	jmp    c0102593 <trapname+0x2f>
    }
    return "(unknown trap)";
c010258e:	b8 d2 5d 11 c0       	mov    $0xc0115dd2,%eax
}
c0102593:	5d                   	pop    %ebp
c0102594:	c3                   	ret    

c0102595 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102595:	55                   	push   %ebp
c0102596:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0102598:	8b 45 08             	mov    0x8(%ebp),%eax
c010259b:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010259f:	66 83 f8 08          	cmp    $0x8,%ax
c01025a3:	0f 94 c0             	sete   %al
c01025a6:	0f b6 c0             	movzbl %al,%eax
}
c01025a9:	5d                   	pop    %ebp
c01025aa:	c3                   	ret    

c01025ab <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01025ab:	55                   	push   %ebp
c01025ac:	89 e5                	mov    %esp,%ebp
c01025ae:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01025b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01025b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025b8:	c7 04 24 13 5e 11 c0 	movl   $0xc0115e13,(%esp)
c01025bf:	e8 ac dd ff ff       	call   c0100370 <cprintf>
    print_regs(&tf->tf_regs);
c01025c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01025c7:	89 04 24             	mov    %eax,(%esp)
c01025ca:	e8 a1 01 00 00       	call   c0102770 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01025cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d2:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01025d6:	0f b7 c0             	movzwl %ax,%eax
c01025d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025dd:	c7 04 24 24 5e 11 c0 	movl   $0xc0115e24,(%esp)
c01025e4:	e8 87 dd ff ff       	call   c0100370 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01025e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ec:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01025f0:	0f b7 c0             	movzwl %ax,%eax
c01025f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025f7:	c7 04 24 37 5e 11 c0 	movl   $0xc0115e37,(%esp)
c01025fe:	e8 6d dd ff ff       	call   c0100370 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102603:	8b 45 08             	mov    0x8(%ebp),%eax
c0102606:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c010260a:	0f b7 c0             	movzwl %ax,%eax
c010260d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102611:	c7 04 24 4a 5e 11 c0 	movl   $0xc0115e4a,(%esp)
c0102618:	e8 53 dd ff ff       	call   c0100370 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c010261d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102620:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102624:	0f b7 c0             	movzwl %ax,%eax
c0102627:	89 44 24 04          	mov    %eax,0x4(%esp)
c010262b:	c7 04 24 5d 5e 11 c0 	movl   $0xc0115e5d,(%esp)
c0102632:	e8 39 dd ff ff       	call   c0100370 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102637:	8b 45 08             	mov    0x8(%ebp),%eax
c010263a:	8b 40 30             	mov    0x30(%eax),%eax
c010263d:	89 04 24             	mov    %eax,(%esp)
c0102640:	e8 1f ff ff ff       	call   c0102564 <trapname>
c0102645:	8b 55 08             	mov    0x8(%ebp),%edx
c0102648:	8b 52 30             	mov    0x30(%edx),%edx
c010264b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010264f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102653:	c7 04 24 70 5e 11 c0 	movl   $0xc0115e70,(%esp)
c010265a:	e8 11 dd ff ff       	call   c0100370 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c010265f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102662:	8b 40 34             	mov    0x34(%eax),%eax
c0102665:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102669:	c7 04 24 82 5e 11 c0 	movl   $0xc0115e82,(%esp)
c0102670:	e8 fb dc ff ff       	call   c0100370 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102675:	8b 45 08             	mov    0x8(%ebp),%eax
c0102678:	8b 40 38             	mov    0x38(%eax),%eax
c010267b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010267f:	c7 04 24 91 5e 11 c0 	movl   $0xc0115e91,(%esp)
c0102686:	e8 e5 dc ff ff       	call   c0100370 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c010268b:	8b 45 08             	mov    0x8(%ebp),%eax
c010268e:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102692:	0f b7 c0             	movzwl %ax,%eax
c0102695:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102699:	c7 04 24 a0 5e 11 c0 	movl   $0xc0115ea0,(%esp)
c01026a0:	e8 cb dc ff ff       	call   c0100370 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01026a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a8:	8b 40 40             	mov    0x40(%eax),%eax
c01026ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026af:	c7 04 24 b3 5e 11 c0 	movl   $0xc0115eb3,(%esp)
c01026b6:	e8 b5 dc ff ff       	call   c0100370 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01026bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01026c2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01026c9:	eb 3e                	jmp    c0102709 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01026cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01026ce:	8b 50 40             	mov    0x40(%eax),%edx
c01026d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01026d4:	21 d0                	and    %edx,%eax
c01026d6:	85 c0                	test   %eax,%eax
c01026d8:	74 28                	je     c0102702 <print_trapframe+0x157>
c01026da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026dd:	8b 04 85 a0 05 15 c0 	mov    -0x3feafa60(,%eax,4),%eax
c01026e4:	85 c0                	test   %eax,%eax
c01026e6:	74 1a                	je     c0102702 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01026e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026eb:	8b 04 85 a0 05 15 c0 	mov    -0x3feafa60(,%eax,4),%eax
c01026f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026f6:	c7 04 24 c2 5e 11 c0 	movl   $0xc0115ec2,(%esp)
c01026fd:	e8 6e dc ff ff       	call   c0100370 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102702:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102706:	d1 65 f0             	shll   -0x10(%ebp)
c0102709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010270c:	83 f8 17             	cmp    $0x17,%eax
c010270f:	76 ba                	jbe    c01026cb <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102711:	8b 45 08             	mov    0x8(%ebp),%eax
c0102714:	8b 40 40             	mov    0x40(%eax),%eax
c0102717:	25 00 30 00 00       	and    $0x3000,%eax
c010271c:	c1 e8 0c             	shr    $0xc,%eax
c010271f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102723:	c7 04 24 c6 5e 11 c0 	movl   $0xc0115ec6,(%esp)
c010272a:	e8 41 dc ff ff       	call   c0100370 <cprintf>

    if (!trap_in_kernel(tf)) {
c010272f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102732:	89 04 24             	mov    %eax,(%esp)
c0102735:	e8 5b fe ff ff       	call   c0102595 <trap_in_kernel>
c010273a:	85 c0                	test   %eax,%eax
c010273c:	75 30                	jne    c010276e <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c010273e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102741:	8b 40 44             	mov    0x44(%eax),%eax
c0102744:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102748:	c7 04 24 cf 5e 11 c0 	movl   $0xc0115ecf,(%esp)
c010274f:	e8 1c dc ff ff       	call   c0100370 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102754:	8b 45 08             	mov    0x8(%ebp),%eax
c0102757:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c010275b:	0f b7 c0             	movzwl %ax,%eax
c010275e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102762:	c7 04 24 de 5e 11 c0 	movl   $0xc0115ede,(%esp)
c0102769:	e8 02 dc ff ff       	call   c0100370 <cprintf>
    }
}
c010276e:	c9                   	leave  
c010276f:	c3                   	ret    

c0102770 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102770:	55                   	push   %ebp
c0102771:	89 e5                	mov    %esp,%ebp
c0102773:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102776:	8b 45 08             	mov    0x8(%ebp),%eax
c0102779:	8b 00                	mov    (%eax),%eax
c010277b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010277f:	c7 04 24 f1 5e 11 c0 	movl   $0xc0115ef1,(%esp)
c0102786:	e8 e5 db ff ff       	call   c0100370 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c010278b:	8b 45 08             	mov    0x8(%ebp),%eax
c010278e:	8b 40 04             	mov    0x4(%eax),%eax
c0102791:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102795:	c7 04 24 00 5f 11 c0 	movl   $0xc0115f00,(%esp)
c010279c:	e8 cf db ff ff       	call   c0100370 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01027a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01027a4:	8b 40 08             	mov    0x8(%eax),%eax
c01027a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027ab:	c7 04 24 0f 5f 11 c0 	movl   $0xc0115f0f,(%esp)
c01027b2:	e8 b9 db ff ff       	call   c0100370 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01027b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01027ba:	8b 40 0c             	mov    0xc(%eax),%eax
c01027bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027c1:	c7 04 24 1e 5f 11 c0 	movl   $0xc0115f1e,(%esp)
c01027c8:	e8 a3 db ff ff       	call   c0100370 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01027cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01027d0:	8b 40 10             	mov    0x10(%eax),%eax
c01027d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027d7:	c7 04 24 2d 5f 11 c0 	movl   $0xc0115f2d,(%esp)
c01027de:	e8 8d db ff ff       	call   c0100370 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01027e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01027e6:	8b 40 14             	mov    0x14(%eax),%eax
c01027e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027ed:	c7 04 24 3c 5f 11 c0 	movl   $0xc0115f3c,(%esp)
c01027f4:	e8 77 db ff ff       	call   c0100370 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c01027f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01027fc:	8b 40 18             	mov    0x18(%eax),%eax
c01027ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102803:	c7 04 24 4b 5f 11 c0 	movl   $0xc0115f4b,(%esp)
c010280a:	e8 61 db ff ff       	call   c0100370 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c010280f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102812:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102815:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102819:	c7 04 24 5a 5f 11 c0 	movl   $0xc0115f5a,(%esp)
c0102820:	e8 4b db ff ff       	call   c0100370 <cprintf>
}
c0102825:	c9                   	leave  
c0102826:	c3                   	ret    

c0102827 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102827:	55                   	push   %ebp
c0102828:	89 e5                	mov    %esp,%ebp
c010282a:	53                   	push   %ebx
c010282b:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c010282e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102831:	8b 40 34             	mov    0x34(%eax),%eax
c0102834:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102837:	84 c0                	test   %al,%al
c0102839:	74 07                	je     c0102842 <print_pgfault+0x1b>
c010283b:	b9 69 5f 11 c0       	mov    $0xc0115f69,%ecx
c0102840:	eb 05                	jmp    c0102847 <print_pgfault+0x20>
c0102842:	b9 7a 5f 11 c0       	mov    $0xc0115f7a,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0102847:	8b 45 08             	mov    0x8(%ebp),%eax
c010284a:	8b 40 34             	mov    0x34(%eax),%eax
c010284d:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102850:	85 c0                	test   %eax,%eax
c0102852:	74 07                	je     c010285b <print_pgfault+0x34>
c0102854:	ba 57 00 00 00       	mov    $0x57,%edx
c0102859:	eb 05                	jmp    c0102860 <print_pgfault+0x39>
c010285b:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102860:	8b 45 08             	mov    0x8(%ebp),%eax
c0102863:	8b 40 34             	mov    0x34(%eax),%eax
c0102866:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102869:	85 c0                	test   %eax,%eax
c010286b:	74 07                	je     c0102874 <print_pgfault+0x4d>
c010286d:	b8 55 00 00 00       	mov    $0x55,%eax
c0102872:	eb 05                	jmp    c0102879 <print_pgfault+0x52>
c0102874:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102879:	0f 20 d3             	mov    %cr2,%ebx
c010287c:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c010287f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0102882:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0102886:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010288a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010288e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0102892:	c7 04 24 88 5f 11 c0 	movl   $0xc0115f88,(%esp)
c0102899:	e8 d2 da ff ff       	call   c0100370 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c010289e:	83 c4 34             	add    $0x34,%esp
c01028a1:	5b                   	pop    %ebx
c01028a2:	5d                   	pop    %ebp
c01028a3:	c3                   	ret    

c01028a4 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01028a4:	55                   	push   %ebp
c01028a5:	89 e5                	mov    %esp,%ebp
c01028a7:	53                   	push   %ebx
c01028a8:	83 ec 24             	sub    $0x24,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01028ab:	a1 0c 51 15 c0       	mov    0xc015510c,%eax
c01028b0:	85 c0                	test   %eax,%eax
c01028b2:	74 0b                	je     c01028bf <pgfault_handler+0x1b>
            print_pgfault(tf);
c01028b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01028b7:	89 04 24             	mov    %eax,(%esp)
c01028ba:	e8 68 ff ff ff       	call   c0102827 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01028bf:	a1 0c 51 15 c0       	mov    0xc015510c,%eax
c01028c4:	85 c0                	test   %eax,%eax
c01028c6:	74 3d                	je     c0102905 <pgfault_handler+0x61>
        assert(current == idleproc);
c01028c8:	8b 15 28 1f 15 c0    	mov    0xc0151f28,%edx
c01028ce:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c01028d3:	39 c2                	cmp    %eax,%edx
c01028d5:	74 24                	je     c01028fb <pgfault_handler+0x57>
c01028d7:	c7 44 24 0c ab 5f 11 	movl   $0xc0115fab,0xc(%esp)
c01028de:	c0 
c01028df:	c7 44 24 08 bf 5f 11 	movl   $0xc0115fbf,0x8(%esp)
c01028e6:	c0 
c01028e7:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c01028ee:	00 
c01028ef:	c7 04 24 ae 5d 11 c0 	movl   $0xc0115dae,(%esp)
c01028f6:	e8 b1 e5 ff ff       	call   c0100eac <__panic>
        mm = check_mm_struct;
c01028fb:	a1 0c 51 15 c0       	mov    0xc015510c,%eax
c0102900:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102903:	eb 46                	jmp    c010294b <pgfault_handler+0xa7>
    }
    else {
        if (current == NULL) {
c0102905:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010290a:	85 c0                	test   %eax,%eax
c010290c:	75 32                	jne    c0102940 <pgfault_handler+0x9c>
            print_trapframe(tf);
c010290e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102911:	89 04 24             	mov    %eax,(%esp)
c0102914:	e8 92 fc ff ff       	call   c01025ab <print_trapframe>
            print_pgfault(tf);
c0102919:	8b 45 08             	mov    0x8(%ebp),%eax
c010291c:	89 04 24             	mov    %eax,(%esp)
c010291f:	e8 03 ff ff ff       	call   c0102827 <print_pgfault>
            panic("unhandled page fault.\n");
c0102924:	c7 44 24 08 d4 5f 11 	movl   $0xc0115fd4,0x8(%esp)
c010292b:	c0 
c010292c:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0102933:	00 
c0102934:	c7 04 24 ae 5d 11 c0 	movl   $0xc0115dae,(%esp)
c010293b:	e8 6c e5 ff ff       	call   c0100eac <__panic>
        }
        mm = current->mm;
c0102940:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c0102945:	8b 40 18             	mov    0x18(%eax),%eax
c0102948:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c010294b:	0f 20 d3             	mov    %cr2,%ebx
c010294e:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr2;
c0102951:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102954:	89 c2                	mov    %eax,%edx
c0102956:	8b 45 08             	mov    0x8(%ebp),%eax
c0102959:	8b 40 34             	mov    0x34(%eax),%eax
c010295c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102960:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102964:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102967:	89 04 24             	mov    %eax,(%esp)
c010296a:	e8 2e 66 00 00       	call   c0108f9d <do_pgfault>
}
c010296f:	83 c4 24             	add    $0x24,%esp
c0102972:	5b                   	pop    %ebx
c0102973:	5d                   	pop    %ebp
c0102974:	c3                   	ret    

c0102975 <trap_dispatch>:
static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;
extern void sched_class_proc_tick(struct proc_struct *);

static void
trap_dispatch(struct trapframe *tf) {
c0102975:	55                   	push   %ebp
c0102976:	89 e5                	mov    %esp,%ebp
c0102978:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c010297b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0102982:	8b 45 08             	mov    0x8(%ebp),%eax
c0102985:	8b 40 30             	mov    0x30(%eax),%eax
c0102988:	83 f8 2f             	cmp    $0x2f,%eax
c010298b:	77 38                	ja     c01029c5 <trap_dispatch+0x50>
c010298d:	83 f8 2e             	cmp    $0x2e,%eax
c0102990:	0f 83 a6 01 00 00    	jae    c0102b3c <trap_dispatch+0x1c7>
c0102996:	83 f8 20             	cmp    $0x20,%eax
c0102999:	0f 84 02 01 00 00    	je     c0102aa1 <trap_dispatch+0x12c>
c010299f:	83 f8 20             	cmp    $0x20,%eax
c01029a2:	77 0a                	ja     c01029ae <trap_dispatch+0x39>
c01029a4:	83 f8 0e             	cmp    $0xe,%eax
c01029a7:	74 3e                	je     c01029e7 <trap_dispatch+0x72>
c01029a9:	e9 46 01 00 00       	jmp    c0102af4 <trap_dispatch+0x17f>
c01029ae:	83 f8 21             	cmp    $0x21,%eax
c01029b1:	0f 84 0b 01 00 00    	je     c0102ac2 <trap_dispatch+0x14d>
c01029b7:	83 f8 24             	cmp    $0x24,%eax
c01029ba:	0f 84 02 01 00 00    	je     c0102ac2 <trap_dispatch+0x14d>
c01029c0:	e9 2f 01 00 00       	jmp    c0102af4 <trap_dispatch+0x17f>
c01029c5:	83 f8 78             	cmp    $0x78,%eax
c01029c8:	0f 82 26 01 00 00    	jb     c0102af4 <trap_dispatch+0x17f>
c01029ce:	83 f8 79             	cmp    $0x79,%eax
c01029d1:	0f 86 01 01 00 00    	jbe    c0102ad8 <trap_dispatch+0x163>
c01029d7:	3d 80 00 00 00       	cmp    $0x80,%eax
c01029dc:	0f 84 b5 00 00 00    	je     c0102a97 <trap_dispatch+0x122>
c01029e2:	e9 0d 01 00 00       	jmp    c0102af4 <trap_dispatch+0x17f>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01029e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01029ea:	89 04 24             	mov    %eax,(%esp)
c01029ed:	e8 b2 fe ff ff       	call   c01028a4 <pgfault_handler>
c01029f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01029f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01029f9:	0f 84 40 01 00 00    	je     c0102b3f <trap_dispatch+0x1ca>
            print_trapframe(tf);
c01029ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a02:	89 04 24             	mov    %eax,(%esp)
c0102a05:	e8 a1 fb ff ff       	call   c01025ab <print_trapframe>
            if (current == NULL) {
c0102a0a:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c0102a0f:	85 c0                	test   %eax,%eax
c0102a11:	75 23                	jne    c0102a36 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102a13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102a16:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102a1a:	c7 44 24 08 ec 5f 11 	movl   $0xc0115fec,0x8(%esp)
c0102a21:	c0 
c0102a22:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0102a29:	00 
c0102a2a:	c7 04 24 ae 5d 11 c0 	movl   $0xc0115dae,(%esp)
c0102a31:	e8 76 e4 ff ff       	call   c0100eac <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102a36:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a39:	89 04 24             	mov    %eax,(%esp)
c0102a3c:	e8 54 fb ff ff       	call   c0102595 <trap_in_kernel>
c0102a41:	85 c0                	test   %eax,%eax
c0102a43:	74 23                	je     c0102a68 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102a45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102a48:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102a4c:	c7 44 24 08 0c 60 11 	movl   $0xc011600c,0x8(%esp)
c0102a53:	c0 
c0102a54:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0102a5b:	00 
c0102a5c:	c7 04 24 ae 5d 11 c0 	movl   $0xc0115dae,(%esp)
c0102a63:	e8 44 e4 ff ff       	call   c0100eac <__panic>
                }
                cprintf("killed by kernel.\n");
c0102a68:	c7 04 24 3a 60 11 c0 	movl   $0xc011603a,(%esp)
c0102a6f:	e8 fc d8 ff ff       	call   c0100370 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0102a74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102a77:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102a7b:	c7 44 24 08 50 60 11 	movl   $0xc0116050,0x8(%esp)
c0102a82:	c0 
c0102a83:	c7 44 24 04 d4 00 00 	movl   $0xd4,0x4(%esp)
c0102a8a:	00 
c0102a8b:	c7 04 24 ae 5d 11 c0 	movl   $0xc0115dae,(%esp)
c0102a92:	e8 15 e4 ff ff       	call   c0100eac <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c0102a97:	e8 75 c4 00 00       	call   c010ef11 <syscall>
        break;
c0102a9c:	e9 9f 00 00 00       	jmp    c0102b40 <trap_dispatch+0x1cb>
        /* LAB7 2011010312 */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
		ticks++;
c0102aa1:	a1 10 50 15 c0       	mov    0xc0155010,%eax
c0102aa6:	83 c0 01             	add    $0x1,%eax
c0102aa9:	a3 10 50 15 c0       	mov    %eax,0xc0155010
		run_timer_list();
c0102aae:	e8 e5 bf 00 00       	call   c010ea98 <run_timer_list>
		sched_class_proc_tick(current);
c0102ab3:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c0102ab8:	89 04 24             	mov    %eax,(%esp)
c0102abb:	e8 0c bc 00 00       	call   c010e6cc <sched_class_proc_tick>
        break;
c0102ac0:	eb 7e                	jmp    c0102b40 <trap_dispatch+0x1cb>
    case IRQ_OFFSET + IRQ_COM1:
    case IRQ_OFFSET + IRQ_KBD:
        // There are user level shell in LAB8, so we need change COM/KBD interrupt processing.
        c = cons_getc();
c0102ac2:	e8 0d ee ff ff       	call   c01018d4 <cons_getc>
c0102ac7:	88 45 f3             	mov    %al,-0xd(%ebp)
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102aca:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102ace:	89 04 24             	mov    %eax,(%esp)
c0102ad1:	e8 48 e7 00 00       	call   c011121e <dev_stdin_write>
        }
        break;
c0102ad6:	eb 68                	jmp    c0102b40 <trap_dispatch+0x1cb>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102ad8:	c7 44 24 08 79 60 11 	movl   $0xc0116079,0x8(%esp)
c0102adf:	c0 
c0102ae0:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0102ae7:	00 
c0102ae8:	c7 04 24 ae 5d 11 c0 	movl   $0xc0115dae,(%esp)
c0102aef:	e8 b8 e3 ff ff       	call   c0100eac <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102af4:	8b 45 08             	mov    0x8(%ebp),%eax
c0102af7:	89 04 24             	mov    %eax,(%esp)
c0102afa:	e8 ac fa ff ff       	call   c01025ab <print_trapframe>
        if (current != NULL) {
c0102aff:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c0102b04:	85 c0                	test   %eax,%eax
c0102b06:	74 18                	je     c0102b20 <trap_dispatch+0x1ab>
            cprintf("unhandled trap.\n");
c0102b08:	c7 04 24 89 60 11 c0 	movl   $0xc0116089,(%esp)
c0102b0f:	e8 5c d8 ff ff       	call   c0100370 <cprintf>
            do_exit(-E_KILLED);
c0102b14:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102b1b:	e8 82 a0 00 00       	call   c010cba2 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102b20:	c7 44 24 08 9a 60 11 	movl   $0xc011609a,0x8(%esp)
c0102b27:	c0 
c0102b28:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0102b2f:	00 
c0102b30:	c7 04 24 ae 5d 11 c0 	movl   $0xc0115dae,(%esp)
c0102b37:	e8 70 e3 ff ff       	call   c0100eac <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102b3c:	90                   	nop
c0102b3d:	eb 01                	jmp    c0102b40 <trap_dispatch+0x1cb>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102b3f:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102b40:	c9                   	leave  
c0102b41:	c3                   	ret    

c0102b42 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102b42:	55                   	push   %ebp
c0102b43:	89 e5                	mov    %esp,%ebp
c0102b45:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102b48:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c0102b4d:	85 c0                	test   %eax,%eax
c0102b4f:	75 0d                	jne    c0102b5e <trap+0x1c>
        trap_dispatch(tf);
c0102b51:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b54:	89 04 24             	mov    %eax,(%esp)
c0102b57:	e8 19 fe ff ff       	call   c0102975 <trap_dispatch>
c0102b5c:	eb 6c                	jmp    c0102bca <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102b5e:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c0102b63:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102b66:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102b69:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c0102b6e:	8b 55 08             	mov    0x8(%ebp),%edx
c0102b71:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102b74:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b77:	89 04 24             	mov    %eax,(%esp)
c0102b7a:	e8 16 fa ff ff       	call   c0102595 <trap_in_kernel>
c0102b7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102b82:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b85:	89 04 24             	mov    %eax,(%esp)
c0102b88:	e8 e8 fd ff ff       	call   c0102975 <trap_dispatch>
    
        current->tf = otf;
c0102b8d:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c0102b92:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102b95:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102b98:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102b9c:	75 2c                	jne    c0102bca <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102b9e:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c0102ba3:	8b 40 44             	mov    0x44(%eax),%eax
c0102ba6:	83 e0 01             	and    $0x1,%eax
c0102ba9:	84 c0                	test   %al,%al
c0102bab:	74 0c                	je     c0102bb9 <trap+0x77>
                do_exit(-E_KILLED);
c0102bad:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102bb4:	e8 e9 9f 00 00       	call   c010cba2 <do_exit>
            }
            if (current->need_resched) {
c0102bb9:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c0102bbe:	8b 40 10             	mov    0x10(%eax),%eax
c0102bc1:	85 c0                	test   %eax,%eax
c0102bc3:	74 05                	je     c0102bca <trap+0x88>
                schedule();
c0102bc5:	e8 41 bc 00 00       	call   c010e80b <schedule>
            }
        }
    }
}
c0102bca:	c9                   	leave  
c0102bcb:	c3                   	ret    

c0102bcc <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102bcc:	1e                   	push   %ds
    pushl %es
c0102bcd:	06                   	push   %es
    pushl %fs
c0102bce:	0f a0                	push   %fs
    pushl %gs
c0102bd0:	0f a8                	push   %gs
    pushal
c0102bd2:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102bd3:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102bd8:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102bda:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102bdc:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102bdd:	e8 60 ff ff ff       	call   c0102b42 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102be2:	5c                   	pop    %esp

c0102be3 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102be3:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102be4:	0f a9                	pop    %gs
    popl %fs
c0102be6:	0f a1                	pop    %fs
    popl %es
c0102be8:	07                   	pop    %es
    popl %ds
c0102be9:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102bea:	83 c4 08             	add    $0x8,%esp
    iret
c0102bed:	cf                   	iret   

c0102bee <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102bee:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102bf2:	e9 ec ff ff ff       	jmp    c0102be3 <__trapret>
	...

c0102bf8 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102bf8:	6a 00                	push   $0x0
  pushl $0
c0102bfa:	6a 00                	push   $0x0
  jmp __alltraps
c0102bfc:	e9 cb ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c01 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102c01:	6a 00                	push   $0x0
  pushl $1
c0102c03:	6a 01                	push   $0x1
  jmp __alltraps
c0102c05:	e9 c2 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c0a <vector2>:
.globl vector2
vector2:
  pushl $0
c0102c0a:	6a 00                	push   $0x0
  pushl $2
c0102c0c:	6a 02                	push   $0x2
  jmp __alltraps
c0102c0e:	e9 b9 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c13 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102c13:	6a 00                	push   $0x0
  pushl $3
c0102c15:	6a 03                	push   $0x3
  jmp __alltraps
c0102c17:	e9 b0 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c1c <vector4>:
.globl vector4
vector4:
  pushl $0
c0102c1c:	6a 00                	push   $0x0
  pushl $4
c0102c1e:	6a 04                	push   $0x4
  jmp __alltraps
c0102c20:	e9 a7 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c25 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102c25:	6a 00                	push   $0x0
  pushl $5
c0102c27:	6a 05                	push   $0x5
  jmp __alltraps
c0102c29:	e9 9e ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c2e <vector6>:
.globl vector6
vector6:
  pushl $0
c0102c2e:	6a 00                	push   $0x0
  pushl $6
c0102c30:	6a 06                	push   $0x6
  jmp __alltraps
c0102c32:	e9 95 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c37 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102c37:	6a 00                	push   $0x0
  pushl $7
c0102c39:	6a 07                	push   $0x7
  jmp __alltraps
c0102c3b:	e9 8c ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c40 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102c40:	6a 08                	push   $0x8
  jmp __alltraps
c0102c42:	e9 85 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c47 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102c47:	6a 09                	push   $0x9
  jmp __alltraps
c0102c49:	e9 7e ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c4e <vector10>:
.globl vector10
vector10:
  pushl $10
c0102c4e:	6a 0a                	push   $0xa
  jmp __alltraps
c0102c50:	e9 77 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c55 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102c55:	6a 0b                	push   $0xb
  jmp __alltraps
c0102c57:	e9 70 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c5c <vector12>:
.globl vector12
vector12:
  pushl $12
c0102c5c:	6a 0c                	push   $0xc
  jmp __alltraps
c0102c5e:	e9 69 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c63 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102c63:	6a 0d                	push   $0xd
  jmp __alltraps
c0102c65:	e9 62 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c6a <vector14>:
.globl vector14
vector14:
  pushl $14
c0102c6a:	6a 0e                	push   $0xe
  jmp __alltraps
c0102c6c:	e9 5b ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c71 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102c71:	6a 00                	push   $0x0
  pushl $15
c0102c73:	6a 0f                	push   $0xf
  jmp __alltraps
c0102c75:	e9 52 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c7a <vector16>:
.globl vector16
vector16:
  pushl $0
c0102c7a:	6a 00                	push   $0x0
  pushl $16
c0102c7c:	6a 10                	push   $0x10
  jmp __alltraps
c0102c7e:	e9 49 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c83 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102c83:	6a 11                	push   $0x11
  jmp __alltraps
c0102c85:	e9 42 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c8a <vector18>:
.globl vector18
vector18:
  pushl $0
c0102c8a:	6a 00                	push   $0x0
  pushl $18
c0102c8c:	6a 12                	push   $0x12
  jmp __alltraps
c0102c8e:	e9 39 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c93 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102c93:	6a 00                	push   $0x0
  pushl $19
c0102c95:	6a 13                	push   $0x13
  jmp __alltraps
c0102c97:	e9 30 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102c9c <vector20>:
.globl vector20
vector20:
  pushl $0
c0102c9c:	6a 00                	push   $0x0
  pushl $20
c0102c9e:	6a 14                	push   $0x14
  jmp __alltraps
c0102ca0:	e9 27 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102ca5 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102ca5:	6a 00                	push   $0x0
  pushl $21
c0102ca7:	6a 15                	push   $0x15
  jmp __alltraps
c0102ca9:	e9 1e ff ff ff       	jmp    c0102bcc <__alltraps>

c0102cae <vector22>:
.globl vector22
vector22:
  pushl $0
c0102cae:	6a 00                	push   $0x0
  pushl $22
c0102cb0:	6a 16                	push   $0x16
  jmp __alltraps
c0102cb2:	e9 15 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102cb7 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102cb7:	6a 00                	push   $0x0
  pushl $23
c0102cb9:	6a 17                	push   $0x17
  jmp __alltraps
c0102cbb:	e9 0c ff ff ff       	jmp    c0102bcc <__alltraps>

c0102cc0 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102cc0:	6a 00                	push   $0x0
  pushl $24
c0102cc2:	6a 18                	push   $0x18
  jmp __alltraps
c0102cc4:	e9 03 ff ff ff       	jmp    c0102bcc <__alltraps>

c0102cc9 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102cc9:	6a 00                	push   $0x0
  pushl $25
c0102ccb:	6a 19                	push   $0x19
  jmp __alltraps
c0102ccd:	e9 fa fe ff ff       	jmp    c0102bcc <__alltraps>

c0102cd2 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102cd2:	6a 00                	push   $0x0
  pushl $26
c0102cd4:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102cd6:	e9 f1 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102cdb <vector27>:
.globl vector27
vector27:
  pushl $0
c0102cdb:	6a 00                	push   $0x0
  pushl $27
c0102cdd:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102cdf:	e9 e8 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102ce4 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102ce4:	6a 00                	push   $0x0
  pushl $28
c0102ce6:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102ce8:	e9 df fe ff ff       	jmp    c0102bcc <__alltraps>

c0102ced <vector29>:
.globl vector29
vector29:
  pushl $0
c0102ced:	6a 00                	push   $0x0
  pushl $29
c0102cef:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102cf1:	e9 d6 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102cf6 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102cf6:	6a 00                	push   $0x0
  pushl $30
c0102cf8:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102cfa:	e9 cd fe ff ff       	jmp    c0102bcc <__alltraps>

c0102cff <vector31>:
.globl vector31
vector31:
  pushl $0
c0102cff:	6a 00                	push   $0x0
  pushl $31
c0102d01:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102d03:	e9 c4 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d08 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102d08:	6a 00                	push   $0x0
  pushl $32
c0102d0a:	6a 20                	push   $0x20
  jmp __alltraps
c0102d0c:	e9 bb fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d11 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102d11:	6a 00                	push   $0x0
  pushl $33
c0102d13:	6a 21                	push   $0x21
  jmp __alltraps
c0102d15:	e9 b2 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d1a <vector34>:
.globl vector34
vector34:
  pushl $0
c0102d1a:	6a 00                	push   $0x0
  pushl $34
c0102d1c:	6a 22                	push   $0x22
  jmp __alltraps
c0102d1e:	e9 a9 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d23 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102d23:	6a 00                	push   $0x0
  pushl $35
c0102d25:	6a 23                	push   $0x23
  jmp __alltraps
c0102d27:	e9 a0 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d2c <vector36>:
.globl vector36
vector36:
  pushl $0
c0102d2c:	6a 00                	push   $0x0
  pushl $36
c0102d2e:	6a 24                	push   $0x24
  jmp __alltraps
c0102d30:	e9 97 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d35 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102d35:	6a 00                	push   $0x0
  pushl $37
c0102d37:	6a 25                	push   $0x25
  jmp __alltraps
c0102d39:	e9 8e fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d3e <vector38>:
.globl vector38
vector38:
  pushl $0
c0102d3e:	6a 00                	push   $0x0
  pushl $38
c0102d40:	6a 26                	push   $0x26
  jmp __alltraps
c0102d42:	e9 85 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d47 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102d47:	6a 00                	push   $0x0
  pushl $39
c0102d49:	6a 27                	push   $0x27
  jmp __alltraps
c0102d4b:	e9 7c fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d50 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102d50:	6a 00                	push   $0x0
  pushl $40
c0102d52:	6a 28                	push   $0x28
  jmp __alltraps
c0102d54:	e9 73 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d59 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102d59:	6a 00                	push   $0x0
  pushl $41
c0102d5b:	6a 29                	push   $0x29
  jmp __alltraps
c0102d5d:	e9 6a fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d62 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102d62:	6a 00                	push   $0x0
  pushl $42
c0102d64:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102d66:	e9 61 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d6b <vector43>:
.globl vector43
vector43:
  pushl $0
c0102d6b:	6a 00                	push   $0x0
  pushl $43
c0102d6d:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102d6f:	e9 58 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d74 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102d74:	6a 00                	push   $0x0
  pushl $44
c0102d76:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102d78:	e9 4f fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d7d <vector45>:
.globl vector45
vector45:
  pushl $0
c0102d7d:	6a 00                	push   $0x0
  pushl $45
c0102d7f:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102d81:	e9 46 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d86 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102d86:	6a 00                	push   $0x0
  pushl $46
c0102d88:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102d8a:	e9 3d fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d8f <vector47>:
.globl vector47
vector47:
  pushl $0
c0102d8f:	6a 00                	push   $0x0
  pushl $47
c0102d91:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102d93:	e9 34 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102d98 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102d98:	6a 00                	push   $0x0
  pushl $48
c0102d9a:	6a 30                	push   $0x30
  jmp __alltraps
c0102d9c:	e9 2b fe ff ff       	jmp    c0102bcc <__alltraps>

c0102da1 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102da1:	6a 00                	push   $0x0
  pushl $49
c0102da3:	6a 31                	push   $0x31
  jmp __alltraps
c0102da5:	e9 22 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102daa <vector50>:
.globl vector50
vector50:
  pushl $0
c0102daa:	6a 00                	push   $0x0
  pushl $50
c0102dac:	6a 32                	push   $0x32
  jmp __alltraps
c0102dae:	e9 19 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102db3 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102db3:	6a 00                	push   $0x0
  pushl $51
c0102db5:	6a 33                	push   $0x33
  jmp __alltraps
c0102db7:	e9 10 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102dbc <vector52>:
.globl vector52
vector52:
  pushl $0
c0102dbc:	6a 00                	push   $0x0
  pushl $52
c0102dbe:	6a 34                	push   $0x34
  jmp __alltraps
c0102dc0:	e9 07 fe ff ff       	jmp    c0102bcc <__alltraps>

c0102dc5 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102dc5:	6a 00                	push   $0x0
  pushl $53
c0102dc7:	6a 35                	push   $0x35
  jmp __alltraps
c0102dc9:	e9 fe fd ff ff       	jmp    c0102bcc <__alltraps>

c0102dce <vector54>:
.globl vector54
vector54:
  pushl $0
c0102dce:	6a 00                	push   $0x0
  pushl $54
c0102dd0:	6a 36                	push   $0x36
  jmp __alltraps
c0102dd2:	e9 f5 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102dd7 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102dd7:	6a 00                	push   $0x0
  pushl $55
c0102dd9:	6a 37                	push   $0x37
  jmp __alltraps
c0102ddb:	e9 ec fd ff ff       	jmp    c0102bcc <__alltraps>

c0102de0 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102de0:	6a 00                	push   $0x0
  pushl $56
c0102de2:	6a 38                	push   $0x38
  jmp __alltraps
c0102de4:	e9 e3 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102de9 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102de9:	6a 00                	push   $0x0
  pushl $57
c0102deb:	6a 39                	push   $0x39
  jmp __alltraps
c0102ded:	e9 da fd ff ff       	jmp    c0102bcc <__alltraps>

c0102df2 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102df2:	6a 00                	push   $0x0
  pushl $58
c0102df4:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102df6:	e9 d1 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102dfb <vector59>:
.globl vector59
vector59:
  pushl $0
c0102dfb:	6a 00                	push   $0x0
  pushl $59
c0102dfd:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102dff:	e9 c8 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e04 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102e04:	6a 00                	push   $0x0
  pushl $60
c0102e06:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102e08:	e9 bf fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e0d <vector61>:
.globl vector61
vector61:
  pushl $0
c0102e0d:	6a 00                	push   $0x0
  pushl $61
c0102e0f:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102e11:	e9 b6 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e16 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102e16:	6a 00                	push   $0x0
  pushl $62
c0102e18:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102e1a:	e9 ad fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e1f <vector63>:
.globl vector63
vector63:
  pushl $0
c0102e1f:	6a 00                	push   $0x0
  pushl $63
c0102e21:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102e23:	e9 a4 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e28 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102e28:	6a 00                	push   $0x0
  pushl $64
c0102e2a:	6a 40                	push   $0x40
  jmp __alltraps
c0102e2c:	e9 9b fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e31 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102e31:	6a 00                	push   $0x0
  pushl $65
c0102e33:	6a 41                	push   $0x41
  jmp __alltraps
c0102e35:	e9 92 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e3a <vector66>:
.globl vector66
vector66:
  pushl $0
c0102e3a:	6a 00                	push   $0x0
  pushl $66
c0102e3c:	6a 42                	push   $0x42
  jmp __alltraps
c0102e3e:	e9 89 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e43 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102e43:	6a 00                	push   $0x0
  pushl $67
c0102e45:	6a 43                	push   $0x43
  jmp __alltraps
c0102e47:	e9 80 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e4c <vector68>:
.globl vector68
vector68:
  pushl $0
c0102e4c:	6a 00                	push   $0x0
  pushl $68
c0102e4e:	6a 44                	push   $0x44
  jmp __alltraps
c0102e50:	e9 77 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e55 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102e55:	6a 00                	push   $0x0
  pushl $69
c0102e57:	6a 45                	push   $0x45
  jmp __alltraps
c0102e59:	e9 6e fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e5e <vector70>:
.globl vector70
vector70:
  pushl $0
c0102e5e:	6a 00                	push   $0x0
  pushl $70
c0102e60:	6a 46                	push   $0x46
  jmp __alltraps
c0102e62:	e9 65 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e67 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102e67:	6a 00                	push   $0x0
  pushl $71
c0102e69:	6a 47                	push   $0x47
  jmp __alltraps
c0102e6b:	e9 5c fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e70 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102e70:	6a 00                	push   $0x0
  pushl $72
c0102e72:	6a 48                	push   $0x48
  jmp __alltraps
c0102e74:	e9 53 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e79 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102e79:	6a 00                	push   $0x0
  pushl $73
c0102e7b:	6a 49                	push   $0x49
  jmp __alltraps
c0102e7d:	e9 4a fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e82 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102e82:	6a 00                	push   $0x0
  pushl $74
c0102e84:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102e86:	e9 41 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e8b <vector75>:
.globl vector75
vector75:
  pushl $0
c0102e8b:	6a 00                	push   $0x0
  pushl $75
c0102e8d:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102e8f:	e9 38 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e94 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102e94:	6a 00                	push   $0x0
  pushl $76
c0102e96:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102e98:	e9 2f fd ff ff       	jmp    c0102bcc <__alltraps>

c0102e9d <vector77>:
.globl vector77
vector77:
  pushl $0
c0102e9d:	6a 00                	push   $0x0
  pushl $77
c0102e9f:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102ea1:	e9 26 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102ea6 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102ea6:	6a 00                	push   $0x0
  pushl $78
c0102ea8:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102eaa:	e9 1d fd ff ff       	jmp    c0102bcc <__alltraps>

c0102eaf <vector79>:
.globl vector79
vector79:
  pushl $0
c0102eaf:	6a 00                	push   $0x0
  pushl $79
c0102eb1:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102eb3:	e9 14 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102eb8 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102eb8:	6a 00                	push   $0x0
  pushl $80
c0102eba:	6a 50                	push   $0x50
  jmp __alltraps
c0102ebc:	e9 0b fd ff ff       	jmp    c0102bcc <__alltraps>

c0102ec1 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102ec1:	6a 00                	push   $0x0
  pushl $81
c0102ec3:	6a 51                	push   $0x51
  jmp __alltraps
c0102ec5:	e9 02 fd ff ff       	jmp    c0102bcc <__alltraps>

c0102eca <vector82>:
.globl vector82
vector82:
  pushl $0
c0102eca:	6a 00                	push   $0x0
  pushl $82
c0102ecc:	6a 52                	push   $0x52
  jmp __alltraps
c0102ece:	e9 f9 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102ed3 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102ed3:	6a 00                	push   $0x0
  pushl $83
c0102ed5:	6a 53                	push   $0x53
  jmp __alltraps
c0102ed7:	e9 f0 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102edc <vector84>:
.globl vector84
vector84:
  pushl $0
c0102edc:	6a 00                	push   $0x0
  pushl $84
c0102ede:	6a 54                	push   $0x54
  jmp __alltraps
c0102ee0:	e9 e7 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102ee5 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102ee5:	6a 00                	push   $0x0
  pushl $85
c0102ee7:	6a 55                	push   $0x55
  jmp __alltraps
c0102ee9:	e9 de fc ff ff       	jmp    c0102bcc <__alltraps>

c0102eee <vector86>:
.globl vector86
vector86:
  pushl $0
c0102eee:	6a 00                	push   $0x0
  pushl $86
c0102ef0:	6a 56                	push   $0x56
  jmp __alltraps
c0102ef2:	e9 d5 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102ef7 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102ef7:	6a 00                	push   $0x0
  pushl $87
c0102ef9:	6a 57                	push   $0x57
  jmp __alltraps
c0102efb:	e9 cc fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f00 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102f00:	6a 00                	push   $0x0
  pushl $88
c0102f02:	6a 58                	push   $0x58
  jmp __alltraps
c0102f04:	e9 c3 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f09 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102f09:	6a 00                	push   $0x0
  pushl $89
c0102f0b:	6a 59                	push   $0x59
  jmp __alltraps
c0102f0d:	e9 ba fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f12 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102f12:	6a 00                	push   $0x0
  pushl $90
c0102f14:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102f16:	e9 b1 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f1b <vector91>:
.globl vector91
vector91:
  pushl $0
c0102f1b:	6a 00                	push   $0x0
  pushl $91
c0102f1d:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102f1f:	e9 a8 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f24 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102f24:	6a 00                	push   $0x0
  pushl $92
c0102f26:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102f28:	e9 9f fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f2d <vector93>:
.globl vector93
vector93:
  pushl $0
c0102f2d:	6a 00                	push   $0x0
  pushl $93
c0102f2f:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102f31:	e9 96 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f36 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102f36:	6a 00                	push   $0x0
  pushl $94
c0102f38:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102f3a:	e9 8d fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f3f <vector95>:
.globl vector95
vector95:
  pushl $0
c0102f3f:	6a 00                	push   $0x0
  pushl $95
c0102f41:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102f43:	e9 84 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f48 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102f48:	6a 00                	push   $0x0
  pushl $96
c0102f4a:	6a 60                	push   $0x60
  jmp __alltraps
c0102f4c:	e9 7b fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f51 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102f51:	6a 00                	push   $0x0
  pushl $97
c0102f53:	6a 61                	push   $0x61
  jmp __alltraps
c0102f55:	e9 72 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f5a <vector98>:
.globl vector98
vector98:
  pushl $0
c0102f5a:	6a 00                	push   $0x0
  pushl $98
c0102f5c:	6a 62                	push   $0x62
  jmp __alltraps
c0102f5e:	e9 69 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f63 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102f63:	6a 00                	push   $0x0
  pushl $99
c0102f65:	6a 63                	push   $0x63
  jmp __alltraps
c0102f67:	e9 60 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f6c <vector100>:
.globl vector100
vector100:
  pushl $0
c0102f6c:	6a 00                	push   $0x0
  pushl $100
c0102f6e:	6a 64                	push   $0x64
  jmp __alltraps
c0102f70:	e9 57 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f75 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102f75:	6a 00                	push   $0x0
  pushl $101
c0102f77:	6a 65                	push   $0x65
  jmp __alltraps
c0102f79:	e9 4e fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f7e <vector102>:
.globl vector102
vector102:
  pushl $0
c0102f7e:	6a 00                	push   $0x0
  pushl $102
c0102f80:	6a 66                	push   $0x66
  jmp __alltraps
c0102f82:	e9 45 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f87 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102f87:	6a 00                	push   $0x0
  pushl $103
c0102f89:	6a 67                	push   $0x67
  jmp __alltraps
c0102f8b:	e9 3c fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f90 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102f90:	6a 00                	push   $0x0
  pushl $104
c0102f92:	6a 68                	push   $0x68
  jmp __alltraps
c0102f94:	e9 33 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102f99 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102f99:	6a 00                	push   $0x0
  pushl $105
c0102f9b:	6a 69                	push   $0x69
  jmp __alltraps
c0102f9d:	e9 2a fc ff ff       	jmp    c0102bcc <__alltraps>

c0102fa2 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102fa2:	6a 00                	push   $0x0
  pushl $106
c0102fa4:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102fa6:	e9 21 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102fab <vector107>:
.globl vector107
vector107:
  pushl $0
c0102fab:	6a 00                	push   $0x0
  pushl $107
c0102fad:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102faf:	e9 18 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102fb4 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102fb4:	6a 00                	push   $0x0
  pushl $108
c0102fb6:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102fb8:	e9 0f fc ff ff       	jmp    c0102bcc <__alltraps>

c0102fbd <vector109>:
.globl vector109
vector109:
  pushl $0
c0102fbd:	6a 00                	push   $0x0
  pushl $109
c0102fbf:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102fc1:	e9 06 fc ff ff       	jmp    c0102bcc <__alltraps>

c0102fc6 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102fc6:	6a 00                	push   $0x0
  pushl $110
c0102fc8:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102fca:	e9 fd fb ff ff       	jmp    c0102bcc <__alltraps>

c0102fcf <vector111>:
.globl vector111
vector111:
  pushl $0
c0102fcf:	6a 00                	push   $0x0
  pushl $111
c0102fd1:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102fd3:	e9 f4 fb ff ff       	jmp    c0102bcc <__alltraps>

c0102fd8 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102fd8:	6a 00                	push   $0x0
  pushl $112
c0102fda:	6a 70                	push   $0x70
  jmp __alltraps
c0102fdc:	e9 eb fb ff ff       	jmp    c0102bcc <__alltraps>

c0102fe1 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102fe1:	6a 00                	push   $0x0
  pushl $113
c0102fe3:	6a 71                	push   $0x71
  jmp __alltraps
c0102fe5:	e9 e2 fb ff ff       	jmp    c0102bcc <__alltraps>

c0102fea <vector114>:
.globl vector114
vector114:
  pushl $0
c0102fea:	6a 00                	push   $0x0
  pushl $114
c0102fec:	6a 72                	push   $0x72
  jmp __alltraps
c0102fee:	e9 d9 fb ff ff       	jmp    c0102bcc <__alltraps>

c0102ff3 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102ff3:	6a 00                	push   $0x0
  pushl $115
c0102ff5:	6a 73                	push   $0x73
  jmp __alltraps
c0102ff7:	e9 d0 fb ff ff       	jmp    c0102bcc <__alltraps>

c0102ffc <vector116>:
.globl vector116
vector116:
  pushl $0
c0102ffc:	6a 00                	push   $0x0
  pushl $116
c0102ffe:	6a 74                	push   $0x74
  jmp __alltraps
c0103000:	e9 c7 fb ff ff       	jmp    c0102bcc <__alltraps>

c0103005 <vector117>:
.globl vector117
vector117:
  pushl $0
c0103005:	6a 00                	push   $0x0
  pushl $117
c0103007:	6a 75                	push   $0x75
  jmp __alltraps
c0103009:	e9 be fb ff ff       	jmp    c0102bcc <__alltraps>

c010300e <vector118>:
.globl vector118
vector118:
  pushl $0
c010300e:	6a 00                	push   $0x0
  pushl $118
c0103010:	6a 76                	push   $0x76
  jmp __alltraps
c0103012:	e9 b5 fb ff ff       	jmp    c0102bcc <__alltraps>

c0103017 <vector119>:
.globl vector119
vector119:
  pushl $0
c0103017:	6a 00                	push   $0x0
  pushl $119
c0103019:	6a 77                	push   $0x77
  jmp __alltraps
c010301b:	e9 ac fb ff ff       	jmp    c0102bcc <__alltraps>

c0103020 <vector120>:
.globl vector120
vector120:
  pushl $0
c0103020:	6a 00                	push   $0x0
  pushl $120
c0103022:	6a 78                	push   $0x78
  jmp __alltraps
c0103024:	e9 a3 fb ff ff       	jmp    c0102bcc <__alltraps>

c0103029 <vector121>:
.globl vector121
vector121:
  pushl $0
c0103029:	6a 00                	push   $0x0
  pushl $121
c010302b:	6a 79                	push   $0x79
  jmp __alltraps
c010302d:	e9 9a fb ff ff       	jmp    c0102bcc <__alltraps>

c0103032 <vector122>:
.globl vector122
vector122:
  pushl $0
c0103032:	6a 00                	push   $0x0
  pushl $122
c0103034:	6a 7a                	push   $0x7a
  jmp __alltraps
c0103036:	e9 91 fb ff ff       	jmp    c0102bcc <__alltraps>

c010303b <vector123>:
.globl vector123
vector123:
  pushl $0
c010303b:	6a 00                	push   $0x0
  pushl $123
c010303d:	6a 7b                	push   $0x7b
  jmp __alltraps
c010303f:	e9 88 fb ff ff       	jmp    c0102bcc <__alltraps>

c0103044 <vector124>:
.globl vector124
vector124:
  pushl $0
c0103044:	6a 00                	push   $0x0
  pushl $124
c0103046:	6a 7c                	push   $0x7c
  jmp __alltraps
c0103048:	e9 7f fb ff ff       	jmp    c0102bcc <__alltraps>

c010304d <vector125>:
.globl vector125
vector125:
  pushl $0
c010304d:	6a 00                	push   $0x0
  pushl $125
c010304f:	6a 7d                	push   $0x7d
  jmp __alltraps
c0103051:	e9 76 fb ff ff       	jmp    c0102bcc <__alltraps>

c0103056 <vector126>:
.globl vector126
vector126:
  pushl $0
c0103056:	6a 00                	push   $0x0
  pushl $126
c0103058:	6a 7e                	push   $0x7e
  jmp __alltraps
c010305a:	e9 6d fb ff ff       	jmp    c0102bcc <__alltraps>

c010305f <vector127>:
.globl vector127
vector127:
  pushl $0
c010305f:	6a 00                	push   $0x0
  pushl $127
c0103061:	6a 7f                	push   $0x7f
  jmp __alltraps
c0103063:	e9 64 fb ff ff       	jmp    c0102bcc <__alltraps>

c0103068 <vector128>:
.globl vector128
vector128:
  pushl $0
c0103068:	6a 00                	push   $0x0
  pushl $128
c010306a:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c010306f:	e9 58 fb ff ff       	jmp    c0102bcc <__alltraps>

c0103074 <vector129>:
.globl vector129
vector129:
  pushl $0
c0103074:	6a 00                	push   $0x0
  pushl $129
c0103076:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c010307b:	e9 4c fb ff ff       	jmp    c0102bcc <__alltraps>

c0103080 <vector130>:
.globl vector130
vector130:
  pushl $0
c0103080:	6a 00                	push   $0x0
  pushl $130
c0103082:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0103087:	e9 40 fb ff ff       	jmp    c0102bcc <__alltraps>

c010308c <vector131>:
.globl vector131
vector131:
  pushl $0
c010308c:	6a 00                	push   $0x0
  pushl $131
c010308e:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0103093:	e9 34 fb ff ff       	jmp    c0102bcc <__alltraps>

c0103098 <vector132>:
.globl vector132
vector132:
  pushl $0
c0103098:	6a 00                	push   $0x0
  pushl $132
c010309a:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c010309f:	e9 28 fb ff ff       	jmp    c0102bcc <__alltraps>

c01030a4 <vector133>:
.globl vector133
vector133:
  pushl $0
c01030a4:	6a 00                	push   $0x0
  pushl $133
c01030a6:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c01030ab:	e9 1c fb ff ff       	jmp    c0102bcc <__alltraps>

c01030b0 <vector134>:
.globl vector134
vector134:
  pushl $0
c01030b0:	6a 00                	push   $0x0
  pushl $134
c01030b2:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c01030b7:	e9 10 fb ff ff       	jmp    c0102bcc <__alltraps>

c01030bc <vector135>:
.globl vector135
vector135:
  pushl $0
c01030bc:	6a 00                	push   $0x0
  pushl $135
c01030be:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c01030c3:	e9 04 fb ff ff       	jmp    c0102bcc <__alltraps>

c01030c8 <vector136>:
.globl vector136
vector136:
  pushl $0
c01030c8:	6a 00                	push   $0x0
  pushl $136
c01030ca:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c01030cf:	e9 f8 fa ff ff       	jmp    c0102bcc <__alltraps>

c01030d4 <vector137>:
.globl vector137
vector137:
  pushl $0
c01030d4:	6a 00                	push   $0x0
  pushl $137
c01030d6:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c01030db:	e9 ec fa ff ff       	jmp    c0102bcc <__alltraps>

c01030e0 <vector138>:
.globl vector138
vector138:
  pushl $0
c01030e0:	6a 00                	push   $0x0
  pushl $138
c01030e2:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c01030e7:	e9 e0 fa ff ff       	jmp    c0102bcc <__alltraps>

c01030ec <vector139>:
.globl vector139
vector139:
  pushl $0
c01030ec:	6a 00                	push   $0x0
  pushl $139
c01030ee:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c01030f3:	e9 d4 fa ff ff       	jmp    c0102bcc <__alltraps>

c01030f8 <vector140>:
.globl vector140
vector140:
  pushl $0
c01030f8:	6a 00                	push   $0x0
  pushl $140
c01030fa:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c01030ff:	e9 c8 fa ff ff       	jmp    c0102bcc <__alltraps>

c0103104 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103104:	6a 00                	push   $0x0
  pushl $141
c0103106:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c010310b:	e9 bc fa ff ff       	jmp    c0102bcc <__alltraps>

c0103110 <vector142>:
.globl vector142
vector142:
  pushl $0
c0103110:	6a 00                	push   $0x0
  pushl $142
c0103112:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103117:	e9 b0 fa ff ff       	jmp    c0102bcc <__alltraps>

c010311c <vector143>:
.globl vector143
vector143:
  pushl $0
c010311c:	6a 00                	push   $0x0
  pushl $143
c010311e:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0103123:	e9 a4 fa ff ff       	jmp    c0102bcc <__alltraps>

c0103128 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103128:	6a 00                	push   $0x0
  pushl $144
c010312a:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010312f:	e9 98 fa ff ff       	jmp    c0102bcc <__alltraps>

c0103134 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103134:	6a 00                	push   $0x0
  pushl $145
c0103136:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c010313b:	e9 8c fa ff ff       	jmp    c0102bcc <__alltraps>

c0103140 <vector146>:
.globl vector146
vector146:
  pushl $0
c0103140:	6a 00                	push   $0x0
  pushl $146
c0103142:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103147:	e9 80 fa ff ff       	jmp    c0102bcc <__alltraps>

c010314c <vector147>:
.globl vector147
vector147:
  pushl $0
c010314c:	6a 00                	push   $0x0
  pushl $147
c010314e:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0103153:	e9 74 fa ff ff       	jmp    c0102bcc <__alltraps>

c0103158 <vector148>:
.globl vector148
vector148:
  pushl $0
c0103158:	6a 00                	push   $0x0
  pushl $148
c010315a:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c010315f:	e9 68 fa ff ff       	jmp    c0102bcc <__alltraps>

c0103164 <vector149>:
.globl vector149
vector149:
  pushl $0
c0103164:	6a 00                	push   $0x0
  pushl $149
c0103166:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c010316b:	e9 5c fa ff ff       	jmp    c0102bcc <__alltraps>

c0103170 <vector150>:
.globl vector150
vector150:
  pushl $0
c0103170:	6a 00                	push   $0x0
  pushl $150
c0103172:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0103177:	e9 50 fa ff ff       	jmp    c0102bcc <__alltraps>

c010317c <vector151>:
.globl vector151
vector151:
  pushl $0
c010317c:	6a 00                	push   $0x0
  pushl $151
c010317e:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c0103183:	e9 44 fa ff ff       	jmp    c0102bcc <__alltraps>

c0103188 <vector152>:
.globl vector152
vector152:
  pushl $0
c0103188:	6a 00                	push   $0x0
  pushl $152
c010318a:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c010318f:	e9 38 fa ff ff       	jmp    c0102bcc <__alltraps>

c0103194 <vector153>:
.globl vector153
vector153:
  pushl $0
c0103194:	6a 00                	push   $0x0
  pushl $153
c0103196:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c010319b:	e9 2c fa ff ff       	jmp    c0102bcc <__alltraps>

c01031a0 <vector154>:
.globl vector154
vector154:
  pushl $0
c01031a0:	6a 00                	push   $0x0
  pushl $154
c01031a2:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01031a7:	e9 20 fa ff ff       	jmp    c0102bcc <__alltraps>

c01031ac <vector155>:
.globl vector155
vector155:
  pushl $0
c01031ac:	6a 00                	push   $0x0
  pushl $155
c01031ae:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01031b3:	e9 14 fa ff ff       	jmp    c0102bcc <__alltraps>

c01031b8 <vector156>:
.globl vector156
vector156:
  pushl $0
c01031b8:	6a 00                	push   $0x0
  pushl $156
c01031ba:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01031bf:	e9 08 fa ff ff       	jmp    c0102bcc <__alltraps>

c01031c4 <vector157>:
.globl vector157
vector157:
  pushl $0
c01031c4:	6a 00                	push   $0x0
  pushl $157
c01031c6:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c01031cb:	e9 fc f9 ff ff       	jmp    c0102bcc <__alltraps>

c01031d0 <vector158>:
.globl vector158
vector158:
  pushl $0
c01031d0:	6a 00                	push   $0x0
  pushl $158
c01031d2:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c01031d7:	e9 f0 f9 ff ff       	jmp    c0102bcc <__alltraps>

c01031dc <vector159>:
.globl vector159
vector159:
  pushl $0
c01031dc:	6a 00                	push   $0x0
  pushl $159
c01031de:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c01031e3:	e9 e4 f9 ff ff       	jmp    c0102bcc <__alltraps>

c01031e8 <vector160>:
.globl vector160
vector160:
  pushl $0
c01031e8:	6a 00                	push   $0x0
  pushl $160
c01031ea:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c01031ef:	e9 d8 f9 ff ff       	jmp    c0102bcc <__alltraps>

c01031f4 <vector161>:
.globl vector161
vector161:
  pushl $0
c01031f4:	6a 00                	push   $0x0
  pushl $161
c01031f6:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c01031fb:	e9 cc f9 ff ff       	jmp    c0102bcc <__alltraps>

c0103200 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103200:	6a 00                	push   $0x0
  pushl $162
c0103202:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103207:	e9 c0 f9 ff ff       	jmp    c0102bcc <__alltraps>

c010320c <vector163>:
.globl vector163
vector163:
  pushl $0
c010320c:	6a 00                	push   $0x0
  pushl $163
c010320e:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103213:	e9 b4 f9 ff ff       	jmp    c0102bcc <__alltraps>

c0103218 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103218:	6a 00                	push   $0x0
  pushl $164
c010321a:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010321f:	e9 a8 f9 ff ff       	jmp    c0102bcc <__alltraps>

c0103224 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103224:	6a 00                	push   $0x0
  pushl $165
c0103226:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c010322b:	e9 9c f9 ff ff       	jmp    c0102bcc <__alltraps>

c0103230 <vector166>:
.globl vector166
vector166:
  pushl $0
c0103230:	6a 00                	push   $0x0
  pushl $166
c0103232:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103237:	e9 90 f9 ff ff       	jmp    c0102bcc <__alltraps>

c010323c <vector167>:
.globl vector167
vector167:
  pushl $0
c010323c:	6a 00                	push   $0x0
  pushl $167
c010323e:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103243:	e9 84 f9 ff ff       	jmp    c0102bcc <__alltraps>

c0103248 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103248:	6a 00                	push   $0x0
  pushl $168
c010324a:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010324f:	e9 78 f9 ff ff       	jmp    c0102bcc <__alltraps>

c0103254 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103254:	6a 00                	push   $0x0
  pushl $169
c0103256:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c010325b:	e9 6c f9 ff ff       	jmp    c0102bcc <__alltraps>

c0103260 <vector170>:
.globl vector170
vector170:
  pushl $0
c0103260:	6a 00                	push   $0x0
  pushl $170
c0103262:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0103267:	e9 60 f9 ff ff       	jmp    c0102bcc <__alltraps>

c010326c <vector171>:
.globl vector171
vector171:
  pushl $0
c010326c:	6a 00                	push   $0x0
  pushl $171
c010326e:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c0103273:	e9 54 f9 ff ff       	jmp    c0102bcc <__alltraps>

c0103278 <vector172>:
.globl vector172
vector172:
  pushl $0
c0103278:	6a 00                	push   $0x0
  pushl $172
c010327a:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c010327f:	e9 48 f9 ff ff       	jmp    c0102bcc <__alltraps>

c0103284 <vector173>:
.globl vector173
vector173:
  pushl $0
c0103284:	6a 00                	push   $0x0
  pushl $173
c0103286:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c010328b:	e9 3c f9 ff ff       	jmp    c0102bcc <__alltraps>

c0103290 <vector174>:
.globl vector174
vector174:
  pushl $0
c0103290:	6a 00                	push   $0x0
  pushl $174
c0103292:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c0103297:	e9 30 f9 ff ff       	jmp    c0102bcc <__alltraps>

c010329c <vector175>:
.globl vector175
vector175:
  pushl $0
c010329c:	6a 00                	push   $0x0
  pushl $175
c010329e:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01032a3:	e9 24 f9 ff ff       	jmp    c0102bcc <__alltraps>

c01032a8 <vector176>:
.globl vector176
vector176:
  pushl $0
c01032a8:	6a 00                	push   $0x0
  pushl $176
c01032aa:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01032af:	e9 18 f9 ff ff       	jmp    c0102bcc <__alltraps>

c01032b4 <vector177>:
.globl vector177
vector177:
  pushl $0
c01032b4:	6a 00                	push   $0x0
  pushl $177
c01032b6:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01032bb:	e9 0c f9 ff ff       	jmp    c0102bcc <__alltraps>

c01032c0 <vector178>:
.globl vector178
vector178:
  pushl $0
c01032c0:	6a 00                	push   $0x0
  pushl $178
c01032c2:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c01032c7:	e9 00 f9 ff ff       	jmp    c0102bcc <__alltraps>

c01032cc <vector179>:
.globl vector179
vector179:
  pushl $0
c01032cc:	6a 00                	push   $0x0
  pushl $179
c01032ce:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c01032d3:	e9 f4 f8 ff ff       	jmp    c0102bcc <__alltraps>

c01032d8 <vector180>:
.globl vector180
vector180:
  pushl $0
c01032d8:	6a 00                	push   $0x0
  pushl $180
c01032da:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c01032df:	e9 e8 f8 ff ff       	jmp    c0102bcc <__alltraps>

c01032e4 <vector181>:
.globl vector181
vector181:
  pushl $0
c01032e4:	6a 00                	push   $0x0
  pushl $181
c01032e6:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c01032eb:	e9 dc f8 ff ff       	jmp    c0102bcc <__alltraps>

c01032f0 <vector182>:
.globl vector182
vector182:
  pushl $0
c01032f0:	6a 00                	push   $0x0
  pushl $182
c01032f2:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c01032f7:	e9 d0 f8 ff ff       	jmp    c0102bcc <__alltraps>

c01032fc <vector183>:
.globl vector183
vector183:
  pushl $0
c01032fc:	6a 00                	push   $0x0
  pushl $183
c01032fe:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103303:	e9 c4 f8 ff ff       	jmp    c0102bcc <__alltraps>

c0103308 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103308:	6a 00                	push   $0x0
  pushl $184
c010330a:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010330f:	e9 b8 f8 ff ff       	jmp    c0102bcc <__alltraps>

c0103314 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103314:	6a 00                	push   $0x0
  pushl $185
c0103316:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c010331b:	e9 ac f8 ff ff       	jmp    c0102bcc <__alltraps>

c0103320 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103320:	6a 00                	push   $0x0
  pushl $186
c0103322:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103327:	e9 a0 f8 ff ff       	jmp    c0102bcc <__alltraps>

c010332c <vector187>:
.globl vector187
vector187:
  pushl $0
c010332c:	6a 00                	push   $0x0
  pushl $187
c010332e:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0103333:	e9 94 f8 ff ff       	jmp    c0102bcc <__alltraps>

c0103338 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103338:	6a 00                	push   $0x0
  pushl $188
c010333a:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010333f:	e9 88 f8 ff ff       	jmp    c0102bcc <__alltraps>

c0103344 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103344:	6a 00                	push   $0x0
  pushl $189
c0103346:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c010334b:	e9 7c f8 ff ff       	jmp    c0102bcc <__alltraps>

c0103350 <vector190>:
.globl vector190
vector190:
  pushl $0
c0103350:	6a 00                	push   $0x0
  pushl $190
c0103352:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0103357:	e9 70 f8 ff ff       	jmp    c0102bcc <__alltraps>

c010335c <vector191>:
.globl vector191
vector191:
  pushl $0
c010335c:	6a 00                	push   $0x0
  pushl $191
c010335e:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0103363:	e9 64 f8 ff ff       	jmp    c0102bcc <__alltraps>

c0103368 <vector192>:
.globl vector192
vector192:
  pushl $0
c0103368:	6a 00                	push   $0x0
  pushl $192
c010336a:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c010336f:	e9 58 f8 ff ff       	jmp    c0102bcc <__alltraps>

c0103374 <vector193>:
.globl vector193
vector193:
  pushl $0
c0103374:	6a 00                	push   $0x0
  pushl $193
c0103376:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c010337b:	e9 4c f8 ff ff       	jmp    c0102bcc <__alltraps>

c0103380 <vector194>:
.globl vector194
vector194:
  pushl $0
c0103380:	6a 00                	push   $0x0
  pushl $194
c0103382:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0103387:	e9 40 f8 ff ff       	jmp    c0102bcc <__alltraps>

c010338c <vector195>:
.globl vector195
vector195:
  pushl $0
c010338c:	6a 00                	push   $0x0
  pushl $195
c010338e:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c0103393:	e9 34 f8 ff ff       	jmp    c0102bcc <__alltraps>

c0103398 <vector196>:
.globl vector196
vector196:
  pushl $0
c0103398:	6a 00                	push   $0x0
  pushl $196
c010339a:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c010339f:	e9 28 f8 ff ff       	jmp    c0102bcc <__alltraps>

c01033a4 <vector197>:
.globl vector197
vector197:
  pushl $0
c01033a4:	6a 00                	push   $0x0
  pushl $197
c01033a6:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01033ab:	e9 1c f8 ff ff       	jmp    c0102bcc <__alltraps>

c01033b0 <vector198>:
.globl vector198
vector198:
  pushl $0
c01033b0:	6a 00                	push   $0x0
  pushl $198
c01033b2:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01033b7:	e9 10 f8 ff ff       	jmp    c0102bcc <__alltraps>

c01033bc <vector199>:
.globl vector199
vector199:
  pushl $0
c01033bc:	6a 00                	push   $0x0
  pushl $199
c01033be:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01033c3:	e9 04 f8 ff ff       	jmp    c0102bcc <__alltraps>

c01033c8 <vector200>:
.globl vector200
vector200:
  pushl $0
c01033c8:	6a 00                	push   $0x0
  pushl $200
c01033ca:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c01033cf:	e9 f8 f7 ff ff       	jmp    c0102bcc <__alltraps>

c01033d4 <vector201>:
.globl vector201
vector201:
  pushl $0
c01033d4:	6a 00                	push   $0x0
  pushl $201
c01033d6:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c01033db:	e9 ec f7 ff ff       	jmp    c0102bcc <__alltraps>

c01033e0 <vector202>:
.globl vector202
vector202:
  pushl $0
c01033e0:	6a 00                	push   $0x0
  pushl $202
c01033e2:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c01033e7:	e9 e0 f7 ff ff       	jmp    c0102bcc <__alltraps>

c01033ec <vector203>:
.globl vector203
vector203:
  pushl $0
c01033ec:	6a 00                	push   $0x0
  pushl $203
c01033ee:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c01033f3:	e9 d4 f7 ff ff       	jmp    c0102bcc <__alltraps>

c01033f8 <vector204>:
.globl vector204
vector204:
  pushl $0
c01033f8:	6a 00                	push   $0x0
  pushl $204
c01033fa:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c01033ff:	e9 c8 f7 ff ff       	jmp    c0102bcc <__alltraps>

c0103404 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103404:	6a 00                	push   $0x0
  pushl $205
c0103406:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010340b:	e9 bc f7 ff ff       	jmp    c0102bcc <__alltraps>

c0103410 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103410:	6a 00                	push   $0x0
  pushl $206
c0103412:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103417:	e9 b0 f7 ff ff       	jmp    c0102bcc <__alltraps>

c010341c <vector207>:
.globl vector207
vector207:
  pushl $0
c010341c:	6a 00                	push   $0x0
  pushl $207
c010341e:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103423:	e9 a4 f7 ff ff       	jmp    c0102bcc <__alltraps>

c0103428 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103428:	6a 00                	push   $0x0
  pushl $208
c010342a:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010342f:	e9 98 f7 ff ff       	jmp    c0102bcc <__alltraps>

c0103434 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103434:	6a 00                	push   $0x0
  pushl $209
c0103436:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c010343b:	e9 8c f7 ff ff       	jmp    c0102bcc <__alltraps>

c0103440 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103440:	6a 00                	push   $0x0
  pushl $210
c0103442:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103447:	e9 80 f7 ff ff       	jmp    c0102bcc <__alltraps>

c010344c <vector211>:
.globl vector211
vector211:
  pushl $0
c010344c:	6a 00                	push   $0x0
  pushl $211
c010344e:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103453:	e9 74 f7 ff ff       	jmp    c0102bcc <__alltraps>

c0103458 <vector212>:
.globl vector212
vector212:
  pushl $0
c0103458:	6a 00                	push   $0x0
  pushl $212
c010345a:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c010345f:	e9 68 f7 ff ff       	jmp    c0102bcc <__alltraps>

c0103464 <vector213>:
.globl vector213
vector213:
  pushl $0
c0103464:	6a 00                	push   $0x0
  pushl $213
c0103466:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c010346b:	e9 5c f7 ff ff       	jmp    c0102bcc <__alltraps>

c0103470 <vector214>:
.globl vector214
vector214:
  pushl $0
c0103470:	6a 00                	push   $0x0
  pushl $214
c0103472:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0103477:	e9 50 f7 ff ff       	jmp    c0102bcc <__alltraps>

c010347c <vector215>:
.globl vector215
vector215:
  pushl $0
c010347c:	6a 00                	push   $0x0
  pushl $215
c010347e:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c0103483:	e9 44 f7 ff ff       	jmp    c0102bcc <__alltraps>

c0103488 <vector216>:
.globl vector216
vector216:
  pushl $0
c0103488:	6a 00                	push   $0x0
  pushl $216
c010348a:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c010348f:	e9 38 f7 ff ff       	jmp    c0102bcc <__alltraps>

c0103494 <vector217>:
.globl vector217
vector217:
  pushl $0
c0103494:	6a 00                	push   $0x0
  pushl $217
c0103496:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c010349b:	e9 2c f7 ff ff       	jmp    c0102bcc <__alltraps>

c01034a0 <vector218>:
.globl vector218
vector218:
  pushl $0
c01034a0:	6a 00                	push   $0x0
  pushl $218
c01034a2:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01034a7:	e9 20 f7 ff ff       	jmp    c0102bcc <__alltraps>

c01034ac <vector219>:
.globl vector219
vector219:
  pushl $0
c01034ac:	6a 00                	push   $0x0
  pushl $219
c01034ae:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01034b3:	e9 14 f7 ff ff       	jmp    c0102bcc <__alltraps>

c01034b8 <vector220>:
.globl vector220
vector220:
  pushl $0
c01034b8:	6a 00                	push   $0x0
  pushl $220
c01034ba:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01034bf:	e9 08 f7 ff ff       	jmp    c0102bcc <__alltraps>

c01034c4 <vector221>:
.globl vector221
vector221:
  pushl $0
c01034c4:	6a 00                	push   $0x0
  pushl $221
c01034c6:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c01034cb:	e9 fc f6 ff ff       	jmp    c0102bcc <__alltraps>

c01034d0 <vector222>:
.globl vector222
vector222:
  pushl $0
c01034d0:	6a 00                	push   $0x0
  pushl $222
c01034d2:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c01034d7:	e9 f0 f6 ff ff       	jmp    c0102bcc <__alltraps>

c01034dc <vector223>:
.globl vector223
vector223:
  pushl $0
c01034dc:	6a 00                	push   $0x0
  pushl $223
c01034de:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c01034e3:	e9 e4 f6 ff ff       	jmp    c0102bcc <__alltraps>

c01034e8 <vector224>:
.globl vector224
vector224:
  pushl $0
c01034e8:	6a 00                	push   $0x0
  pushl $224
c01034ea:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c01034ef:	e9 d8 f6 ff ff       	jmp    c0102bcc <__alltraps>

c01034f4 <vector225>:
.globl vector225
vector225:
  pushl $0
c01034f4:	6a 00                	push   $0x0
  pushl $225
c01034f6:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c01034fb:	e9 cc f6 ff ff       	jmp    c0102bcc <__alltraps>

c0103500 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103500:	6a 00                	push   $0x0
  pushl $226
c0103502:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103507:	e9 c0 f6 ff ff       	jmp    c0102bcc <__alltraps>

c010350c <vector227>:
.globl vector227
vector227:
  pushl $0
c010350c:	6a 00                	push   $0x0
  pushl $227
c010350e:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103513:	e9 b4 f6 ff ff       	jmp    c0102bcc <__alltraps>

c0103518 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103518:	6a 00                	push   $0x0
  pushl $228
c010351a:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010351f:	e9 a8 f6 ff ff       	jmp    c0102bcc <__alltraps>

c0103524 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103524:	6a 00                	push   $0x0
  pushl $229
c0103526:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c010352b:	e9 9c f6 ff ff       	jmp    c0102bcc <__alltraps>

c0103530 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103530:	6a 00                	push   $0x0
  pushl $230
c0103532:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103537:	e9 90 f6 ff ff       	jmp    c0102bcc <__alltraps>

c010353c <vector231>:
.globl vector231
vector231:
  pushl $0
c010353c:	6a 00                	push   $0x0
  pushl $231
c010353e:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103543:	e9 84 f6 ff ff       	jmp    c0102bcc <__alltraps>

c0103548 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103548:	6a 00                	push   $0x0
  pushl $232
c010354a:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010354f:	e9 78 f6 ff ff       	jmp    c0102bcc <__alltraps>

c0103554 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103554:	6a 00                	push   $0x0
  pushl $233
c0103556:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c010355b:	e9 6c f6 ff ff       	jmp    c0102bcc <__alltraps>

c0103560 <vector234>:
.globl vector234
vector234:
  pushl $0
c0103560:	6a 00                	push   $0x0
  pushl $234
c0103562:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0103567:	e9 60 f6 ff ff       	jmp    c0102bcc <__alltraps>

c010356c <vector235>:
.globl vector235
vector235:
  pushl $0
c010356c:	6a 00                	push   $0x0
  pushl $235
c010356e:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c0103573:	e9 54 f6 ff ff       	jmp    c0102bcc <__alltraps>

c0103578 <vector236>:
.globl vector236
vector236:
  pushl $0
c0103578:	6a 00                	push   $0x0
  pushl $236
c010357a:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c010357f:	e9 48 f6 ff ff       	jmp    c0102bcc <__alltraps>

c0103584 <vector237>:
.globl vector237
vector237:
  pushl $0
c0103584:	6a 00                	push   $0x0
  pushl $237
c0103586:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c010358b:	e9 3c f6 ff ff       	jmp    c0102bcc <__alltraps>

c0103590 <vector238>:
.globl vector238
vector238:
  pushl $0
c0103590:	6a 00                	push   $0x0
  pushl $238
c0103592:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c0103597:	e9 30 f6 ff ff       	jmp    c0102bcc <__alltraps>

c010359c <vector239>:
.globl vector239
vector239:
  pushl $0
c010359c:	6a 00                	push   $0x0
  pushl $239
c010359e:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01035a3:	e9 24 f6 ff ff       	jmp    c0102bcc <__alltraps>

c01035a8 <vector240>:
.globl vector240
vector240:
  pushl $0
c01035a8:	6a 00                	push   $0x0
  pushl $240
c01035aa:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01035af:	e9 18 f6 ff ff       	jmp    c0102bcc <__alltraps>

c01035b4 <vector241>:
.globl vector241
vector241:
  pushl $0
c01035b4:	6a 00                	push   $0x0
  pushl $241
c01035b6:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01035bb:	e9 0c f6 ff ff       	jmp    c0102bcc <__alltraps>

c01035c0 <vector242>:
.globl vector242
vector242:
  pushl $0
c01035c0:	6a 00                	push   $0x0
  pushl $242
c01035c2:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c01035c7:	e9 00 f6 ff ff       	jmp    c0102bcc <__alltraps>

c01035cc <vector243>:
.globl vector243
vector243:
  pushl $0
c01035cc:	6a 00                	push   $0x0
  pushl $243
c01035ce:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c01035d3:	e9 f4 f5 ff ff       	jmp    c0102bcc <__alltraps>

c01035d8 <vector244>:
.globl vector244
vector244:
  pushl $0
c01035d8:	6a 00                	push   $0x0
  pushl $244
c01035da:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c01035df:	e9 e8 f5 ff ff       	jmp    c0102bcc <__alltraps>

c01035e4 <vector245>:
.globl vector245
vector245:
  pushl $0
c01035e4:	6a 00                	push   $0x0
  pushl $245
c01035e6:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c01035eb:	e9 dc f5 ff ff       	jmp    c0102bcc <__alltraps>

c01035f0 <vector246>:
.globl vector246
vector246:
  pushl $0
c01035f0:	6a 00                	push   $0x0
  pushl $246
c01035f2:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c01035f7:	e9 d0 f5 ff ff       	jmp    c0102bcc <__alltraps>

c01035fc <vector247>:
.globl vector247
vector247:
  pushl $0
c01035fc:	6a 00                	push   $0x0
  pushl $247
c01035fe:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103603:	e9 c4 f5 ff ff       	jmp    c0102bcc <__alltraps>

c0103608 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103608:	6a 00                	push   $0x0
  pushl $248
c010360a:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010360f:	e9 b8 f5 ff ff       	jmp    c0102bcc <__alltraps>

c0103614 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103614:	6a 00                	push   $0x0
  pushl $249
c0103616:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010361b:	e9 ac f5 ff ff       	jmp    c0102bcc <__alltraps>

c0103620 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103620:	6a 00                	push   $0x0
  pushl $250
c0103622:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103627:	e9 a0 f5 ff ff       	jmp    c0102bcc <__alltraps>

c010362c <vector251>:
.globl vector251
vector251:
  pushl $0
c010362c:	6a 00                	push   $0x0
  pushl $251
c010362e:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103633:	e9 94 f5 ff ff       	jmp    c0102bcc <__alltraps>

c0103638 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103638:	6a 00                	push   $0x0
  pushl $252
c010363a:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010363f:	e9 88 f5 ff ff       	jmp    c0102bcc <__alltraps>

c0103644 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103644:	6a 00                	push   $0x0
  pushl $253
c0103646:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c010364b:	e9 7c f5 ff ff       	jmp    c0102bcc <__alltraps>

c0103650 <vector254>:
.globl vector254
vector254:
  pushl $0
c0103650:	6a 00                	push   $0x0
  pushl $254
c0103652:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0103657:	e9 70 f5 ff ff       	jmp    c0102bcc <__alltraps>

c010365c <vector255>:
.globl vector255
vector255:
  pushl $0
c010365c:	6a 00                	push   $0x0
  pushl $255
c010365e:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0103663:	e9 64 f5 ff ff       	jmp    c0102bcc <__alltraps>

c0103668 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0103668:	55                   	push   %ebp
c0103669:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010366b:	8b 55 08             	mov    0x8(%ebp),%edx
c010366e:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c0103673:	89 d1                	mov    %edx,%ecx
c0103675:	29 c1                	sub    %eax,%ecx
c0103677:	89 c8                	mov    %ecx,%eax
c0103679:	c1 f8 05             	sar    $0x5,%eax
}
c010367c:	5d                   	pop    %ebp
c010367d:	c3                   	ret    

c010367e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010367e:	55                   	push   %ebp
c010367f:	89 e5                	mov    %esp,%ebp
c0103681:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0103684:	8b 45 08             	mov    0x8(%ebp),%eax
c0103687:	89 04 24             	mov    %eax,(%esp)
c010368a:	e8 d9 ff ff ff       	call   c0103668 <page2ppn>
c010368f:	c1 e0 0c             	shl    $0xc,%eax
}
c0103692:	c9                   	leave  
c0103693:	c3                   	ret    

c0103694 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0103694:	55                   	push   %ebp
c0103695:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0103697:	8b 45 08             	mov    0x8(%ebp),%eax
c010369a:	8b 00                	mov    (%eax),%eax
}
c010369c:	5d                   	pop    %ebp
c010369d:	c3                   	ret    

c010369e <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010369e:	55                   	push   %ebp
c010369f:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01036a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01036a4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01036a7:	89 10                	mov    %edx,(%eax)
}
c01036a9:	5d                   	pop    %ebp
c01036aa:	c3                   	ret    

c01036ab <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01036ab:	55                   	push   %ebp
c01036ac:	89 e5                	mov    %esp,%ebp
c01036ae:	83 ec 10             	sub    $0x10,%esp
c01036b1:	c7 45 fc 14 50 15 c0 	movl   $0xc0155014,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01036b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036bb:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01036be:	89 50 04             	mov    %edx,0x4(%eax)
c01036c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036c4:	8b 50 04             	mov    0x4(%eax),%edx
c01036c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036ca:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c01036cc:	c7 05 1c 50 15 c0 00 	movl   $0x0,0xc015501c
c01036d3:	00 00 00 
}
c01036d6:	c9                   	leave  
c01036d7:	c3                   	ret    

c01036d8 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c01036d8:	55                   	push   %ebp
c01036d9:	89 e5                	mov    %esp,%ebp
c01036db:	53                   	push   %ebx
c01036dc:	83 ec 54             	sub    $0x54,%esp
    assert(n > 0);
c01036df:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01036e3:	75 24                	jne    c0103709 <default_init_memmap+0x31>
c01036e5:	c7 44 24 0c 50 62 11 	movl   $0xc0116250,0xc(%esp)
c01036ec:	c0 
c01036ed:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01036f4:	c0 
c01036f5:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c01036fc:	00 
c01036fd:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103704:	e8 a3 d7 ff ff       	call   c0100eac <__panic>
    struct Page *p = base;
c0103709:	8b 45 08             	mov    0x8(%ebp),%eax
c010370c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010370f:	eb 7d                	jmp    c010378e <default_init_memmap+0xb6>
        assert(PageReserved(p));
c0103711:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103714:	83 c0 04             	add    $0x4,%eax
c0103717:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010371e:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103721:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103724:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103727:	0f a3 10             	bt     %edx,(%eax)
c010372a:	19 db                	sbb    %ebx,%ebx
c010372c:	89 5d e8             	mov    %ebx,-0x18(%ebp)
    return oldbit != 0;
c010372f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103733:	0f 95 c0             	setne  %al
c0103736:	0f b6 c0             	movzbl %al,%eax
c0103739:	85 c0                	test   %eax,%eax
c010373b:	75 24                	jne    c0103761 <default_init_memmap+0x89>
c010373d:	c7 44 24 0c 81 62 11 	movl   $0xc0116281,0xc(%esp)
c0103744:	c0 
c0103745:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c010374c:	c0 
c010374d:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0103754:	00 
c0103755:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c010375c:	e8 4b d7 ff ff       	call   c0100eac <__panic>
        p->flags = p->property = 0;
c0103761:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103764:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c010376b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010376e:	8b 50 08             	mov    0x8(%eax),%edx
c0103771:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103774:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0103777:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010377e:	00 
c010377f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103782:	89 04 24             	mov    %eax,(%esp)
c0103785:	e8 14 ff ff ff       	call   c010369e <set_page_ref>

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010378a:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010378e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103791:	c1 e0 05             	shl    $0x5,%eax
c0103794:	03 45 08             	add    0x8(%ebp),%eax
c0103797:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010379a:	0f 85 71 ff ff ff    	jne    c0103711 <default_init_memmap+0x39>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c01037a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01037a3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01037a6:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c01037a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01037ac:	83 c0 04             	add    $0x4,%eax
c01037af:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01037b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01037b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037bc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01037bf:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c01037c2:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c01037c7:	03 45 0c             	add    0xc(%ebp),%eax
c01037ca:	a3 1c 50 15 c0       	mov    %eax,0xc015501c
    list_add(&free_list, &(base->page_link));
c01037cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01037d2:	83 c0 0c             	add    $0xc,%eax
c01037d5:	c7 45 dc 14 50 15 c0 	movl   $0xc0155014,-0x24(%ebp)
c01037dc:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01037df:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01037e2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01037e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01037e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01037eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01037ee:	8b 40 04             	mov    0x4(%eax),%eax
c01037f1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01037f4:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01037f7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01037fa:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01037fd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103800:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103803:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103806:	89 10                	mov    %edx,(%eax)
c0103808:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010380b:	8b 10                	mov    (%eax),%edx
c010380d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103810:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103813:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103816:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103819:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010381c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010381f:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103822:	89 10                	mov    %edx,(%eax)
}
c0103824:	83 c4 54             	add    $0x54,%esp
c0103827:	5b                   	pop    %ebx
c0103828:	5d                   	pop    %ebp
c0103829:	c3                   	ret    

c010382a <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c010382a:	55                   	push   %ebp
c010382b:	89 e5                	mov    %esp,%ebp
c010382d:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0103830:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103834:	75 24                	jne    c010385a <default_alloc_pages+0x30>
c0103836:	c7 44 24 0c 50 62 11 	movl   $0xc0116250,0xc(%esp)
c010383d:	c0 
c010383e:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103845:	c0 
c0103846:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010384d:	00 
c010384e:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103855:	e8 52 d6 ff ff       	call   c0100eac <__panic>
    if (n > nr_free) {
c010385a:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c010385f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103862:	73 0a                	jae    c010386e <default_alloc_pages+0x44>
        return NULL;
c0103864:	b8 00 00 00 00       	mov    $0x0,%eax
c0103869:	e9 3c 01 00 00       	jmp    c01039aa <default_alloc_pages+0x180>
    }

    struct Page *page = NULL;
c010386e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c0103875:	c7 45 f0 14 50 15 c0 	movl   $0xc0155014,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010387c:	eb 1c                	jmp    c010389a <default_alloc_pages+0x70>
        struct Page *p = le2page(le, page_link);
c010387e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103881:	83 e8 0c             	sub    $0xc,%eax
c0103884:	89 45 ec             	mov    %eax,-0x14(%ebp)
		// cprintf("%d ", (unsigned int)p / sizeof(struct Page));
        if (p->property >= n) {
c0103887:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010388a:	8b 40 08             	mov    0x8(%eax),%eax
c010388d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103890:	72 08                	jb     c010389a <default_alloc_pages+0x70>
            page = p;
c0103892:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103895:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0103898:	eb 18                	jmp    c01038b2 <default_alloc_pages+0x88>
c010389a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010389d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01038a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01038a3:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }

    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01038a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01038a9:	81 7d f0 14 50 15 c0 	cmpl   $0xc0155014,-0x10(%ebp)
c01038b0:	75 cc                	jne    c010387e <default_alloc_pages+0x54>
            page = p;
            break;
        }
    }
	// cprintf("\n");
    if (page != NULL) {
c01038b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01038b6:	0f 84 eb 00 00 00    	je     c01039a7 <default_alloc_pages+0x17d>
        list_del(&(page->page_link));
c01038bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038bf:	83 c0 0c             	add    $0xc,%eax
c01038c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01038c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01038c8:	8b 40 04             	mov    0x4(%eax),%eax
c01038cb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01038ce:	8b 12                	mov    (%edx),%edx
c01038d0:	89 55 dc             	mov    %edx,-0x24(%ebp)
c01038d3:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01038d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038d9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01038dc:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01038df:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01038e2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01038e5:	89 10                	mov    %edx,(%eax)
        if (page->property > n) {
c01038e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038ea:	8b 40 08             	mov    0x8(%eax),%eax
c01038ed:	3b 45 08             	cmp    0x8(%ebp),%eax
c01038f0:	0f 86 8b 00 00 00    	jbe    c0103981 <default_alloc_pages+0x157>
            struct Page *p = page + n;
c01038f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01038f9:	c1 e0 05             	shl    $0x5,%eax
c01038fc:	03 45 f4             	add    -0xc(%ebp),%eax
c01038ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
            p->property = page->property - n;
c0103902:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103905:	8b 40 08             	mov    0x8(%eax),%eax
c0103908:	89 c2                	mov    %eax,%edx
c010390a:	2b 55 08             	sub    0x8(%ebp),%edx
c010390d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103910:	89 50 08             	mov    %edx,0x8(%eax)
			SetPageProperty(p);
c0103913:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103916:	83 c0 04             	add    $0x4,%eax
c0103919:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0103920:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103923:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103926:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103929:	0f ab 10             	bts    %edx,(%eax)
            list_add(&free_list, &(p->page_link));
c010392c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010392f:	83 c0 0c             	add    $0xc,%eax
c0103932:	c7 45 cc 14 50 15 c0 	movl   $0xc0155014,-0x34(%ebp)
c0103939:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010393c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010393f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0103942:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103945:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0103948:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010394b:	8b 40 04             	mov    0x4(%eax),%eax
c010394e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103951:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0103954:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103957:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010395a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010395d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103960:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0103963:	89 10                	mov    %edx,(%eax)
c0103965:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103968:	8b 10                	mov    (%eax),%edx
c010396a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010396d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103970:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103973:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0103976:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103979:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010397c:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010397f:	89 10                	mov    %edx,(%eax)
		}
        nr_free -= n;
c0103981:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c0103986:	2b 45 08             	sub    0x8(%ebp),%eax
c0103989:	a3 1c 50 15 c0       	mov    %eax,0xc015501c
        ClearPageProperty(page);
c010398e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103991:	83 c0 04             	add    $0x4,%eax
c0103994:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c010399b:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010399e:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01039a1:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01039a4:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c01039a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01039aa:	c9                   	leave  
c01039ab:	c3                   	ret    

c01039ac <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01039ac:	55                   	push   %ebp
c01039ad:	89 e5                	mov    %esp,%ebp
c01039af:	53                   	push   %ebx
c01039b0:	81 ec 84 00 00 00    	sub    $0x84,%esp
    assert(n > 0);
c01039b6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01039ba:	75 24                	jne    c01039e0 <default_free_pages+0x34>
c01039bc:	c7 44 24 0c 50 62 11 	movl   $0xc0116250,0xc(%esp)
c01039c3:	c0 
c01039c4:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01039cb:	c0 
c01039cc:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c01039d3:	00 
c01039d4:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c01039db:	e8 cc d4 ff ff       	call   c0100eac <__panic>
    struct Page *p = base;
c01039e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01039e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01039e6:	e9 9d 00 00 00       	jmp    c0103a88 <default_free_pages+0xdc>
        assert(!PageReserved(p) && !PageProperty(p));
c01039eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039ee:	83 c0 04             	add    $0x4,%eax
c01039f1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01039f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01039fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01039fe:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103a01:	0f a3 10             	bt     %edx,(%eax)
c0103a04:	19 db                	sbb    %ebx,%ebx
c0103a06:	89 5d e0             	mov    %ebx,-0x20(%ebp)
    return oldbit != 0;
c0103a09:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0103a0d:	0f 95 c0             	setne  %al
c0103a10:	0f b6 c0             	movzbl %al,%eax
c0103a13:	85 c0                	test   %eax,%eax
c0103a15:	75 2c                	jne    c0103a43 <default_free_pages+0x97>
c0103a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a1a:	83 c0 04             	add    $0x4,%eax
c0103a1d:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
c0103a24:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103a27:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103a2a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103a2d:	0f a3 10             	bt     %edx,(%eax)
c0103a30:	19 db                	sbb    %ebx,%ebx
c0103a32:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
    return oldbit != 0;
c0103a35:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0103a39:	0f 95 c0             	setne  %al
c0103a3c:	0f b6 c0             	movzbl %al,%eax
c0103a3f:	85 c0                	test   %eax,%eax
c0103a41:	74 24                	je     c0103a67 <default_free_pages+0xbb>
c0103a43:	c7 44 24 0c 94 62 11 	movl   $0xc0116294,0xc(%esp)
c0103a4a:	c0 
c0103a4b:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103a52:	c0 
c0103a53:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0103a5a:	00 
c0103a5b:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103a62:	e8 45 d4 ff ff       	call   c0100eac <__panic>
        p->flags = 0;
c0103a67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a6a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c0103a71:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103a78:	00 
c0103a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a7c:	89 04 24             	mov    %eax,(%esp)
c0103a7f:	e8 1a fc ff ff       	call   c010369e <set_page_ref>

static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103a84:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103a88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a8b:	c1 e0 05             	shl    $0x5,%eax
c0103a8e:	03 45 08             	add    0x8(%ebp),%eax
c0103a91:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103a94:	0f 85 51 ff ff ff    	jne    c01039eb <default_free_pages+0x3f>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0103a9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a9d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103aa0:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0103aa3:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aa6:	83 c0 04             	add    $0x4,%eax
c0103aa9:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0103ab0:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103ab3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103ab6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103ab9:	0f ab 10             	bts    %edx,(%eax)
c0103abc:	c7 45 c8 14 50 15 c0 	movl   $0xc0155014,-0x38(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103ac3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103ac6:	8b 40 04             	mov    0x4(%eax),%eax
	
    list_entry_t *le = list_next(&free_list);
c0103ac9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	list_entry_t *insert_loc = &free_list;
c0103acc:	c7 45 ec 14 50 15 c0 	movl   $0xc0155014,-0x14(%ebp)
    while (le != &free_list) {
c0103ad3:	e9 0a 01 00 00       	jmp    c0103be2 <default_free_pages+0x236>
        p = le2page(le, page_link);
c0103ad8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103adb:	83 e8 0c             	sub    $0xc,%eax
c0103ade:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103ae1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ae4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0103ae7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103aea:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103aed:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (base + base->property == p) {
c0103af0:	8b 45 08             	mov    0x8(%ebp),%eax
c0103af3:	8b 40 08             	mov    0x8(%eax),%eax
c0103af6:	c1 e0 05             	shl    $0x5,%eax
c0103af9:	03 45 08             	add    0x8(%ebp),%eax
c0103afc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103aff:	75 5d                	jne    c0103b5e <default_free_pages+0x1b2>
            base->property += p->property;
c0103b01:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b04:	8b 50 08             	mov    0x8(%eax),%edx
c0103b07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b0a:	8b 40 08             	mov    0x8(%eax),%eax
c0103b0d:	01 c2                	add    %eax,%edx
c0103b0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b12:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c0103b15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b18:	83 c0 04             	add    $0x4,%eax
c0103b1b:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103b22:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103b25:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103b28:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103b2b:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c0103b2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b31:	83 c0 0c             	add    $0xc,%eax
c0103b34:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103b37:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103b3a:	8b 40 04             	mov    0x4(%eax),%eax
c0103b3d:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0103b40:	8b 12                	mov    (%edx),%edx
c0103b42:	89 55 b4             	mov    %edx,-0x4c(%ebp)
c0103b45:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103b48:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103b4b:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0103b4e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103b51:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0103b54:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0103b57:	89 10                	mov    %edx,(%eax)
c0103b59:	e9 84 00 00 00       	jmp    c0103be2 <default_free_pages+0x236>
        }
        else if (p + p->property == base) {
c0103b5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b61:	8b 40 08             	mov    0x8(%eax),%eax
c0103b64:	c1 e0 05             	shl    $0x5,%eax
c0103b67:	03 45 f4             	add    -0xc(%ebp),%eax
c0103b6a:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103b6d:	75 60                	jne    c0103bcf <default_free_pages+0x223>
            p->property += base->property;
c0103b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b72:	8b 50 08             	mov    0x8(%eax),%edx
c0103b75:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b78:	8b 40 08             	mov    0x8(%eax),%eax
c0103b7b:	01 c2                	add    %eax,%edx
c0103b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b80:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c0103b83:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b86:	83 c0 04             	add    $0x4,%eax
c0103b89:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c0103b90:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0103b93:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103b96:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0103b99:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c0103b9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b9f:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0103ba2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ba5:	83 c0 0c             	add    $0xc,%eax
c0103ba8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103bab:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0103bae:	8b 40 04             	mov    0x4(%eax),%eax
c0103bb1:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0103bb4:	8b 12                	mov    (%edx),%edx
c0103bb6:	89 55 a0             	mov    %edx,-0x60(%ebp)
c0103bb9:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103bbc:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0103bbf:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0103bc2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103bc5:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0103bc8:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0103bcb:	89 10                	mov    %edx,(%eax)
c0103bcd:	eb 13                	jmp    c0103be2 <default_free_pages+0x236>
        } 
		else if ((unsigned int)p < (unsigned int)base) {
c0103bcf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103bd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bd5:	39 c2                	cmp    %eax,%edx
c0103bd7:	73 09                	jae    c0103be2 <default_free_pages+0x236>
			insert_loc = &(p->page_link);
c0103bd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bdc:	83 c0 0c             	add    $0xc,%eax
c0103bdf:	89 45 ec             	mov    %eax,-0x14(%ebp)
    base->property = n;
    SetPageProperty(base);
	
    list_entry_t *le = list_next(&free_list);
	list_entry_t *insert_loc = &free_list;
    while (le != &free_list) {
c0103be2:	81 7d f0 14 50 15 c0 	cmpl   $0xc0155014,-0x10(%ebp)
c0103be9:	0f 85 e9 fe ff ff    	jne    c0103ad8 <default_free_pages+0x12c>
        } 
		else if ((unsigned int)p < (unsigned int)base) {
			insert_loc = &(p->page_link);
		}
    }
    nr_free += n;	
c0103bef:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c0103bf4:	03 45 0c             	add    0xc(%ebp),%eax
c0103bf7:	a3 1c 50 15 c0       	mov    %eax,0xc015501c
	list_add_after(insert_loc, &(base->page_link));
c0103bfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bff:	8d 50 0c             	lea    0xc(%eax),%edx
c0103c02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c05:	89 45 98             	mov    %eax,-0x68(%ebp)
c0103c08:	89 55 94             	mov    %edx,-0x6c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0103c0b:	8b 45 98             	mov    -0x68(%ebp),%eax
c0103c0e:	8b 40 04             	mov    0x4(%eax),%eax
c0103c11:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0103c14:	89 55 90             	mov    %edx,-0x70(%ebp)
c0103c17:	8b 55 98             	mov    -0x68(%ebp),%edx
c0103c1a:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0103c1d:	89 45 88             	mov    %eax,-0x78(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103c20:	8b 45 88             	mov    -0x78(%ebp),%eax
c0103c23:	8b 55 90             	mov    -0x70(%ebp),%edx
c0103c26:	89 10                	mov    %edx,(%eax)
c0103c28:	8b 45 88             	mov    -0x78(%ebp),%eax
c0103c2b:	8b 10                	mov    (%eax),%edx
c0103c2d:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103c30:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103c33:	8b 45 90             	mov    -0x70(%ebp),%eax
c0103c36:	8b 55 88             	mov    -0x78(%ebp),%edx
c0103c39:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103c3c:	8b 45 90             	mov    -0x70(%ebp),%eax
c0103c3f:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0103c42:	89 10                	mov    %edx,(%eax)
}
c0103c44:	81 c4 84 00 00 00    	add    $0x84,%esp
c0103c4a:	5b                   	pop    %ebx
c0103c4b:	5d                   	pop    %ebp
c0103c4c:	c3                   	ret    

c0103c4d <print_free_list>:

void print_free_list(void) {
c0103c4d:	55                   	push   %ebp
c0103c4e:	89 e5                	mov    %esp,%ebp
c0103c50:	83 ec 28             	sub    $0x28,%esp
c0103c53:	c7 45 ec 14 50 15 c0 	movl   $0xc0155014,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103c5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c5d:	8b 40 04             	mov    0x4(%eax),%eax
	list_entry_t *le = list_next(&free_list);
c0103c60:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("free list: ");
c0103c63:	c7 04 24 b9 62 11 c0 	movl   $0xc01162b9,(%esp)
c0103c6a:	e8 01 c7 ff ff       	call   c0100370 <cprintf>
    while (le != &free_list) {
c0103c6f:	eb 2e                	jmp    c0103c9f <print_free_list+0x52>
		struct Page *page = le2page(le, page_link);
c0103c71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c74:	83 e8 0c             	sub    $0xc,%eax
c0103c77:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("%d ", (unsigned int)page / sizeof(struct Page));
c0103c7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c7d:	c1 e8 05             	shr    $0x5,%eax
c0103c80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103c84:	c7 04 24 c5 62 11 c0 	movl   $0xc01162c5,(%esp)
c0103c8b:	e8 e0 c6 ff ff       	call   c0100370 <cprintf>
c0103c90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c93:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103c96:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103c99:	8b 40 04             	mov    0x4(%eax),%eax
		le = list_next(le);
c0103c9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

void print_free_list(void) {
	list_entry_t *le = list_next(&free_list);
	cprintf("free list: ");
    while (le != &free_list) {
c0103c9f:	81 7d f4 14 50 15 c0 	cmpl   $0xc0155014,-0xc(%ebp)
c0103ca6:	75 c9                	jne    c0103c71 <print_free_list+0x24>
		struct Page *page = le2page(le, page_link);
		cprintf("%d ", (unsigned int)page / sizeof(struct Page));
		le = list_next(le);
	}
	cprintf("\n");
c0103ca8:	c7 04 24 c9 62 11 c0 	movl   $0xc01162c9,(%esp)
c0103caf:	e8 bc c6 ff ff       	call   c0100370 <cprintf>
}
c0103cb4:	c9                   	leave  
c0103cb5:	c3                   	ret    

c0103cb6 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103cb6:	55                   	push   %ebp
c0103cb7:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103cb9:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
}
c0103cbe:	5d                   	pop    %ebp
c0103cbf:	c3                   	ret    

c0103cc0 <basic_check>:

static void
basic_check(void) {
c0103cc0:	55                   	push   %ebp
c0103cc1:	89 e5                	mov    %esp,%ebp
c0103cc3:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103cc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103ccd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103cd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cd6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103cd9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ce0:	e8 f8 15 00 00       	call   c01052dd <alloc_pages>
c0103ce5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103ce8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103cec:	75 24                	jne    c0103d12 <basic_check+0x52>
c0103cee:	c7 44 24 0c cb 62 11 	movl   $0xc01162cb,0xc(%esp)
c0103cf5:	c0 
c0103cf6:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103cfd:	c0 
c0103cfe:	c7 44 24 04 ab 00 00 	movl   $0xab,0x4(%esp)
c0103d05:	00 
c0103d06:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103d0d:	e8 9a d1 ff ff       	call   c0100eac <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103d12:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d19:	e8 bf 15 00 00       	call   c01052dd <alloc_pages>
c0103d1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103d21:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103d25:	75 24                	jne    c0103d4b <basic_check+0x8b>
c0103d27:	c7 44 24 0c e7 62 11 	movl   $0xc01162e7,0xc(%esp)
c0103d2e:	c0 
c0103d2f:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103d36:	c0 
c0103d37:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
c0103d3e:	00 
c0103d3f:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103d46:	e8 61 d1 ff ff       	call   c0100eac <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103d4b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d52:	e8 86 15 00 00       	call   c01052dd <alloc_pages>
c0103d57:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103d5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103d5e:	75 24                	jne    c0103d84 <basic_check+0xc4>
c0103d60:	c7 44 24 0c 03 63 11 	movl   $0xc0116303,0xc(%esp)
c0103d67:	c0 
c0103d68:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103d6f:	c0 
c0103d70:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0103d77:	00 
c0103d78:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103d7f:	e8 28 d1 ff ff       	call   c0100eac <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103d84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d87:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103d8a:	74 10                	je     c0103d9c <basic_check+0xdc>
c0103d8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d8f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103d92:	74 08                	je     c0103d9c <basic_check+0xdc>
c0103d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d97:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103d9a:	75 24                	jne    c0103dc0 <basic_check+0x100>
c0103d9c:	c7 44 24 0c 20 63 11 	movl   $0xc0116320,0xc(%esp)
c0103da3:	c0 
c0103da4:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103dab:	c0 
c0103dac:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0103db3:	00 
c0103db4:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103dbb:	e8 ec d0 ff ff       	call   c0100eac <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103dc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103dc3:	89 04 24             	mov    %eax,(%esp)
c0103dc6:	e8 c9 f8 ff ff       	call   c0103694 <page_ref>
c0103dcb:	85 c0                	test   %eax,%eax
c0103dcd:	75 1e                	jne    c0103ded <basic_check+0x12d>
c0103dcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103dd2:	89 04 24             	mov    %eax,(%esp)
c0103dd5:	e8 ba f8 ff ff       	call   c0103694 <page_ref>
c0103dda:	85 c0                	test   %eax,%eax
c0103ddc:	75 0f                	jne    c0103ded <basic_check+0x12d>
c0103dde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103de1:	89 04 24             	mov    %eax,(%esp)
c0103de4:	e8 ab f8 ff ff       	call   c0103694 <page_ref>
c0103de9:	85 c0                	test   %eax,%eax
c0103deb:	74 24                	je     c0103e11 <basic_check+0x151>
c0103ded:	c7 44 24 0c 44 63 11 	movl   $0xc0116344,0xc(%esp)
c0103df4:	c0 
c0103df5:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103dfc:	c0 
c0103dfd:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0103e04:	00 
c0103e05:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103e0c:	e8 9b d0 ff ff       	call   c0100eac <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103e11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103e14:	89 04 24             	mov    %eax,(%esp)
c0103e17:	e8 62 f8 ff ff       	call   c010367e <page2pa>
c0103e1c:	8b 15 80 1e 15 c0    	mov    0xc0151e80,%edx
c0103e22:	c1 e2 0c             	shl    $0xc,%edx
c0103e25:	39 d0                	cmp    %edx,%eax
c0103e27:	72 24                	jb     c0103e4d <basic_check+0x18d>
c0103e29:	c7 44 24 0c 80 63 11 	movl   $0xc0116380,0xc(%esp)
c0103e30:	c0 
c0103e31:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103e38:	c0 
c0103e39:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0103e40:	00 
c0103e41:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103e48:	e8 5f d0 ff ff       	call   c0100eac <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103e4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e50:	89 04 24             	mov    %eax,(%esp)
c0103e53:	e8 26 f8 ff ff       	call   c010367e <page2pa>
c0103e58:	8b 15 80 1e 15 c0    	mov    0xc0151e80,%edx
c0103e5e:	c1 e2 0c             	shl    $0xc,%edx
c0103e61:	39 d0                	cmp    %edx,%eax
c0103e63:	72 24                	jb     c0103e89 <basic_check+0x1c9>
c0103e65:	c7 44 24 0c 9d 63 11 	movl   $0xc011639d,0xc(%esp)
c0103e6c:	c0 
c0103e6d:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103e74:	c0 
c0103e75:	c7 44 24 04 b3 00 00 	movl   $0xb3,0x4(%esp)
c0103e7c:	00 
c0103e7d:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103e84:	e8 23 d0 ff ff       	call   c0100eac <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103e89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e8c:	89 04 24             	mov    %eax,(%esp)
c0103e8f:	e8 ea f7 ff ff       	call   c010367e <page2pa>
c0103e94:	8b 15 80 1e 15 c0    	mov    0xc0151e80,%edx
c0103e9a:	c1 e2 0c             	shl    $0xc,%edx
c0103e9d:	39 d0                	cmp    %edx,%eax
c0103e9f:	72 24                	jb     c0103ec5 <basic_check+0x205>
c0103ea1:	c7 44 24 0c ba 63 11 	movl   $0xc01163ba,0xc(%esp)
c0103ea8:	c0 
c0103ea9:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103eb0:	c0 
c0103eb1:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103eb8:	00 
c0103eb9:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103ec0:	e8 e7 cf ff ff       	call   c0100eac <__panic>

    list_entry_t free_list_store = free_list;
c0103ec5:	a1 14 50 15 c0       	mov    0xc0155014,%eax
c0103eca:	8b 15 18 50 15 c0    	mov    0xc0155018,%edx
c0103ed0:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103ed3:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103ed6:	c7 45 e0 14 50 15 c0 	movl   $0xc0155014,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103edd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103ee0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103ee3:	89 50 04             	mov    %edx,0x4(%eax)
c0103ee6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103ee9:	8b 50 04             	mov    0x4(%eax),%edx
c0103eec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103eef:	89 10                	mov    %edx,(%eax)
c0103ef1:	c7 45 dc 14 50 15 c0 	movl   $0xc0155014,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103ef8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103efb:	8b 40 04             	mov    0x4(%eax),%eax
c0103efe:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103f01:	0f 94 c0             	sete   %al
c0103f04:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103f07:	85 c0                	test   %eax,%eax
c0103f09:	75 24                	jne    c0103f2f <basic_check+0x26f>
c0103f0b:	c7 44 24 0c d7 63 11 	movl   $0xc01163d7,0xc(%esp)
c0103f12:	c0 
c0103f13:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103f1a:	c0 
c0103f1b:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c0103f22:	00 
c0103f23:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103f2a:	e8 7d cf ff ff       	call   c0100eac <__panic>

    unsigned int nr_free_store = nr_free;
c0103f2f:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c0103f34:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103f37:	c7 05 1c 50 15 c0 00 	movl   $0x0,0xc015501c
c0103f3e:	00 00 00 

    assert(alloc_page() == NULL);
c0103f41:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f48:	e8 90 13 00 00       	call   c01052dd <alloc_pages>
c0103f4d:	85 c0                	test   %eax,%eax
c0103f4f:	74 24                	je     c0103f75 <basic_check+0x2b5>
c0103f51:	c7 44 24 0c ee 63 11 	movl   $0xc01163ee,0xc(%esp)
c0103f58:	c0 
c0103f59:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103f60:	c0 
c0103f61:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0103f68:	00 
c0103f69:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103f70:	e8 37 cf ff ff       	call   c0100eac <__panic>

    free_page(p0);
c0103f75:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f7c:	00 
c0103f7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f80:	89 04 24             	mov    %eax,(%esp)
c0103f83:	e8 c0 13 00 00       	call   c0105348 <free_pages>
    free_page(p1);
c0103f88:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f8f:	00 
c0103f90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f93:	89 04 24             	mov    %eax,(%esp)
c0103f96:	e8 ad 13 00 00       	call   c0105348 <free_pages>
    free_page(p2);
c0103f9b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103fa2:	00 
c0103fa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fa6:	89 04 24             	mov    %eax,(%esp)
c0103fa9:	e8 9a 13 00 00       	call   c0105348 <free_pages>
    assert(nr_free == 3);
c0103fae:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c0103fb3:	83 f8 03             	cmp    $0x3,%eax
c0103fb6:	74 24                	je     c0103fdc <basic_check+0x31c>
c0103fb8:	c7 44 24 0c 03 64 11 	movl   $0xc0116403,0xc(%esp)
c0103fbf:	c0 
c0103fc0:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0103fc7:	c0 
c0103fc8:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
c0103fcf:	00 
c0103fd0:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0103fd7:	e8 d0 ce ff ff       	call   c0100eac <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103fdc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fe3:	e8 f5 12 00 00       	call   c01052dd <alloc_pages>
c0103fe8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103feb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103fef:	75 24                	jne    c0104015 <basic_check+0x355>
c0103ff1:	c7 44 24 0c cb 62 11 	movl   $0xc01162cb,0xc(%esp)
c0103ff8:	c0 
c0103ff9:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104000:	c0 
c0104001:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0104008:	00 
c0104009:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104010:	e8 97 ce ff ff       	call   c0100eac <__panic>
    assert((p1 = alloc_page()) != NULL);
c0104015:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010401c:	e8 bc 12 00 00       	call   c01052dd <alloc_pages>
c0104021:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104024:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104028:	75 24                	jne    c010404e <basic_check+0x38e>
c010402a:	c7 44 24 0c e7 62 11 	movl   $0xc01162e7,0xc(%esp)
c0104031:	c0 
c0104032:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104039:	c0 
c010403a:	c7 44 24 04 c5 00 00 	movl   $0xc5,0x4(%esp)
c0104041:	00 
c0104042:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104049:	e8 5e ce ff ff       	call   c0100eac <__panic>
    assert((p2 = alloc_page()) != NULL);
c010404e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104055:	e8 83 12 00 00       	call   c01052dd <alloc_pages>
c010405a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010405d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104061:	75 24                	jne    c0104087 <basic_check+0x3c7>
c0104063:	c7 44 24 0c 03 63 11 	movl   $0xc0116303,0xc(%esp)
c010406a:	c0 
c010406b:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104072:	c0 
c0104073:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c010407a:	00 
c010407b:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104082:	e8 25 ce ff ff       	call   c0100eac <__panic>

    assert(alloc_page() == NULL);
c0104087:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010408e:	e8 4a 12 00 00       	call   c01052dd <alloc_pages>
c0104093:	85 c0                	test   %eax,%eax
c0104095:	74 24                	je     c01040bb <basic_check+0x3fb>
c0104097:	c7 44 24 0c ee 63 11 	movl   $0xc01163ee,0xc(%esp)
c010409e:	c0 
c010409f:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01040a6:	c0 
c01040a7:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c01040ae:	00 
c01040af:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c01040b6:	e8 f1 cd ff ff       	call   c0100eac <__panic>

    free_page(p0);
c01040bb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01040c2:	00 
c01040c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040c6:	89 04 24             	mov    %eax,(%esp)
c01040c9:	e8 7a 12 00 00       	call   c0105348 <free_pages>
c01040ce:	c7 45 d8 14 50 15 c0 	movl   $0xc0155014,-0x28(%ebp)
c01040d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01040d8:	8b 40 04             	mov    0x4(%eax),%eax
c01040db:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c01040de:	0f 94 c0             	sete   %al
c01040e1:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c01040e4:	85 c0                	test   %eax,%eax
c01040e6:	74 24                	je     c010410c <basic_check+0x44c>
c01040e8:	c7 44 24 0c 10 64 11 	movl   $0xc0116410,0xc(%esp)
c01040ef:	c0 
c01040f0:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01040f7:	c0 
c01040f8:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01040ff:	00 
c0104100:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104107:	e8 a0 cd ff ff       	call   c0100eac <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c010410c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104113:	e8 c5 11 00 00       	call   c01052dd <alloc_pages>
c0104118:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010411b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010411e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104121:	74 24                	je     c0104147 <basic_check+0x487>
c0104123:	c7 44 24 0c 28 64 11 	movl   $0xc0116428,0xc(%esp)
c010412a:	c0 
c010412b:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104132:	c0 
c0104133:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c010413a:	00 
c010413b:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104142:	e8 65 cd ff ff       	call   c0100eac <__panic>
    assert(alloc_page() == NULL);
c0104147:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010414e:	e8 8a 11 00 00       	call   c01052dd <alloc_pages>
c0104153:	85 c0                	test   %eax,%eax
c0104155:	74 24                	je     c010417b <basic_check+0x4bb>
c0104157:	c7 44 24 0c ee 63 11 	movl   $0xc01163ee,0xc(%esp)
c010415e:	c0 
c010415f:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104166:	c0 
c0104167:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
c010416e:	00 
c010416f:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104176:	e8 31 cd ff ff       	call   c0100eac <__panic>

    assert(nr_free == 0);
c010417b:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c0104180:	85 c0                	test   %eax,%eax
c0104182:	74 24                	je     c01041a8 <basic_check+0x4e8>
c0104184:	c7 44 24 0c 41 64 11 	movl   $0xc0116441,0xc(%esp)
c010418b:	c0 
c010418c:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104193:	c0 
c0104194:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c010419b:	00 
c010419c:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c01041a3:	e8 04 cd ff ff       	call   c0100eac <__panic>
    free_list = free_list_store;
c01041a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01041ab:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01041ae:	a3 14 50 15 c0       	mov    %eax,0xc0155014
c01041b3:	89 15 18 50 15 c0    	mov    %edx,0xc0155018
    nr_free = nr_free_store;
c01041b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041bc:	a3 1c 50 15 c0       	mov    %eax,0xc015501c

    free_page(p);
c01041c1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01041c8:	00 
c01041c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041cc:	89 04 24             	mov    %eax,(%esp)
c01041cf:	e8 74 11 00 00       	call   c0105348 <free_pages>
    free_page(p1);
c01041d4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01041db:	00 
c01041dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01041df:	89 04 24             	mov    %eax,(%esp)
c01041e2:	e8 61 11 00 00       	call   c0105348 <free_pages>
    free_page(p2);
c01041e7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01041ee:	00 
c01041ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01041f2:	89 04 24             	mov    %eax,(%esp)
c01041f5:	e8 4e 11 00 00       	call   c0105348 <free_pages>
}
c01041fa:	c9                   	leave  
c01041fb:	c3                   	ret    

c01041fc <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c01041fc:	55                   	push   %ebp
c01041fd:	89 e5                	mov    %esp,%ebp
c01041ff:	53                   	push   %ebx
c0104200:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104206:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010420d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0104214:	c7 45 ec 14 50 15 c0 	movl   $0xc0155014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010421b:	eb 6b                	jmp    c0104288 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c010421d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104220:	83 e8 0c             	sub    $0xc,%eax
c0104223:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104226:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104229:	83 c0 04             	add    $0x4,%eax
c010422c:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0104233:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104236:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104239:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010423c:	0f a3 10             	bt     %edx,(%eax)
c010423f:	19 db                	sbb    %ebx,%ebx
c0104241:	89 5d c8             	mov    %ebx,-0x38(%ebp)
    return oldbit != 0;
c0104244:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0104248:	0f 95 c0             	setne  %al
c010424b:	0f b6 c0             	movzbl %al,%eax
c010424e:	85 c0                	test   %eax,%eax
c0104250:	75 24                	jne    c0104276 <default_check+0x7a>
c0104252:	c7 44 24 0c 4e 64 11 	movl   $0xc011644e,0xc(%esp)
c0104259:	c0 
c010425a:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104261:	c0 
c0104262:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c0104269:	00 
c010426a:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104271:	e8 36 cc ff ff       	call   c0100eac <__panic>
        count ++, total += p->property;
c0104276:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010427a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010427d:	8b 50 08             	mov    0x8(%eax),%edx
c0104280:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104283:	01 d0                	add    %edx,%eax
c0104285:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104288:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010428b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010428e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104291:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104294:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104297:	81 7d ec 14 50 15 c0 	cmpl   $0xc0155014,-0x14(%ebp)
c010429e:	0f 85 79 ff ff ff    	jne    c010421d <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01042a4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01042a7:	e8 ce 10 00 00       	call   c010537a <nr_free_pages>
c01042ac:	39 c3                	cmp    %eax,%ebx
c01042ae:	74 24                	je     c01042d4 <default_check+0xd8>
c01042b0:	c7 44 24 0c 5e 64 11 	movl   $0xc011645e,0xc(%esp)
c01042b7:	c0 
c01042b8:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01042bf:	c0 
c01042c0:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c01042c7:	00 
c01042c8:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c01042cf:	e8 d8 cb ff ff       	call   c0100eac <__panic>

    basic_check();
c01042d4:	e8 e7 f9 ff ff       	call   c0103cc0 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c01042d9:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c01042e0:	e8 f8 0f 00 00       	call   c01052dd <alloc_pages>
c01042e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c01042e8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01042ec:	75 24                	jne    c0104312 <default_check+0x116>
c01042ee:	c7 44 24 0c 77 64 11 	movl   $0xc0116477,0xc(%esp)
c01042f5:	c0 
c01042f6:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01042fd:	c0 
c01042fe:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c0104305:	00 
c0104306:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c010430d:	e8 9a cb ff ff       	call   c0100eac <__panic>
    assert(!PageProperty(p0));
c0104312:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104315:	83 c0 04             	add    $0x4,%eax
c0104318:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010431f:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104322:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104325:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104328:	0f a3 10             	bt     %edx,(%eax)
c010432b:	19 db                	sbb    %ebx,%ebx
c010432d:	89 5d b8             	mov    %ebx,-0x48(%ebp)
    return oldbit != 0;
c0104330:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104334:	0f 95 c0             	setne  %al
c0104337:	0f b6 c0             	movzbl %al,%eax
c010433a:	85 c0                	test   %eax,%eax
c010433c:	74 24                	je     c0104362 <default_check+0x166>
c010433e:	c7 44 24 0c 82 64 11 	movl   $0xc0116482,0xc(%esp)
c0104345:	c0 
c0104346:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c010434d:	c0 
c010434e:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c0104355:	00 
c0104356:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c010435d:	e8 4a cb ff ff       	call   c0100eac <__panic>

    list_entry_t free_list_store = free_list;
c0104362:	a1 14 50 15 c0       	mov    0xc0155014,%eax
c0104367:	8b 15 18 50 15 c0    	mov    0xc0155018,%edx
c010436d:	89 45 80             	mov    %eax,-0x80(%ebp)
c0104370:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0104373:	c7 45 b4 14 50 15 c0 	movl   $0xc0155014,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010437a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010437d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0104380:	89 50 04             	mov    %edx,0x4(%eax)
c0104383:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104386:	8b 50 04             	mov    0x4(%eax),%edx
c0104389:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010438c:	89 10                	mov    %edx,(%eax)
c010438e:	c7 45 b0 14 50 15 c0 	movl   $0xc0155014,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0104395:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104398:	8b 40 04             	mov    0x4(%eax),%eax
c010439b:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c010439e:	0f 94 c0             	sete   %al
c01043a1:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01043a4:	85 c0                	test   %eax,%eax
c01043a6:	75 24                	jne    c01043cc <default_check+0x1d0>
c01043a8:	c7 44 24 0c d7 63 11 	movl   $0xc01163d7,0xc(%esp)
c01043af:	c0 
c01043b0:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01043b7:	c0 
c01043b8:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c01043bf:	00 
c01043c0:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c01043c7:	e8 e0 ca ff ff       	call   c0100eac <__panic>
    assert(alloc_page() == NULL);
c01043cc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01043d3:	e8 05 0f 00 00       	call   c01052dd <alloc_pages>
c01043d8:	85 c0                	test   %eax,%eax
c01043da:	74 24                	je     c0104400 <default_check+0x204>
c01043dc:	c7 44 24 0c ee 63 11 	movl   $0xc01163ee,0xc(%esp)
c01043e3:	c0 
c01043e4:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01043eb:	c0 
c01043ec:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
c01043f3:	00 
c01043f4:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c01043fb:	e8 ac ca ff ff       	call   c0100eac <__panic>

    unsigned int nr_free_store = nr_free;
c0104400:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c0104405:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104408:	c7 05 1c 50 15 c0 00 	movl   $0x0,0xc015501c
c010440f:	00 00 00 

    free_pages(p0 + 2, 3);
c0104412:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104415:	83 c0 40             	add    $0x40,%eax
c0104418:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010441f:	00 
c0104420:	89 04 24             	mov    %eax,(%esp)
c0104423:	e8 20 0f 00 00       	call   c0105348 <free_pages>
    assert(alloc_pages(4) == NULL);
c0104428:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010442f:	e8 a9 0e 00 00       	call   c01052dd <alloc_pages>
c0104434:	85 c0                	test   %eax,%eax
c0104436:	74 24                	je     c010445c <default_check+0x260>
c0104438:	c7 44 24 0c 94 64 11 	movl   $0xc0116494,0xc(%esp)
c010443f:	c0 
c0104440:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104447:	c0 
c0104448:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
c010444f:	00 
c0104450:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104457:	e8 50 ca ff ff       	call   c0100eac <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c010445c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010445f:	83 c0 40             	add    $0x40,%eax
c0104462:	83 c0 04             	add    $0x4,%eax
c0104465:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c010446c:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010446f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0104472:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0104475:	0f a3 10             	bt     %edx,(%eax)
c0104478:	19 db                	sbb    %ebx,%ebx
c010447a:	89 5d a4             	mov    %ebx,-0x5c(%ebp)
    return oldbit != 0;
c010447d:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c0104481:	0f 95 c0             	setne  %al
c0104484:	0f b6 c0             	movzbl %al,%eax
c0104487:	85 c0                	test   %eax,%eax
c0104489:	74 0e                	je     c0104499 <default_check+0x29d>
c010448b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010448e:	83 c0 40             	add    $0x40,%eax
c0104491:	8b 40 08             	mov    0x8(%eax),%eax
c0104494:	83 f8 03             	cmp    $0x3,%eax
c0104497:	74 24                	je     c01044bd <default_check+0x2c1>
c0104499:	c7 44 24 0c ac 64 11 	movl   $0xc01164ac,0xc(%esp)
c01044a0:	c0 
c01044a1:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01044a8:	c0 
c01044a9:	c7 44 24 04 f7 00 00 	movl   $0xf7,0x4(%esp)
c01044b0:	00 
c01044b1:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c01044b8:	e8 ef c9 ff ff       	call   c0100eac <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c01044bd:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c01044c4:	e8 14 0e 00 00       	call   c01052dd <alloc_pages>
c01044c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01044cc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01044d0:	75 24                	jne    c01044f6 <default_check+0x2fa>
c01044d2:	c7 44 24 0c d8 64 11 	movl   $0xc01164d8,0xc(%esp)
c01044d9:	c0 
c01044da:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01044e1:	c0 
c01044e2:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01044e9:	00 
c01044ea:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c01044f1:	e8 b6 c9 ff ff       	call   c0100eac <__panic>
    assert(alloc_page() == NULL);
c01044f6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01044fd:	e8 db 0d 00 00       	call   c01052dd <alloc_pages>
c0104502:	85 c0                	test   %eax,%eax
c0104504:	74 24                	je     c010452a <default_check+0x32e>
c0104506:	c7 44 24 0c ee 63 11 	movl   $0xc01163ee,0xc(%esp)
c010450d:	c0 
c010450e:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104515:	c0 
c0104516:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c010451d:	00 
c010451e:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104525:	e8 82 c9 ff ff       	call   c0100eac <__panic>
    assert(p0 + 2 == p1);
c010452a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010452d:	83 c0 40             	add    $0x40,%eax
c0104530:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0104533:	74 24                	je     c0104559 <default_check+0x35d>
c0104535:	c7 44 24 0c f6 64 11 	movl   $0xc01164f6,0xc(%esp)
c010453c:	c0 
c010453d:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104544:	c0 
c0104545:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c010454c:	00 
c010454d:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104554:	e8 53 c9 ff ff       	call   c0100eac <__panic>

    p2 = p0 + 1;
c0104559:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010455c:	83 c0 20             	add    $0x20,%eax
c010455f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c0104562:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104569:	00 
c010456a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010456d:	89 04 24             	mov    %eax,(%esp)
c0104570:	e8 d3 0d 00 00       	call   c0105348 <free_pages>
    free_pages(p1, 3);
c0104575:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010457c:	00 
c010457d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104580:	89 04 24             	mov    %eax,(%esp)
c0104583:	e8 c0 0d 00 00       	call   c0105348 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c0104588:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010458b:	83 c0 04             	add    $0x4,%eax
c010458e:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c0104595:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104598:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010459b:	8b 55 a0             	mov    -0x60(%ebp),%edx
c010459e:	0f a3 10             	bt     %edx,(%eax)
c01045a1:	19 db                	sbb    %ebx,%ebx
c01045a3:	89 5d 98             	mov    %ebx,-0x68(%ebp)
    return oldbit != 0;
c01045a6:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c01045aa:	0f 95 c0             	setne  %al
c01045ad:	0f b6 c0             	movzbl %al,%eax
c01045b0:	85 c0                	test   %eax,%eax
c01045b2:	74 0b                	je     c01045bf <default_check+0x3c3>
c01045b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01045b7:	8b 40 08             	mov    0x8(%eax),%eax
c01045ba:	83 f8 01             	cmp    $0x1,%eax
c01045bd:	74 24                	je     c01045e3 <default_check+0x3e7>
c01045bf:	c7 44 24 0c 04 65 11 	movl   $0xc0116504,0xc(%esp)
c01045c6:	c0 
c01045c7:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01045ce:	c0 
c01045cf:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c01045d6:	00 
c01045d7:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c01045de:	e8 c9 c8 ff ff       	call   c0100eac <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c01045e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01045e6:	83 c0 04             	add    $0x4,%eax
c01045e9:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c01045f0:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01045f3:	8b 45 90             	mov    -0x70(%ebp),%eax
c01045f6:	8b 55 94             	mov    -0x6c(%ebp),%edx
c01045f9:	0f a3 10             	bt     %edx,(%eax)
c01045fc:	19 db                	sbb    %ebx,%ebx
c01045fe:	89 5d 8c             	mov    %ebx,-0x74(%ebp)
    return oldbit != 0;
c0104601:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104605:	0f 95 c0             	setne  %al
c0104608:	0f b6 c0             	movzbl %al,%eax
c010460b:	85 c0                	test   %eax,%eax
c010460d:	74 0b                	je     c010461a <default_check+0x41e>
c010460f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104612:	8b 40 08             	mov    0x8(%eax),%eax
c0104615:	83 f8 03             	cmp    $0x3,%eax
c0104618:	74 24                	je     c010463e <default_check+0x442>
c010461a:	c7 44 24 0c 2c 65 11 	movl   $0xc011652c,0xc(%esp)
c0104621:	c0 
c0104622:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104629:	c0 
c010462a:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0104631:	00 
c0104632:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104639:	e8 6e c8 ff ff       	call   c0100eac <__panic>
	// cprintf("%d %d\n", (unsigned int)alloc_page() / sizeof(struct Page), (unsigned int)p2 / sizeof(struct Page));
    assert((p0 = alloc_page()) == p2 - 1);
c010463e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104645:	e8 93 0c 00 00       	call   c01052dd <alloc_pages>
c010464a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010464d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104650:	83 e8 20             	sub    $0x20,%eax
c0104653:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104656:	74 24                	je     c010467c <default_check+0x480>
c0104658:	c7 44 24 0c 52 65 11 	movl   $0xc0116552,0xc(%esp)
c010465f:	c0 
c0104660:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104667:	c0 
c0104668:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c010466f:	00 
c0104670:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104677:	e8 30 c8 ff ff       	call   c0100eac <__panic>
    free_page(p0);
c010467c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104683:	00 
c0104684:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104687:	89 04 24             	mov    %eax,(%esp)
c010468a:	e8 b9 0c 00 00       	call   c0105348 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c010468f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0104696:	e8 42 0c 00 00       	call   c01052dd <alloc_pages>
c010469b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010469e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01046a1:	83 c0 20             	add    $0x20,%eax
c01046a4:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01046a7:	74 24                	je     c01046cd <default_check+0x4d1>
c01046a9:	c7 44 24 0c 70 65 11 	movl   $0xc0116570,0xc(%esp)
c01046b0:	c0 
c01046b1:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c01046b8:	c0 
c01046b9:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c01046c0:	00 
c01046c1:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c01046c8:	e8 df c7 ff ff       	call   c0100eac <__panic>

    free_pages(p0, 2);
c01046cd:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01046d4:	00 
c01046d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01046d8:	89 04 24             	mov    %eax,(%esp)
c01046db:	e8 68 0c 00 00       	call   c0105348 <free_pages>
    free_page(p2);
c01046e0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01046e7:	00 
c01046e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01046eb:	89 04 24             	mov    %eax,(%esp)
c01046ee:	e8 55 0c 00 00       	call   c0105348 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c01046f3:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c01046fa:	e8 de 0b 00 00       	call   c01052dd <alloc_pages>
c01046ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104702:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104706:	75 24                	jne    c010472c <default_check+0x530>
c0104708:	c7 44 24 0c 90 65 11 	movl   $0xc0116590,0xc(%esp)
c010470f:	c0 
c0104710:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104717:	c0 
c0104718:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
c010471f:	00 
c0104720:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104727:	e8 80 c7 ff ff       	call   c0100eac <__panic>
    assert(alloc_page() == NULL);
c010472c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104733:	e8 a5 0b 00 00       	call   c01052dd <alloc_pages>
c0104738:	85 c0                	test   %eax,%eax
c010473a:	74 24                	je     c0104760 <default_check+0x564>
c010473c:	c7 44 24 0c ee 63 11 	movl   $0xc01163ee,0xc(%esp)
c0104743:	c0 
c0104744:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c010474b:	c0 
c010474c:	c7 44 24 04 0a 01 00 	movl   $0x10a,0x4(%esp)
c0104753:	00 
c0104754:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c010475b:	e8 4c c7 ff ff       	call   c0100eac <__panic>

    assert(nr_free == 0);
c0104760:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c0104765:	85 c0                	test   %eax,%eax
c0104767:	74 24                	je     c010478d <default_check+0x591>
c0104769:	c7 44 24 0c 41 64 11 	movl   $0xc0116441,0xc(%esp)
c0104770:	c0 
c0104771:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104778:	c0 
c0104779:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0104780:	00 
c0104781:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104788:	e8 1f c7 ff ff       	call   c0100eac <__panic>
    nr_free = nr_free_store;
c010478d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104790:	a3 1c 50 15 c0       	mov    %eax,0xc015501c

    free_list = free_list_store;
c0104795:	8b 45 80             	mov    -0x80(%ebp),%eax
c0104798:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010479b:	a3 14 50 15 c0       	mov    %eax,0xc0155014
c01047a0:	89 15 18 50 15 c0    	mov    %edx,0xc0155018
    free_pages(p0, 5);
c01047a6:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01047ad:	00 
c01047ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01047b1:	89 04 24             	mov    %eax,(%esp)
c01047b4:	e8 8f 0b 00 00       	call   c0105348 <free_pages>

    le = &free_list;
c01047b9:	c7 45 ec 14 50 15 c0 	movl   $0xc0155014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01047c0:	eb 1f                	jmp    c01047e1 <default_check+0x5e5>
        struct Page *p = le2page(le, page_link);
c01047c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01047c5:	83 e8 0c             	sub    $0xc,%eax
c01047c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c01047cb:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01047cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01047d2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01047d5:	8b 40 08             	mov    0x8(%eax),%eax
c01047d8:	89 d1                	mov    %edx,%ecx
c01047da:	29 c1                	sub    %eax,%ecx
c01047dc:	89 c8                	mov    %ecx,%eax
c01047de:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01047e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01047e4:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01047e7:	8b 45 88             	mov    -0x78(%ebp),%eax
c01047ea:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01047ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01047f0:	81 7d ec 14 50 15 c0 	cmpl   $0xc0155014,-0x14(%ebp)
c01047f7:	75 c9                	jne    c01047c2 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c01047f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01047fd:	74 24                	je     c0104823 <default_check+0x627>
c01047ff:	c7 44 24 0c ae 65 11 	movl   $0xc01165ae,0xc(%esp)
c0104806:	c0 
c0104807:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c010480e:	c0 
c010480f:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
c0104816:	00 
c0104817:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c010481e:	e8 89 c6 ff ff       	call   c0100eac <__panic>
    assert(total == 0);
c0104823:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104827:	74 24                	je     c010484d <default_check+0x651>
c0104829:	c7 44 24 0c b9 65 11 	movl   $0xc01165b9,0xc(%esp)
c0104830:	c0 
c0104831:	c7 44 24 08 56 62 11 	movl   $0xc0116256,0x8(%esp)
c0104838:	c0 
c0104839:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0104840:	00 
c0104841:	c7 04 24 6b 62 11 c0 	movl   $0xc011626b,(%esp)
c0104848:	e8 5f c6 ff ff       	call   c0100eac <__panic>
}
c010484d:	81 c4 94 00 00 00    	add    $0x94,%esp
c0104853:	5b                   	pop    %ebx
c0104854:	5d                   	pop    %ebp
c0104855:	c3                   	ret    
	...

c0104858 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104858:	55                   	push   %ebp
c0104859:	89 e5                	mov    %esp,%ebp
c010485b:	53                   	push   %ebx
c010485c:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010485f:	9c                   	pushf  
c0104860:	5b                   	pop    %ebx
c0104861:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0104864:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104867:	25 00 02 00 00       	and    $0x200,%eax
c010486c:	85 c0                	test   %eax,%eax
c010486e:	74 0c                	je     c010487c <__intr_save+0x24>
        intr_disable();
c0104870:	e8 71 d9 ff ff       	call   c01021e6 <intr_disable>
        return 1;
c0104875:	b8 01 00 00 00       	mov    $0x1,%eax
c010487a:	eb 05                	jmp    c0104881 <__intr_save+0x29>
    }
    return 0;
c010487c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104881:	83 c4 14             	add    $0x14,%esp
c0104884:	5b                   	pop    %ebx
c0104885:	5d                   	pop    %ebp
c0104886:	c3                   	ret    

c0104887 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104887:	55                   	push   %ebp
c0104888:	89 e5                	mov    %esp,%ebp
c010488a:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010488d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104891:	74 05                	je     c0104898 <__intr_restore+0x11>
        intr_enable();
c0104893:	e8 48 d9 ff ff       	call   c01021e0 <intr_enable>
    }
}
c0104898:	c9                   	leave  
c0104899:	c3                   	ret    

c010489a <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010489a:	55                   	push   %ebp
c010489b:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010489d:	8b 55 08             	mov    0x8(%ebp),%edx
c01048a0:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c01048a5:	89 d1                	mov    %edx,%ecx
c01048a7:	29 c1                	sub    %eax,%ecx
c01048a9:	89 c8                	mov    %ecx,%eax
c01048ab:	c1 f8 05             	sar    $0x5,%eax
}
c01048ae:	5d                   	pop    %ebp
c01048af:	c3                   	ret    

c01048b0 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01048b0:	55                   	push   %ebp
c01048b1:	89 e5                	mov    %esp,%ebp
c01048b3:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01048b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01048b9:	89 04 24             	mov    %eax,(%esp)
c01048bc:	e8 d9 ff ff ff       	call   c010489a <page2ppn>
c01048c1:	c1 e0 0c             	shl    $0xc,%eax
}
c01048c4:	c9                   	leave  
c01048c5:	c3                   	ret    

c01048c6 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01048c6:	55                   	push   %ebp
c01048c7:	89 e5                	mov    %esp,%ebp
c01048c9:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01048cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01048cf:	89 c2                	mov    %eax,%edx
c01048d1:	c1 ea 0c             	shr    $0xc,%edx
c01048d4:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c01048d9:	39 c2                	cmp    %eax,%edx
c01048db:	72 1c                	jb     c01048f9 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01048dd:	c7 44 24 08 f4 65 11 	movl   $0xc01165f4,0x8(%esp)
c01048e4:	c0 
c01048e5:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c01048ec:	00 
c01048ed:	c7 04 24 13 66 11 c0 	movl   $0xc0116613,(%esp)
c01048f4:	e8 b3 c5 ff ff       	call   c0100eac <__panic>
    }
    return &pages[PPN(pa)];
c01048f9:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c01048fe:	8b 55 08             	mov    0x8(%ebp),%edx
c0104901:	c1 ea 0c             	shr    $0xc,%edx
c0104904:	c1 e2 05             	shl    $0x5,%edx
c0104907:	01 d0                	add    %edx,%eax
}
c0104909:	c9                   	leave  
c010490a:	c3                   	ret    

c010490b <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010490b:	55                   	push   %ebp
c010490c:	89 e5                	mov    %esp,%ebp
c010490e:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104911:	8b 45 08             	mov    0x8(%ebp),%eax
c0104914:	89 04 24             	mov    %eax,(%esp)
c0104917:	e8 94 ff ff ff       	call   c01048b0 <page2pa>
c010491c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010491f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104922:	c1 e8 0c             	shr    $0xc,%eax
c0104925:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104928:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c010492d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104930:	72 23                	jb     c0104955 <page2kva+0x4a>
c0104932:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104935:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104939:	c7 44 24 08 24 66 11 	movl   $0xc0116624,0x8(%esp)
c0104940:	c0 
c0104941:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104948:	00 
c0104949:	c7 04 24 13 66 11 c0 	movl   $0xc0116613,(%esp)
c0104950:	e8 57 c5 ff ff       	call   c0100eac <__panic>
c0104955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104958:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010495d:	c9                   	leave  
c010495e:	c3                   	ret    

c010495f <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010495f:	55                   	push   %ebp
c0104960:	89 e5                	mov    %esp,%ebp
c0104962:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0104965:	8b 45 08             	mov    0x8(%ebp),%eax
c0104968:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010496b:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104972:	77 23                	ja     c0104997 <kva2page+0x38>
c0104974:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104977:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010497b:	c7 44 24 08 48 66 11 	movl   $0xc0116648,0x8(%esp)
c0104982:	c0 
c0104983:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010498a:	00 
c010498b:	c7 04 24 13 66 11 c0 	movl   $0xc0116613,(%esp)
c0104992:	e8 15 c5 ff ff       	call   c0100eac <__panic>
c0104997:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010499a:	05 00 00 00 40       	add    $0x40000000,%eax
c010499f:	89 04 24             	mov    %eax,(%esp)
c01049a2:	e8 1f ff ff ff       	call   c01048c6 <pa2page>
}
c01049a7:	c9                   	leave  
c01049a8:	c3                   	ret    

c01049a9 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01049a9:	55                   	push   %ebp
c01049aa:	89 e5                	mov    %esp,%ebp
c01049ac:	53                   	push   %ebx
c01049ad:	83 ec 24             	sub    $0x24,%esp
  struct Page * page = alloc_pages(1 << order);
c01049b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01049b3:	ba 01 00 00 00       	mov    $0x1,%edx
c01049b8:	89 d3                	mov    %edx,%ebx
c01049ba:	89 c1                	mov    %eax,%ecx
c01049bc:	d3 e3                	shl    %cl,%ebx
c01049be:	89 d8                	mov    %ebx,%eax
c01049c0:	89 04 24             	mov    %eax,(%esp)
c01049c3:	e8 15 09 00 00       	call   c01052dd <alloc_pages>
c01049c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c01049cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01049cf:	75 07                	jne    c01049d8 <__slob_get_free_pages+0x2f>
    return NULL;
c01049d1:	b8 00 00 00 00       	mov    $0x0,%eax
c01049d6:	eb 0b                	jmp    c01049e3 <__slob_get_free_pages+0x3a>
  return page2kva(page);
c01049d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049db:	89 04 24             	mov    %eax,(%esp)
c01049de:	e8 28 ff ff ff       	call   c010490b <page2kva>
}
c01049e3:	83 c4 24             	add    $0x24,%esp
c01049e6:	5b                   	pop    %ebx
c01049e7:	5d                   	pop    %ebp
c01049e8:	c3                   	ret    

c01049e9 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c01049e9:	55                   	push   %ebp
c01049ea:	89 e5                	mov    %esp,%ebp
c01049ec:	53                   	push   %ebx
c01049ed:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c01049f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01049f3:	ba 01 00 00 00       	mov    $0x1,%edx
c01049f8:	89 d3                	mov    %edx,%ebx
c01049fa:	89 c1                	mov    %eax,%ecx
c01049fc:	d3 e3                	shl    %cl,%ebx
c01049fe:	89 d8                	mov    %ebx,%eax
c0104a00:	89 c3                	mov    %eax,%ebx
c0104a02:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a05:	89 04 24             	mov    %eax,(%esp)
c0104a08:	e8 52 ff ff ff       	call   c010495f <kva2page>
c0104a0d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104a11:	89 04 24             	mov    %eax,(%esp)
c0104a14:	e8 2f 09 00 00       	call   c0105348 <free_pages>
}
c0104a19:	83 c4 14             	add    $0x14,%esp
c0104a1c:	5b                   	pop    %ebx
c0104a1d:	5d                   	pop    %ebp
c0104a1e:	c3                   	ret    

c0104a1f <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104a1f:	55                   	push   %ebp
c0104a20:	89 e5                	mov    %esp,%ebp
c0104a22:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104a25:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a28:	83 c0 08             	add    $0x8,%eax
c0104a2b:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104a30:	76 24                	jbe    c0104a56 <slob_alloc+0x37>
c0104a32:	c7 44 24 0c 6c 66 11 	movl   $0xc011666c,0xc(%esp)
c0104a39:	c0 
c0104a3a:	c7 44 24 08 8b 66 11 	movl   $0xc011668b,0x8(%esp)
c0104a41:	c0 
c0104a42:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104a49:	00 
c0104a4a:	c7 04 24 a0 66 11 c0 	movl   $0xc01166a0,(%esp)
c0104a51:	e8 56 c4 ff ff       	call   c0100eac <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104a56:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104a5d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0104a64:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a67:	83 c0 07             	add    $0x7,%eax
c0104a6a:	c1 e8 03             	shr    $0x3,%eax
c0104a6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104a70:	e8 e3 fd ff ff       	call   c0104858 <__intr_save>
c0104a75:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104a78:	a1 08 0a 15 c0       	mov    0xc0150a08,%eax
c0104a7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a83:	8b 40 04             	mov    0x4(%eax),%eax
c0104a86:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104a89:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104a8d:	74 27                	je     c0104ab6 <slob_alloc+0x97>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104a8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a92:	8b 45 10             	mov    0x10(%ebp),%eax
c0104a95:	01 d0                	add    %edx,%eax
c0104a97:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104a9a:	8b 45 10             	mov    0x10(%ebp),%eax
c0104a9d:	f7 d8                	neg    %eax
c0104a9f:	21 d0                	and    %edx,%eax
c0104aa1:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104aa4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104aa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aaa:	89 d1                	mov    %edx,%ecx
c0104aac:	29 c1                	sub    %eax,%ecx
c0104aae:	89 c8                	mov    %ecx,%eax
c0104ab0:	c1 f8 03             	sar    $0x3,%eax
c0104ab3:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104ab6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ab9:	8b 00                	mov    (%eax),%eax
c0104abb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104abe:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104ac1:	01 ca                	add    %ecx,%edx
c0104ac3:	39 d0                	cmp    %edx,%eax
c0104ac5:	0f 8c a6 00 00 00    	jl     c0104b71 <slob_alloc+0x152>
			if (delta) { /* need to fragment head to align? */
c0104acb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104acf:	74 38                	je     c0104b09 <slob_alloc+0xea>
				aligned->units = cur->units - delta;
c0104ad1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ad4:	8b 00                	mov    (%eax),%eax
c0104ad6:	89 c2                	mov    %eax,%edx
c0104ad8:	2b 55 e8             	sub    -0x18(%ebp),%edx
c0104adb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ade:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104ae0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ae3:	8b 50 04             	mov    0x4(%eax),%edx
c0104ae6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ae9:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104aec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aef:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104af2:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104af5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104af8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104afb:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104afd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b00:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104b03:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b06:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b0c:	8b 00                	mov    (%eax),%eax
c0104b0e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104b11:	75 0e                	jne    c0104b21 <slob_alloc+0x102>
				prev->next = cur->next; /* unlink */
c0104b13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b16:	8b 50 04             	mov    0x4(%eax),%edx
c0104b19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b1c:	89 50 04             	mov    %edx,0x4(%eax)
c0104b1f:	eb 38                	jmp    c0104b59 <slob_alloc+0x13a>
			else { /* fragment */
				prev->next = cur + units;
c0104b21:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104b24:	c1 e0 03             	shl    $0x3,%eax
c0104b27:	89 c2                	mov    %eax,%edx
c0104b29:	03 55 f0             	add    -0x10(%ebp),%edx
c0104b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b2f:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104b32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b35:	8b 40 04             	mov    0x4(%eax),%eax
c0104b38:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b3b:	8b 12                	mov    (%edx),%edx
c0104b3d:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104b40:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104b42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b45:	8b 40 04             	mov    0x4(%eax),%eax
c0104b48:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b4b:	8b 52 04             	mov    0x4(%edx),%edx
c0104b4e:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104b51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b54:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104b57:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b5c:	a3 08 0a 15 c0       	mov    %eax,0xc0150a08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104b61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104b64:	89 04 24             	mov    %eax,(%esp)
c0104b67:	e8 1b fd ff ff       	call   c0104887 <__intr_restore>
			return cur;
c0104b6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b6f:	eb 7f                	jmp    c0104bf0 <slob_alloc+0x1d1>
		}
		if (cur == slobfree) {
c0104b71:	a1 08 0a 15 c0       	mov    0xc0150a08,%eax
c0104b76:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104b79:	75 61                	jne    c0104bdc <slob_alloc+0x1bd>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104b7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104b7e:	89 04 24             	mov    %eax,(%esp)
c0104b81:	e8 01 fd ff ff       	call   c0104887 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104b86:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104b8d:	75 07                	jne    c0104b96 <slob_alloc+0x177>
				return 0;
c0104b8f:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b94:	eb 5a                	jmp    c0104bf0 <slob_alloc+0x1d1>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104b96:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104b9d:	00 
c0104b9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104ba1:	89 04 24             	mov    %eax,(%esp)
c0104ba4:	e8 00 fe ff ff       	call   c01049a9 <__slob_get_free_pages>
c0104ba9:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104bac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104bb0:	75 07                	jne    c0104bb9 <slob_alloc+0x19a>
				return 0;
c0104bb2:	b8 00 00 00 00       	mov    $0x0,%eax
c0104bb7:	eb 37                	jmp    c0104bf0 <slob_alloc+0x1d1>

			slob_free(cur, PAGE_SIZE);
c0104bb9:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104bc0:	00 
c0104bc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bc4:	89 04 24             	mov    %eax,(%esp)
c0104bc7:	e8 26 00 00 00       	call   c0104bf2 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104bcc:	e8 87 fc ff ff       	call   c0104858 <__intr_save>
c0104bd1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104bd4:	a1 08 0a 15 c0       	mov    0xc0150a08,%eax
c0104bd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104bdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104be5:	8b 40 04             	mov    0x4(%eax),%eax
c0104be8:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104beb:	e9 99 fe ff ff       	jmp    c0104a89 <slob_alloc+0x6a>
}
c0104bf0:	c9                   	leave  
c0104bf1:	c3                   	ret    

c0104bf2 <slob_free>:

static void slob_free(void *block, int size)
{
c0104bf2:	55                   	push   %ebp
c0104bf3:	89 e5                	mov    %esp,%ebp
c0104bf5:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104bf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104bfe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104c02:	0f 84 f7 00 00 00    	je     c0104cff <slob_free+0x10d>
		return;

	if (size)
c0104c08:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104c0c:	74 10                	je     c0104c1e <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c0104c0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c11:	83 c0 07             	add    $0x7,%eax
c0104c14:	c1 e8 03             	shr    $0x3,%eax
c0104c17:	89 c2                	mov    %eax,%edx
c0104c19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c1c:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104c1e:	e8 35 fc ff ff       	call   c0104858 <__intr_save>
c0104c23:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104c26:	a1 08 0a 15 c0       	mov    0xc0150a08,%eax
c0104c2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c2e:	eb 27                	jmp    c0104c57 <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104c30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c33:	8b 40 04             	mov    0x4(%eax),%eax
c0104c36:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104c39:	77 13                	ja     c0104c4e <slob_free+0x5c>
c0104c3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c3e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104c41:	77 27                	ja     c0104c6a <slob_free+0x78>
c0104c43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c46:	8b 40 04             	mov    0x4(%eax),%eax
c0104c49:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104c4c:	77 1c                	ja     c0104c6a <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c51:	8b 40 04             	mov    0x4(%eax),%eax
c0104c54:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c5a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104c5d:	76 d1                	jbe    c0104c30 <slob_free+0x3e>
c0104c5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c62:	8b 40 04             	mov    0x4(%eax),%eax
c0104c65:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104c68:	76 c6                	jbe    c0104c30 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104c6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c6d:	8b 00                	mov    (%eax),%eax
c0104c6f:	c1 e0 03             	shl    $0x3,%eax
c0104c72:	89 c2                	mov    %eax,%edx
c0104c74:	03 55 f0             	add    -0x10(%ebp),%edx
c0104c77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c7a:	8b 40 04             	mov    0x4(%eax),%eax
c0104c7d:	39 c2                	cmp    %eax,%edx
c0104c7f:	75 25                	jne    c0104ca6 <slob_free+0xb4>
		b->units += cur->next->units;
c0104c81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c84:	8b 10                	mov    (%eax),%edx
c0104c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c89:	8b 40 04             	mov    0x4(%eax),%eax
c0104c8c:	8b 00                	mov    (%eax),%eax
c0104c8e:	01 c2                	add    %eax,%edx
c0104c90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c93:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c98:	8b 40 04             	mov    0x4(%eax),%eax
c0104c9b:	8b 50 04             	mov    0x4(%eax),%edx
c0104c9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ca1:	89 50 04             	mov    %edx,0x4(%eax)
c0104ca4:	eb 0c                	jmp    c0104cb2 <slob_free+0xc0>
	} else
		b->next = cur->next;
c0104ca6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ca9:	8b 50 04             	mov    0x4(%eax),%edx
c0104cac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104caf:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104cb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cb5:	8b 00                	mov    (%eax),%eax
c0104cb7:	c1 e0 03             	shl    $0x3,%eax
c0104cba:	03 45 f4             	add    -0xc(%ebp),%eax
c0104cbd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104cc0:	75 1f                	jne    c0104ce1 <slob_free+0xef>
		cur->units += b->units;
c0104cc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cc5:	8b 10                	mov    (%eax),%edx
c0104cc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cca:	8b 00                	mov    (%eax),%eax
c0104ccc:	01 c2                	add    %eax,%edx
c0104cce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cd1:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104cd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cd6:	8b 50 04             	mov    0x4(%eax),%edx
c0104cd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cdc:	89 50 04             	mov    %edx,0x4(%eax)
c0104cdf:	eb 09                	jmp    c0104cea <slob_free+0xf8>
	} else
		cur->next = b;
c0104ce1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ce4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104ce7:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104cea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ced:	a3 08 0a 15 c0       	mov    %eax,0xc0150a08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104cf2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104cf5:	89 04 24             	mov    %eax,(%esp)
c0104cf8:	e8 8a fb ff ff       	call   c0104887 <__intr_restore>
c0104cfd:	eb 01                	jmp    c0104d00 <slob_free+0x10e>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c0104cff:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c0104d00:	c9                   	leave  
c0104d01:	c3                   	ret    

c0104d02 <slob_init>:



void
slob_init(void) {
c0104d02:	55                   	push   %ebp
c0104d03:	89 e5                	mov    %esp,%ebp
c0104d05:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104d08:	c7 04 24 b2 66 11 c0 	movl   $0xc01166b2,(%esp)
c0104d0f:	e8 5c b6 ff ff       	call   c0100370 <cprintf>
}
c0104d14:	c9                   	leave  
c0104d15:	c3                   	ret    

c0104d16 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104d16:	55                   	push   %ebp
c0104d17:	89 e5                	mov    %esp,%ebp
c0104d19:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104d1c:	e8 e1 ff ff ff       	call   c0104d02 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104d21:	c7 04 24 c6 66 11 c0 	movl   $0xc01166c6,(%esp)
c0104d28:	e8 43 b6 ff ff       	call   c0100370 <cprintf>
}
c0104d2d:	c9                   	leave  
c0104d2e:	c3                   	ret    

c0104d2f <slob_allocated>:

size_t
slob_allocated(void) {
c0104d2f:	55                   	push   %ebp
c0104d30:	89 e5                	mov    %esp,%ebp
  return 0;
c0104d32:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104d37:	5d                   	pop    %ebp
c0104d38:	c3                   	ret    

c0104d39 <kallocated>:

size_t
kallocated(void) {
c0104d39:	55                   	push   %ebp
c0104d3a:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104d3c:	e8 ee ff ff ff       	call   c0104d2f <slob_allocated>
}
c0104d41:	5d                   	pop    %ebp
c0104d42:	c3                   	ret    

c0104d43 <find_order>:

static int find_order(int size)
{
c0104d43:	55                   	push   %ebp
c0104d44:	89 e5                	mov    %esp,%ebp
c0104d46:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104d49:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104d50:	eb 07                	jmp    c0104d59 <find_order+0x16>
		order++;
c0104d52:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104d56:	d1 7d 08             	sarl   0x8(%ebp)
c0104d59:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104d60:	7f f0                	jg     c0104d52 <find_order+0xf>
		order++;
	return order;
c0104d62:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104d65:	c9                   	leave  
c0104d66:	c3                   	ret    

c0104d67 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104d67:	55                   	push   %ebp
c0104d68:	89 e5                	mov    %esp,%ebp
c0104d6a:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104d6d:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104d74:	77 38                	ja     c0104dae <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104d76:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d79:	8d 50 08             	lea    0x8(%eax),%edx
c0104d7c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104d83:	00 
c0104d84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d87:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104d8b:	89 14 24             	mov    %edx,(%esp)
c0104d8e:	e8 8c fc ff ff       	call   c0104a1f <slob_alloc>
c0104d93:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104d96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d9a:	74 08                	je     c0104da4 <__kmalloc+0x3d>
c0104d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d9f:	83 c0 08             	add    $0x8,%eax
c0104da2:	eb 05                	jmp    c0104da9 <__kmalloc+0x42>
c0104da4:	b8 00 00 00 00       	mov    $0x0,%eax
c0104da9:	e9 a6 00 00 00       	jmp    c0104e54 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104dae:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104db5:	00 
c0104db6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104db9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104dbd:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104dc4:	e8 56 fc ff ff       	call   c0104a1f <slob_alloc>
c0104dc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104dcc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104dd0:	75 07                	jne    c0104dd9 <__kmalloc+0x72>
		return 0;
c0104dd2:	b8 00 00 00 00       	mov    $0x0,%eax
c0104dd7:	eb 7b                	jmp    c0104e54 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104dd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ddc:	89 04 24             	mov    %eax,(%esp)
c0104ddf:	e8 5f ff ff ff       	call   c0104d43 <find_order>
c0104de4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104de7:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104de9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dec:	8b 00                	mov    (%eax),%eax
c0104dee:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104df2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104df5:	89 04 24             	mov    %eax,(%esp)
c0104df8:	e8 ac fb ff ff       	call   c01049a9 <__slob_get_free_pages>
c0104dfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e00:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104e03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e06:	8b 40 04             	mov    0x4(%eax),%eax
c0104e09:	85 c0                	test   %eax,%eax
c0104e0b:	74 2f                	je     c0104e3c <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104e0d:	e8 46 fa ff ff       	call   c0104858 <__intr_save>
c0104e12:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104e15:	8b 15 64 1e 15 c0    	mov    0xc0151e64,%edx
c0104e1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e1e:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104e21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e24:	a3 64 1e 15 c0       	mov    %eax,0xc0151e64
		spin_unlock_irqrestore(&block_lock, flags);
c0104e29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e2c:	89 04 24             	mov    %eax,(%esp)
c0104e2f:	e8 53 fa ff ff       	call   c0104887 <__intr_restore>
		return bb->pages;
c0104e34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e37:	8b 40 04             	mov    0x4(%eax),%eax
c0104e3a:	eb 18                	jmp    c0104e54 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104e3c:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104e43:	00 
c0104e44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e47:	89 04 24             	mov    %eax,(%esp)
c0104e4a:	e8 a3 fd ff ff       	call   c0104bf2 <slob_free>
	return 0;
c0104e4f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104e54:	c9                   	leave  
c0104e55:	c3                   	ret    

c0104e56 <kmalloc>:

void *
kmalloc(size_t size)
{
c0104e56:	55                   	push   %ebp
c0104e57:	89 e5                	mov    %esp,%ebp
c0104e59:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104e5c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104e63:	00 
c0104e64:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e67:	89 04 24             	mov    %eax,(%esp)
c0104e6a:	e8 f8 fe ff ff       	call   c0104d67 <__kmalloc>
}
c0104e6f:	c9                   	leave  
c0104e70:	c3                   	ret    

c0104e71 <kfree>:


void kfree(void *block)
{
c0104e71:	55                   	push   %ebp
c0104e72:	89 e5                	mov    %esp,%ebp
c0104e74:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104e77:	c7 45 f0 64 1e 15 c0 	movl   $0xc0151e64,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104e7e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104e82:	0f 84 a4 00 00 00    	je     c0104f2c <kfree+0xbb>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104e88:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e8b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104e90:	85 c0                	test   %eax,%eax
c0104e92:	75 7f                	jne    c0104f13 <kfree+0xa2>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104e94:	e8 bf f9 ff ff       	call   c0104858 <__intr_save>
c0104e99:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104e9c:	a1 64 1e 15 c0       	mov    0xc0151e64,%eax
c0104ea1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ea4:	eb 5c                	jmp    c0104f02 <kfree+0x91>
			if (bb->pages == block) {
c0104ea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ea9:	8b 40 04             	mov    0x4(%eax),%eax
c0104eac:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104eaf:	75 3f                	jne    c0104ef0 <kfree+0x7f>
				*last = bb->next;
c0104eb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eb4:	8b 50 08             	mov    0x8(%eax),%edx
c0104eb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104eba:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104ebc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ebf:	89 04 24             	mov    %eax,(%esp)
c0104ec2:	e8 c0 f9 ff ff       	call   c0104887 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104ec7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eca:	8b 10                	mov    (%eax),%edx
c0104ecc:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ecf:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104ed3:	89 04 24             	mov    %eax,(%esp)
c0104ed6:	e8 0e fb ff ff       	call   c01049e9 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104edb:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104ee2:	00 
c0104ee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ee6:	89 04 24             	mov    %eax,(%esp)
c0104ee9:	e8 04 fd ff ff       	call   c0104bf2 <slob_free>
				return;
c0104eee:	eb 3d                	jmp    c0104f2d <kfree+0xbc>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ef3:	83 c0 08             	add    $0x8,%eax
c0104ef6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104ef9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104efc:	8b 40 08             	mov    0x8(%eax),%eax
c0104eff:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f02:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104f06:	75 9e                	jne    c0104ea6 <kfree+0x35>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104f08:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f0b:	89 04 24             	mov    %eax,(%esp)
c0104f0e:	e8 74 f9 ff ff       	call   c0104887 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104f13:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f16:	83 e8 08             	sub    $0x8,%eax
c0104f19:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104f20:	00 
c0104f21:	89 04 24             	mov    %eax,(%esp)
c0104f24:	e8 c9 fc ff ff       	call   c0104bf2 <slob_free>
	return;
c0104f29:	90                   	nop
c0104f2a:	eb 01                	jmp    c0104f2d <kfree+0xbc>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c0104f2c:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c0104f2d:	c9                   	leave  
c0104f2e:	c3                   	ret    

c0104f2f <ksize>:


unsigned int ksize(const void *block)
{
c0104f2f:	55                   	push   %ebp
c0104f30:	89 e5                	mov    %esp,%ebp
c0104f32:	53                   	push   %ebx
c0104f33:	83 ec 24             	sub    $0x24,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104f36:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104f3a:	75 07                	jne    c0104f43 <ksize+0x14>
		return 0;
c0104f3c:	b8 00 00 00 00       	mov    $0x0,%eax
c0104f41:	eb 6d                	jmp    c0104fb0 <ksize+0x81>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104f43:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f46:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104f4b:	85 c0                	test   %eax,%eax
c0104f4d:	75 56                	jne    c0104fa5 <ksize+0x76>
		spin_lock_irqsave(&block_lock, flags);
c0104f4f:	e8 04 f9 ff ff       	call   c0104858 <__intr_save>
c0104f54:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104f57:	a1 64 1e 15 c0       	mov    0xc0151e64,%eax
c0104f5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f5f:	eb 33                	jmp    c0104f94 <ksize+0x65>
			if (bb->pages == block) {
c0104f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f64:	8b 40 04             	mov    0x4(%eax),%eax
c0104f67:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104f6a:	75 1f                	jne    c0104f8b <ksize+0x5c>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104f6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f6f:	89 04 24             	mov    %eax,(%esp)
c0104f72:	e8 10 f9 ff ff       	call   c0104887 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f7a:	8b 00                	mov    (%eax),%eax
c0104f7c:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104f81:	89 d3                	mov    %edx,%ebx
c0104f83:	89 c1                	mov    %eax,%ecx
c0104f85:	d3 e3                	shl    %cl,%ebx
c0104f87:	89 d8                	mov    %ebx,%eax
c0104f89:	eb 25                	jmp    c0104fb0 <ksize+0x81>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104f8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f8e:	8b 40 08             	mov    0x8(%eax),%eax
c0104f91:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104f98:	75 c7                	jne    c0104f61 <ksize+0x32>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104f9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f9d:	89 04 24             	mov    %eax,(%esp)
c0104fa0:	e8 e2 f8 ff ff       	call   c0104887 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104fa5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fa8:	83 e8 08             	sub    $0x8,%eax
c0104fab:	8b 00                	mov    (%eax),%eax
c0104fad:	c1 e0 03             	shl    $0x3,%eax
}
c0104fb0:	83 c4 24             	add    $0x24,%esp
c0104fb3:	5b                   	pop    %ebx
c0104fb4:	5d                   	pop    %ebp
c0104fb5:	c3                   	ret    
	...

c0104fb8 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104fb8:	55                   	push   %ebp
c0104fb9:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104fbb:	8b 55 08             	mov    0x8(%ebp),%edx
c0104fbe:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c0104fc3:	89 d1                	mov    %edx,%ecx
c0104fc5:	29 c1                	sub    %eax,%ecx
c0104fc7:	89 c8                	mov    %ecx,%eax
c0104fc9:	c1 f8 05             	sar    $0x5,%eax
}
c0104fcc:	5d                   	pop    %ebp
c0104fcd:	c3                   	ret    

c0104fce <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104fce:	55                   	push   %ebp
c0104fcf:	89 e5                	mov    %esp,%ebp
c0104fd1:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104fd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fd7:	89 04 24             	mov    %eax,(%esp)
c0104fda:	e8 d9 ff ff ff       	call   c0104fb8 <page2ppn>
c0104fdf:	c1 e0 0c             	shl    $0xc,%eax
}
c0104fe2:	c9                   	leave  
c0104fe3:	c3                   	ret    

c0104fe4 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104fe4:	55                   	push   %ebp
c0104fe5:	89 e5                	mov    %esp,%ebp
c0104fe7:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104fea:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fed:	89 c2                	mov    %eax,%edx
c0104fef:	c1 ea 0c             	shr    $0xc,%edx
c0104ff2:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c0104ff7:	39 c2                	cmp    %eax,%edx
c0104ff9:	72 1c                	jb     c0105017 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104ffb:	c7 44 24 08 e4 66 11 	movl   $0xc01166e4,0x8(%esp)
c0105002:	c0 
c0105003:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010500a:	00 
c010500b:	c7 04 24 03 67 11 c0 	movl   $0xc0116703,(%esp)
c0105012:	e8 95 be ff ff       	call   c0100eac <__panic>
    }
    return &pages[PPN(pa)];
c0105017:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c010501c:	8b 55 08             	mov    0x8(%ebp),%edx
c010501f:	c1 ea 0c             	shr    $0xc,%edx
c0105022:	c1 e2 05             	shl    $0x5,%edx
c0105025:	01 d0                	add    %edx,%eax
}
c0105027:	c9                   	leave  
c0105028:	c3                   	ret    

c0105029 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0105029:	55                   	push   %ebp
c010502a:	89 e5                	mov    %esp,%ebp
c010502c:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010502f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105032:	89 04 24             	mov    %eax,(%esp)
c0105035:	e8 94 ff ff ff       	call   c0104fce <page2pa>
c010503a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010503d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105040:	c1 e8 0c             	shr    $0xc,%eax
c0105043:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105046:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c010504b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010504e:	72 23                	jb     c0105073 <page2kva+0x4a>
c0105050:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105053:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105057:	c7 44 24 08 14 67 11 	movl   $0xc0116714,0x8(%esp)
c010505e:	c0 
c010505f:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0105066:	00 
c0105067:	c7 04 24 03 67 11 c0 	movl   $0xc0116703,(%esp)
c010506e:	e8 39 be ff ff       	call   c0100eac <__panic>
c0105073:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105076:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010507b:	c9                   	leave  
c010507c:	c3                   	ret    

c010507d <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c010507d:	55                   	push   %ebp
c010507e:	89 e5                	mov    %esp,%ebp
c0105080:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0105083:	8b 45 08             	mov    0x8(%ebp),%eax
c0105086:	83 e0 01             	and    $0x1,%eax
c0105089:	85 c0                	test   %eax,%eax
c010508b:	75 1c                	jne    c01050a9 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c010508d:	c7 44 24 08 38 67 11 	movl   $0xc0116738,0x8(%esp)
c0105094:	c0 
c0105095:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c010509c:	00 
c010509d:	c7 04 24 03 67 11 c0 	movl   $0xc0116703,(%esp)
c01050a4:	e8 03 be ff ff       	call   c0100eac <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01050a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01050ac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01050b1:	89 04 24             	mov    %eax,(%esp)
c01050b4:	e8 2b ff ff ff       	call   c0104fe4 <pa2page>
}
c01050b9:	c9                   	leave  
c01050ba:	c3                   	ret    

c01050bb <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c01050bb:	55                   	push   %ebp
c01050bc:	89 e5                	mov    %esp,%ebp
c01050be:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c01050c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01050c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01050c9:	89 04 24             	mov    %eax,(%esp)
c01050cc:	e8 13 ff ff ff       	call   c0104fe4 <pa2page>
}
c01050d1:	c9                   	leave  
c01050d2:	c3                   	ret    

c01050d3 <page_ref>:

static inline int
page_ref(struct Page *page) {
c01050d3:	55                   	push   %ebp
c01050d4:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01050d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01050d9:	8b 00                	mov    (%eax),%eax
}
c01050db:	5d                   	pop    %ebp
c01050dc:	c3                   	ret    

c01050dd <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01050dd:	55                   	push   %ebp
c01050de:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01050e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01050e3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01050e6:	89 10                	mov    %edx,(%eax)
}
c01050e8:	5d                   	pop    %ebp
c01050e9:	c3                   	ret    

c01050ea <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c01050ea:	55                   	push   %ebp
c01050eb:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c01050ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01050f0:	8b 00                	mov    (%eax),%eax
c01050f2:	8d 50 01             	lea    0x1(%eax),%edx
c01050f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01050f8:	89 10                	mov    %edx,(%eax)
    return page->ref;
c01050fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01050fd:	8b 00                	mov    (%eax),%eax
}
c01050ff:	5d                   	pop    %ebp
c0105100:	c3                   	ret    

c0105101 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0105101:	55                   	push   %ebp
c0105102:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0105104:	8b 45 08             	mov    0x8(%ebp),%eax
c0105107:	8b 00                	mov    (%eax),%eax
c0105109:	8d 50 ff             	lea    -0x1(%eax),%edx
c010510c:	8b 45 08             	mov    0x8(%ebp),%eax
c010510f:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0105111:	8b 45 08             	mov    0x8(%ebp),%eax
c0105114:	8b 00                	mov    (%eax),%eax
}
c0105116:	5d                   	pop    %ebp
c0105117:	c3                   	ret    

c0105118 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0105118:	55                   	push   %ebp
c0105119:	89 e5                	mov    %esp,%ebp
c010511b:	53                   	push   %ebx
c010511c:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010511f:	9c                   	pushf  
c0105120:	5b                   	pop    %ebx
c0105121:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0105124:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0105127:	25 00 02 00 00       	and    $0x200,%eax
c010512c:	85 c0                	test   %eax,%eax
c010512e:	74 0c                	je     c010513c <__intr_save+0x24>
        intr_disable();
c0105130:	e8 b1 d0 ff ff       	call   c01021e6 <intr_disable>
        return 1;
c0105135:	b8 01 00 00 00       	mov    $0x1,%eax
c010513a:	eb 05                	jmp    c0105141 <__intr_save+0x29>
    }
    return 0;
c010513c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105141:	83 c4 14             	add    $0x14,%esp
c0105144:	5b                   	pop    %ebx
c0105145:	5d                   	pop    %ebp
c0105146:	c3                   	ret    

c0105147 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0105147:	55                   	push   %ebp
c0105148:	89 e5                	mov    %esp,%ebp
c010514a:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010514d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105151:	74 05                	je     c0105158 <__intr_restore+0x11>
        intr_enable();
c0105153:	e8 88 d0 ff ff       	call   c01021e0 <intr_enable>
    }
}
c0105158:	c9                   	leave  
c0105159:	c3                   	ret    

c010515a <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c010515a:	55                   	push   %ebp
c010515b:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c010515d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105160:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0105163:	b8 23 00 00 00       	mov    $0x23,%eax
c0105168:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c010516a:	b8 23 00 00 00       	mov    $0x23,%eax
c010516f:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0105171:	b8 10 00 00 00       	mov    $0x10,%eax
c0105176:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0105178:	b8 10 00 00 00       	mov    $0x10,%eax
c010517d:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c010517f:	b8 10 00 00 00       	mov    $0x10,%eax
c0105184:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0105186:	ea 8d 51 10 c0 08 00 	ljmp   $0x8,$0xc010518d
}
c010518d:	5d                   	pop    %ebp
c010518e:	c3                   	ret    

c010518f <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c010518f:	55                   	push   %ebp
c0105190:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0105192:	8b 45 08             	mov    0x8(%ebp),%eax
c0105195:	a3 a4 1e 15 c0       	mov    %eax,0xc0151ea4
}
c010519a:	5d                   	pop    %ebp
c010519b:	c3                   	ret    

c010519c <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c010519c:	55                   	push   %ebp
c010519d:	89 e5                	mov    %esp,%ebp
c010519f:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c01051a2:	b8 00 00 15 c0       	mov    $0xc0150000,%eax
c01051a7:	89 04 24             	mov    %eax,(%esp)
c01051aa:	e8 e0 ff ff ff       	call   c010518f <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c01051af:	66 c7 05 a8 1e 15 c0 	movw   $0x10,0xc0151ea8
c01051b6:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c01051b8:	66 c7 05 48 0a 15 c0 	movw   $0x68,0xc0150a48
c01051bf:	68 00 
c01051c1:	b8 a0 1e 15 c0       	mov    $0xc0151ea0,%eax
c01051c6:	66 a3 4a 0a 15 c0    	mov    %ax,0xc0150a4a
c01051cc:	b8 a0 1e 15 c0       	mov    $0xc0151ea0,%eax
c01051d1:	c1 e8 10             	shr    $0x10,%eax
c01051d4:	a2 4c 0a 15 c0       	mov    %al,0xc0150a4c
c01051d9:	0f b6 05 4d 0a 15 c0 	movzbl 0xc0150a4d,%eax
c01051e0:	83 e0 f0             	and    $0xfffffff0,%eax
c01051e3:	83 c8 09             	or     $0x9,%eax
c01051e6:	a2 4d 0a 15 c0       	mov    %al,0xc0150a4d
c01051eb:	0f b6 05 4d 0a 15 c0 	movzbl 0xc0150a4d,%eax
c01051f2:	83 e0 ef             	and    $0xffffffef,%eax
c01051f5:	a2 4d 0a 15 c0       	mov    %al,0xc0150a4d
c01051fa:	0f b6 05 4d 0a 15 c0 	movzbl 0xc0150a4d,%eax
c0105201:	83 e0 9f             	and    $0xffffff9f,%eax
c0105204:	a2 4d 0a 15 c0       	mov    %al,0xc0150a4d
c0105209:	0f b6 05 4d 0a 15 c0 	movzbl 0xc0150a4d,%eax
c0105210:	83 c8 80             	or     $0xffffff80,%eax
c0105213:	a2 4d 0a 15 c0       	mov    %al,0xc0150a4d
c0105218:	0f b6 05 4e 0a 15 c0 	movzbl 0xc0150a4e,%eax
c010521f:	83 e0 f0             	and    $0xfffffff0,%eax
c0105222:	a2 4e 0a 15 c0       	mov    %al,0xc0150a4e
c0105227:	0f b6 05 4e 0a 15 c0 	movzbl 0xc0150a4e,%eax
c010522e:	83 e0 ef             	and    $0xffffffef,%eax
c0105231:	a2 4e 0a 15 c0       	mov    %al,0xc0150a4e
c0105236:	0f b6 05 4e 0a 15 c0 	movzbl 0xc0150a4e,%eax
c010523d:	83 e0 df             	and    $0xffffffdf,%eax
c0105240:	a2 4e 0a 15 c0       	mov    %al,0xc0150a4e
c0105245:	0f b6 05 4e 0a 15 c0 	movzbl 0xc0150a4e,%eax
c010524c:	83 c8 40             	or     $0x40,%eax
c010524f:	a2 4e 0a 15 c0       	mov    %al,0xc0150a4e
c0105254:	0f b6 05 4e 0a 15 c0 	movzbl 0xc0150a4e,%eax
c010525b:	83 e0 7f             	and    $0x7f,%eax
c010525e:	a2 4e 0a 15 c0       	mov    %al,0xc0150a4e
c0105263:	b8 a0 1e 15 c0       	mov    $0xc0151ea0,%eax
c0105268:	c1 e8 18             	shr    $0x18,%eax
c010526b:	a2 4f 0a 15 c0       	mov    %al,0xc0150a4f

    // reload all segment registers
    lgdt(&gdt_pd);
c0105270:	c7 04 24 50 0a 15 c0 	movl   $0xc0150a50,(%esp)
c0105277:	e8 de fe ff ff       	call   c010515a <lgdt>
c010527c:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0105282:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0105286:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0105289:	c9                   	leave  
c010528a:	c3                   	ret    

c010528b <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c010528b:	55                   	push   %ebp
c010528c:	89 e5                	mov    %esp,%ebp
c010528e:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0105291:	c7 05 20 50 15 c0 d8 	movl   $0xc01165d8,0xc0155020
c0105298:	65 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c010529b:	a1 20 50 15 c0       	mov    0xc0155020,%eax
c01052a0:	8b 00                	mov    (%eax),%eax
c01052a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01052a6:	c7 04 24 64 67 11 c0 	movl   $0xc0116764,(%esp)
c01052ad:	e8 be b0 ff ff       	call   c0100370 <cprintf>
    pmm_manager->init();
c01052b2:	a1 20 50 15 c0       	mov    0xc0155020,%eax
c01052b7:	8b 40 04             	mov    0x4(%eax),%eax
c01052ba:	ff d0                	call   *%eax
}
c01052bc:	c9                   	leave  
c01052bd:	c3                   	ret    

c01052be <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c01052be:	55                   	push   %ebp
c01052bf:	89 e5                	mov    %esp,%ebp
c01052c1:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c01052c4:	a1 20 50 15 c0       	mov    0xc0155020,%eax
c01052c9:	8b 50 08             	mov    0x8(%eax),%edx
c01052cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01052cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01052d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01052d6:	89 04 24             	mov    %eax,(%esp)
c01052d9:	ff d2                	call   *%edx
}
c01052db:	c9                   	leave  
c01052dc:	c3                   	ret    

c01052dd <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c01052dd:	55                   	push   %ebp
c01052de:	89 e5                	mov    %esp,%ebp
c01052e0:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c01052e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c01052ea:	e8 29 fe ff ff       	call   c0105118 <__intr_save>
c01052ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c01052f2:	a1 20 50 15 c0       	mov    0xc0155020,%eax
c01052f7:	8b 50 0c             	mov    0xc(%eax),%edx
c01052fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01052fd:	89 04 24             	mov    %eax,(%esp)
c0105300:	ff d2                	call   *%edx
c0105302:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0105305:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105308:	89 04 24             	mov    %eax,(%esp)
c010530b:	e8 37 fe ff ff       	call   c0105147 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105310:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105314:	75 2d                	jne    c0105343 <alloc_pages+0x66>
c0105316:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010531a:	77 27                	ja     c0105343 <alloc_pages+0x66>
c010531c:	a1 0c 1f 15 c0       	mov    0xc0151f0c,%eax
c0105321:	85 c0                	test   %eax,%eax
c0105323:	74 1e                	je     c0105343 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0105325:	8b 55 08             	mov    0x8(%ebp),%edx
c0105328:	a1 0c 51 15 c0       	mov    0xc015510c,%eax
c010532d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105334:	00 
c0105335:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105339:	89 04 24             	mov    %eax,(%esp)
c010533c:	e8 82 1d 00 00       	call   c01070c3 <swap_out>
    }
c0105341:	eb a7                	jmp    c01052ea <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0105343:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105346:	c9                   	leave  
c0105347:	c3                   	ret    

c0105348 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0105348:	55                   	push   %ebp
c0105349:	89 e5                	mov    %esp,%ebp
c010534b:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010534e:	e8 c5 fd ff ff       	call   c0105118 <__intr_save>
c0105353:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0105356:	a1 20 50 15 c0       	mov    0xc0155020,%eax
c010535b:	8b 50 10             	mov    0x10(%eax),%edx
c010535e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105361:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105365:	8b 45 08             	mov    0x8(%ebp),%eax
c0105368:	89 04 24             	mov    %eax,(%esp)
c010536b:	ff d2                	call   *%edx
    }
    local_intr_restore(intr_flag);
c010536d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105370:	89 04 24             	mov    %eax,(%esp)
c0105373:	e8 cf fd ff ff       	call   c0105147 <__intr_restore>
}
c0105378:	c9                   	leave  
c0105379:	c3                   	ret    

c010537a <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c010537a:	55                   	push   %ebp
c010537b:	89 e5                	mov    %esp,%ebp
c010537d:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0105380:	e8 93 fd ff ff       	call   c0105118 <__intr_save>
c0105385:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0105388:	a1 20 50 15 c0       	mov    0xc0155020,%eax
c010538d:	8b 40 14             	mov    0x14(%eax),%eax
c0105390:	ff d0                	call   *%eax
c0105392:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0105395:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105398:	89 04 24             	mov    %eax,(%esp)
c010539b:	e8 a7 fd ff ff       	call   c0105147 <__intr_restore>
    return ret;
c01053a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01053a3:	c9                   	leave  
c01053a4:	c3                   	ret    

c01053a5 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01053a5:	55                   	push   %ebp
c01053a6:	89 e5                	mov    %esp,%ebp
c01053a8:	57                   	push   %edi
c01053a9:	56                   	push   %esi
c01053aa:	53                   	push   %ebx
c01053ab:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01053b1:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01053b8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01053bf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c01053c6:	c7 04 24 7b 67 11 c0 	movl   $0xc011677b,(%esp)
c01053cd:	e8 9e af ff ff       	call   c0100370 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01053d2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01053d9:	e9 0b 01 00 00       	jmp    c01054e9 <page_init+0x144>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01053de:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053e1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053e4:	89 d0                	mov    %edx,%eax
c01053e6:	c1 e0 02             	shl    $0x2,%eax
c01053e9:	01 d0                	add    %edx,%eax
c01053eb:	c1 e0 02             	shl    $0x2,%eax
c01053ee:	01 c8                	add    %ecx,%eax
c01053f0:	8b 50 08             	mov    0x8(%eax),%edx
c01053f3:	8b 40 04             	mov    0x4(%eax),%eax
c01053f6:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01053f9:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01053fc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053ff:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105402:	89 d0                	mov    %edx,%eax
c0105404:	c1 e0 02             	shl    $0x2,%eax
c0105407:	01 d0                	add    %edx,%eax
c0105409:	c1 e0 02             	shl    $0x2,%eax
c010540c:	01 c8                	add    %ecx,%eax
c010540e:	8b 50 10             	mov    0x10(%eax),%edx
c0105411:	8b 40 0c             	mov    0xc(%eax),%eax
c0105414:	03 45 b8             	add    -0x48(%ebp),%eax
c0105417:	13 55 bc             	adc    -0x44(%ebp),%edx
c010541a:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010541d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
c0105420:	8b 4d c4             	mov    -0x3c(%ebp),%ecx

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0105423:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105426:	89 d0                	mov    %edx,%eax
c0105428:	c1 e0 02             	shl    $0x2,%eax
c010542b:	01 d0                	add    %edx,%eax
c010542d:	c1 e0 02             	shl    $0x2,%eax
c0105430:	01 c8                	add    %ecx,%eax
c0105432:	83 c0 14             	add    $0x14,%eax
c0105435:	8b 00                	mov    (%eax),%eax
c0105437:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010543a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010543d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105440:	89 c6                	mov    %eax,%esi
c0105442:	89 d7                	mov    %edx,%edi
c0105444:	83 c6 ff             	add    $0xffffffff,%esi
c0105447:	83 d7 ff             	adc    $0xffffffff,%edi
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
c010544a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c010544d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105450:	89 d0                	mov    %edx,%eax
c0105452:	c1 e0 02             	shl    $0x2,%eax
c0105455:	01 d0                	add    %edx,%eax
c0105457:	c1 e0 02             	shl    $0x2,%eax
c010545a:	01 c8                	add    %ecx,%eax
c010545c:	8b 48 0c             	mov    0xc(%eax),%ecx
c010545f:	8b 58 10             	mov    0x10(%eax),%ebx
c0105462:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0105465:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0105469:	89 74 24 14          	mov    %esi,0x14(%esp)
c010546d:	89 7c 24 18          	mov    %edi,0x18(%esp)
c0105471:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105474:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105477:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010547b:	89 54 24 10          	mov    %edx,0x10(%esp)
c010547f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0105483:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0105487:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c010548e:	e8 dd ae ff ff       	call   c0100370 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0105493:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105496:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105499:	89 d0                	mov    %edx,%eax
c010549b:	c1 e0 02             	shl    $0x2,%eax
c010549e:	01 d0                	add    %edx,%eax
c01054a0:	c1 e0 02             	shl    $0x2,%eax
c01054a3:	01 c8                	add    %ecx,%eax
c01054a5:	83 c0 14             	add    $0x14,%eax
c01054a8:	8b 00                	mov    (%eax),%eax
c01054aa:	83 f8 01             	cmp    $0x1,%eax
c01054ad:	75 36                	jne    c01054e5 <page_init+0x140>
            if (maxpa < end && begin < KMEMSIZE) {
c01054af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01054b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01054b5:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01054b8:	77 2b                	ja     c01054e5 <page_init+0x140>
c01054ba:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01054bd:	72 05                	jb     c01054c4 <page_init+0x11f>
c01054bf:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c01054c2:	73 21                	jae    c01054e5 <page_init+0x140>
c01054c4:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01054c8:	77 1b                	ja     c01054e5 <page_init+0x140>
c01054ca:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01054ce:	72 09                	jb     c01054d9 <page_init+0x134>
c01054d0:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c01054d7:	77 0c                	ja     c01054e5 <page_init+0x140>
                maxpa = end;
c01054d9:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01054dc:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01054df:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01054e2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01054e5:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01054e9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01054ec:	8b 00                	mov    (%eax),%eax
c01054ee:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01054f1:	0f 8f e7 fe ff ff    	jg     c01053de <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c01054f7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01054fb:	72 1d                	jb     c010551a <page_init+0x175>
c01054fd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105501:	77 09                	ja     c010550c <page_init+0x167>
c0105503:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c010550a:	76 0e                	jbe    c010551a <page_init+0x175>
        maxpa = KMEMSIZE;
c010550c:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0105513:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010551a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010551d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105520:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105524:	c1 ea 0c             	shr    $0xc,%edx
c0105527:	a3 80 1e 15 c0       	mov    %eax,0xc0151e80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c010552c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0105533:	b8 04 52 15 c0       	mov    $0xc0155204,%eax
c0105538:	83 e8 01             	sub    $0x1,%eax
c010553b:	03 45 ac             	add    -0x54(%ebp),%eax
c010553e:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0105541:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105544:	ba 00 00 00 00       	mov    $0x0,%edx
c0105549:	f7 75 ac             	divl   -0x54(%ebp)
c010554c:	89 d0                	mov    %edx,%eax
c010554e:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0105551:	89 d1                	mov    %edx,%ecx
c0105553:	29 c1                	sub    %eax,%ecx
c0105555:	89 c8                	mov    %ecx,%eax
c0105557:	a3 28 50 15 c0       	mov    %eax,0xc0155028

    for (i = 0; i < npage; i ++) {
c010555c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105563:	eb 27                	jmp    c010558c <page_init+0x1e7>
        SetPageReserved(pages + i);
c0105565:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c010556a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010556d:	c1 e2 05             	shl    $0x5,%edx
c0105570:	01 d0                	add    %edx,%eax
c0105572:	83 c0 04             	add    $0x4,%eax
c0105575:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c010557c:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010557f:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0105582:	8b 55 90             	mov    -0x70(%ebp),%edx
c0105585:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0105588:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010558c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010558f:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c0105594:	39 c2                	cmp    %eax,%edx
c0105596:	72 cd                	jb     c0105565 <page_init+0x1c0>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0105598:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c010559d:	89 c2                	mov    %eax,%edx
c010559f:	c1 e2 05             	shl    $0x5,%edx
c01055a2:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c01055a7:	01 d0                	add    %edx,%eax
c01055a9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01055ac:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01055b3:	77 23                	ja     c01055d8 <page_init+0x233>
c01055b5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01055b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01055bc:	c7 44 24 08 b8 67 11 	movl   $0xc01167b8,0x8(%esp)
c01055c3:	c0 
c01055c4:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01055cb:	00 
c01055cc:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01055d3:	e8 d4 b8 ff ff       	call   c0100eac <__panic>
c01055d8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01055db:	05 00 00 00 40       	add    $0x40000000,%eax
c01055e0:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c01055e3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01055ea:	e9 7c 01 00 00       	jmp    c010576b <page_init+0x3c6>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01055ef:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01055f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01055f5:	89 d0                	mov    %edx,%eax
c01055f7:	c1 e0 02             	shl    $0x2,%eax
c01055fa:	01 d0                	add    %edx,%eax
c01055fc:	c1 e0 02             	shl    $0x2,%eax
c01055ff:	01 c8                	add    %ecx,%eax
c0105601:	8b 50 08             	mov    0x8(%eax),%edx
c0105604:	8b 40 04             	mov    0x4(%eax),%eax
c0105607:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010560a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010560d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105610:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105613:	89 d0                	mov    %edx,%eax
c0105615:	c1 e0 02             	shl    $0x2,%eax
c0105618:	01 d0                	add    %edx,%eax
c010561a:	c1 e0 02             	shl    $0x2,%eax
c010561d:	01 c8                	add    %ecx,%eax
c010561f:	8b 50 10             	mov    0x10(%eax),%edx
c0105622:	8b 40 0c             	mov    0xc(%eax),%eax
c0105625:	03 45 d0             	add    -0x30(%ebp),%eax
c0105628:	13 55 d4             	adc    -0x2c(%ebp),%edx
c010562b:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010562e:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0105631:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105634:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105637:	89 d0                	mov    %edx,%eax
c0105639:	c1 e0 02             	shl    $0x2,%eax
c010563c:	01 d0                	add    %edx,%eax
c010563e:	c1 e0 02             	shl    $0x2,%eax
c0105641:	01 c8                	add    %ecx,%eax
c0105643:	83 c0 14             	add    $0x14,%eax
c0105646:	8b 00                	mov    (%eax),%eax
c0105648:	83 f8 01             	cmp    $0x1,%eax
c010564b:	0f 85 16 01 00 00    	jne    c0105767 <page_init+0x3c2>
            if (begin < freemem) {
c0105651:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105654:	ba 00 00 00 00       	mov    $0x0,%edx
c0105659:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010565c:	72 17                	jb     c0105675 <page_init+0x2d0>
c010565e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0105661:	77 05                	ja     c0105668 <page_init+0x2c3>
c0105663:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0105666:	76 0d                	jbe    c0105675 <page_init+0x2d0>
                begin = freemem;
c0105668:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010566b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010566e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0105675:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105679:	72 1d                	jb     c0105698 <page_init+0x2f3>
c010567b:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010567f:	77 09                	ja     c010568a <page_init+0x2e5>
c0105681:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0105688:	76 0e                	jbe    c0105698 <page_init+0x2f3>
                end = KMEMSIZE;
c010568a:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0105691:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0105698:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010569b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010569e:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01056a1:	0f 87 c0 00 00 00    	ja     c0105767 <page_init+0x3c2>
c01056a7:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01056aa:	72 09                	jb     c01056b5 <page_init+0x310>
c01056ac:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01056af:	0f 83 b2 00 00 00    	jae    c0105767 <page_init+0x3c2>
                begin = ROUNDUP(begin, PGSIZE);
c01056b5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c01056bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01056bf:	03 45 9c             	add    -0x64(%ebp),%eax
c01056c2:	83 e8 01             	sub    $0x1,%eax
c01056c5:	89 45 98             	mov    %eax,-0x68(%ebp)
c01056c8:	8b 45 98             	mov    -0x68(%ebp),%eax
c01056cb:	ba 00 00 00 00       	mov    $0x0,%edx
c01056d0:	f7 75 9c             	divl   -0x64(%ebp)
c01056d3:	89 d0                	mov    %edx,%eax
c01056d5:	8b 55 98             	mov    -0x68(%ebp),%edx
c01056d8:	89 d1                	mov    %edx,%ecx
c01056da:	29 c1                	sub    %eax,%ecx
c01056dc:	89 c8                	mov    %ecx,%eax
c01056de:	ba 00 00 00 00       	mov    $0x0,%edx
c01056e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01056e6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c01056e9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01056ec:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01056ef:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01056f2:	ba 00 00 00 00       	mov    $0x0,%edx
c01056f7:	89 c1                	mov    %eax,%ecx
c01056f9:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
c01056ff:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
c0105705:	89 d1                	mov    %edx,%ecx
c0105707:	83 e1 00             	and    $0x0,%ecx
c010570a:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
c0105710:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0105716:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
c010571c:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010571f:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0105722:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105725:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105728:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010572b:	77 3a                	ja     c0105767 <page_init+0x3c2>
c010572d:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105730:	72 05                	jb     c0105737 <page_init+0x392>
c0105732:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105735:	73 30                	jae    c0105767 <page_init+0x3c2>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0105737:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010573a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c010573d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105740:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105743:	29 c8                	sub    %ecx,%eax
c0105745:	19 da                	sbb    %ebx,%edx
c0105747:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010574b:	c1 ea 0c             	shr    $0xc,%edx
c010574e:	89 c3                	mov    %eax,%ebx
c0105750:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105753:	89 04 24             	mov    %eax,(%esp)
c0105756:	e8 89 f8 ff ff       	call   c0104fe4 <pa2page>
c010575b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010575f:	89 04 24             	mov    %eax,(%esp)
c0105762:	e8 57 fb ff ff       	call   c01052be <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0105767:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010576b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010576e:	8b 00                	mov    (%eax),%eax
c0105770:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105773:	0f 8f 76 fe ff ff    	jg     c01055ef <page_init+0x24a>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0105779:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c010577f:	5b                   	pop    %ebx
c0105780:	5e                   	pop    %esi
c0105781:	5f                   	pop    %edi
c0105782:	5d                   	pop    %ebp
c0105783:	c3                   	ret    

c0105784 <enable_paging>:

static void
enable_paging(void) {
c0105784:	55                   	push   %ebp
c0105785:	89 e5                	mov    %esp,%ebp
c0105787:	53                   	push   %ebx
c0105788:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c010578b:	a1 24 50 15 c0       	mov    0xc0155024,%eax
c0105790:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0105793:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105796:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c0105799:	0f 20 c3             	mov    %cr0,%ebx
c010579c:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr0;
c010579f:	8b 45 f0             	mov    -0x10(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c01057a2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c01057a5:	81 4d f8 2f 00 05 80 	orl    $0x8005002f,-0x8(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c01057ac:	83 65 f8 f3          	andl   $0xfffffff3,-0x8(%ebp)
c01057b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01057b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c01057b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01057b9:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c01057bc:	83 c4 10             	add    $0x10,%esp
c01057bf:	5b                   	pop    %ebx
c01057c0:	5d                   	pop    %ebp
c01057c1:	c3                   	ret    

c01057c2 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01057c2:	55                   	push   %ebp
c01057c3:	89 e5                	mov    %esp,%ebp
c01057c5:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01057c8:	8b 45 14             	mov    0x14(%ebp),%eax
c01057cb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01057ce:	31 d0                	xor    %edx,%eax
c01057d0:	25 ff 0f 00 00       	and    $0xfff,%eax
c01057d5:	85 c0                	test   %eax,%eax
c01057d7:	74 24                	je     c01057fd <boot_map_segment+0x3b>
c01057d9:	c7 44 24 0c ea 67 11 	movl   $0xc01167ea,0xc(%esp)
c01057e0:	c0 
c01057e1:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01057e8:	c0 
c01057e9:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c01057f0:	00 
c01057f1:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01057f8:	e8 af b6 ff ff       	call   c0100eac <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c01057fd:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0105804:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105807:	25 ff 0f 00 00       	and    $0xfff,%eax
c010580c:	03 45 10             	add    0x10(%ebp),%eax
c010580f:	03 45 f0             	add    -0x10(%ebp),%eax
c0105812:	83 e8 01             	sub    $0x1,%eax
c0105815:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105818:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010581b:	ba 00 00 00 00       	mov    $0x0,%edx
c0105820:	f7 75 f0             	divl   -0x10(%ebp)
c0105823:	89 d0                	mov    %edx,%eax
c0105825:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105828:	89 d1                	mov    %edx,%ecx
c010582a:	29 c1                	sub    %eax,%ecx
c010582c:	89 c8                	mov    %ecx,%eax
c010582e:	c1 e8 0c             	shr    $0xc,%eax
c0105831:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105834:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105837:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010583a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010583d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105842:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0105845:	8b 45 14             	mov    0x14(%ebp),%eax
c0105848:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010584b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010584e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105853:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105856:	eb 6b                	jmp    c01058c3 <boot_map_segment+0x101>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0105858:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010585f:	00 
c0105860:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105863:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105867:	8b 45 08             	mov    0x8(%ebp),%eax
c010586a:	89 04 24             	mov    %eax,(%esp)
c010586d:	e8 d1 01 00 00       	call   c0105a43 <get_pte>
c0105872:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0105875:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105879:	75 24                	jne    c010589f <boot_map_segment+0xdd>
c010587b:	c7 44 24 0c 16 68 11 	movl   $0xc0116816,0xc(%esp)
c0105882:	c0 
c0105883:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c010588a:	c0 
c010588b:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0105892:	00 
c0105893:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c010589a:	e8 0d b6 ff ff       	call   c0100eac <__panic>
        *ptep = pa | PTE_P | perm;
c010589f:	8b 45 18             	mov    0x18(%ebp),%eax
c01058a2:	8b 55 14             	mov    0x14(%ebp),%edx
c01058a5:	09 d0                	or     %edx,%eax
c01058a7:	89 c2                	mov    %eax,%edx
c01058a9:	83 ca 01             	or     $0x1,%edx
c01058ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01058af:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01058b1:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01058b5:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01058bc:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01058c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01058c7:	75 8f                	jne    c0105858 <boot_map_segment+0x96>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01058c9:	c9                   	leave  
c01058ca:	c3                   	ret    

c01058cb <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01058cb:	55                   	push   %ebp
c01058cc:	89 e5                	mov    %esp,%ebp
c01058ce:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c01058d1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01058d8:	e8 00 fa ff ff       	call   c01052dd <alloc_pages>
c01058dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c01058e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01058e4:	75 1c                	jne    c0105902 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c01058e6:	c7 44 24 08 23 68 11 	movl   $0xc0116823,0x8(%esp)
c01058ed:	c0 
c01058ee:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c01058f5:	00 
c01058f6:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01058fd:	e8 aa b5 ff ff       	call   c0100eac <__panic>
    }
    return page2kva(p);
c0105902:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105905:	89 04 24             	mov    %eax,(%esp)
c0105908:	e8 1c f7 ff ff       	call   c0105029 <page2kva>
}
c010590d:	c9                   	leave  
c010590e:	c3                   	ret    

c010590f <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010590f:	55                   	push   %ebp
c0105910:	89 e5                	mov    %esp,%ebp
c0105912:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105915:	e8 71 f9 ff ff       	call   c010528b <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010591a:	e8 86 fa ff ff       	call   c01053a5 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c010591f:	e8 44 09 00 00       	call   c0106268 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0105924:	e8 a2 ff ff ff       	call   c01058cb <boot_alloc_page>
c0105929:	a3 84 1e 15 c0       	mov    %eax,0xc0151e84
    memset(boot_pgdir, 0, PGSIZE);
c010592e:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0105933:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010593a:	00 
c010593b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105942:	00 
c0105943:	89 04 24             	mov    %eax,(%esp)
c0105946:	e8 29 fe 00 00       	call   c0115774 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c010594b:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0105950:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105953:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010595a:	77 23                	ja     c010597f <pmm_init+0x70>
c010595c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010595f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105963:	c7 44 24 08 b8 67 11 	movl   $0xc01167b8,0x8(%esp)
c010596a:	c0 
c010596b:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0105972:	00 
c0105973:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c010597a:	e8 2d b5 ff ff       	call   c0100eac <__panic>
c010597f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105982:	05 00 00 00 40       	add    $0x40000000,%eax
c0105987:	a3 24 50 15 c0       	mov    %eax,0xc0155024

    check_pgdir();
c010598c:	e8 f5 08 00 00       	call   c0106286 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0105991:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0105996:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010599c:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c01059a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01059a4:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01059ab:	77 23                	ja     c01059d0 <pmm_init+0xc1>
c01059ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059b0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01059b4:	c7 44 24 08 b8 67 11 	movl   $0xc01167b8,0x8(%esp)
c01059bb:	c0 
c01059bc:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c01059c3:	00 
c01059c4:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01059cb:	e8 dc b4 ff ff       	call   c0100eac <__panic>
c01059d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059d3:	05 00 00 00 40       	add    $0x40000000,%eax
c01059d8:	83 c8 03             	or     $0x3,%eax
c01059db:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01059dd:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c01059e2:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c01059e9:	00 
c01059ea:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01059f1:	00 
c01059f2:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c01059f9:	38 
c01059fa:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105a01:	c0 
c0105a02:	89 04 24             	mov    %eax,(%esp)
c0105a05:	e8 b8 fd ff ff       	call   c01057c2 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c0105a0a:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0105a0f:	8b 15 84 1e 15 c0    	mov    0xc0151e84,%edx
c0105a15:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c0105a1b:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0105a1d:	e8 62 fd ff ff       	call   c0105784 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0105a22:	e8 75 f7 ff ff       	call   c010519c <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c0105a27:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0105a2c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0105a32:	e8 ea 0e 00 00       	call   c0106921 <check_boot_pgdir>

    print_pgdir();
c0105a37:	e8 5e 13 00 00       	call   c0106d9a <print_pgdir>
    
    kmalloc_init();
c0105a3c:	e8 d5 f2 ff ff       	call   c0104d16 <kmalloc_init>

}
c0105a41:	c9                   	leave  
c0105a42:	c3                   	ret    

c0105a43 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0105a43:	55                   	push   %ebp
c0105a44:	89 e5                	mov    %esp,%ebp
c0105a46:	83 ec 38             	sub    $0x38,%esp
     * DEFINEs:
     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
     */
	pde_t *pdep = &pgdir[PDX(la)];			// (1) find page directory entry
c0105a49:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a4c:	c1 e8 16             	shr    $0x16,%eax
c0105a4f:	c1 e0 02             	shl    $0x2,%eax
c0105a52:	03 45 08             	add    0x8(%ebp),%eax
c0105a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {					// (2) check if entry is not present
c0105a58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a5b:	8b 00                	mov    (%eax),%eax
c0105a5d:	83 e0 01             	and    $0x1,%eax
c0105a60:	85 c0                	test   %eax,%eax
c0105a62:	0f 85 a9 00 00 00    	jne    c0105b11 <get_pte+0xce>
        struct Page *page = alloc_page();	// (3) check if creating is needed, then alloc page for page table
c0105a68:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105a6f:	e8 69 f8 ff ff       	call   c01052dd <alloc_pages>
c0105a74:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (page == NULL) {
c0105a77:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105a7b:	75 0a                	jne    c0105a87 <get_pte+0x44>
            return NULL;
c0105a7d:	b8 00 00 00 00       	mov    $0x0,%eax
c0105a82:	e9 e6 00 00 00       	jmp    c0105b6d <get_pte+0x12a>
        }
        set_page_ref(page, 1);				// (4) set page reference
c0105a87:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105a8e:	00 
c0105a8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a92:	89 04 24             	mov    %eax,(%esp)
c0105a95:	e8 43 f6 ff ff       	call   c01050dd <set_page_ref>
        uintptr_t pa = page2pa(page);		// (5) get linear address of page
c0105a9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a9d:	89 04 24             	mov    %eax,(%esp)
c0105aa0:	e8 29 f5 ff ff       	call   c0104fce <page2pa>
c0105aa5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);		// (6) clear page content using memset
c0105aa8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105aab:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105aae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105ab1:	c1 e8 0c             	shr    $0xc,%eax
c0105ab4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105ab7:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c0105abc:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105abf:	72 23                	jb     c0105ae4 <get_pte+0xa1>
c0105ac1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105ac4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105ac8:	c7 44 24 08 14 67 11 	movl   $0xc0116714,0x8(%esp)
c0105acf:	c0 
c0105ad0:	c7 44 24 04 8b 01 00 	movl   $0x18b,0x4(%esp)
c0105ad7:	00 
c0105ad8:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0105adf:	e8 c8 b3 ff ff       	call   c0100eac <__panic>
c0105ae4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105ae7:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105aec:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105af3:	00 
c0105af4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105afb:	00 
c0105afc:	89 04 24             	mov    %eax,(%esp)
c0105aff:	e8 70 fc 00 00       	call   c0115774 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;	// (7) set page directory entry's permission
c0105b04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b07:	89 c2                	mov    %eax,%edx
c0105b09:	83 ca 07             	or     $0x7,%edx
c0105b0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b0f:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];		// (8) return page table entry
c0105b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b14:	8b 00                	mov    (%eax),%eax
c0105b16:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105b1b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105b1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105b21:	c1 e8 0c             	shr    $0xc,%eax
c0105b24:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105b27:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c0105b2c:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105b2f:	72 23                	jb     c0105b54 <get_pte+0x111>
c0105b31:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105b34:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105b38:	c7 44 24 08 14 67 11 	movl   $0xc0116714,0x8(%esp)
c0105b3f:	c0 
c0105b40:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c0105b47:	00 
c0105b48:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0105b4f:	e8 58 b3 ff ff       	call   c0100eac <__panic>
c0105b54:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105b57:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105b5c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105b5f:	c1 ea 0c             	shr    $0xc,%edx
c0105b62:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0105b68:	c1 e2 02             	shl    $0x2,%edx
c0105b6b:	01 d0                	add    %edx,%eax
}
c0105b6d:	c9                   	leave  
c0105b6e:	c3                   	ret    

c0105b6f <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105b6f:	55                   	push   %ebp
c0105b70:	89 e5                	mov    %esp,%ebp
c0105b72:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105b75:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105b7c:	00 
c0105b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b84:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b87:	89 04 24             	mov    %eax,(%esp)
c0105b8a:	e8 b4 fe ff ff       	call   c0105a43 <get_pte>
c0105b8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105b92:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105b96:	74 08                	je     c0105ba0 <get_page+0x31>
        *ptep_store = ptep;
c0105b98:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105b9e:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105ba0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105ba4:	74 1b                	je     c0105bc1 <get_page+0x52>
c0105ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ba9:	8b 00                	mov    (%eax),%eax
c0105bab:	83 e0 01             	and    $0x1,%eax
c0105bae:	84 c0                	test   %al,%al
c0105bb0:	74 0f                	je     c0105bc1 <get_page+0x52>
        return pte2page(*ptep);
c0105bb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bb5:	8b 00                	mov    (%eax),%eax
c0105bb7:	89 04 24             	mov    %eax,(%esp)
c0105bba:	e8 be f4 ff ff       	call   c010507d <pte2page>
c0105bbf:	eb 05                	jmp    c0105bc6 <get_page+0x57>
    }
    return NULL;
c0105bc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105bc6:	c9                   	leave  
c0105bc7:	c3                   	ret    

c0105bc8 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105bc8:	55                   	push   %ebp
c0105bc9:	89 e5                	mov    %esp,%ebp
c0105bcb:	83 ec 28             	sub    $0x28,%esp
     *   tlb_invalidate(pde_t *pgdir, uintptr_t la) : Invalidate a TLB entry, but only if the page tables being
     *                        edited are the ones currently in use by the processor.
     * DEFINEs:
     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
     */
	if (*ptep & PTE_P) {						//(1) check if this page table entry is present
c0105bce:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bd1:	8b 00                	mov    (%eax),%eax
c0105bd3:	83 e0 01             	and    $0x1,%eax
c0105bd6:	84 c0                	test   %al,%al
c0105bd8:	74 4d                	je     c0105c27 <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);	//(2) find corresponding page to pte
c0105bda:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bdd:	8b 00                	mov    (%eax),%eax
c0105bdf:	89 04 24             	mov    %eax,(%esp)
c0105be2:	e8 96 f4 ff ff       	call   c010507d <pte2page>
c0105be7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {			//(3) decrease page reference
c0105bea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bed:	89 04 24             	mov    %eax,(%esp)
c0105bf0:	e8 0c f5 ff ff       	call   c0105101 <page_ref_dec>
c0105bf5:	85 c0                	test   %eax,%eax
c0105bf7:	75 13                	jne    c0105c0c <page_remove_pte+0x44>
            free_page(page);					//(4) and free this page when page reference reachs 0
c0105bf9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105c00:	00 
c0105c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c04:	89 04 24             	mov    %eax,(%esp)
c0105c07:	e8 3c f7 ff ff       	call   c0105348 <free_pages>
        }
        *ptep = 0;								//(5) clear second page table entry
c0105c0c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c0f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);				//(6) flush tlb
c0105c15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c18:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c1f:	89 04 24             	mov    %eax,(%esp)
c0105c22:	e8 0b 05 00 00       	call   c0106132 <tlb_invalidate>
    }
}
c0105c27:	c9                   	leave  
c0105c28:	c3                   	ret    

c0105c29 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105c29:	55                   	push   %ebp
c0105c2a:	89 e5                	mov    %esp,%ebp
c0105c2c:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c32:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c37:	85 c0                	test   %eax,%eax
c0105c39:	75 0c                	jne    c0105c47 <unmap_range+0x1e>
c0105c3b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c3e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c43:	85 c0                	test   %eax,%eax
c0105c45:	74 24                	je     c0105c6b <unmap_range+0x42>
c0105c47:	c7 44 24 0c 3c 68 11 	movl   $0xc011683c,0xc(%esp)
c0105c4e:	c0 
c0105c4f:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0105c56:	c0 
c0105c57:	c7 44 24 04 bf 01 00 	movl   $0x1bf,0x4(%esp)
c0105c5e:	00 
c0105c5f:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0105c66:	e8 41 b2 ff ff       	call   c0100eac <__panic>
    assert(USER_ACCESS(start, end));
c0105c6b:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105c72:	76 11                	jbe    c0105c85 <unmap_range+0x5c>
c0105c74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c77:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c7a:	73 09                	jae    c0105c85 <unmap_range+0x5c>
c0105c7c:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105c83:	76 24                	jbe    c0105ca9 <unmap_range+0x80>
c0105c85:	c7 44 24 0c 65 68 11 	movl   $0xc0116865,0xc(%esp)
c0105c8c:	c0 
c0105c8d:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0105c94:	c0 
c0105c95:	c7 44 24 04 c0 01 00 	movl   $0x1c0,0x4(%esp)
c0105c9c:	00 
c0105c9d:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0105ca4:	e8 03 b2 ff ff       	call   c0100eac <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105ca9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105cb0:	00 
c0105cb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105cb4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105cb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cbb:	89 04 24             	mov    %eax,(%esp)
c0105cbe:	e8 80 fd ff ff       	call   c0105a43 <get_pte>
c0105cc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105cc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105cca:	75 18                	jne    c0105ce4 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ccf:	05 00 00 40 00       	add    $0x400000,%eax
c0105cd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105cd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cda:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105ce2:	eb 29                	jmp    c0105d0d <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105ce4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ce7:	8b 00                	mov    (%eax),%eax
c0105ce9:	85 c0                	test   %eax,%eax
c0105ceb:	74 19                	je     c0105d06 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105ced:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cf0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105cf4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105cf7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105cfb:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cfe:	89 04 24             	mov    %eax,(%esp)
c0105d01:	e8 c2 fe ff ff       	call   c0105bc8 <page_remove_pte>
        }
        start += PGSIZE;
c0105d06:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105d0d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105d11:	74 08                	je     c0105d1b <unmap_range+0xf2>
c0105d13:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d16:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105d19:	72 8e                	jb     c0105ca9 <unmap_range+0x80>
}
c0105d1b:	c9                   	leave  
c0105d1c:	c3                   	ret    

c0105d1d <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105d1d:	55                   	push   %ebp
c0105d1e:	89 e5                	mov    %esp,%ebp
c0105d20:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105d23:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d26:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105d2b:	85 c0                	test   %eax,%eax
c0105d2d:	75 0c                	jne    c0105d3b <exit_range+0x1e>
c0105d2f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d32:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105d37:	85 c0                	test   %eax,%eax
c0105d39:	74 24                	je     c0105d5f <exit_range+0x42>
c0105d3b:	c7 44 24 0c 3c 68 11 	movl   $0xc011683c,0xc(%esp)
c0105d42:	c0 
c0105d43:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0105d4a:	c0 
c0105d4b:	c7 44 24 04 d1 01 00 	movl   $0x1d1,0x4(%esp)
c0105d52:	00 
c0105d53:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0105d5a:	e8 4d b1 ff ff       	call   c0100eac <__panic>
    assert(USER_ACCESS(start, end));
c0105d5f:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105d66:	76 11                	jbe    c0105d79 <exit_range+0x5c>
c0105d68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d6b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105d6e:	73 09                	jae    c0105d79 <exit_range+0x5c>
c0105d70:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105d77:	76 24                	jbe    c0105d9d <exit_range+0x80>
c0105d79:	c7 44 24 0c 65 68 11 	movl   $0xc0116865,0xc(%esp)
c0105d80:	c0 
c0105d81:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0105d88:	c0 
c0105d89:	c7 44 24 04 d2 01 00 	movl   $0x1d2,0x4(%esp)
c0105d90:	00 
c0105d91:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0105d98:	e8 0f b1 ff ff       	call   c0100eac <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105d9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105da0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105da6:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105dab:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105dae:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105db1:	c1 e8 16             	shr    $0x16,%eax
c0105db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105dba:	c1 e0 02             	shl    $0x2,%eax
c0105dbd:	03 45 08             	add    0x8(%ebp),%eax
c0105dc0:	8b 00                	mov    (%eax),%eax
c0105dc2:	83 e0 01             	and    $0x1,%eax
c0105dc5:	84 c0                	test   %al,%al
c0105dc7:	74 32                	je     c0105dfb <exit_range+0xde>
            free_page(pde2page(pgdir[pde_idx]));
c0105dc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105dcc:	c1 e0 02             	shl    $0x2,%eax
c0105dcf:	03 45 08             	add    0x8(%ebp),%eax
c0105dd2:	8b 00                	mov    (%eax),%eax
c0105dd4:	89 04 24             	mov    %eax,(%esp)
c0105dd7:	e8 df f2 ff ff       	call   c01050bb <pde2page>
c0105ddc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105de3:	00 
c0105de4:	89 04 24             	mov    %eax,(%esp)
c0105de7:	e8 5c f5 ff ff       	call   c0105348 <free_pages>
            pgdir[pde_idx] = 0;
c0105dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105def:	c1 e0 02             	shl    $0x2,%eax
c0105df2:	03 45 08             	add    0x8(%ebp),%eax
c0105df5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105dfb:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105e02:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105e06:	74 08                	je     c0105e10 <exit_range+0xf3>
c0105e08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e0b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105e0e:	72 9e                	jb     c0105dae <exit_range+0x91>
}
c0105e10:	c9                   	leave  
c0105e11:	c3                   	ret    

c0105e12 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105e12:	55                   	push   %ebp
c0105e13:	89 e5                	mov    %esp,%ebp
c0105e15:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105e18:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e1b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105e20:	85 c0                	test   %eax,%eax
c0105e22:	75 0c                	jne    c0105e30 <copy_range+0x1e>
c0105e24:	8b 45 14             	mov    0x14(%ebp),%eax
c0105e27:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105e2c:	85 c0                	test   %eax,%eax
c0105e2e:	74 24                	je     c0105e54 <copy_range+0x42>
c0105e30:	c7 44 24 0c 3c 68 11 	movl   $0xc011683c,0xc(%esp)
c0105e37:	c0 
c0105e38:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0105e3f:	c0 
c0105e40:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0105e47:	00 
c0105e48:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0105e4f:	e8 58 b0 ff ff       	call   c0100eac <__panic>
    assert(USER_ACCESS(start, end));
c0105e54:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105e5b:	76 11                	jbe    c0105e6e <copy_range+0x5c>
c0105e5d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e60:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105e63:	73 09                	jae    c0105e6e <copy_range+0x5c>
c0105e65:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105e6c:	76 24                	jbe    c0105e92 <copy_range+0x80>
c0105e6e:	c7 44 24 0c 65 68 11 	movl   $0xc0116865,0xc(%esp)
c0105e75:	c0 
c0105e76:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0105e7d:	c0 
c0105e7e:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
c0105e85:	00 
c0105e86:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0105e8d:	e8 1a b0 ff ff       	call   c0100eac <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105e92:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105e99:	00 
c0105e9a:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e9d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ea1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ea4:	89 04 24             	mov    %eax,(%esp)
c0105ea7:	e8 97 fb ff ff       	call   c0105a43 <get_pte>
c0105eac:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105eaf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105eb3:	75 1b                	jne    c0105ed0 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105eb5:	8b 45 10             	mov    0x10(%ebp),%eax
c0105eb8:	05 00 00 40 00       	add    $0x400000,%eax
c0105ebd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105ec0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ec3:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105ec8:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105ecb:	e9 4c 01 00 00       	jmp    c010601c <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105ed0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ed3:	8b 00                	mov    (%eax),%eax
c0105ed5:	83 e0 01             	and    $0x1,%eax
c0105ed8:	84 c0                	test   %al,%al
c0105eda:	0f 84 35 01 00 00    	je     c0106015 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105ee0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105ee7:	00 
c0105ee8:	8b 45 10             	mov    0x10(%ebp),%eax
c0105eeb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105eef:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ef2:	89 04 24             	mov    %eax,(%esp)
c0105ef5:	e8 49 fb ff ff       	call   c0105a43 <get_pte>
c0105efa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105efd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105f01:	75 0a                	jne    c0105f0d <copy_range+0xfb>
                return -E_NO_MEM;
c0105f03:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105f08:	e9 26 01 00 00       	jmp    c0106033 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105f0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f10:	8b 00                	mov    (%eax),%eax
c0105f12:	83 e0 07             	and    $0x7,%eax
c0105f15:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f1b:	8b 00                	mov    (%eax),%eax
c0105f1d:	89 04 24             	mov    %eax,(%esp)
c0105f20:	e8 58 f1 ff ff       	call   c010507d <pte2page>
c0105f25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105f28:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105f2f:	e8 a9 f3 ff ff       	call   c01052dd <alloc_pages>
c0105f34:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105f37:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105f3b:	75 24                	jne    c0105f61 <copy_range+0x14f>
c0105f3d:	c7 44 24 0c 7d 68 11 	movl   $0xc011687d,0xc(%esp)
c0105f44:	c0 
c0105f45:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0105f4c:	c0 
c0105f4d:	c7 44 24 04 fb 01 00 	movl   $0x1fb,0x4(%esp)
c0105f54:	00 
c0105f55:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0105f5c:	e8 4b af ff ff       	call   c0100eac <__panic>
        assert(npage!=NULL);
c0105f61:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105f65:	75 24                	jne    c0105f8b <copy_range+0x179>
c0105f67:	c7 44 24 0c 88 68 11 	movl   $0xc0116888,0xc(%esp)
c0105f6e:	c0 
c0105f6f:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0105f76:	c0 
c0105f77:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c0105f7e:	00 
c0105f7f:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0105f86:	e8 21 af ff ff       	call   c0100eac <__panic>
        int ret=0;
c0105f8b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
		void * src = page2kva(page);
c0105f92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105f95:	89 04 24             	mov    %eax,(%esp)
c0105f98:	e8 8c f0 ff ff       	call   c0105029 <page2kva>
c0105f9d:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * dst = page2kva(npage);
c0105fa0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105fa3:	89 04 24             	mov    %eax,(%esp)
c0105fa6:	e8 7e f0 ff ff       	call   c0105029 <page2kva>
c0105fab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        memcpy(dst, src, PGSIZE);
c0105fae:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105fb5:	00 
c0105fb6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105fb9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fbd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105fc0:	89 04 24             	mov    %eax,(%esp)
c0105fc3:	e8 ab f8 00 00       	call   c0115873 <memcpy>
        ret = page_insert(to, npage, start, perm);
c0105fc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105fcf:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fd2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105fd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105fd9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fe0:	89 04 24             	mov    %eax,(%esp)
c0105fe3:	e8 91 00 00 00       	call   c0106079 <page_insert>
c0105fe8:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105feb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105fef:	74 24                	je     c0106015 <copy_range+0x203>
c0105ff1:	c7 44 24 0c 94 68 11 	movl   $0xc0116894,0xc(%esp)
c0105ff8:	c0 
c0105ff9:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106000:	c0 
c0106001:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c0106008:	00 
c0106009:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106010:	e8 97 ae ff ff       	call   c0100eac <__panic>
        }
        start += PGSIZE;
c0106015:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c010601c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0106020:	74 0c                	je     c010602e <copy_range+0x21c>
c0106022:	8b 45 10             	mov    0x10(%ebp),%eax
c0106025:	3b 45 14             	cmp    0x14(%ebp),%eax
c0106028:	0f 82 64 fe ff ff    	jb     c0105e92 <copy_range+0x80>
    return 0;
c010602e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106033:	c9                   	leave  
c0106034:	c3                   	ret    

c0106035 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0106035:	55                   	push   %ebp
c0106036:	89 e5                	mov    %esp,%ebp
c0106038:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c010603b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106042:	00 
c0106043:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106046:	89 44 24 04          	mov    %eax,0x4(%esp)
c010604a:	8b 45 08             	mov    0x8(%ebp),%eax
c010604d:	89 04 24             	mov    %eax,(%esp)
c0106050:	e8 ee f9 ff ff       	call   c0105a43 <get_pte>
c0106055:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0106058:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010605c:	74 19                	je     c0106077 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c010605e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106061:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106065:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106068:	89 44 24 04          	mov    %eax,0x4(%esp)
c010606c:	8b 45 08             	mov    0x8(%ebp),%eax
c010606f:	89 04 24             	mov    %eax,(%esp)
c0106072:	e8 51 fb ff ff       	call   c0105bc8 <page_remove_pte>
    }
}
c0106077:	c9                   	leave  
c0106078:	c3                   	ret    

c0106079 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0106079:	55                   	push   %ebp
c010607a:	89 e5                	mov    %esp,%ebp
c010607c:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c010607f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0106086:	00 
c0106087:	8b 45 10             	mov    0x10(%ebp),%eax
c010608a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010608e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106091:	89 04 24             	mov    %eax,(%esp)
c0106094:	e8 aa f9 ff ff       	call   c0105a43 <get_pte>
c0106099:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c010609c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01060a0:	75 0a                	jne    c01060ac <page_insert+0x33>
        return -E_NO_MEM;
c01060a2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01060a7:	e9 84 00 00 00       	jmp    c0106130 <page_insert+0xb7>
    }
    page_ref_inc(page);
c01060ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01060af:	89 04 24             	mov    %eax,(%esp)
c01060b2:	e8 33 f0 ff ff       	call   c01050ea <page_ref_inc>
    if (*ptep & PTE_P) {
c01060b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060ba:	8b 00                	mov    (%eax),%eax
c01060bc:	83 e0 01             	and    $0x1,%eax
c01060bf:	84 c0                	test   %al,%al
c01060c1:	74 3e                	je     c0106101 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c01060c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060c6:	8b 00                	mov    (%eax),%eax
c01060c8:	89 04 24             	mov    %eax,(%esp)
c01060cb:	e8 ad ef ff ff       	call   c010507d <pte2page>
c01060d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c01060d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060d6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01060d9:	75 0d                	jne    c01060e8 <page_insert+0x6f>
            page_ref_dec(page);
c01060db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01060de:	89 04 24             	mov    %eax,(%esp)
c01060e1:	e8 1b f0 ff ff       	call   c0105101 <page_ref_dec>
c01060e6:	eb 19                	jmp    c0106101 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c01060e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060eb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01060ef:	8b 45 10             	mov    0x10(%ebp),%eax
c01060f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01060f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01060f9:	89 04 24             	mov    %eax,(%esp)
c01060fc:	e8 c7 fa ff ff       	call   c0105bc8 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0106101:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106104:	89 04 24             	mov    %eax,(%esp)
c0106107:	e8 c2 ee ff ff       	call   c0104fce <page2pa>
c010610c:	0b 45 14             	or     0x14(%ebp),%eax
c010610f:	89 c2                	mov    %eax,%edx
c0106111:	83 ca 01             	or     $0x1,%edx
c0106114:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106117:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0106119:	8b 45 10             	mov    0x10(%ebp),%eax
c010611c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106120:	8b 45 08             	mov    0x8(%ebp),%eax
c0106123:	89 04 24             	mov    %eax,(%esp)
c0106126:	e8 07 00 00 00       	call   c0106132 <tlb_invalidate>
    return 0;
c010612b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106130:	c9                   	leave  
c0106131:	c3                   	ret    

c0106132 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0106132:	55                   	push   %ebp
c0106133:	89 e5                	mov    %esp,%ebp
c0106135:	53                   	push   %ebx
c0106136:	83 ec 24             	sub    $0x24,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0106139:	0f 20 db             	mov    %cr3,%ebx
c010613c:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr3;
c010613f:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0106142:	89 c2                	mov    %eax,%edx
c0106144:	8b 45 08             	mov    0x8(%ebp),%eax
c0106147:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010614a:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0106151:	77 23                	ja     c0106176 <tlb_invalidate+0x44>
c0106153:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106156:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010615a:	c7 44 24 08 b8 67 11 	movl   $0xc01167b8,0x8(%esp)
c0106161:	c0 
c0106162:	c7 44 24 04 41 02 00 	movl   $0x241,0x4(%esp)
c0106169:	00 
c010616a:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106171:	e8 36 ad ff ff       	call   c0100eac <__panic>
c0106176:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106179:	05 00 00 00 40       	add    $0x40000000,%eax
c010617e:	39 c2                	cmp    %eax,%edx
c0106180:	75 0c                	jne    c010618e <tlb_invalidate+0x5c>
        invlpg((void *)la);
c0106182:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106185:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0106188:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010618b:	0f 01 38             	invlpg (%eax)
    }
}
c010618e:	83 c4 24             	add    $0x24,%esp
c0106191:	5b                   	pop    %ebx
c0106192:	5d                   	pop    %ebp
c0106193:	c3                   	ret    

c0106194 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0106194:	55                   	push   %ebp
c0106195:	89 e5                	mov    %esp,%ebp
c0106197:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c010619a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01061a1:	e8 37 f1 ff ff       	call   c01052dd <alloc_pages>
c01061a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c01061a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01061ad:	0f 84 b0 00 00 00    	je     c0106263 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c01061b3:	8b 45 10             	mov    0x10(%ebp),%eax
c01061b6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01061ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c01061bd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01061c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01061c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01061cb:	89 04 24             	mov    %eax,(%esp)
c01061ce:	e8 a6 fe ff ff       	call   c0106079 <page_insert>
c01061d3:	85 c0                	test   %eax,%eax
c01061d5:	74 1a                	je     c01061f1 <pgdir_alloc_page+0x5d>
            free_page(page);
c01061d7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01061de:	00 
c01061df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061e2:	89 04 24             	mov    %eax,(%esp)
c01061e5:	e8 5e f1 ff ff       	call   c0105348 <free_pages>
            return NULL;
c01061ea:	b8 00 00 00 00       	mov    $0x0,%eax
c01061ef:	eb 75                	jmp    c0106266 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c01061f1:	a1 0c 1f 15 c0       	mov    0xc0151f0c,%eax
c01061f6:	85 c0                	test   %eax,%eax
c01061f8:	74 69                	je     c0106263 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c01061fa:	a1 0c 51 15 c0       	mov    0xc015510c,%eax
c01061ff:	85 c0                	test   %eax,%eax
c0106201:	74 60                	je     c0106263 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0106203:	a1 0c 51 15 c0       	mov    0xc015510c,%eax
c0106208:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010620f:	00 
c0106210:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106213:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106217:	8b 55 0c             	mov    0xc(%ebp),%edx
c010621a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010621e:	89 04 24             	mov    %eax,(%esp)
c0106221:	e8 51 0e 00 00       	call   c0107077 <swap_map_swappable>
                page->pra_vaddr=la;
c0106226:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106229:	8b 55 0c             	mov    0xc(%ebp),%edx
c010622c:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c010622f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106232:	89 04 24             	mov    %eax,(%esp)
c0106235:	e8 99 ee ff ff       	call   c01050d3 <page_ref>
c010623a:	83 f8 01             	cmp    $0x1,%eax
c010623d:	74 24                	je     c0106263 <pgdir_alloc_page+0xcf>
c010623f:	c7 44 24 0c 9d 68 11 	movl   $0xc011689d,0xc(%esp)
c0106246:	c0 
c0106247:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c010624e:	c0 
c010624f:	c7 44 24 04 55 02 00 	movl   $0x255,0x4(%esp)
c0106256:	00 
c0106257:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c010625e:	e8 49 ac ff ff       	call   c0100eac <__panic>
            }
        }

    }

    return page;
c0106263:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106266:	c9                   	leave  
c0106267:	c3                   	ret    

c0106268 <check_alloc_page>:

static void
check_alloc_page(void) {
c0106268:	55                   	push   %ebp
c0106269:	89 e5                	mov    %esp,%ebp
c010626b:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c010626e:	a1 20 50 15 c0       	mov    0xc0155020,%eax
c0106273:	8b 40 18             	mov    0x18(%eax),%eax
c0106276:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0106278:	c7 04 24 b4 68 11 c0 	movl   $0xc01168b4,(%esp)
c010627f:	e8 ec a0 ff ff       	call   c0100370 <cprintf>
}
c0106284:	c9                   	leave  
c0106285:	c3                   	ret    

c0106286 <check_pgdir>:

static void
check_pgdir(void) {
c0106286:	55                   	push   %ebp
c0106287:	89 e5                	mov    %esp,%ebp
c0106289:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010628c:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c0106291:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106296:	76 24                	jbe    c01062bc <check_pgdir+0x36>
c0106298:	c7 44 24 0c d3 68 11 	movl   $0xc01168d3,0xc(%esp)
c010629f:	c0 
c01062a0:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01062a7:	c0 
c01062a8:	c7 44 24 04 6d 02 00 	movl   $0x26d,0x4(%esp)
c01062af:	00 
c01062b0:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01062b7:	e8 f0 ab ff ff       	call   c0100eac <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c01062bc:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c01062c1:	85 c0                	test   %eax,%eax
c01062c3:	74 0e                	je     c01062d3 <check_pgdir+0x4d>
c01062c5:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c01062ca:	25 ff 0f 00 00       	and    $0xfff,%eax
c01062cf:	85 c0                	test   %eax,%eax
c01062d1:	74 24                	je     c01062f7 <check_pgdir+0x71>
c01062d3:	c7 44 24 0c f0 68 11 	movl   $0xc01168f0,0xc(%esp)
c01062da:	c0 
c01062db:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01062e2:	c0 
c01062e3:	c7 44 24 04 6e 02 00 	movl   $0x26e,0x4(%esp)
c01062ea:	00 
c01062eb:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01062f2:	e8 b5 ab ff ff       	call   c0100eac <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c01062f7:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c01062fc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106303:	00 
c0106304:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010630b:	00 
c010630c:	89 04 24             	mov    %eax,(%esp)
c010630f:	e8 5b f8 ff ff       	call   c0105b6f <get_page>
c0106314:	85 c0                	test   %eax,%eax
c0106316:	74 24                	je     c010633c <check_pgdir+0xb6>
c0106318:	c7 44 24 0c 28 69 11 	movl   $0xc0116928,0xc(%esp)
c010631f:	c0 
c0106320:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106327:	c0 
c0106328:	c7 44 24 04 6f 02 00 	movl   $0x26f,0x4(%esp)
c010632f:	00 
c0106330:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106337:	e8 70 ab ff ff       	call   c0100eac <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c010633c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106343:	e8 95 ef ff ff       	call   c01052dd <alloc_pages>
c0106348:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c010634b:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106350:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106357:	00 
c0106358:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010635f:	00 
c0106360:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106363:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106367:	89 04 24             	mov    %eax,(%esp)
c010636a:	e8 0a fd ff ff       	call   c0106079 <page_insert>
c010636f:	85 c0                	test   %eax,%eax
c0106371:	74 24                	je     c0106397 <check_pgdir+0x111>
c0106373:	c7 44 24 0c 50 69 11 	movl   $0xc0116950,0xc(%esp)
c010637a:	c0 
c010637b:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106382:	c0 
c0106383:	c7 44 24 04 73 02 00 	movl   $0x273,0x4(%esp)
c010638a:	00 
c010638b:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106392:	e8 15 ab ff ff       	call   c0100eac <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106397:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c010639c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01063a3:	00 
c01063a4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01063ab:	00 
c01063ac:	89 04 24             	mov    %eax,(%esp)
c01063af:	e8 8f f6 ff ff       	call   c0105a43 <get_pte>
c01063b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01063b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01063bb:	75 24                	jne    c01063e1 <check_pgdir+0x15b>
c01063bd:	c7 44 24 0c 7c 69 11 	movl   $0xc011697c,0xc(%esp)
c01063c4:	c0 
c01063c5:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01063cc:	c0 
c01063cd:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
c01063d4:	00 
c01063d5:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01063dc:	e8 cb aa ff ff       	call   c0100eac <__panic>
    assert(pte2page(*ptep) == p1);
c01063e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063e4:	8b 00                	mov    (%eax),%eax
c01063e6:	89 04 24             	mov    %eax,(%esp)
c01063e9:	e8 8f ec ff ff       	call   c010507d <pte2page>
c01063ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01063f1:	74 24                	je     c0106417 <check_pgdir+0x191>
c01063f3:	c7 44 24 0c a9 69 11 	movl   $0xc01169a9,0xc(%esp)
c01063fa:	c0 
c01063fb:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106402:	c0 
c0106403:	c7 44 24 04 77 02 00 	movl   $0x277,0x4(%esp)
c010640a:	00 
c010640b:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106412:	e8 95 aa ff ff       	call   c0100eac <__panic>
    assert(page_ref(p1) == 1);
c0106417:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010641a:	89 04 24             	mov    %eax,(%esp)
c010641d:	e8 b1 ec ff ff       	call   c01050d3 <page_ref>
c0106422:	83 f8 01             	cmp    $0x1,%eax
c0106425:	74 24                	je     c010644b <check_pgdir+0x1c5>
c0106427:	c7 44 24 0c bf 69 11 	movl   $0xc01169bf,0xc(%esp)
c010642e:	c0 
c010642f:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106436:	c0 
c0106437:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
c010643e:	00 
c010643f:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106446:	e8 61 aa ff ff       	call   c0100eac <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c010644b:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106450:	8b 00                	mov    (%eax),%eax
c0106452:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106457:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010645a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010645d:	c1 e8 0c             	shr    $0xc,%eax
c0106460:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106463:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c0106468:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010646b:	72 23                	jb     c0106490 <check_pgdir+0x20a>
c010646d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106470:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106474:	c7 44 24 08 14 67 11 	movl   $0xc0116714,0x8(%esp)
c010647b:	c0 
c010647c:	c7 44 24 04 7a 02 00 	movl   $0x27a,0x4(%esp)
c0106483:	00 
c0106484:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c010648b:	e8 1c aa ff ff       	call   c0100eac <__panic>
c0106490:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106493:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106498:	83 c0 04             	add    $0x4,%eax
c010649b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010649e:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c01064a3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01064aa:	00 
c01064ab:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01064b2:	00 
c01064b3:	89 04 24             	mov    %eax,(%esp)
c01064b6:	e8 88 f5 ff ff       	call   c0105a43 <get_pte>
c01064bb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01064be:	74 24                	je     c01064e4 <check_pgdir+0x25e>
c01064c0:	c7 44 24 0c d4 69 11 	movl   $0xc01169d4,0xc(%esp)
c01064c7:	c0 
c01064c8:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01064cf:	c0 
c01064d0:	c7 44 24 04 7b 02 00 	movl   $0x27b,0x4(%esp)
c01064d7:	00 
c01064d8:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01064df:	e8 c8 a9 ff ff       	call   c0100eac <__panic>

    p2 = alloc_page();
c01064e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01064eb:	e8 ed ed ff ff       	call   c01052dd <alloc_pages>
c01064f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01064f3:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c01064f8:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c01064ff:	00 
c0106500:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106507:	00 
c0106508:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010650b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010650f:	89 04 24             	mov    %eax,(%esp)
c0106512:	e8 62 fb ff ff       	call   c0106079 <page_insert>
c0106517:	85 c0                	test   %eax,%eax
c0106519:	74 24                	je     c010653f <check_pgdir+0x2b9>
c010651b:	c7 44 24 0c fc 69 11 	movl   $0xc01169fc,0xc(%esp)
c0106522:	c0 
c0106523:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c010652a:	c0 
c010652b:	c7 44 24 04 7e 02 00 	movl   $0x27e,0x4(%esp)
c0106532:	00 
c0106533:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c010653a:	e8 6d a9 ff ff       	call   c0100eac <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010653f:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106544:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010654b:	00 
c010654c:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106553:	00 
c0106554:	89 04 24             	mov    %eax,(%esp)
c0106557:	e8 e7 f4 ff ff       	call   c0105a43 <get_pte>
c010655c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010655f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106563:	75 24                	jne    c0106589 <check_pgdir+0x303>
c0106565:	c7 44 24 0c 34 6a 11 	movl   $0xc0116a34,0xc(%esp)
c010656c:	c0 
c010656d:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106574:	c0 
c0106575:	c7 44 24 04 7f 02 00 	movl   $0x27f,0x4(%esp)
c010657c:	00 
c010657d:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106584:	e8 23 a9 ff ff       	call   c0100eac <__panic>
    assert(*ptep & PTE_U);
c0106589:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010658c:	8b 00                	mov    (%eax),%eax
c010658e:	83 e0 04             	and    $0x4,%eax
c0106591:	85 c0                	test   %eax,%eax
c0106593:	75 24                	jne    c01065b9 <check_pgdir+0x333>
c0106595:	c7 44 24 0c 64 6a 11 	movl   $0xc0116a64,0xc(%esp)
c010659c:	c0 
c010659d:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01065a4:	c0 
c01065a5:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c01065ac:	00 
c01065ad:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01065b4:	e8 f3 a8 ff ff       	call   c0100eac <__panic>
    assert(*ptep & PTE_W);
c01065b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065bc:	8b 00                	mov    (%eax),%eax
c01065be:	83 e0 02             	and    $0x2,%eax
c01065c1:	85 c0                	test   %eax,%eax
c01065c3:	75 24                	jne    c01065e9 <check_pgdir+0x363>
c01065c5:	c7 44 24 0c 72 6a 11 	movl   $0xc0116a72,0xc(%esp)
c01065cc:	c0 
c01065cd:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01065d4:	c0 
c01065d5:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c01065dc:	00 
c01065dd:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01065e4:	e8 c3 a8 ff ff       	call   c0100eac <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01065e9:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c01065ee:	8b 00                	mov    (%eax),%eax
c01065f0:	83 e0 04             	and    $0x4,%eax
c01065f3:	85 c0                	test   %eax,%eax
c01065f5:	75 24                	jne    c010661b <check_pgdir+0x395>
c01065f7:	c7 44 24 0c 80 6a 11 	movl   $0xc0116a80,0xc(%esp)
c01065fe:	c0 
c01065ff:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106606:	c0 
c0106607:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c010660e:	00 
c010660f:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106616:	e8 91 a8 ff ff       	call   c0100eac <__panic>
    assert(page_ref(p2) == 1);
c010661b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010661e:	89 04 24             	mov    %eax,(%esp)
c0106621:	e8 ad ea ff ff       	call   c01050d3 <page_ref>
c0106626:	83 f8 01             	cmp    $0x1,%eax
c0106629:	74 24                	je     c010664f <check_pgdir+0x3c9>
c010662b:	c7 44 24 0c 96 6a 11 	movl   $0xc0116a96,0xc(%esp)
c0106632:	c0 
c0106633:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c010663a:	c0 
c010663b:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c0106642:	00 
c0106643:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c010664a:	e8 5d a8 ff ff       	call   c0100eac <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c010664f:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106654:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010665b:	00 
c010665c:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106663:	00 
c0106664:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106667:	89 54 24 04          	mov    %edx,0x4(%esp)
c010666b:	89 04 24             	mov    %eax,(%esp)
c010666e:	e8 06 fa ff ff       	call   c0106079 <page_insert>
c0106673:	85 c0                	test   %eax,%eax
c0106675:	74 24                	je     c010669b <check_pgdir+0x415>
c0106677:	c7 44 24 0c a8 6a 11 	movl   $0xc0116aa8,0xc(%esp)
c010667e:	c0 
c010667f:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106686:	c0 
c0106687:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c010668e:	00 
c010668f:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106696:	e8 11 a8 ff ff       	call   c0100eac <__panic>
    assert(page_ref(p1) == 2);
c010669b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010669e:	89 04 24             	mov    %eax,(%esp)
c01066a1:	e8 2d ea ff ff       	call   c01050d3 <page_ref>
c01066a6:	83 f8 02             	cmp    $0x2,%eax
c01066a9:	74 24                	je     c01066cf <check_pgdir+0x449>
c01066ab:	c7 44 24 0c d4 6a 11 	movl   $0xc0116ad4,0xc(%esp)
c01066b2:	c0 
c01066b3:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01066ba:	c0 
c01066bb:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c01066c2:	00 
c01066c3:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01066ca:	e8 dd a7 ff ff       	call   c0100eac <__panic>
    assert(page_ref(p2) == 0);
c01066cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066d2:	89 04 24             	mov    %eax,(%esp)
c01066d5:	e8 f9 e9 ff ff       	call   c01050d3 <page_ref>
c01066da:	85 c0                	test   %eax,%eax
c01066dc:	74 24                	je     c0106702 <check_pgdir+0x47c>
c01066de:	c7 44 24 0c e6 6a 11 	movl   $0xc0116ae6,0xc(%esp)
c01066e5:	c0 
c01066e6:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01066ed:	c0 
c01066ee:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
c01066f5:	00 
c01066f6:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01066fd:	e8 aa a7 ff ff       	call   c0100eac <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106702:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106707:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010670e:	00 
c010670f:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106716:	00 
c0106717:	89 04 24             	mov    %eax,(%esp)
c010671a:	e8 24 f3 ff ff       	call   c0105a43 <get_pte>
c010671f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106722:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106726:	75 24                	jne    c010674c <check_pgdir+0x4c6>
c0106728:	c7 44 24 0c 34 6a 11 	movl   $0xc0116a34,0xc(%esp)
c010672f:	c0 
c0106730:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106737:	c0 
c0106738:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c010673f:	00 
c0106740:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106747:	e8 60 a7 ff ff       	call   c0100eac <__panic>
    assert(pte2page(*ptep) == p1);
c010674c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010674f:	8b 00                	mov    (%eax),%eax
c0106751:	89 04 24             	mov    %eax,(%esp)
c0106754:	e8 24 e9 ff ff       	call   c010507d <pte2page>
c0106759:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010675c:	74 24                	je     c0106782 <check_pgdir+0x4fc>
c010675e:	c7 44 24 0c a9 69 11 	movl   $0xc01169a9,0xc(%esp)
c0106765:	c0 
c0106766:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c010676d:	c0 
c010676e:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c0106775:	00 
c0106776:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c010677d:	e8 2a a7 ff ff       	call   c0100eac <__panic>
    assert((*ptep & PTE_U) == 0);
c0106782:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106785:	8b 00                	mov    (%eax),%eax
c0106787:	83 e0 04             	and    $0x4,%eax
c010678a:	85 c0                	test   %eax,%eax
c010678c:	74 24                	je     c01067b2 <check_pgdir+0x52c>
c010678e:	c7 44 24 0c f8 6a 11 	movl   $0xc0116af8,0xc(%esp)
c0106795:	c0 
c0106796:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c010679d:	c0 
c010679e:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c01067a5:	00 
c01067a6:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01067ad:	e8 fa a6 ff ff       	call   c0100eac <__panic>

    page_remove(boot_pgdir, 0x0);
c01067b2:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c01067b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01067be:	00 
c01067bf:	89 04 24             	mov    %eax,(%esp)
c01067c2:	e8 6e f8 ff ff       	call   c0106035 <page_remove>
    assert(page_ref(p1) == 1);
c01067c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067ca:	89 04 24             	mov    %eax,(%esp)
c01067cd:	e8 01 e9 ff ff       	call   c01050d3 <page_ref>
c01067d2:	83 f8 01             	cmp    $0x1,%eax
c01067d5:	74 24                	je     c01067fb <check_pgdir+0x575>
c01067d7:	c7 44 24 0c bf 69 11 	movl   $0xc01169bf,0xc(%esp)
c01067de:	c0 
c01067df:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01067e6:	c0 
c01067e7:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c01067ee:	00 
c01067ef:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01067f6:	e8 b1 a6 ff ff       	call   c0100eac <__panic>
    assert(page_ref(p2) == 0);
c01067fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01067fe:	89 04 24             	mov    %eax,(%esp)
c0106801:	e8 cd e8 ff ff       	call   c01050d3 <page_ref>
c0106806:	85 c0                	test   %eax,%eax
c0106808:	74 24                	je     c010682e <check_pgdir+0x5a8>
c010680a:	c7 44 24 0c e6 6a 11 	movl   $0xc0116ae6,0xc(%esp)
c0106811:	c0 
c0106812:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106819:	c0 
c010681a:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c0106821:	00 
c0106822:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106829:	e8 7e a6 ff ff       	call   c0100eac <__panic>

    page_remove(boot_pgdir, PGSIZE);
c010682e:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106833:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010683a:	00 
c010683b:	89 04 24             	mov    %eax,(%esp)
c010683e:	e8 f2 f7 ff ff       	call   c0106035 <page_remove>
    assert(page_ref(p1) == 0);
c0106843:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106846:	89 04 24             	mov    %eax,(%esp)
c0106849:	e8 85 e8 ff ff       	call   c01050d3 <page_ref>
c010684e:	85 c0                	test   %eax,%eax
c0106850:	74 24                	je     c0106876 <check_pgdir+0x5f0>
c0106852:	c7 44 24 0c 0d 6b 11 	movl   $0xc0116b0d,0xc(%esp)
c0106859:	c0 
c010685a:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106861:	c0 
c0106862:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c0106869:	00 
c010686a:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106871:	e8 36 a6 ff ff       	call   c0100eac <__panic>
    assert(page_ref(p2) == 0);
c0106876:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106879:	89 04 24             	mov    %eax,(%esp)
c010687c:	e8 52 e8 ff ff       	call   c01050d3 <page_ref>
c0106881:	85 c0                	test   %eax,%eax
c0106883:	74 24                	je     c01068a9 <check_pgdir+0x623>
c0106885:	c7 44 24 0c e6 6a 11 	movl   $0xc0116ae6,0xc(%esp)
c010688c:	c0 
c010688d:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106894:	c0 
c0106895:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c010689c:	00 
c010689d:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01068a4:	e8 03 a6 ff ff       	call   c0100eac <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c01068a9:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c01068ae:	8b 00                	mov    (%eax),%eax
c01068b0:	89 04 24             	mov    %eax,(%esp)
c01068b3:	e8 03 e8 ff ff       	call   c01050bb <pde2page>
c01068b8:	89 04 24             	mov    %eax,(%esp)
c01068bb:	e8 13 e8 ff ff       	call   c01050d3 <page_ref>
c01068c0:	83 f8 01             	cmp    $0x1,%eax
c01068c3:	74 24                	je     c01068e9 <check_pgdir+0x663>
c01068c5:	c7 44 24 0c 20 6b 11 	movl   $0xc0116b20,0xc(%esp)
c01068cc:	c0 
c01068cd:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01068d4:	c0 
c01068d5:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c01068dc:	00 
c01068dd:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01068e4:	e8 c3 a5 ff ff       	call   c0100eac <__panic>
    free_page(pde2page(boot_pgdir[0]));
c01068e9:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c01068ee:	8b 00                	mov    (%eax),%eax
c01068f0:	89 04 24             	mov    %eax,(%esp)
c01068f3:	e8 c3 e7 ff ff       	call   c01050bb <pde2page>
c01068f8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01068ff:	00 
c0106900:	89 04 24             	mov    %eax,(%esp)
c0106903:	e8 40 ea ff ff       	call   c0105348 <free_pages>
    boot_pgdir[0] = 0;
c0106908:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c010690d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0106913:	c7 04 24 47 6b 11 c0 	movl   $0xc0116b47,(%esp)
c010691a:	e8 51 9a ff ff       	call   c0100370 <cprintf>
}
c010691f:	c9                   	leave  
c0106920:	c3                   	ret    

c0106921 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0106921:	55                   	push   %ebp
c0106922:	89 e5                	mov    %esp,%ebp
c0106924:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106927:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010692e:	e9 cb 00 00 00       	jmp    c01069fe <check_boot_pgdir+0xdd>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0106933:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106936:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106939:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010693c:	c1 e8 0c             	shr    $0xc,%eax
c010693f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106942:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c0106947:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010694a:	72 23                	jb     c010696f <check_boot_pgdir+0x4e>
c010694c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010694f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106953:	c7 44 24 08 14 67 11 	movl   $0xc0116714,0x8(%esp)
c010695a:	c0 
c010695b:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c0106962:	00 
c0106963:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c010696a:	e8 3d a5 ff ff       	call   c0100eac <__panic>
c010696f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106972:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106977:	89 c2                	mov    %eax,%edx
c0106979:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c010697e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106985:	00 
c0106986:	89 54 24 04          	mov    %edx,0x4(%esp)
c010698a:	89 04 24             	mov    %eax,(%esp)
c010698d:	e8 b1 f0 ff ff       	call   c0105a43 <get_pte>
c0106992:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106995:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106999:	75 24                	jne    c01069bf <check_boot_pgdir+0x9e>
c010699b:	c7 44 24 0c 64 6b 11 	movl   $0xc0116b64,0xc(%esp)
c01069a2:	c0 
c01069a3:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01069aa:	c0 
c01069ab:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c01069b2:	00 
c01069b3:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01069ba:	e8 ed a4 ff ff       	call   c0100eac <__panic>
        assert(PTE_ADDR(*ptep) == i);
c01069bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01069c2:	8b 00                	mov    (%eax),%eax
c01069c4:	89 c2                	mov    %eax,%edx
c01069c6:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c01069cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01069cf:	39 c2                	cmp    %eax,%edx
c01069d1:	74 24                	je     c01069f7 <check_boot_pgdir+0xd6>
c01069d3:	c7 44 24 0c a1 6b 11 	movl   $0xc0116ba1,0xc(%esp)
c01069da:	c0 
c01069db:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c01069e2:	c0 
c01069e3:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c01069ea:	00 
c01069eb:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c01069f2:	e8 b5 a4 ff ff       	call   c0100eac <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01069f7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01069fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106a01:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c0106a06:	39 c2                	cmp    %eax,%edx
c0106a08:	0f 82 25 ff ff ff    	jb     c0106933 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0106a0e:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106a13:	05 ac 0f 00 00       	add    $0xfac,%eax
c0106a18:	8b 00                	mov    (%eax),%eax
c0106a1a:	89 c2                	mov    %eax,%edx
c0106a1c:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c0106a22:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106a27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106a2a:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0106a31:	77 23                	ja     c0106a56 <check_boot_pgdir+0x135>
c0106a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106a36:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106a3a:	c7 44 24 08 b8 67 11 	movl   $0xc01167b8,0x8(%esp)
c0106a41:	c0 
c0106a42:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c0106a49:	00 
c0106a4a:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106a51:	e8 56 a4 ff ff       	call   c0100eac <__panic>
c0106a56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106a59:	05 00 00 00 40       	add    $0x40000000,%eax
c0106a5e:	39 c2                	cmp    %eax,%edx
c0106a60:	74 24                	je     c0106a86 <check_boot_pgdir+0x165>
c0106a62:	c7 44 24 0c b8 6b 11 	movl   $0xc0116bb8,0xc(%esp)
c0106a69:	c0 
c0106a6a:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106a71:	c0 
c0106a72:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c0106a79:	00 
c0106a7a:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106a81:	e8 26 a4 ff ff       	call   c0100eac <__panic>

    assert(boot_pgdir[0] == 0);
c0106a86:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106a8b:	8b 00                	mov    (%eax),%eax
c0106a8d:	85 c0                	test   %eax,%eax
c0106a8f:	74 24                	je     c0106ab5 <check_boot_pgdir+0x194>
c0106a91:	c7 44 24 0c ec 6b 11 	movl   $0xc0116bec,0xc(%esp)
c0106a98:	c0 
c0106a99:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106aa0:	c0 
c0106aa1:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c0106aa8:	00 
c0106aa9:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106ab0:	e8 f7 a3 ff ff       	call   c0100eac <__panic>

    struct Page *p;
    p = alloc_page();
c0106ab5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106abc:	e8 1c e8 ff ff       	call   c01052dd <alloc_pages>
c0106ac1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106ac4:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106ac9:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106ad0:	00 
c0106ad1:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106ad8:	00 
c0106ad9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106adc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ae0:	89 04 24             	mov    %eax,(%esp)
c0106ae3:	e8 91 f5 ff ff       	call   c0106079 <page_insert>
c0106ae8:	85 c0                	test   %eax,%eax
c0106aea:	74 24                	je     c0106b10 <check_boot_pgdir+0x1ef>
c0106aec:	c7 44 24 0c 00 6c 11 	movl   $0xc0116c00,0xc(%esp)
c0106af3:	c0 
c0106af4:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106afb:	c0 
c0106afc:	c7 44 24 04 aa 02 00 	movl   $0x2aa,0x4(%esp)
c0106b03:	00 
c0106b04:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106b0b:	e8 9c a3 ff ff       	call   c0100eac <__panic>
    assert(page_ref(p) == 1);
c0106b10:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b13:	89 04 24             	mov    %eax,(%esp)
c0106b16:	e8 b8 e5 ff ff       	call   c01050d3 <page_ref>
c0106b1b:	83 f8 01             	cmp    $0x1,%eax
c0106b1e:	74 24                	je     c0106b44 <check_boot_pgdir+0x223>
c0106b20:	c7 44 24 0c 2e 6c 11 	movl   $0xc0116c2e,0xc(%esp)
c0106b27:	c0 
c0106b28:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106b2f:	c0 
c0106b30:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c0106b37:	00 
c0106b38:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106b3f:	e8 68 a3 ff ff       	call   c0100eac <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0106b44:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106b49:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106b50:	00 
c0106b51:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106b58:	00 
c0106b59:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106b5c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106b60:	89 04 24             	mov    %eax,(%esp)
c0106b63:	e8 11 f5 ff ff       	call   c0106079 <page_insert>
c0106b68:	85 c0                	test   %eax,%eax
c0106b6a:	74 24                	je     c0106b90 <check_boot_pgdir+0x26f>
c0106b6c:	c7 44 24 0c 40 6c 11 	movl   $0xc0116c40,0xc(%esp)
c0106b73:	c0 
c0106b74:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106b7b:	c0 
c0106b7c:	c7 44 24 04 ac 02 00 	movl   $0x2ac,0x4(%esp)
c0106b83:	00 
c0106b84:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106b8b:	e8 1c a3 ff ff       	call   c0100eac <__panic>
    assert(page_ref(p) == 2);
c0106b90:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b93:	89 04 24             	mov    %eax,(%esp)
c0106b96:	e8 38 e5 ff ff       	call   c01050d3 <page_ref>
c0106b9b:	83 f8 02             	cmp    $0x2,%eax
c0106b9e:	74 24                	je     c0106bc4 <check_boot_pgdir+0x2a3>
c0106ba0:	c7 44 24 0c 77 6c 11 	movl   $0xc0116c77,0xc(%esp)
c0106ba7:	c0 
c0106ba8:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106baf:	c0 
c0106bb0:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c0106bb7:	00 
c0106bb8:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106bbf:	e8 e8 a2 ff ff       	call   c0100eac <__panic>

    const char *str = "ucore: Hello world!!";
c0106bc4:	c7 45 dc 88 6c 11 c0 	movl   $0xc0116c88,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106bcb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106bce:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106bd2:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106bd9:	e8 b9 e8 00 00       	call   c0115497 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106bde:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106be5:	00 
c0106be6:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106bed:	e8 22 e9 00 00       	call   c0115514 <strcmp>
c0106bf2:	85 c0                	test   %eax,%eax
c0106bf4:	74 24                	je     c0106c1a <check_boot_pgdir+0x2f9>
c0106bf6:	c7 44 24 0c a0 6c 11 	movl   $0xc0116ca0,0xc(%esp)
c0106bfd:	c0 
c0106bfe:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106c05:	c0 
c0106c06:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
c0106c0d:	00 
c0106c0e:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106c15:	e8 92 a2 ff ff       	call   c0100eac <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106c1a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106c1d:	89 04 24             	mov    %eax,(%esp)
c0106c20:	e8 04 e4 ff ff       	call   c0105029 <page2kva>
c0106c25:	05 00 01 00 00       	add    $0x100,%eax
c0106c2a:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106c2d:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106c34:	e8 db e7 00 00       	call   c0115414 <strlen>
c0106c39:	85 c0                	test   %eax,%eax
c0106c3b:	74 24                	je     c0106c61 <check_boot_pgdir+0x340>
c0106c3d:	c7 44 24 0c d8 6c 11 	movl   $0xc0116cd8,0xc(%esp)
c0106c44:	c0 
c0106c45:	c7 44 24 08 01 68 11 	movl   $0xc0116801,0x8(%esp)
c0106c4c:	c0 
c0106c4d:	c7 44 24 04 b4 02 00 	movl   $0x2b4,0x4(%esp)
c0106c54:	00 
c0106c55:	c7 04 24 dc 67 11 c0 	movl   $0xc01167dc,(%esp)
c0106c5c:	e8 4b a2 ff ff       	call   c0100eac <__panic>

    free_page(p);
c0106c61:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106c68:	00 
c0106c69:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106c6c:	89 04 24             	mov    %eax,(%esp)
c0106c6f:	e8 d4 e6 ff ff       	call   c0105348 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0106c74:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106c79:	8b 00                	mov    (%eax),%eax
c0106c7b:	89 04 24             	mov    %eax,(%esp)
c0106c7e:	e8 38 e4 ff ff       	call   c01050bb <pde2page>
c0106c83:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106c8a:	00 
c0106c8b:	89 04 24             	mov    %eax,(%esp)
c0106c8e:	e8 b5 e6 ff ff       	call   c0105348 <free_pages>
    boot_pgdir[0] = 0;
c0106c93:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c0106c98:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106c9e:	c7 04 24 fc 6c 11 c0 	movl   $0xc0116cfc,(%esp)
c0106ca5:	e8 c6 96 ff ff       	call   c0100370 <cprintf>
}
c0106caa:	c9                   	leave  
c0106cab:	c3                   	ret    

c0106cac <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106cac:	55                   	push   %ebp
c0106cad:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106caf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cb2:	83 e0 04             	and    $0x4,%eax
c0106cb5:	85 c0                	test   %eax,%eax
c0106cb7:	74 07                	je     c0106cc0 <perm2str+0x14>
c0106cb9:	b8 75 00 00 00       	mov    $0x75,%eax
c0106cbe:	eb 05                	jmp    c0106cc5 <perm2str+0x19>
c0106cc0:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106cc5:	a2 08 1f 15 c0       	mov    %al,0xc0151f08
    str[1] = 'r';
c0106cca:	c6 05 09 1f 15 c0 72 	movb   $0x72,0xc0151f09
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106cd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cd4:	83 e0 02             	and    $0x2,%eax
c0106cd7:	85 c0                	test   %eax,%eax
c0106cd9:	74 07                	je     c0106ce2 <perm2str+0x36>
c0106cdb:	b8 77 00 00 00       	mov    $0x77,%eax
c0106ce0:	eb 05                	jmp    c0106ce7 <perm2str+0x3b>
c0106ce2:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106ce7:	a2 0a 1f 15 c0       	mov    %al,0xc0151f0a
    str[3] = '\0';
c0106cec:	c6 05 0b 1f 15 c0 00 	movb   $0x0,0xc0151f0b
    return str;
c0106cf3:	b8 08 1f 15 c0       	mov    $0xc0151f08,%eax
}
c0106cf8:	5d                   	pop    %ebp
c0106cf9:	c3                   	ret    

c0106cfa <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106cfa:	55                   	push   %ebp
c0106cfb:	89 e5                	mov    %esp,%ebp
c0106cfd:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106d00:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d03:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106d06:	72 0e                	jb     c0106d16 <get_pgtable_items+0x1c>
        return 0;
c0106d08:	b8 00 00 00 00       	mov    $0x0,%eax
c0106d0d:	e9 86 00 00 00       	jmp    c0106d98 <get_pgtable_items+0x9e>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0106d12:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106d16:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d19:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106d1c:	73 12                	jae    c0106d30 <get_pgtable_items+0x36>
c0106d1e:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d21:	c1 e0 02             	shl    $0x2,%eax
c0106d24:	03 45 14             	add    0x14(%ebp),%eax
c0106d27:	8b 00                	mov    (%eax),%eax
c0106d29:	83 e0 01             	and    $0x1,%eax
c0106d2c:	85 c0                	test   %eax,%eax
c0106d2e:	74 e2                	je     c0106d12 <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c0106d30:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d33:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106d36:	73 5b                	jae    c0106d93 <get_pgtable_items+0x99>
        if (left_store != NULL) {
c0106d38:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106d3c:	74 08                	je     c0106d46 <get_pgtable_items+0x4c>
            *left_store = start;
c0106d3e:	8b 45 18             	mov    0x18(%ebp),%eax
c0106d41:	8b 55 10             	mov    0x10(%ebp),%edx
c0106d44:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106d46:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d49:	c1 e0 02             	shl    $0x2,%eax
c0106d4c:	03 45 14             	add    0x14(%ebp),%eax
c0106d4f:	8b 00                	mov    (%eax),%eax
c0106d51:	83 e0 07             	and    $0x7,%eax
c0106d54:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0106d57:	83 45 10 01          	addl   $0x1,0x10(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106d5b:	eb 04                	jmp    c0106d61 <get_pgtable_items+0x67>
            start ++;
c0106d5d:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106d61:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d64:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106d67:	73 17                	jae    c0106d80 <get_pgtable_items+0x86>
c0106d69:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d6c:	c1 e0 02             	shl    $0x2,%eax
c0106d6f:	03 45 14             	add    0x14(%ebp),%eax
c0106d72:	8b 00                	mov    (%eax),%eax
c0106d74:	89 c2                	mov    %eax,%edx
c0106d76:	83 e2 07             	and    $0x7,%edx
c0106d79:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d7c:	39 c2                	cmp    %eax,%edx
c0106d7e:	74 dd                	je     c0106d5d <get_pgtable_items+0x63>
            start ++;
        }
        if (right_store != NULL) {
c0106d80:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106d84:	74 08                	je     c0106d8e <get_pgtable_items+0x94>
            *right_store = start;
c0106d86:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106d89:	8b 55 10             	mov    0x10(%ebp),%edx
c0106d8c:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106d8e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d91:	eb 05                	jmp    c0106d98 <get_pgtable_items+0x9e>
    }
    return 0;
c0106d93:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106d98:	c9                   	leave  
c0106d99:	c3                   	ret    

c0106d9a <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106d9a:	55                   	push   %ebp
c0106d9b:	89 e5                	mov    %esp,%ebp
c0106d9d:	57                   	push   %edi
c0106d9e:	56                   	push   %esi
c0106d9f:	53                   	push   %ebx
c0106da0:	83 ec 5c             	sub    $0x5c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106da3:	c7 04 24 1c 6d 11 c0 	movl   $0xc0116d1c,(%esp)
c0106daa:	e8 c1 95 ff ff       	call   c0100370 <cprintf>
    size_t left, right = 0, perm;
c0106daf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106db6:	e9 0b 01 00 00       	jmp    c0106ec6 <print_pgdir+0x12c>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106dbb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106dbe:	89 04 24             	mov    %eax,(%esp)
c0106dc1:	e8 e6 fe ff ff       	call   c0106cac <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106dc6:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106dc9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106dcc:	89 cb                	mov    %ecx,%ebx
c0106dce:	29 d3                	sub    %edx,%ebx
c0106dd0:	89 da                	mov    %ebx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106dd2:	89 d6                	mov    %edx,%esi
c0106dd4:	c1 e6 16             	shl    $0x16,%esi
c0106dd7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106dda:	89 d3                	mov    %edx,%ebx
c0106ddc:	c1 e3 16             	shl    $0x16,%ebx
c0106ddf:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106de2:	89 d1                	mov    %edx,%ecx
c0106de4:	c1 e1 16             	shl    $0x16,%ecx
c0106de7:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106dea:	89 7d c4             	mov    %edi,-0x3c(%ebp)
c0106ded:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106df0:	8b 7d c4             	mov    -0x3c(%ebp),%edi
c0106df3:	29 d7                	sub    %edx,%edi
c0106df5:	89 fa                	mov    %edi,%edx
c0106df7:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106dfb:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106dff:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106e03:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106e07:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e0b:	c7 04 24 4d 6d 11 c0 	movl   $0xc0116d4d,(%esp)
c0106e12:	e8 59 95 ff ff       	call   c0100370 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106e17:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106e1a:	c1 e0 0a             	shl    $0xa,%eax
c0106e1d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106e20:	eb 5c                	jmp    c0106e7e <print_pgdir+0xe4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106e22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e25:	89 04 24             	mov    %eax,(%esp)
c0106e28:	e8 7f fe ff ff       	call   c0106cac <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106e2d:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106e30:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106e33:	89 cb                	mov    %ecx,%ebx
c0106e35:	29 d3                	sub    %edx,%ebx
c0106e37:	89 da                	mov    %ebx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106e39:	89 d6                	mov    %edx,%esi
c0106e3b:	c1 e6 0c             	shl    $0xc,%esi
c0106e3e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106e41:	89 d3                	mov    %edx,%ebx
c0106e43:	c1 e3 0c             	shl    $0xc,%ebx
c0106e46:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106e49:	89 d1                	mov    %edx,%ecx
c0106e4b:	c1 e1 0c             	shl    $0xc,%ecx
c0106e4e:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106e51:	89 7d c4             	mov    %edi,-0x3c(%ebp)
c0106e54:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106e57:	8b 7d c4             	mov    -0x3c(%ebp),%edi
c0106e5a:	29 d7                	sub    %edx,%edi
c0106e5c:	89 fa                	mov    %edi,%edx
c0106e5e:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106e62:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106e66:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106e6a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106e6e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e72:	c7 04 24 6c 6d 11 c0 	movl   $0xc0116d6c,(%esp)
c0106e79:	e8 f2 94 ff ff       	call   c0100370 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106e7e:	8b 15 5c 67 11 c0    	mov    0xc011675c,%edx
c0106e84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106e87:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106e8a:	89 ce                	mov    %ecx,%esi
c0106e8c:	c1 e6 0a             	shl    $0xa,%esi
c0106e8f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106e92:	89 cb                	mov    %ecx,%ebx
c0106e94:	c1 e3 0a             	shl    $0xa,%ebx
c0106e97:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106e9a:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106e9e:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106ea1:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106ea5:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106ea9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106ead:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106eb1:	89 1c 24             	mov    %ebx,(%esp)
c0106eb4:	e8 41 fe ff ff       	call   c0106cfa <get_pgtable_items>
c0106eb9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106ebc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106ec0:	0f 85 5c ff ff ff    	jne    c0106e22 <print_pgdir+0x88>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106ec6:	8b 15 60 67 11 c0    	mov    0xc0116760,%edx
c0106ecc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106ecf:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106ed2:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106ed6:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106ed9:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106edd:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106ee1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106ee5:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106eec:	00 
c0106eed:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106ef4:	e8 01 fe ff ff       	call   c0106cfa <get_pgtable_items>
c0106ef9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106efc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106f00:	0f 85 b5 fe ff ff    	jne    c0106dbb <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106f06:	c7 04 24 90 6d 11 c0 	movl   $0xc0116d90,(%esp)
c0106f0d:	e8 5e 94 ff ff       	call   c0100370 <cprintf>
}
c0106f12:	83 c4 5c             	add    $0x5c,%esp
c0106f15:	5b                   	pop    %ebx
c0106f16:	5e                   	pop    %esi
c0106f17:	5f                   	pop    %edi
c0106f18:	5d                   	pop    %ebp
c0106f19:	c3                   	ret    
	...

c0106f1c <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106f1c:	55                   	push   %ebp
c0106f1d:	89 e5                	mov    %esp,%ebp
c0106f1f:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106f22:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f25:	89 c2                	mov    %eax,%edx
c0106f27:	c1 ea 0c             	shr    $0xc,%edx
c0106f2a:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c0106f2f:	39 c2                	cmp    %eax,%edx
c0106f31:	72 1c                	jb     c0106f4f <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106f33:	c7 44 24 08 c4 6d 11 	movl   $0xc0116dc4,0x8(%esp)
c0106f3a:	c0 
c0106f3b:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106f42:	00 
c0106f43:	c7 04 24 e3 6d 11 c0 	movl   $0xc0116de3,(%esp)
c0106f4a:	e8 5d 9f ff ff       	call   c0100eac <__panic>
    }
    return &pages[PPN(pa)];
c0106f4f:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c0106f54:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f57:	c1 ea 0c             	shr    $0xc,%edx
c0106f5a:	c1 e2 05             	shl    $0x5,%edx
c0106f5d:	01 d0                	add    %edx,%eax
}
c0106f5f:	c9                   	leave  
c0106f60:	c3                   	ret    

c0106f61 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106f61:	55                   	push   %ebp
c0106f62:	89 e5                	mov    %esp,%ebp
c0106f64:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106f67:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f6a:	83 e0 01             	and    $0x1,%eax
c0106f6d:	85 c0                	test   %eax,%eax
c0106f6f:	75 1c                	jne    c0106f8d <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106f71:	c7 44 24 08 f4 6d 11 	movl   $0xc0116df4,0x8(%esp)
c0106f78:	c0 
c0106f79:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106f80:	00 
c0106f81:	c7 04 24 e3 6d 11 c0 	movl   $0xc0116de3,(%esp)
c0106f88:	e8 1f 9f ff ff       	call   c0100eac <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106f8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f90:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106f95:	89 04 24             	mov    %eax,(%esp)
c0106f98:	e8 7f ff ff ff       	call   c0106f1c <pa2page>
}
c0106f9d:	c9                   	leave  
c0106f9e:	c3                   	ret    

c0106f9f <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106f9f:	55                   	push   %ebp
c0106fa0:	89 e5                	mov    %esp,%ebp
c0106fa2:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106fa5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fa8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106fad:	89 04 24             	mov    %eax,(%esp)
c0106fb0:	e8 67 ff ff ff       	call   c0106f1c <pa2page>
}
c0106fb5:	c9                   	leave  
c0106fb6:	c3                   	ret    

c0106fb7 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106fb7:	55                   	push   %ebp
c0106fb8:	89 e5                	mov    %esp,%ebp
c0106fba:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106fbd:	e8 96 80 00 00       	call   c010f058 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106fc2:	a1 dc 50 15 c0       	mov    0xc01550dc,%eax
c0106fc7:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106fcc:	76 0c                	jbe    c0106fda <swap_init+0x23>
c0106fce:	a1 dc 50 15 c0       	mov    0xc01550dc,%eax
c0106fd3:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106fd8:	76 25                	jbe    c0106fff <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106fda:	a1 dc 50 15 c0       	mov    0xc01550dc,%eax
c0106fdf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106fe3:	c7 44 24 08 15 6e 11 	movl   $0xc0116e15,0x8(%esp)
c0106fea:	c0 
c0106feb:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106ff2:	00 
c0106ff3:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0106ffa:	e8 ad 9e ff ff       	call   c0100eac <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106fff:	c7 05 14 1f 15 c0 60 	movl   $0xc0150a60,0xc0151f14
c0107006:	0a 15 c0 
     int r = sm->init();
c0107009:	a1 14 1f 15 c0       	mov    0xc0151f14,%eax
c010700e:	8b 40 04             	mov    0x4(%eax),%eax
c0107011:	ff d0                	call   *%eax
c0107013:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0107016:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010701a:	75 26                	jne    c0107042 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c010701c:	c7 05 0c 1f 15 c0 01 	movl   $0x1,0xc0151f0c
c0107023:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0107026:	a1 14 1f 15 c0       	mov    0xc0151f14,%eax
c010702b:	8b 00                	mov    (%eax),%eax
c010702d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107031:	c7 04 24 3f 6e 11 c0 	movl   $0xc0116e3f,(%esp)
c0107038:	e8 33 93 ff ff       	call   c0100370 <cprintf>
          check_swap();
c010703d:	e8 a4 04 00 00       	call   c01074e6 <check_swap>
     }

     return r;
c0107042:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107045:	c9                   	leave  
c0107046:	c3                   	ret    

c0107047 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0107047:	55                   	push   %ebp
c0107048:	89 e5                	mov    %esp,%ebp
c010704a:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c010704d:	a1 14 1f 15 c0       	mov    0xc0151f14,%eax
c0107052:	8b 50 08             	mov    0x8(%eax),%edx
c0107055:	8b 45 08             	mov    0x8(%ebp),%eax
c0107058:	89 04 24             	mov    %eax,(%esp)
c010705b:	ff d2                	call   *%edx
}
c010705d:	c9                   	leave  
c010705e:	c3                   	ret    

c010705f <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c010705f:	55                   	push   %ebp
c0107060:	89 e5                	mov    %esp,%ebp
c0107062:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0107065:	a1 14 1f 15 c0       	mov    0xc0151f14,%eax
c010706a:	8b 50 0c             	mov    0xc(%eax),%edx
c010706d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107070:	89 04 24             	mov    %eax,(%esp)
c0107073:	ff d2                	call   *%edx
}
c0107075:	c9                   	leave  
c0107076:	c3                   	ret    

c0107077 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107077:	55                   	push   %ebp
c0107078:	89 e5                	mov    %esp,%ebp
c010707a:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c010707d:	a1 14 1f 15 c0       	mov    0xc0151f14,%eax
c0107082:	8b 50 10             	mov    0x10(%eax),%edx
c0107085:	8b 45 14             	mov    0x14(%ebp),%eax
c0107088:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010708c:	8b 45 10             	mov    0x10(%ebp),%eax
c010708f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107093:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107096:	89 44 24 04          	mov    %eax,0x4(%esp)
c010709a:	8b 45 08             	mov    0x8(%ebp),%eax
c010709d:	89 04 24             	mov    %eax,(%esp)
c01070a0:	ff d2                	call   *%edx
}
c01070a2:	c9                   	leave  
c01070a3:	c3                   	ret    

c01070a4 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c01070a4:	55                   	push   %ebp
c01070a5:	89 e5                	mov    %esp,%ebp
c01070a7:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c01070aa:	a1 14 1f 15 c0       	mov    0xc0151f14,%eax
c01070af:	8b 50 14             	mov    0x14(%eax),%edx
c01070b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01070b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01070bc:	89 04 24             	mov    %eax,(%esp)
c01070bf:	ff d2                	call   *%edx
}
c01070c1:	c9                   	leave  
c01070c2:	c3                   	ret    

c01070c3 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c01070c3:	55                   	push   %ebp
c01070c4:	89 e5                	mov    %esp,%ebp
c01070c6:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c01070c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01070d0:	e9 5a 01 00 00       	jmp    c010722f <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c01070d5:	a1 14 1f 15 c0       	mov    0xc0151f14,%eax
c01070da:	8b 50 18             	mov    0x18(%eax),%edx
c01070dd:	8b 45 10             	mov    0x10(%ebp),%eax
c01070e0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01070e4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01070e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01070eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01070ee:	89 04 24             	mov    %eax,(%esp)
c01070f1:	ff d2                	call   *%edx
c01070f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c01070f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01070fa:	74 18                	je     c0107114 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c01070fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107103:	c7 04 24 54 6e 11 c0 	movl   $0xc0116e54,(%esp)
c010710a:	e8 61 92 ff ff       	call   c0100370 <cprintf>
                  break;
c010710f:	e9 27 01 00 00       	jmp    c010723b <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0107114:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107117:	8b 40 1c             	mov    0x1c(%eax),%eax
c010711a:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c010711d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107120:	8b 40 0c             	mov    0xc(%eax),%eax
c0107123:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010712a:	00 
c010712b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010712e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107132:	89 04 24             	mov    %eax,(%esp)
c0107135:	e8 09 e9 ff ff       	call   c0105a43 <get_pte>
c010713a:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c010713d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107140:	8b 00                	mov    (%eax),%eax
c0107142:	83 e0 01             	and    $0x1,%eax
c0107145:	85 c0                	test   %eax,%eax
c0107147:	75 24                	jne    c010716d <swap_out+0xaa>
c0107149:	c7 44 24 0c 81 6e 11 	movl   $0xc0116e81,0xc(%esp)
c0107150:	c0 
c0107151:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107158:	c0 
c0107159:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107160:	00 
c0107161:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107168:	e8 3f 9d ff ff       	call   c0100eac <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c010716d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107170:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107173:	8b 52 1c             	mov    0x1c(%edx),%edx
c0107176:	c1 ea 0c             	shr    $0xc,%edx
c0107179:	83 c2 01             	add    $0x1,%edx
c010717c:	c1 e2 08             	shl    $0x8,%edx
c010717f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107183:	89 14 24             	mov    %edx,(%esp)
c0107186:	e8 87 7f 00 00       	call   c010f112 <swapfs_write>
c010718b:	85 c0                	test   %eax,%eax
c010718d:	74 34                	je     c01071c3 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c010718f:	c7 04 24 ab 6e 11 c0 	movl   $0xc0116eab,(%esp)
c0107196:	e8 d5 91 ff ff       	call   c0100370 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c010719b:	a1 14 1f 15 c0       	mov    0xc0151f14,%eax
c01071a0:	8b 50 10             	mov    0x10(%eax),%edx
c01071a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071a6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01071ad:	00 
c01071ae:	89 44 24 08          	mov    %eax,0x8(%esp)
c01071b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01071b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01071b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01071bc:	89 04 24             	mov    %eax,(%esp)
c01071bf:	ff d2                	call   *%edx
                    continue;
c01071c1:	eb 68                	jmp    c010722b <swap_out+0x168>
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c01071c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071c6:	8b 40 1c             	mov    0x1c(%eax),%eax
c01071c9:	c1 e8 0c             	shr    $0xc,%eax
c01071cc:	83 c0 01             	add    $0x1,%eax
c01071cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01071d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01071d6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01071da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01071dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01071e1:	c7 04 24 c4 6e 11 c0 	movl   $0xc0116ec4,(%esp)
c01071e8:	e8 83 91 ff ff       	call   c0100370 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c01071ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071f0:	8b 40 1c             	mov    0x1c(%eax),%eax
c01071f3:	c1 e8 0c             	shr    $0xc,%eax
c01071f6:	83 c0 01             	add    $0x1,%eax
c01071f9:	89 c2                	mov    %eax,%edx
c01071fb:	c1 e2 08             	shl    $0x8,%edx
c01071fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107201:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0107203:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107206:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010720d:	00 
c010720e:	89 04 24             	mov    %eax,(%esp)
c0107211:	e8 32 e1 ff ff       	call   c0105348 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0107216:	8b 45 08             	mov    0x8(%ebp),%eax
c0107219:	8b 40 0c             	mov    0xc(%eax),%eax
c010721c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010721f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107223:	89 04 24             	mov    %eax,(%esp)
c0107226:	e8 07 ef ff ff       	call   c0106132 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c010722b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010722f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107232:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107235:	0f 85 9a fe ff ff    	jne    c01070d5 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c010723b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010723e:	c9                   	leave  
c010723f:	c3                   	ret    

c0107240 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0107240:	55                   	push   %ebp
c0107241:	89 e5                	mov    %esp,%ebp
c0107243:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0107246:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010724d:	e8 8b e0 ff ff       	call   c01052dd <alloc_pages>
c0107252:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0107255:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107259:	75 24                	jne    c010727f <swap_in+0x3f>
c010725b:	c7 44 24 0c 04 6f 11 	movl   $0xc0116f04,0xc(%esp)
c0107262:	c0 
c0107263:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c010726a:	c0 
c010726b:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0107272:	00 
c0107273:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c010727a:	e8 2d 9c ff ff       	call   c0100eac <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c010727f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107282:	8b 40 0c             	mov    0xc(%eax),%eax
c0107285:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010728c:	00 
c010728d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107290:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107294:	89 04 24             	mov    %eax,(%esp)
c0107297:	e8 a7 e7 ff ff       	call   c0105a43 <get_pte>
c010729c:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c010729f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01072a2:	8b 00                	mov    (%eax),%eax
c01072a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01072a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01072ab:	89 04 24             	mov    %eax,(%esp)
c01072ae:	e8 ed 7d 00 00       	call   c010f0a0 <swapfs_read>
c01072b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01072b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01072ba:	74 2a                	je     c01072e6 <swap_in+0xa6>
     {
        assert(r!=0);
c01072bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01072c0:	75 24                	jne    c01072e6 <swap_in+0xa6>
c01072c2:	c7 44 24 0c 11 6f 11 	movl   $0xc0116f11,0xc(%esp)
c01072c9:	c0 
c01072ca:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c01072d1:	c0 
c01072d2:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c01072d9:	00 
c01072da:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c01072e1:	e8 c6 9b ff ff       	call   c0100eac <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c01072e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01072e9:	8b 00                	mov    (%eax),%eax
c01072eb:	89 c2                	mov    %eax,%edx
c01072ed:	c1 ea 08             	shr    $0x8,%edx
c01072f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01072f3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01072f7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01072fb:	c7 04 24 18 6f 11 c0 	movl   $0xc0116f18,(%esp)
c0107302:	e8 69 90 ff ff       	call   c0100370 <cprintf>
     *ptr_result=result;
c0107307:	8b 45 10             	mov    0x10(%ebp),%eax
c010730a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010730d:	89 10                	mov    %edx,(%eax)
     return 0;
c010730f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107314:	c9                   	leave  
c0107315:	c3                   	ret    

c0107316 <check_content_set>:



static inline void
check_content_set(void)
{
c0107316:	55                   	push   %ebp
c0107317:	89 e5                	mov    %esp,%ebp
c0107319:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c010731c:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107321:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107324:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107329:	83 f8 01             	cmp    $0x1,%eax
c010732c:	74 24                	je     c0107352 <check_content_set+0x3c>
c010732e:	c7 44 24 0c 56 6f 11 	movl   $0xc0116f56,0xc(%esp)
c0107335:	c0 
c0107336:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c010733d:	c0 
c010733e:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0107345:	00 
c0107346:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c010734d:	e8 5a 9b ff ff       	call   c0100eac <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0107352:	b8 10 10 00 00       	mov    $0x1010,%eax
c0107357:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010735a:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c010735f:	83 f8 01             	cmp    $0x1,%eax
c0107362:	74 24                	je     c0107388 <check_content_set+0x72>
c0107364:	c7 44 24 0c 56 6f 11 	movl   $0xc0116f56,0xc(%esp)
c010736b:	c0 
c010736c:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107373:	c0 
c0107374:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010737b:	00 
c010737c:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107383:	e8 24 9b ff ff       	call   c0100eac <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107388:	b8 00 20 00 00       	mov    $0x2000,%eax
c010738d:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107390:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107395:	83 f8 02             	cmp    $0x2,%eax
c0107398:	74 24                	je     c01073be <check_content_set+0xa8>
c010739a:	c7 44 24 0c 65 6f 11 	movl   $0xc0116f65,0xc(%esp)
c01073a1:	c0 
c01073a2:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c01073a9:	c0 
c01073aa:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c01073b1:	00 
c01073b2:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c01073b9:	e8 ee 9a ff ff       	call   c0100eac <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01073be:	b8 10 20 00 00       	mov    $0x2010,%eax
c01073c3:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01073c6:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c01073cb:	83 f8 02             	cmp    $0x2,%eax
c01073ce:	74 24                	je     c01073f4 <check_content_set+0xde>
c01073d0:	c7 44 24 0c 65 6f 11 	movl   $0xc0116f65,0xc(%esp)
c01073d7:	c0 
c01073d8:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c01073df:	c0 
c01073e0:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c01073e7:	00 
c01073e8:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c01073ef:	e8 b8 9a ff ff       	call   c0100eac <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01073f4:	b8 00 30 00 00       	mov    $0x3000,%eax
c01073f9:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01073fc:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107401:	83 f8 03             	cmp    $0x3,%eax
c0107404:	74 24                	je     c010742a <check_content_set+0x114>
c0107406:	c7 44 24 0c 74 6f 11 	movl   $0xc0116f74,0xc(%esp)
c010740d:	c0 
c010740e:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107415:	c0 
c0107416:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010741d:	00 
c010741e:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107425:	e8 82 9a ff ff       	call   c0100eac <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c010742a:	b8 10 30 00 00       	mov    $0x3010,%eax
c010742f:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107432:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107437:	83 f8 03             	cmp    $0x3,%eax
c010743a:	74 24                	je     c0107460 <check_content_set+0x14a>
c010743c:	c7 44 24 0c 74 6f 11 	movl   $0xc0116f74,0xc(%esp)
c0107443:	c0 
c0107444:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c010744b:	c0 
c010744c:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0107453:	00 
c0107454:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c010745b:	e8 4c 9a ff ff       	call   c0100eac <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0107460:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107465:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107468:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c010746d:	83 f8 04             	cmp    $0x4,%eax
c0107470:	74 24                	je     c0107496 <check_content_set+0x180>
c0107472:	c7 44 24 0c 83 6f 11 	movl   $0xc0116f83,0xc(%esp)
c0107479:	c0 
c010747a:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107481:	c0 
c0107482:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0107489:	00 
c010748a:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107491:	e8 16 9a ff ff       	call   c0100eac <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0107496:	b8 10 40 00 00       	mov    $0x4010,%eax
c010749b:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010749e:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c01074a3:	83 f8 04             	cmp    $0x4,%eax
c01074a6:	74 24                	je     c01074cc <check_content_set+0x1b6>
c01074a8:	c7 44 24 0c 83 6f 11 	movl   $0xc0116f83,0xc(%esp)
c01074af:	c0 
c01074b0:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c01074b7:	c0 
c01074b8:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01074bf:	00 
c01074c0:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c01074c7:	e8 e0 99 ff ff       	call   c0100eac <__panic>
}
c01074cc:	c9                   	leave  
c01074cd:	c3                   	ret    

c01074ce <check_content_access>:

static inline int
check_content_access(void)
{
c01074ce:	55                   	push   %ebp
c01074cf:	89 e5                	mov    %esp,%ebp
c01074d1:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01074d4:	a1 14 1f 15 c0       	mov    0xc0151f14,%eax
c01074d9:	8b 40 1c             	mov    0x1c(%eax),%eax
c01074dc:	ff d0                	call   *%eax
c01074de:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01074e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01074e4:	c9                   	leave  
c01074e5:	c3                   	ret    

c01074e6 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01074e6:	55                   	push   %ebp
c01074e7:	89 e5                	mov    %esp,%ebp
c01074e9:	53                   	push   %ebx
c01074ea:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01074ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01074f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c01074fb:	c7 45 e8 14 50 15 c0 	movl   $0xc0155014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107502:	eb 6b                	jmp    c010756f <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0107504:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107507:	83 e8 0c             	sub    $0xc,%eax
c010750a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c010750d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107510:	83 c0 04             	add    $0x4,%eax
c0107513:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c010751a:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010751d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107520:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107523:	0f a3 10             	bt     %edx,(%eax)
c0107526:	19 db                	sbb    %ebx,%ebx
c0107528:	89 5d bc             	mov    %ebx,-0x44(%ebp)
    return oldbit != 0;
c010752b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010752f:	0f 95 c0             	setne  %al
c0107532:	0f b6 c0             	movzbl %al,%eax
c0107535:	85 c0                	test   %eax,%eax
c0107537:	75 24                	jne    c010755d <check_swap+0x77>
c0107539:	c7 44 24 0c 92 6f 11 	movl   $0xc0116f92,0xc(%esp)
c0107540:	c0 
c0107541:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107548:	c0 
c0107549:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0107550:	00 
c0107551:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107558:	e8 4f 99 ff ff       	call   c0100eac <__panic>
        count ++, total += p->property;
c010755d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107561:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107564:	8b 50 08             	mov    0x8(%eax),%edx
c0107567:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010756a:	01 d0                	add    %edx,%eax
c010756c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010756f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107572:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107575:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107578:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010757b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010757e:	81 7d e8 14 50 15 c0 	cmpl   $0xc0155014,-0x18(%ebp)
c0107585:	0f 85 79 ff ff ff    	jne    c0107504 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c010758b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010758e:	e8 e7 dd ff ff       	call   c010537a <nr_free_pages>
c0107593:	39 c3                	cmp    %eax,%ebx
c0107595:	74 24                	je     c01075bb <check_swap+0xd5>
c0107597:	c7 44 24 0c a2 6f 11 	movl   $0xc0116fa2,0xc(%esp)
c010759e:	c0 
c010759f:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c01075a6:	c0 
c01075a7:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01075ae:	00 
c01075af:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c01075b6:	e8 f1 98 ff ff       	call   c0100eac <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c01075bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01075be:	89 44 24 08          	mov    %eax,0x8(%esp)
c01075c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01075c9:	c7 04 24 bc 6f 11 c0 	movl   $0xc0116fbc,(%esp)
c01075d0:	e8 9b 8d ff ff       	call   c0100370 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01075d5:	e8 14 0b 00 00       	call   c01080ee <mm_create>
c01075da:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c01075dd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01075e1:	75 24                	jne    c0107607 <check_swap+0x121>
c01075e3:	c7 44 24 0c e2 6f 11 	movl   $0xc0116fe2,0xc(%esp)
c01075ea:	c0 
c01075eb:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c01075f2:	c0 
c01075f3:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c01075fa:	00 
c01075fb:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107602:	e8 a5 98 ff ff       	call   c0100eac <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107607:	a1 0c 51 15 c0       	mov    0xc015510c,%eax
c010760c:	85 c0                	test   %eax,%eax
c010760e:	74 24                	je     c0107634 <check_swap+0x14e>
c0107610:	c7 44 24 0c ed 6f 11 	movl   $0xc0116fed,0xc(%esp)
c0107617:	c0 
c0107618:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c010761f:	c0 
c0107620:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107627:	00 
c0107628:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c010762f:	e8 78 98 ff ff       	call   c0100eac <__panic>

     check_mm_struct = mm;
c0107634:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107637:	a3 0c 51 15 c0       	mov    %eax,0xc015510c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c010763c:	8b 15 84 1e 15 c0    	mov    0xc0151e84,%edx
c0107642:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107645:	89 50 0c             	mov    %edx,0xc(%eax)
c0107648:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010764b:	8b 40 0c             	mov    0xc(%eax),%eax
c010764e:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c0107651:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107654:	8b 00                	mov    (%eax),%eax
c0107656:	85 c0                	test   %eax,%eax
c0107658:	74 24                	je     c010767e <check_swap+0x198>
c010765a:	c7 44 24 0c 05 70 11 	movl   $0xc0117005,0xc(%esp)
c0107661:	c0 
c0107662:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107669:	c0 
c010766a:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0107671:	00 
c0107672:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107679:	e8 2e 98 ff ff       	call   c0100eac <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c010767e:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0107685:	00 
c0107686:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c010768d:	00 
c010768e:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0107695:	e8 f9 0a 00 00       	call   c0108193 <vma_create>
c010769a:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c010769d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01076a1:	75 24                	jne    c01076c7 <check_swap+0x1e1>
c01076a3:	c7 44 24 0c 13 70 11 	movl   $0xc0117013,0xc(%esp)
c01076aa:	c0 
c01076ab:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c01076b2:	c0 
c01076b3:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c01076ba:	00 
c01076bb:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c01076c2:	e8 e5 97 ff ff       	call   c0100eac <__panic>

     insert_vma_struct(mm, vma);
c01076c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01076ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01076ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01076d1:	89 04 24             	mov    %eax,(%esp)
c01076d4:	e8 4a 0c 00 00       	call   c0108323 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c01076d9:	c7 04 24 20 70 11 c0 	movl   $0xc0117020,(%esp)
c01076e0:	e8 8b 8c ff ff       	call   c0100370 <cprintf>
     pte_t *temp_ptep=NULL;
c01076e5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c01076ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01076ef:	8b 40 0c             	mov    0xc(%eax),%eax
c01076f2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01076f9:	00 
c01076fa:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107701:	00 
c0107702:	89 04 24             	mov    %eax,(%esp)
c0107705:	e8 39 e3 ff ff       	call   c0105a43 <get_pte>
c010770a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c010770d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0107711:	75 24                	jne    c0107737 <check_swap+0x251>
c0107713:	c7 44 24 0c 54 70 11 	movl   $0xc0117054,0xc(%esp)
c010771a:	c0 
c010771b:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107722:	c0 
c0107723:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010772a:	00 
c010772b:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107732:	e8 75 97 ff ff       	call   c0100eac <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107737:	c7 04 24 68 70 11 c0 	movl   $0xc0117068,(%esp)
c010773e:	e8 2d 8c ff ff       	call   c0100370 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107743:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010774a:	e9 a3 00 00 00       	jmp    c01077f2 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c010774f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107756:	e8 82 db ff ff       	call   c01052dd <alloc_pages>
c010775b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010775e:	89 04 95 40 50 15 c0 	mov    %eax,-0x3feaafc0(,%edx,4)
          assert(check_rp[i] != NULL );
c0107765:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107768:	8b 04 85 40 50 15 c0 	mov    -0x3feaafc0(,%eax,4),%eax
c010776f:	85 c0                	test   %eax,%eax
c0107771:	75 24                	jne    c0107797 <check_swap+0x2b1>
c0107773:	c7 44 24 0c 8c 70 11 	movl   $0xc011708c,0xc(%esp)
c010777a:	c0 
c010777b:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107782:	c0 
c0107783:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c010778a:	00 
c010778b:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107792:	e8 15 97 ff ff       	call   c0100eac <__panic>
          assert(!PageProperty(check_rp[i]));
c0107797:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010779a:	8b 04 85 40 50 15 c0 	mov    -0x3feaafc0(,%eax,4),%eax
c01077a1:	83 c0 04             	add    $0x4,%eax
c01077a4:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c01077ab:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01077ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01077b1:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01077b4:	0f a3 10             	bt     %edx,(%eax)
c01077b7:	19 db                	sbb    %ebx,%ebx
c01077b9:	89 5d ac             	mov    %ebx,-0x54(%ebp)
    return oldbit != 0;
c01077bc:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c01077c0:	0f 95 c0             	setne  %al
c01077c3:	0f b6 c0             	movzbl %al,%eax
c01077c6:	85 c0                	test   %eax,%eax
c01077c8:	74 24                	je     c01077ee <check_swap+0x308>
c01077ca:	c7 44 24 0c a0 70 11 	movl   $0xc01170a0,0xc(%esp)
c01077d1:	c0 
c01077d2:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c01077d9:	c0 
c01077da:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c01077e1:	00 
c01077e2:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c01077e9:	e8 be 96 ff ff       	call   c0100eac <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077ee:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01077f2:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01077f6:	0f 8e 53 ff ff ff    	jle    c010774f <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c01077fc:	a1 14 50 15 c0       	mov    0xc0155014,%eax
c0107801:	8b 15 18 50 15 c0    	mov    0xc0155018,%edx
c0107807:	89 45 98             	mov    %eax,-0x68(%ebp)
c010780a:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010780d:	c7 45 a8 14 50 15 c0 	movl   $0xc0155014,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107814:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107817:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010781a:	89 50 04             	mov    %edx,0x4(%eax)
c010781d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107820:	8b 50 04             	mov    0x4(%eax),%edx
c0107823:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107826:	89 10                	mov    %edx,(%eax)
c0107828:	c7 45 a4 14 50 15 c0 	movl   $0xc0155014,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010782f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107832:	8b 40 04             	mov    0x4(%eax),%eax
c0107835:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0107838:	0f 94 c0             	sete   %al
c010783b:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c010783e:	85 c0                	test   %eax,%eax
c0107840:	75 24                	jne    c0107866 <check_swap+0x380>
c0107842:	c7 44 24 0c bb 70 11 	movl   $0xc01170bb,0xc(%esp)
c0107849:	c0 
c010784a:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107851:	c0 
c0107852:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0107859:	00 
c010785a:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107861:	e8 46 96 ff ff       	call   c0100eac <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0107866:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c010786b:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c010786e:	c7 05 1c 50 15 c0 00 	movl   $0x0,0xc015501c
c0107875:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107878:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010787f:	eb 1e                	jmp    c010789f <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0107881:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107884:	8b 04 85 40 50 15 c0 	mov    -0x3feaafc0(,%eax,4),%eax
c010788b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107892:	00 
c0107893:	89 04 24             	mov    %eax,(%esp)
c0107896:	e8 ad da ff ff       	call   c0105348 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010789b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010789f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01078a3:	7e dc                	jle    c0107881 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c01078a5:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c01078aa:	83 f8 04             	cmp    $0x4,%eax
c01078ad:	74 24                	je     c01078d3 <check_swap+0x3ed>
c01078af:	c7 44 24 0c d4 70 11 	movl   $0xc01170d4,0xc(%esp)
c01078b6:	c0 
c01078b7:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c01078be:	c0 
c01078bf:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01078c6:	00 
c01078c7:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c01078ce:	e8 d9 95 ff ff       	call   c0100eac <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c01078d3:	c7 04 24 f8 70 11 c0 	movl   $0xc01170f8,(%esp)
c01078da:	e8 91 8a ff ff       	call   c0100370 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c01078df:	c7 05 18 1f 15 c0 00 	movl   $0x0,0xc0151f18
c01078e6:	00 00 00 
     
     check_content_set();
c01078e9:	e8 28 fa ff ff       	call   c0107316 <check_content_set>
     assert( nr_free == 0);         
c01078ee:	a1 1c 50 15 c0       	mov    0xc015501c,%eax
c01078f3:	85 c0                	test   %eax,%eax
c01078f5:	74 24                	je     c010791b <check_swap+0x435>
c01078f7:	c7 44 24 0c 1f 71 11 	movl   $0xc011711f,0xc(%esp)
c01078fe:	c0 
c01078ff:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107906:	c0 
c0107907:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010790e:	00 
c010790f:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107916:	e8 91 95 ff ff       	call   c0100eac <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c010791b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107922:	eb 26                	jmp    c010794a <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0107924:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107927:	c7 04 85 60 50 15 c0 	movl   $0xffffffff,-0x3feaafa0(,%eax,4)
c010792e:	ff ff ff ff 
c0107932:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107935:	8b 14 85 60 50 15 c0 	mov    -0x3feaafa0(,%eax,4),%edx
c010793c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010793f:	89 14 85 a0 50 15 c0 	mov    %edx,-0x3feaaf60(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107946:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010794a:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c010794e:	7e d4                	jle    c0107924 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107950:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107957:	e9 eb 00 00 00       	jmp    c0107a47 <check_swap+0x561>
         check_ptep[i]=0;
c010795c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010795f:	c7 04 85 f4 50 15 c0 	movl   $0x0,-0x3feaaf0c(,%eax,4)
c0107966:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c010796a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010796d:	83 c0 01             	add    $0x1,%eax
c0107970:	c1 e0 0c             	shl    $0xc,%eax
c0107973:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010797a:	00 
c010797b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010797f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107982:	89 04 24             	mov    %eax,(%esp)
c0107985:	e8 b9 e0 ff ff       	call   c0105a43 <get_pte>
c010798a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010798d:	89 04 95 f4 50 15 c0 	mov    %eax,-0x3feaaf0c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0107994:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107997:	8b 04 85 f4 50 15 c0 	mov    -0x3feaaf0c(,%eax,4),%eax
c010799e:	85 c0                	test   %eax,%eax
c01079a0:	75 24                	jne    c01079c6 <check_swap+0x4e0>
c01079a2:	c7 44 24 0c 2c 71 11 	movl   $0xc011712c,0xc(%esp)
c01079a9:	c0 
c01079aa:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c01079b1:	c0 
c01079b2:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c01079b9:	00 
c01079ba:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c01079c1:	e8 e6 94 ff ff       	call   c0100eac <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c01079c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01079c9:	8b 04 85 f4 50 15 c0 	mov    -0x3feaaf0c(,%eax,4),%eax
c01079d0:	8b 00                	mov    (%eax),%eax
c01079d2:	89 04 24             	mov    %eax,(%esp)
c01079d5:	e8 87 f5 ff ff       	call   c0106f61 <pte2page>
c01079da:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01079dd:	8b 14 95 40 50 15 c0 	mov    -0x3feaafc0(,%edx,4),%edx
c01079e4:	39 d0                	cmp    %edx,%eax
c01079e6:	74 24                	je     c0107a0c <check_swap+0x526>
c01079e8:	c7 44 24 0c 44 71 11 	movl   $0xc0117144,0xc(%esp)
c01079ef:	c0 
c01079f0:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c01079f7:	c0 
c01079f8:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c01079ff:	00 
c0107a00:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107a07:	e8 a0 94 ff ff       	call   c0100eac <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0107a0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a0f:	8b 04 85 f4 50 15 c0 	mov    -0x3feaaf0c(,%eax,4),%eax
c0107a16:	8b 00                	mov    (%eax),%eax
c0107a18:	83 e0 01             	and    $0x1,%eax
c0107a1b:	85 c0                	test   %eax,%eax
c0107a1d:	75 24                	jne    c0107a43 <check_swap+0x55d>
c0107a1f:	c7 44 24 0c 6c 71 11 	movl   $0xc011716c,0xc(%esp)
c0107a26:	c0 
c0107a27:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107a2e:	c0 
c0107a2f:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107a36:	00 
c0107a37:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107a3e:	e8 69 94 ff ff       	call   c0100eac <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107a43:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107a47:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107a4b:	0f 8e 0b ff ff ff    	jle    c010795c <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0107a51:	c7 04 24 88 71 11 c0 	movl   $0xc0117188,(%esp)
c0107a58:	e8 13 89 ff ff       	call   c0100370 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0107a5d:	e8 6c fa ff ff       	call   c01074ce <check_content_access>
c0107a62:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c0107a65:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107a69:	74 24                	je     c0107a8f <check_swap+0x5a9>
c0107a6b:	c7 44 24 0c ae 71 11 	movl   $0xc01171ae,0xc(%esp)
c0107a72:	c0 
c0107a73:	c7 44 24 08 96 6e 11 	movl   $0xc0116e96,0x8(%esp)
c0107a7a:	c0 
c0107a7b:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0107a82:	00 
c0107a83:	c7 04 24 30 6e 11 c0 	movl   $0xc0116e30,(%esp)
c0107a8a:	e8 1d 94 ff ff       	call   c0100eac <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107a8f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107a96:	eb 1e                	jmp    c0107ab6 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0107a98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a9b:	8b 04 85 40 50 15 c0 	mov    -0x3feaafc0(,%eax,4),%eax
c0107aa2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107aa9:	00 
c0107aaa:	89 04 24             	mov    %eax,(%esp)
c0107aad:	e8 96 d8 ff ff       	call   c0105348 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107ab2:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107ab6:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107aba:	7e dc                	jle    c0107a98 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0107abc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107abf:	8b 00                	mov    (%eax),%eax
c0107ac1:	89 04 24             	mov    %eax,(%esp)
c0107ac4:	e8 d6 f4 ff ff       	call   c0106f9f <pde2page>
c0107ac9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107ad0:	00 
c0107ad1:	89 04 24             	mov    %eax,(%esp)
c0107ad4:	e8 6f d8 ff ff       	call   c0105348 <free_pages>
     pgdir[0] = 0;
c0107ad9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107adc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0107ae2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107ae5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107aec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107aef:	89 04 24             	mov    %eax,(%esp)
c0107af2:	e8 5d 09 00 00       	call   c0108454 <mm_destroy>
     check_mm_struct = NULL;
c0107af7:	c7 05 0c 51 15 c0 00 	movl   $0x0,0xc015510c
c0107afe:	00 00 00 
     
     nr_free = nr_free_store;
c0107b01:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107b04:	a3 1c 50 15 c0       	mov    %eax,0xc015501c
     free_list = free_list_store;
c0107b09:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107b0c:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107b0f:	a3 14 50 15 c0       	mov    %eax,0xc0155014
c0107b14:	89 15 18 50 15 c0    	mov    %edx,0xc0155018

     
     le = &free_list;
c0107b1a:	c7 45 e8 14 50 15 c0 	movl   $0xc0155014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107b21:	eb 1f                	jmp    c0107b42 <check_swap+0x65c>
         struct Page *p = le2page(le, page_link);
c0107b23:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b26:	83 e8 0c             	sub    $0xc,%eax
c0107b29:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0107b2c:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107b30:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107b33:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107b36:	8b 40 08             	mov    0x8(%eax),%eax
c0107b39:	89 d1                	mov    %edx,%ecx
c0107b3b:	29 c1                	sub    %eax,%ecx
c0107b3d:	89 c8                	mov    %ecx,%eax
c0107b3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107b42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b45:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107b48:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107b4b:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107b4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107b51:	81 7d e8 14 50 15 c0 	cmpl   $0xc0155014,-0x18(%ebp)
c0107b58:	75 c9                	jne    c0107b23 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107b5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b5d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107b61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b64:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107b68:	c7 04 24 b5 71 11 c0 	movl   $0xc01171b5,(%esp)
c0107b6f:	e8 fc 87 ff ff       	call   c0100370 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107b74:	c7 04 24 cf 71 11 c0 	movl   $0xc01171cf,(%esp)
c0107b7b:	e8 f0 87 ff ff       	call   c0100370 <cprintf>
}
c0107b80:	83 c4 74             	add    $0x74,%esp
c0107b83:	5b                   	pop    %ebx
c0107b84:	5d                   	pop    %ebp
c0107b85:	c3                   	ret    
	...

c0107b88 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107b88:	55                   	push   %ebp
c0107b89:	89 e5                	mov    %esp,%ebp
c0107b8b:	83 ec 10             	sub    $0x10,%esp
c0107b8e:	c7 45 fc 04 51 15 c0 	movl   $0xc0155104,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107b95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107b98:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107b9b:	89 50 04             	mov    %edx,0x4(%eax)
c0107b9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107ba1:	8b 50 04             	mov    0x4(%eax),%edx
c0107ba4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107ba7:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107ba9:	8b 45 08             	mov    0x8(%ebp),%eax
c0107bac:	c7 40 14 04 51 15 c0 	movl   $0xc0155104,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107bb8:	c9                   	leave  
c0107bb9:	c3                   	ret    

c0107bba <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107bba:	55                   	push   %ebp
c0107bbb:	89 e5                	mov    %esp,%ebp
c0107bbd:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107bc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0107bc3:	8b 40 14             	mov    0x14(%eax),%eax
c0107bc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107bc9:	8b 45 10             	mov    0x10(%ebp),%eax
c0107bcc:	83 c0 14             	add    $0x14,%eax
c0107bcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107bd2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107bd6:	74 06                	je     c0107bde <_fifo_map_swappable+0x24>
c0107bd8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107bdc:	75 24                	jne    c0107c02 <_fifo_map_swappable+0x48>
c0107bde:	c7 44 24 0c e8 71 11 	movl   $0xc01171e8,0xc(%esp)
c0107be5:	c0 
c0107be6:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107bed:	c0 
c0107bee:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107bf5:	00 
c0107bf6:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107bfd:	e8 aa 92 ff ff       	call   c0100eac <__panic>
    //record the page access situlation
    /*LAB3 EXERCISE 2: 2011010312 */ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
	list_add(head->prev, entry);
c0107c02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c05:	8b 00                	mov    (%eax),%eax
c0107c07:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c0d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107c10:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107c13:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107c16:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c19:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107c1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107c1f:	8b 40 04             	mov    0x4(%eax),%eax
c0107c22:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107c25:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107c28:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107c2b:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107c2e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107c31:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107c34:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107c37:	89 10                	mov    %edx,(%eax)
c0107c39:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107c3c:	8b 10                	mov    (%eax),%edx
c0107c3e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107c41:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107c44:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107c47:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107c4a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107c4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107c50:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107c53:	89 10                	mov    %edx,(%eax)
    return 0;
c0107c55:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107c5a:	c9                   	leave  
c0107c5b:	c3                   	ret    

c0107c5c <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107c5c:	55                   	push   %ebp
c0107c5d:	89 e5                	mov    %esp,%ebp
c0107c5f:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107c62:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c65:	8b 40 14             	mov    0x14(%eax),%eax
c0107c68:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(head != NULL);
c0107c6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107c6f:	75 24                	jne    c0107c95 <_fifo_swap_out_victim+0x39>
c0107c71:	c7 44 24 0c 2f 72 11 	movl   $0xc011722f,0xc(%esp)
c0107c78:	c0 
c0107c79:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107c80:	c0 
c0107c81:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107c88:	00 
c0107c89:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107c90:	e8 17 92 ff ff       	call   c0100eac <__panic>
     assert(in_tick==0);
c0107c95:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107c99:	74 24                	je     c0107cbf <_fifo_swap_out_victim+0x63>
c0107c9b:	c7 44 24 0c 3c 72 11 	movl   $0xc011723c,0xc(%esp)
c0107ca2:	c0 
c0107ca3:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107caa:	c0 
c0107cab:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107cb2:	00 
c0107cb3:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107cba:	e8 ed 91 ff ff       	call   c0100eac <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: 2011010312 */ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     list_entry_t *victim = head->next;
c0107cbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107cc2:	8b 40 04             	mov    0x4(%eax),%eax
c0107cc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107cc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ccb:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107cce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107cd1:	8b 40 04             	mov    0x4(%eax),%eax
c0107cd4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107cd7:	8b 12                	mov    (%edx),%edx
c0107cd9:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0107cdc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107cdf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107ce2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107ce5:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107ce8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ceb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107cee:	89 10                	mov    %edx,(%eax)
	 list_del(victim);
     *ptr_page = le2page(victim, pra_page_link);
c0107cf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107cf3:	8d 50 ec             	lea    -0x14(%eax),%edx
c0107cf6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107cf9:	89 10                	mov    %edx,(%eax)
     return 0;
c0107cfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107d00:	c9                   	leave  
c0107d01:	c3                   	ret    

c0107d02 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107d02:	55                   	push   %ebp
c0107d03:	89 e5                	mov    %esp,%ebp
c0107d05:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107d08:	c7 04 24 48 72 11 c0 	movl   $0xc0117248,(%esp)
c0107d0f:	e8 5c 86 ff ff       	call   c0100370 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107d14:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107d19:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107d1c:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107d21:	83 f8 04             	cmp    $0x4,%eax
c0107d24:	74 24                	je     c0107d4a <_fifo_check_swap+0x48>
c0107d26:	c7 44 24 0c 6e 72 11 	movl   $0xc011726e,0xc(%esp)
c0107d2d:	c0 
c0107d2e:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107d35:	c0 
c0107d36:	c7 44 24 04 51 00 00 	movl   $0x51,0x4(%esp)
c0107d3d:	00 
c0107d3e:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107d45:	e8 62 91 ff ff       	call   c0100eac <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107d4a:	c7 04 24 80 72 11 c0 	movl   $0xc0117280,(%esp)
c0107d51:	e8 1a 86 ff ff       	call   c0100370 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107d56:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107d5b:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107d5e:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107d63:	83 f8 04             	cmp    $0x4,%eax
c0107d66:	74 24                	je     c0107d8c <_fifo_check_swap+0x8a>
c0107d68:	c7 44 24 0c 6e 72 11 	movl   $0xc011726e,0xc(%esp)
c0107d6f:	c0 
c0107d70:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107d77:	c0 
c0107d78:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0107d7f:	00 
c0107d80:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107d87:	e8 20 91 ff ff       	call   c0100eac <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107d8c:	c7 04 24 a8 72 11 c0 	movl   $0xc01172a8,(%esp)
c0107d93:	e8 d8 85 ff ff       	call   c0100370 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107d98:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107d9d:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107da0:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107da5:	83 f8 04             	cmp    $0x4,%eax
c0107da8:	74 24                	je     c0107dce <_fifo_check_swap+0xcc>
c0107daa:	c7 44 24 0c 6e 72 11 	movl   $0xc011726e,0xc(%esp)
c0107db1:	c0 
c0107db2:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107db9:	c0 
c0107dba:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0107dc1:	00 
c0107dc2:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107dc9:	e8 de 90 ff ff       	call   c0100eac <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107dce:	c7 04 24 d0 72 11 c0 	movl   $0xc01172d0,(%esp)
c0107dd5:	e8 96 85 ff ff       	call   c0100370 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107dda:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107ddf:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107de2:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107de7:	83 f8 04             	cmp    $0x4,%eax
c0107dea:	74 24                	je     c0107e10 <_fifo_check_swap+0x10e>
c0107dec:	c7 44 24 0c 6e 72 11 	movl   $0xc011726e,0xc(%esp)
c0107df3:	c0 
c0107df4:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107dfb:	c0 
c0107dfc:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107e03:	00 
c0107e04:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107e0b:	e8 9c 90 ff ff       	call   c0100eac <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107e10:	c7 04 24 f8 72 11 c0 	movl   $0xc01172f8,(%esp)
c0107e17:	e8 54 85 ff ff       	call   c0100370 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107e1c:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107e21:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107e24:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107e29:	83 f8 05             	cmp    $0x5,%eax
c0107e2c:	74 24                	je     c0107e52 <_fifo_check_swap+0x150>
c0107e2e:	c7 44 24 0c 1e 73 11 	movl   $0xc011731e,0xc(%esp)
c0107e35:	c0 
c0107e36:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107e3d:	c0 
c0107e3e:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107e45:	00 
c0107e46:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107e4d:	e8 5a 90 ff ff       	call   c0100eac <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107e52:	c7 04 24 d0 72 11 c0 	movl   $0xc01172d0,(%esp)
c0107e59:	e8 12 85 ff ff       	call   c0100370 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107e5e:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107e63:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107e66:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107e6b:	83 f8 05             	cmp    $0x5,%eax
c0107e6e:	74 24                	je     c0107e94 <_fifo_check_swap+0x192>
c0107e70:	c7 44 24 0c 1e 73 11 	movl   $0xc011731e,0xc(%esp)
c0107e77:	c0 
c0107e78:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107e7f:	c0 
c0107e80:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0107e87:	00 
c0107e88:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107e8f:	e8 18 90 ff ff       	call   c0100eac <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107e94:	c7 04 24 80 72 11 c0 	movl   $0xc0117280,(%esp)
c0107e9b:	e8 d0 84 ff ff       	call   c0100370 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107ea0:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107ea5:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107ea8:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107ead:	83 f8 06             	cmp    $0x6,%eax
c0107eb0:	74 24                	je     c0107ed6 <_fifo_check_swap+0x1d4>
c0107eb2:	c7 44 24 0c 2d 73 11 	movl   $0xc011732d,0xc(%esp)
c0107eb9:	c0 
c0107eba:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107ec1:	c0 
c0107ec2:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107ec9:	00 
c0107eca:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107ed1:	e8 d6 8f ff ff       	call   c0100eac <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107ed6:	c7 04 24 d0 72 11 c0 	movl   $0xc01172d0,(%esp)
c0107edd:	e8 8e 84 ff ff       	call   c0100370 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107ee2:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107ee7:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107eea:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107eef:	83 f8 07             	cmp    $0x7,%eax
c0107ef2:	74 24                	je     c0107f18 <_fifo_check_swap+0x216>
c0107ef4:	c7 44 24 0c 3c 73 11 	movl   $0xc011733c,0xc(%esp)
c0107efb:	c0 
c0107efc:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107f03:	c0 
c0107f04:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107f0b:	00 
c0107f0c:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107f13:	e8 94 8f ff ff       	call   c0100eac <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107f18:	c7 04 24 48 72 11 c0 	movl   $0xc0117248,(%esp)
c0107f1f:	e8 4c 84 ff ff       	call   c0100370 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107f24:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107f29:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107f2c:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107f31:	83 f8 08             	cmp    $0x8,%eax
c0107f34:	74 24                	je     c0107f5a <_fifo_check_swap+0x258>
c0107f36:	c7 44 24 0c 4b 73 11 	movl   $0xc011734b,0xc(%esp)
c0107f3d:	c0 
c0107f3e:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107f45:	c0 
c0107f46:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107f4d:	00 
c0107f4e:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107f55:	e8 52 8f ff ff       	call   c0100eac <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107f5a:	c7 04 24 a8 72 11 c0 	movl   $0xc01172a8,(%esp)
c0107f61:	e8 0a 84 ff ff       	call   c0100370 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107f66:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107f6b:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107f6e:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107f73:	83 f8 09             	cmp    $0x9,%eax
c0107f76:	74 24                	je     c0107f9c <_fifo_check_swap+0x29a>
c0107f78:	c7 44 24 0c 5a 73 11 	movl   $0xc011735a,0xc(%esp)
c0107f7f:	c0 
c0107f80:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107f87:	c0 
c0107f88:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107f8f:	00 
c0107f90:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107f97:	e8 10 8f ff ff       	call   c0100eac <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107f9c:	c7 04 24 f8 72 11 c0 	movl   $0xc01172f8,(%esp)
c0107fa3:	e8 c8 83 ff ff       	call   c0100370 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107fa8:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107fad:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0107fb0:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0107fb5:	83 f8 0a             	cmp    $0xa,%eax
c0107fb8:	74 24                	je     c0107fde <_fifo_check_swap+0x2dc>
c0107fba:	c7 44 24 0c 69 73 11 	movl   $0xc0117369,0xc(%esp)
c0107fc1:	c0 
c0107fc2:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0107fc9:	c0 
c0107fca:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0107fd1:	00 
c0107fd2:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0107fd9:	e8 ce 8e ff ff       	call   c0100eac <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107fde:	c7 04 24 80 72 11 c0 	movl   $0xc0117280,(%esp)
c0107fe5:	e8 86 83 ff ff       	call   c0100370 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c0107fea:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107fef:	0f b6 00             	movzbl (%eax),%eax
c0107ff2:	3c 0a                	cmp    $0xa,%al
c0107ff4:	74 24                	je     c010801a <_fifo_check_swap+0x318>
c0107ff6:	c7 44 24 0c 7c 73 11 	movl   $0xc011737c,0xc(%esp)
c0107ffd:	c0 
c0107ffe:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c0108005:	c0 
c0108006:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c010800d:	00 
c010800e:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c0108015:	e8 92 8e ff ff       	call   c0100eac <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c010801a:	b8 00 10 00 00       	mov    $0x1000,%eax
c010801f:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0108022:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0108027:	83 f8 0b             	cmp    $0xb,%eax
c010802a:	74 24                	je     c0108050 <_fifo_check_swap+0x34e>
c010802c:	c7 44 24 0c 9d 73 11 	movl   $0xc011739d,0xc(%esp)
c0108033:	c0 
c0108034:	c7 44 24 08 06 72 11 	movl   $0xc0117206,0x8(%esp)
c010803b:	c0 
c010803c:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0108043:	00 
c0108044:	c7 04 24 1b 72 11 c0 	movl   $0xc011721b,(%esp)
c010804b:	e8 5c 8e ff ff       	call   c0100eac <__panic>
    return 0;
c0108050:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108055:	c9                   	leave  
c0108056:	c3                   	ret    

c0108057 <_fifo_init>:


static int
_fifo_init(void)
{
c0108057:	55                   	push   %ebp
c0108058:	89 e5                	mov    %esp,%ebp
    return 0;
c010805a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010805f:	5d                   	pop    %ebp
c0108060:	c3                   	ret    

c0108061 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0108061:	55                   	push   %ebp
c0108062:	89 e5                	mov    %esp,%ebp
    return 0;
c0108064:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108069:	5d                   	pop    %ebp
c010806a:	c3                   	ret    

c010806b <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c010806b:	55                   	push   %ebp
c010806c:	89 e5                	mov    %esp,%ebp
c010806e:	b8 00 00 00 00       	mov    $0x0,%eax
c0108073:	5d                   	pop    %ebp
c0108074:	c3                   	ret    
c0108075:	00 00                	add    %al,(%eax)
	...

c0108078 <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0108078:	55                   	push   %ebp
c0108079:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c010807b:	8b 45 08             	mov    0x8(%ebp),%eax
c010807e:	8b 40 18             	mov    0x18(%eax),%eax
}
c0108081:	5d                   	pop    %ebp
c0108082:	c3                   	ret    

c0108083 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0108083:	55                   	push   %ebp
c0108084:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0108086:	8b 45 08             	mov    0x8(%ebp),%eax
c0108089:	8b 55 0c             	mov    0xc(%ebp),%edx
c010808c:	89 50 18             	mov    %edx,0x18(%eax)
}
c010808f:	5d                   	pop    %ebp
c0108090:	c3                   	ret    

c0108091 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0108091:	55                   	push   %ebp
c0108092:	89 e5                	mov    %esp,%ebp
c0108094:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0108097:	8b 45 08             	mov    0x8(%ebp),%eax
c010809a:	89 c2                	mov    %eax,%edx
c010809c:	c1 ea 0c             	shr    $0xc,%edx
c010809f:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c01080a4:	39 c2                	cmp    %eax,%edx
c01080a6:	72 1c                	jb     c01080c4 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01080a8:	c7 44 24 08 c0 73 11 	movl   $0xc01173c0,0x8(%esp)
c01080af:	c0 
c01080b0:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c01080b7:	00 
c01080b8:	c7 04 24 df 73 11 c0 	movl   $0xc01173df,(%esp)
c01080bf:	e8 e8 8d ff ff       	call   c0100eac <__panic>
    }
    return &pages[PPN(pa)];
c01080c4:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c01080c9:	8b 55 08             	mov    0x8(%ebp),%edx
c01080cc:	c1 ea 0c             	shr    $0xc,%edx
c01080cf:	c1 e2 05             	shl    $0x5,%edx
c01080d2:	01 d0                	add    %edx,%eax
}
c01080d4:	c9                   	leave  
c01080d5:	c3                   	ret    

c01080d6 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c01080d6:	55                   	push   %ebp
c01080d7:	89 e5                	mov    %esp,%ebp
c01080d9:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c01080dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01080df:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01080e4:	89 04 24             	mov    %eax,(%esp)
c01080e7:	e8 a5 ff ff ff       	call   c0108091 <pa2page>
}
c01080ec:	c9                   	leave  
c01080ed:	c3                   	ret    

c01080ee <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c01080ee:	55                   	push   %ebp
c01080ef:	89 e5                	mov    %esp,%ebp
c01080f1:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c01080f4:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c01080fb:	e8 56 cd ff ff       	call   c0104e56 <kmalloc>
c0108100:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0108103:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108107:	0f 84 81 00 00 00    	je     c010818e <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c010810d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108110:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108113:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108116:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108119:	89 50 04             	mov    %edx,0x4(%eax)
c010811c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010811f:	8b 50 04             	mov    0x4(%eax),%edx
c0108122:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108125:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0108127:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010812a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0108131:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108134:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c010813b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010813e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0108145:	a1 0c 1f 15 c0       	mov    0xc0151f0c,%eax
c010814a:	85 c0                	test   %eax,%eax
c010814c:	74 0d                	je     c010815b <mm_create+0x6d>
c010814e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108151:	89 04 24             	mov    %eax,(%esp)
c0108154:	e8 ee ee ff ff       	call   c0107047 <swap_init_mm>
c0108159:	eb 0a                	jmp    c0108165 <mm_create+0x77>
        else mm->sm_priv = NULL;
c010815b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010815e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0108165:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010816c:	00 
c010816d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108170:	89 04 24             	mov    %eax,(%esp)
c0108173:	e8 0b ff ff ff       	call   c0108083 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0108178:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010817b:	83 c0 1c             	add    $0x1c,%eax
c010817e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108185:	00 
c0108186:	89 04 24             	mov    %eax,(%esp)
c0108189:	e8 20 1b 00 00       	call   c0109cae <sem_init>
    }    
    return mm;
c010818e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108191:	c9                   	leave  
c0108192:	c3                   	ret    

c0108193 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0108193:	55                   	push   %ebp
c0108194:	89 e5                	mov    %esp,%ebp
c0108196:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0108199:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c01081a0:	e8 b1 cc ff ff       	call   c0104e56 <kmalloc>
c01081a5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c01081a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01081ac:	74 1b                	je     c01081c9 <vma_create+0x36>
        vma->vm_start = vm_start;
c01081ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081b1:	8b 55 08             	mov    0x8(%ebp),%edx
c01081b4:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c01081b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081ba:	8b 55 0c             	mov    0xc(%ebp),%edx
c01081bd:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c01081c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081c3:	8b 55 10             	mov    0x10(%ebp),%edx
c01081c6:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c01081c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01081cc:	c9                   	leave  
c01081cd:	c3                   	ret    

c01081ce <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c01081ce:	55                   	push   %ebp
c01081cf:	89 e5                	mov    %esp,%ebp
c01081d1:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c01081d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c01081db:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01081df:	0f 84 95 00 00 00    	je     c010827a <find_vma+0xac>
        vma = mm->mmap_cache;
c01081e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01081e8:	8b 40 08             	mov    0x8(%eax),%eax
c01081eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c01081ee:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01081f2:	74 16                	je     c010820a <find_vma+0x3c>
c01081f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01081f7:	8b 40 04             	mov    0x4(%eax),%eax
c01081fa:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01081fd:	77 0b                	ja     c010820a <find_vma+0x3c>
c01081ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108202:	8b 40 08             	mov    0x8(%eax),%eax
c0108205:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108208:	77 61                	ja     c010826b <find_vma+0x9d>
                bool found = 0;
c010820a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0108211:	8b 45 08             	mov    0x8(%ebp),%eax
c0108214:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108217:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010821a:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c010821d:	eb 28                	jmp    c0108247 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c010821f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108222:	83 e8 10             	sub    $0x10,%eax
c0108225:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0108228:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010822b:	8b 40 04             	mov    0x4(%eax),%eax
c010822e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108231:	77 14                	ja     c0108247 <find_vma+0x79>
c0108233:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108236:	8b 40 08             	mov    0x8(%eax),%eax
c0108239:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010823c:	76 09                	jbe    c0108247 <find_vma+0x79>
                        found = 1;
c010823e:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0108245:	eb 17                	jmp    c010825e <find_vma+0x90>
c0108247:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010824a:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010824d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108250:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0108253:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108256:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108259:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010825c:	75 c1                	jne    c010821f <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c010825e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0108262:	75 07                	jne    c010826b <find_vma+0x9d>
                    vma = NULL;
c0108264:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c010826b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010826f:	74 09                	je     c010827a <find_vma+0xac>
            mm->mmap_cache = vma;
c0108271:	8b 45 08             	mov    0x8(%ebp),%eax
c0108274:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108277:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c010827a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010827d:	c9                   	leave  
c010827e:	c3                   	ret    

c010827f <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c010827f:	55                   	push   %ebp
c0108280:	89 e5                	mov    %esp,%ebp
c0108282:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0108285:	8b 45 08             	mov    0x8(%ebp),%eax
c0108288:	8b 50 04             	mov    0x4(%eax),%edx
c010828b:	8b 45 08             	mov    0x8(%ebp),%eax
c010828e:	8b 40 08             	mov    0x8(%eax),%eax
c0108291:	39 c2                	cmp    %eax,%edx
c0108293:	72 24                	jb     c01082b9 <check_vma_overlap+0x3a>
c0108295:	c7 44 24 0c ed 73 11 	movl   $0xc01173ed,0xc(%esp)
c010829c:	c0 
c010829d:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c01082a4:	c0 
c01082a5:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c01082ac:	00 
c01082ad:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c01082b4:	e8 f3 8b ff ff       	call   c0100eac <__panic>
    assert(prev->vm_end <= next->vm_start);
c01082b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01082bc:	8b 50 08             	mov    0x8(%eax),%edx
c01082bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082c2:	8b 40 04             	mov    0x4(%eax),%eax
c01082c5:	39 c2                	cmp    %eax,%edx
c01082c7:	76 24                	jbe    c01082ed <check_vma_overlap+0x6e>
c01082c9:	c7 44 24 0c 30 74 11 	movl   $0xc0117430,0xc(%esp)
c01082d0:	c0 
c01082d1:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c01082d8:	c0 
c01082d9:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c01082e0:	00 
c01082e1:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c01082e8:	e8 bf 8b ff ff       	call   c0100eac <__panic>
    assert(next->vm_start < next->vm_end);
c01082ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082f0:	8b 50 04             	mov    0x4(%eax),%edx
c01082f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082f6:	8b 40 08             	mov    0x8(%eax),%eax
c01082f9:	39 c2                	cmp    %eax,%edx
c01082fb:	72 24                	jb     c0108321 <check_vma_overlap+0xa2>
c01082fd:	c7 44 24 0c 4f 74 11 	movl   $0xc011744f,0xc(%esp)
c0108304:	c0 
c0108305:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c010830c:	c0 
c010830d:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0108314:	00 
c0108315:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c010831c:	e8 8b 8b ff ff       	call   c0100eac <__panic>
}
c0108321:	c9                   	leave  
c0108322:	c3                   	ret    

c0108323 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0108323:	55                   	push   %ebp
c0108324:	89 e5                	mov    %esp,%ebp
c0108326:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c0108329:	8b 45 0c             	mov    0xc(%ebp),%eax
c010832c:	8b 50 04             	mov    0x4(%eax),%edx
c010832f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108332:	8b 40 08             	mov    0x8(%eax),%eax
c0108335:	39 c2                	cmp    %eax,%edx
c0108337:	72 24                	jb     c010835d <insert_vma_struct+0x3a>
c0108339:	c7 44 24 0c 6d 74 11 	movl   $0xc011746d,0xc(%esp)
c0108340:	c0 
c0108341:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108348:	c0 
c0108349:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0108350:	00 
c0108351:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108358:	e8 4f 8b ff ff       	call   c0100eac <__panic>
    list_entry_t *list = &(mm->mmap_list);
c010835d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108360:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0108363:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108366:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0108369:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010836c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c010836f:	eb 1f                	jmp    c0108390 <insert_vma_struct+0x6d>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0108371:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108374:	83 e8 10             	sub    $0x10,%eax
c0108377:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c010837a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010837d:	8b 50 04             	mov    0x4(%eax),%edx
c0108380:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108383:	8b 40 04             	mov    0x4(%eax),%eax
c0108386:	39 c2                	cmp    %eax,%edx
c0108388:	77 1f                	ja     c01083a9 <insert_vma_struct+0x86>
                break;
            }
            le_prev = le;
c010838a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010838d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108390:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108393:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108396:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108399:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010839c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010839f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083a2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01083a5:	75 ca                	jne    c0108371 <insert_vma_struct+0x4e>
c01083a7:	eb 01                	jmp    c01083aa <insert_vma_struct+0x87>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c01083a9:	90                   	nop
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c01083aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01083b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01083b3:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c01083b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01083b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083bc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01083bf:	74 15                	je     c01083d6 <insert_vma_struct+0xb3>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01083c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083c4:	8d 50 f0             	lea    -0x10(%eax),%edx
c01083c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083ce:	89 14 24             	mov    %edx,(%esp)
c01083d1:	e8 a9 fe ff ff       	call   c010827f <check_vma_overlap>
    }
    if (le_next != list) {
c01083d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01083d9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01083dc:	74 15                	je     c01083f3 <insert_vma_struct+0xd0>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01083de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01083e1:	83 e8 10             	sub    $0x10,%eax
c01083e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083eb:	89 04 24             	mov    %eax,(%esp)
c01083ee:	e8 8c fe ff ff       	call   c010827f <check_vma_overlap>
    }

    vma->vm_mm = mm;
c01083f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083f6:	8b 55 08             	mov    0x8(%ebp),%edx
c01083f9:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01083fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083fe:	8d 50 10             	lea    0x10(%eax),%edx
c0108401:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108404:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108407:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010840a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010840d:	8b 40 04             	mov    0x4(%eax),%eax
c0108410:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108413:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0108416:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108419:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010841c:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010841f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108422:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0108425:	89 10                	mov    %edx,(%eax)
c0108427:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010842a:	8b 10                	mov    (%eax),%edx
c010842c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010842f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108432:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108435:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0108438:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010843b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010843e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0108441:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0108443:	8b 45 08             	mov    0x8(%ebp),%eax
c0108446:	8b 40 10             	mov    0x10(%eax),%eax
c0108449:	8d 50 01             	lea    0x1(%eax),%edx
c010844c:	8b 45 08             	mov    0x8(%ebp),%eax
c010844f:	89 50 10             	mov    %edx,0x10(%eax)
}
c0108452:	c9                   	leave  
c0108453:	c3                   	ret    

c0108454 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0108454:	55                   	push   %ebp
c0108455:	89 e5                	mov    %esp,%ebp
c0108457:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c010845a:	8b 45 08             	mov    0x8(%ebp),%eax
c010845d:	89 04 24             	mov    %eax,(%esp)
c0108460:	e8 13 fc ff ff       	call   c0108078 <mm_count>
c0108465:	85 c0                	test   %eax,%eax
c0108467:	74 24                	je     c010848d <mm_destroy+0x39>
c0108469:	c7 44 24 0c 89 74 11 	movl   $0xc0117489,0xc(%esp)
c0108470:	c0 
c0108471:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108478:	c0 
c0108479:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0108480:	00 
c0108481:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108488:	e8 1f 8a ff ff       	call   c0100eac <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010848d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108490:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108493:	eb 36                	jmp    c01084cb <mm_destroy+0x77>
c0108495:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108498:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010849b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010849e:	8b 40 04             	mov    0x4(%eax),%eax
c01084a1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01084a4:	8b 12                	mov    (%edx),%edx
c01084a6:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01084a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01084ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01084b2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01084b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01084b8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01084bb:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01084bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084c0:	83 e8 10             	sub    $0x10,%eax
c01084c3:	89 04 24             	mov    %eax,(%esp)
c01084c6:	e8 a6 c9 ff ff       	call   c0104e71 <kfree>
c01084cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084ce:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01084d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01084d4:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01084d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01084da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01084e0:	75 b3                	jne    c0108495 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01084e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01084e5:	89 04 24             	mov    %eax,(%esp)
c01084e8:	e8 84 c9 ff ff       	call   c0104e71 <kfree>
    mm=NULL;
c01084ed:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01084f4:	c9                   	leave  
c01084f5:	c3                   	ret    

c01084f6 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01084f6:	55                   	push   %ebp
c01084f7:	89 e5                	mov    %esp,%ebp
c01084f9:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c01084fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108502:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108505:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010850a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010850d:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0108514:	8b 45 10             	mov    0x10(%ebp),%eax
c0108517:	8b 55 0c             	mov    0xc(%ebp),%edx
c010851a:	01 d0                	add    %edx,%eax
c010851c:	03 45 e8             	add    -0x18(%ebp),%eax
c010851f:	83 e8 01             	sub    $0x1,%eax
c0108522:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108525:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108528:	ba 00 00 00 00       	mov    $0x0,%edx
c010852d:	f7 75 e8             	divl   -0x18(%ebp)
c0108530:	89 d0                	mov    %edx,%eax
c0108532:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108535:	89 d1                	mov    %edx,%ecx
c0108537:	29 c1                	sub    %eax,%ecx
c0108539:	89 c8                	mov    %ecx,%eax
c010853b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c010853e:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0108545:	76 11                	jbe    c0108558 <mm_map+0x62>
c0108547:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010854a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010854d:	73 09                	jae    c0108558 <mm_map+0x62>
c010854f:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0108556:	76 0a                	jbe    c0108562 <mm_map+0x6c>
        return -E_INVAL;
c0108558:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010855d:	e9 b0 00 00 00       	jmp    c0108612 <mm_map+0x11c>
    }

    assert(mm != NULL);
c0108562:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108566:	75 24                	jne    c010858c <mm_map+0x96>
c0108568:	c7 44 24 0c 9b 74 11 	movl   $0xc011749b,0xc(%esp)
c010856f:	c0 
c0108570:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108577:	c0 
c0108578:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c010857f:	00 
c0108580:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108587:	e8 20 89 ff ff       	call   c0100eac <__panic>

    int ret = -E_INVAL;
c010858c:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108593:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108596:	89 44 24 04          	mov    %eax,0x4(%esp)
c010859a:	8b 45 08             	mov    0x8(%ebp),%eax
c010859d:	89 04 24             	mov    %eax,(%esp)
c01085a0:	e8 29 fc ff ff       	call   c01081ce <find_vma>
c01085a5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01085a8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01085ac:	74 0b                	je     c01085b9 <mm_map+0xc3>
c01085ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01085b1:	8b 40 04             	mov    0x4(%eax),%eax
c01085b4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01085b7:	72 52                	jb     c010860b <mm_map+0x115>
        goto out;
    }
    ret = -E_NO_MEM;
c01085b9:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c01085c0:	8b 45 14             	mov    0x14(%ebp),%eax
c01085c3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01085c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01085ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01085d1:	89 04 24             	mov    %eax,(%esp)
c01085d4:	e8 ba fb ff ff       	call   c0108193 <vma_create>
c01085d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01085dc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01085e0:	74 2c                	je     c010860e <mm_map+0x118>
        goto out;
    }
    insert_vma_struct(mm, vma);
c01085e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01085e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01085ec:	89 04 24             	mov    %eax,(%esp)
c01085ef:	e8 2f fd ff ff       	call   c0108323 <insert_vma_struct>
    if (vma_store != NULL) {
c01085f4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01085f8:	74 08                	je     c0108602 <mm_map+0x10c>
        *vma_store = vma;
c01085fa:	8b 45 18             	mov    0x18(%ebp),%eax
c01085fd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108600:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0108602:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108609:	eb 04                	jmp    c010860f <mm_map+0x119>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c010860b:	90                   	nop
c010860c:	eb 01                	jmp    c010860f <mm_map+0x119>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c010860e:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c010860f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108612:	c9                   	leave  
c0108613:	c3                   	ret    

c0108614 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0108614:	55                   	push   %ebp
c0108615:	89 e5                	mov    %esp,%ebp
c0108617:	56                   	push   %esi
c0108618:	53                   	push   %ebx
c0108619:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c010861c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108620:	74 06                	je     c0108628 <dup_mmap+0x14>
c0108622:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108626:	75 24                	jne    c010864c <dup_mmap+0x38>
c0108628:	c7 44 24 0c a6 74 11 	movl   $0xc01174a6,0xc(%esp)
c010862f:	c0 
c0108630:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108637:	c0 
c0108638:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c010863f:	00 
c0108640:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108647:	e8 60 88 ff ff       	call   c0100eac <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010864c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010864f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108652:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108655:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0108658:	e9 92 00 00 00       	jmp    c01086ef <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c010865d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108660:	83 e8 10             	sub    $0x10,%eax
c0108663:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0108666:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108669:	8b 48 0c             	mov    0xc(%eax),%ecx
c010866c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010866f:	8b 50 08             	mov    0x8(%eax),%edx
c0108672:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108675:	8b 40 04             	mov    0x4(%eax),%eax
c0108678:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010867c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108680:	89 04 24             	mov    %eax,(%esp)
c0108683:	e8 0b fb ff ff       	call   c0108193 <vma_create>
c0108688:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c010868b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010868f:	75 07                	jne    c0108698 <dup_mmap+0x84>
            return -E_NO_MEM;
c0108691:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108696:	eb 76                	jmp    c010870e <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108698:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010869b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010869f:	8b 45 08             	mov    0x8(%ebp),%eax
c01086a2:	89 04 24             	mov    %eax,(%esp)
c01086a5:	e8 79 fc ff ff       	call   c0108323 <insert_vma_struct>

        bool share = 0;
c01086aa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c01086b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01086b4:	8b 58 08             	mov    0x8(%eax),%ebx
c01086b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01086ba:	8b 48 04             	mov    0x4(%eax),%ecx
c01086bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086c0:	8b 50 0c             	mov    0xc(%eax),%edx
c01086c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01086c6:	8b 40 0c             	mov    0xc(%eax),%eax
c01086c9:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c01086cc:	89 74 24 10          	mov    %esi,0x10(%esp)
c01086d0:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01086d4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01086d8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01086dc:	89 04 24             	mov    %eax,(%esp)
c01086df:	e8 2e d7 ff ff       	call   c0105e12 <copy_range>
c01086e4:	85 c0                	test   %eax,%eax
c01086e6:	74 07                	je     c01086ef <dup_mmap+0xdb>
            return -E_NO_MEM;
c01086e8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01086ed:	eb 1f                	jmp    c010870e <dup_mmap+0xfa>
c01086ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01086f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01086f8:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c01086fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01086fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108700:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108703:	0f 85 54 ff ff ff    	jne    c010865d <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0108709:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010870e:	83 c4 40             	add    $0x40,%esp
c0108711:	5b                   	pop    %ebx
c0108712:	5e                   	pop    %esi
c0108713:	5d                   	pop    %ebp
c0108714:	c3                   	ret    

c0108715 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0108715:	55                   	push   %ebp
c0108716:	89 e5                	mov    %esp,%ebp
c0108718:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c010871b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010871f:	74 0f                	je     c0108730 <exit_mmap+0x1b>
c0108721:	8b 45 08             	mov    0x8(%ebp),%eax
c0108724:	89 04 24             	mov    %eax,(%esp)
c0108727:	e8 4c f9 ff ff       	call   c0108078 <mm_count>
c010872c:	85 c0                	test   %eax,%eax
c010872e:	74 24                	je     c0108754 <exit_mmap+0x3f>
c0108730:	c7 44 24 0c c4 74 11 	movl   $0xc01174c4,0xc(%esp)
c0108737:	c0 
c0108738:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c010873f:	c0 
c0108740:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0108747:	00 
c0108748:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c010874f:	e8 58 87 ff ff       	call   c0100eac <__panic>
    pde_t *pgdir = mm->pgdir;
c0108754:	8b 45 08             	mov    0x8(%ebp),%eax
c0108757:	8b 40 0c             	mov    0xc(%eax),%eax
c010875a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c010875d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108760:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108763:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108766:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0108769:	eb 28                	jmp    c0108793 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c010876b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010876e:	83 e8 10             	sub    $0x10,%eax
c0108771:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0108774:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108777:	8b 50 08             	mov    0x8(%eax),%edx
c010877a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010877d:	8b 40 04             	mov    0x4(%eax),%eax
c0108780:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108784:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108788:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010878b:	89 04 24             	mov    %eax,(%esp)
c010878e:	e8 96 d4 ff ff       	call   c0105c29 <unmap_range>
c0108793:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108796:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108799:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010879c:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c010879f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01087a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087a5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01087a8:	75 c1                	jne    c010876b <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01087aa:	eb 28                	jmp    c01087d4 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c01087ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087af:	83 e8 10             	sub    $0x10,%eax
c01087b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c01087b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01087b8:	8b 50 08             	mov    0x8(%eax),%edx
c01087bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01087be:	8b 40 04             	mov    0x4(%eax),%eax
c01087c1:	89 54 24 08          	mov    %edx,0x8(%esp)
c01087c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01087c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01087cc:	89 04 24             	mov    %eax,(%esp)
c01087cf:	e8 49 d5 ff ff       	call   c0105d1d <exit_range>
c01087d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01087da:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01087dd:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01087e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01087e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087e6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01087e9:	75 c1                	jne    c01087ac <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c01087eb:	c9                   	leave  
c01087ec:	c3                   	ret    

c01087ed <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c01087ed:	55                   	push   %ebp
c01087ee:	89 e5                	mov    %esp,%ebp
c01087f0:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c01087f3:	8b 45 10             	mov    0x10(%ebp),%eax
c01087f6:	8b 55 18             	mov    0x18(%ebp),%edx
c01087f9:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01087fd:	8b 55 14             	mov    0x14(%ebp),%edx
c0108800:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108804:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108808:	8b 45 08             	mov    0x8(%ebp),%eax
c010880b:	89 04 24             	mov    %eax,(%esp)
c010880e:	e8 7b 09 00 00       	call   c010918e <user_mem_check>
c0108813:	85 c0                	test   %eax,%eax
c0108815:	75 07                	jne    c010881e <copy_from_user+0x31>
        return 0;
c0108817:	b8 00 00 00 00       	mov    $0x0,%eax
c010881c:	eb 1e                	jmp    c010883c <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c010881e:	8b 45 14             	mov    0x14(%ebp),%eax
c0108821:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108825:	8b 45 10             	mov    0x10(%ebp),%eax
c0108828:	89 44 24 04          	mov    %eax,0x4(%esp)
c010882c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010882f:	89 04 24             	mov    %eax,(%esp)
c0108832:	e8 3c d0 00 00       	call   c0115873 <memcpy>
    return 1;
c0108837:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010883c:	c9                   	leave  
c010883d:	c3                   	ret    

c010883e <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c010883e:	55                   	push   %ebp
c010883f:	89 e5                	mov    %esp,%ebp
c0108841:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0108844:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108847:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010884e:	00 
c010884f:	8b 55 14             	mov    0x14(%ebp),%edx
c0108852:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108856:	89 44 24 04          	mov    %eax,0x4(%esp)
c010885a:	8b 45 08             	mov    0x8(%ebp),%eax
c010885d:	89 04 24             	mov    %eax,(%esp)
c0108860:	e8 29 09 00 00       	call   c010918e <user_mem_check>
c0108865:	85 c0                	test   %eax,%eax
c0108867:	75 07                	jne    c0108870 <copy_to_user+0x32>
        return 0;
c0108869:	b8 00 00 00 00       	mov    $0x0,%eax
c010886e:	eb 1e                	jmp    c010888e <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0108870:	8b 45 14             	mov    0x14(%ebp),%eax
c0108873:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108877:	8b 45 10             	mov    0x10(%ebp),%eax
c010887a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010887e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108881:	89 04 24             	mov    %eax,(%esp)
c0108884:	e8 ea cf 00 00       	call   c0115873 <memcpy>
    return 1;
c0108889:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010888e:	c9                   	leave  
c010888f:	c3                   	ret    

c0108890 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0108890:	55                   	push   %ebp
c0108891:	89 e5                	mov    %esp,%ebp
c0108893:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108896:	e8 02 00 00 00       	call   c010889d <check_vmm>
}
c010889b:	c9                   	leave  
c010889c:	c3                   	ret    

c010889d <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c010889d:	55                   	push   %ebp
c010889e:	89 e5                	mov    %esp,%ebp
c01088a0:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01088a3:	e8 d2 ca ff ff       	call   c010537a <nr_free_pages>
c01088a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c01088ab:	e8 13 00 00 00       	call   c01088c3 <check_vma_struct>
    check_pgfault();
c01088b0:	e8 a7 04 00 00       	call   c0108d5c <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c01088b5:	c7 04 24 e4 74 11 c0 	movl   $0xc01174e4,(%esp)
c01088bc:	e8 af 7a ff ff       	call   c0100370 <cprintf>
}
c01088c1:	c9                   	leave  
c01088c2:	c3                   	ret    

c01088c3 <check_vma_struct>:

static void
check_vma_struct(void) {
c01088c3:	55                   	push   %ebp
c01088c4:	89 e5                	mov    %esp,%ebp
c01088c6:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01088c9:	e8 ac ca ff ff       	call   c010537a <nr_free_pages>
c01088ce:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c01088d1:	e8 18 f8 ff ff       	call   c01080ee <mm_create>
c01088d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c01088d9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01088dd:	75 24                	jne    c0108903 <check_vma_struct+0x40>
c01088df:	c7 44 24 0c 9b 74 11 	movl   $0xc011749b,0xc(%esp)
c01088e6:	c0 
c01088e7:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c01088ee:	c0 
c01088ef:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01088f6:	00 
c01088f7:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c01088fe:	e8 a9 85 ff ff       	call   c0100eac <__panic>

    int step1 = 10, step2 = step1 * 10;
c0108903:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c010890a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010890d:	89 d0                	mov    %edx,%eax
c010890f:	c1 e0 02             	shl    $0x2,%eax
c0108912:	01 d0                	add    %edx,%eax
c0108914:	01 c0                	add    %eax,%eax
c0108916:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0108919:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010891c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010891f:	eb 70                	jmp    c0108991 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108921:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108924:	89 d0                	mov    %edx,%eax
c0108926:	c1 e0 02             	shl    $0x2,%eax
c0108929:	01 d0                	add    %edx,%eax
c010892b:	83 c0 02             	add    $0x2,%eax
c010892e:	89 c1                	mov    %eax,%ecx
c0108930:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108933:	89 d0                	mov    %edx,%eax
c0108935:	c1 e0 02             	shl    $0x2,%eax
c0108938:	01 d0                	add    %edx,%eax
c010893a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108941:	00 
c0108942:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108946:	89 04 24             	mov    %eax,(%esp)
c0108949:	e8 45 f8 ff ff       	call   c0108193 <vma_create>
c010894e:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0108951:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108955:	75 24                	jne    c010897b <check_vma_struct+0xb8>
c0108957:	c7 44 24 0c fc 74 11 	movl   $0xc01174fc,0xc(%esp)
c010895e:	c0 
c010895f:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108966:	c0 
c0108967:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c010896e:	00 
c010896f:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108976:	e8 31 85 ff ff       	call   c0100eac <__panic>
        insert_vma_struct(mm, vma);
c010897b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010897e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108982:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108985:	89 04 24             	mov    %eax,(%esp)
c0108988:	e8 96 f9 ff ff       	call   c0108323 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c010898d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108991:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108995:	7f 8a                	jg     c0108921 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108997:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010899a:	83 c0 01             	add    $0x1,%eax
c010899d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01089a0:	eb 70                	jmp    c0108a12 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01089a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01089a5:	89 d0                	mov    %edx,%eax
c01089a7:	c1 e0 02             	shl    $0x2,%eax
c01089aa:	01 d0                	add    %edx,%eax
c01089ac:	83 c0 02             	add    $0x2,%eax
c01089af:	89 c1                	mov    %eax,%ecx
c01089b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01089b4:	89 d0                	mov    %edx,%eax
c01089b6:	c1 e0 02             	shl    $0x2,%eax
c01089b9:	01 d0                	add    %edx,%eax
c01089bb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01089c2:	00 
c01089c3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01089c7:	89 04 24             	mov    %eax,(%esp)
c01089ca:	e8 c4 f7 ff ff       	call   c0108193 <vma_create>
c01089cf:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c01089d2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01089d6:	75 24                	jne    c01089fc <check_vma_struct+0x139>
c01089d8:	c7 44 24 0c fc 74 11 	movl   $0xc01174fc,0xc(%esp)
c01089df:	c0 
c01089e0:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c01089e7:	c0 
c01089e8:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c01089ef:	00 
c01089f0:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c01089f7:	e8 b0 84 ff ff       	call   c0100eac <__panic>
        insert_vma_struct(mm, vma);
c01089fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01089ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a03:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a06:	89 04 24             	mov    %eax,(%esp)
c0108a09:	e8 15 f9 ff ff       	call   c0108323 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108a0e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108a12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a15:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108a18:	7e 88                	jle    c01089a2 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0108a1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a1d:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108a20:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108a23:	8b 40 04             	mov    0x4(%eax),%eax
c0108a26:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0108a29:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0108a30:	e9 97 00 00 00       	jmp    c0108acc <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0108a35:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a38:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108a3b:	75 24                	jne    c0108a61 <check_vma_struct+0x19e>
c0108a3d:	c7 44 24 0c 08 75 11 	movl   $0xc0117508,0xc(%esp)
c0108a44:	c0 
c0108a45:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108a4c:	c0 
c0108a4d:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0108a54:	00 
c0108a55:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108a5c:	e8 4b 84 ff ff       	call   c0100eac <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0108a61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108a64:	83 e8 10             	sub    $0x10,%eax
c0108a67:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0108a6a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108a6d:	8b 48 04             	mov    0x4(%eax),%ecx
c0108a70:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108a73:	89 d0                	mov    %edx,%eax
c0108a75:	c1 e0 02             	shl    $0x2,%eax
c0108a78:	01 d0                	add    %edx,%eax
c0108a7a:	39 c1                	cmp    %eax,%ecx
c0108a7c:	75 17                	jne    c0108a95 <check_vma_struct+0x1d2>
c0108a7e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108a81:	8b 48 08             	mov    0x8(%eax),%ecx
c0108a84:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108a87:	89 d0                	mov    %edx,%eax
c0108a89:	c1 e0 02             	shl    $0x2,%eax
c0108a8c:	01 d0                	add    %edx,%eax
c0108a8e:	83 c0 02             	add    $0x2,%eax
c0108a91:	39 c1                	cmp    %eax,%ecx
c0108a93:	74 24                	je     c0108ab9 <check_vma_struct+0x1f6>
c0108a95:	c7 44 24 0c 20 75 11 	movl   $0xc0117520,0xc(%esp)
c0108a9c:	c0 
c0108a9d:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108aa4:	c0 
c0108aa5:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0108aac:	00 
c0108aad:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108ab4:	e8 f3 83 ff ff       	call   c0100eac <__panic>
c0108ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108abc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108abf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108ac2:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108ac5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0108ac8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108acf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108ad2:	0f 8e 5d ff ff ff    	jle    c0108a35 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108ad8:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108adf:	e9 cd 01 00 00       	jmp    c0108cb1 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0108ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ae7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108aeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108aee:	89 04 24             	mov    %eax,(%esp)
c0108af1:	e8 d8 f6 ff ff       	call   c01081ce <find_vma>
c0108af6:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0108af9:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0108afd:	75 24                	jne    c0108b23 <check_vma_struct+0x260>
c0108aff:	c7 44 24 0c 55 75 11 	movl   $0xc0117555,0xc(%esp)
c0108b06:	c0 
c0108b07:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108b0e:	c0 
c0108b0f:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0108b16:	00 
c0108b17:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108b1e:	e8 89 83 ff ff       	call   c0100eac <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108b23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b26:	83 c0 01             	add    $0x1,%eax
c0108b29:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b30:	89 04 24             	mov    %eax,(%esp)
c0108b33:	e8 96 f6 ff ff       	call   c01081ce <find_vma>
c0108b38:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0108b3b:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108b3f:	75 24                	jne    c0108b65 <check_vma_struct+0x2a2>
c0108b41:	c7 44 24 0c 62 75 11 	movl   $0xc0117562,0xc(%esp)
c0108b48:	c0 
c0108b49:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108b50:	c0 
c0108b51:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0108b58:	00 
c0108b59:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108b60:	e8 47 83 ff ff       	call   c0100eac <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0108b65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b68:	83 c0 02             	add    $0x2,%eax
c0108b6b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b72:	89 04 24             	mov    %eax,(%esp)
c0108b75:	e8 54 f6 ff ff       	call   c01081ce <find_vma>
c0108b7a:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c0108b7d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0108b81:	74 24                	je     c0108ba7 <check_vma_struct+0x2e4>
c0108b83:	c7 44 24 0c 6f 75 11 	movl   $0xc011756f,0xc(%esp)
c0108b8a:	c0 
c0108b8b:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108b92:	c0 
c0108b93:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108b9a:	00 
c0108b9b:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108ba2:	e8 05 83 ff ff       	call   c0100eac <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108baa:	83 c0 03             	add    $0x3,%eax
c0108bad:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bb4:	89 04 24             	mov    %eax,(%esp)
c0108bb7:	e8 12 f6 ff ff       	call   c01081ce <find_vma>
c0108bbc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108bbf:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108bc3:	74 24                	je     c0108be9 <check_vma_struct+0x326>
c0108bc5:	c7 44 24 0c 7c 75 11 	movl   $0xc011757c,0xc(%esp)
c0108bcc:	c0 
c0108bcd:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108bd4:	c0 
c0108bd5:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108bdc:	00 
c0108bdd:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108be4:	e8 c3 82 ff ff       	call   c0100eac <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108be9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bec:	83 c0 04             	add    $0x4,%eax
c0108bef:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bf6:	89 04 24             	mov    %eax,(%esp)
c0108bf9:	e8 d0 f5 ff ff       	call   c01081ce <find_vma>
c0108bfe:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108c01:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108c05:	74 24                	je     c0108c2b <check_vma_struct+0x368>
c0108c07:	c7 44 24 0c 89 75 11 	movl   $0xc0117589,0xc(%esp)
c0108c0e:	c0 
c0108c0f:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108c16:	c0 
c0108c17:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108c1e:	00 
c0108c1f:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108c26:	e8 81 82 ff ff       	call   c0100eac <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108c2b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108c2e:	8b 50 04             	mov    0x4(%eax),%edx
c0108c31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c34:	39 c2                	cmp    %eax,%edx
c0108c36:	75 10                	jne    c0108c48 <check_vma_struct+0x385>
c0108c38:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108c3b:	8b 50 08             	mov    0x8(%eax),%edx
c0108c3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c41:	83 c0 02             	add    $0x2,%eax
c0108c44:	39 c2                	cmp    %eax,%edx
c0108c46:	74 24                	je     c0108c6c <check_vma_struct+0x3a9>
c0108c48:	c7 44 24 0c 98 75 11 	movl   $0xc0117598,0xc(%esp)
c0108c4f:	c0 
c0108c50:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108c57:	c0 
c0108c58:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108c5f:	00 
c0108c60:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108c67:	e8 40 82 ff ff       	call   c0100eac <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108c6c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108c6f:	8b 50 04             	mov    0x4(%eax),%edx
c0108c72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c75:	39 c2                	cmp    %eax,%edx
c0108c77:	75 10                	jne    c0108c89 <check_vma_struct+0x3c6>
c0108c79:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108c7c:	8b 50 08             	mov    0x8(%eax),%edx
c0108c7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c82:	83 c0 02             	add    $0x2,%eax
c0108c85:	39 c2                	cmp    %eax,%edx
c0108c87:	74 24                	je     c0108cad <check_vma_struct+0x3ea>
c0108c89:	c7 44 24 0c c8 75 11 	movl   $0xc01175c8,0xc(%esp)
c0108c90:	c0 
c0108c91:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108c98:	c0 
c0108c99:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108ca0:	00 
c0108ca1:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108ca8:	e8 ff 81 ff ff       	call   c0100eac <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108cad:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108cb1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108cb4:	89 d0                	mov    %edx,%eax
c0108cb6:	c1 e0 02             	shl    $0x2,%eax
c0108cb9:	01 d0                	add    %edx,%eax
c0108cbb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108cbe:	0f 8d 20 fe ff ff    	jge    c0108ae4 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108cc4:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108ccb:	eb 70                	jmp    c0108d3d <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108ccd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cd4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108cd7:	89 04 24             	mov    %eax,(%esp)
c0108cda:	e8 ef f4 ff ff       	call   c01081ce <find_vma>
c0108cdf:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108ce2:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108ce6:	74 27                	je     c0108d0f <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108ce8:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108ceb:	8b 50 08             	mov    0x8(%eax),%edx
c0108cee:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108cf1:	8b 40 04             	mov    0x4(%eax),%eax
c0108cf4:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108cf8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108cfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d03:	c7 04 24 f8 75 11 c0 	movl   $0xc01175f8,(%esp)
c0108d0a:	e8 61 76 ff ff       	call   c0100370 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108d0f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108d13:	74 24                	je     c0108d39 <check_vma_struct+0x476>
c0108d15:	c7 44 24 0c 1d 76 11 	movl   $0xc011761d,0xc(%esp)
c0108d1c:	c0 
c0108d1d:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108d24:	c0 
c0108d25:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108d2c:	00 
c0108d2d:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108d34:	e8 73 81 ff ff       	call   c0100eac <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108d39:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108d3d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108d41:	79 8a                	jns    c0108ccd <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108d43:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d46:	89 04 24             	mov    %eax,(%esp)
c0108d49:	e8 06 f7 ff ff       	call   c0108454 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108d4e:	c7 04 24 34 76 11 c0 	movl   $0xc0117634,(%esp)
c0108d55:	e8 16 76 ff ff       	call   c0100370 <cprintf>
}
c0108d5a:	c9                   	leave  
c0108d5b:	c3                   	ret    

c0108d5c <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108d5c:	55                   	push   %ebp
c0108d5d:	89 e5                	mov    %esp,%ebp
c0108d5f:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108d62:	e8 13 c6 ff ff       	call   c010537a <nr_free_pages>
c0108d67:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108d6a:	e8 7f f3 ff ff       	call   c01080ee <mm_create>
c0108d6f:	a3 0c 51 15 c0       	mov    %eax,0xc015510c
    assert(check_mm_struct != NULL);
c0108d74:	a1 0c 51 15 c0       	mov    0xc015510c,%eax
c0108d79:	85 c0                	test   %eax,%eax
c0108d7b:	75 24                	jne    c0108da1 <check_pgfault+0x45>
c0108d7d:	c7 44 24 0c 53 76 11 	movl   $0xc0117653,0xc(%esp)
c0108d84:	c0 
c0108d85:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108d8c:	c0 
c0108d8d:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108d94:	00 
c0108d95:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108d9c:	e8 0b 81 ff ff       	call   c0100eac <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108da1:	a1 0c 51 15 c0       	mov    0xc015510c,%eax
c0108da6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108da9:	8b 15 84 1e 15 c0    	mov    0xc0151e84,%edx
c0108daf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108db2:	89 50 0c             	mov    %edx,0xc(%eax)
c0108db5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108db8:	8b 40 0c             	mov    0xc(%eax),%eax
c0108dbb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108dbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108dc1:	8b 00                	mov    (%eax),%eax
c0108dc3:	85 c0                	test   %eax,%eax
c0108dc5:	74 24                	je     c0108deb <check_pgfault+0x8f>
c0108dc7:	c7 44 24 0c 6b 76 11 	movl   $0xc011766b,0xc(%esp)
c0108dce:	c0 
c0108dcf:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108dd6:	c0 
c0108dd7:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108dde:	00 
c0108ddf:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108de6:	e8 c1 80 ff ff       	call   c0100eac <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108deb:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108df2:	00 
c0108df3:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108dfa:	00 
c0108dfb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108e02:	e8 8c f3 ff ff       	call   c0108193 <vma_create>
c0108e07:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108e0a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108e0e:	75 24                	jne    c0108e34 <check_pgfault+0xd8>
c0108e10:	c7 44 24 0c fc 74 11 	movl   $0xc01174fc,0xc(%esp)
c0108e17:	c0 
c0108e18:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108e1f:	c0 
c0108e20:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108e27:	00 
c0108e28:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108e2f:	e8 78 80 ff ff       	call   c0100eac <__panic>

    insert_vma_struct(mm, vma);
c0108e34:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108e37:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e3e:	89 04 24             	mov    %eax,(%esp)
c0108e41:	e8 dd f4 ff ff       	call   c0108323 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108e46:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108e4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108e50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e54:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e57:	89 04 24             	mov    %eax,(%esp)
c0108e5a:	e8 6f f3 ff ff       	call   c01081ce <find_vma>
c0108e5f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108e62:	74 24                	je     c0108e88 <check_pgfault+0x12c>
c0108e64:	c7 44 24 0c 79 76 11 	movl   $0xc0117679,0xc(%esp)
c0108e6b:	c0 
c0108e6c:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108e73:	c0 
c0108e74:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108e7b:	00 
c0108e7c:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108e83:	e8 24 80 ff ff       	call   c0100eac <__panic>

    int i, sum = 0;
c0108e88:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108e8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108e96:	eb 15                	jmp    c0108ead <check_pgfault+0x151>
        *(char *)(addr + i) = i;
c0108e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e9b:	03 45 dc             	add    -0x24(%ebp),%eax
c0108e9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108ea1:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ea6:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108ea9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108ead:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108eb1:	7e e5                	jle    c0108e98 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108eb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108eba:	eb 13                	jmp    c0108ecf <check_pgfault+0x173>
        sum -= *(char *)(addr + i);
c0108ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ebf:	03 45 dc             	add    -0x24(%ebp),%eax
c0108ec2:	0f b6 00             	movzbl (%eax),%eax
c0108ec5:	0f be c0             	movsbl %al,%eax
c0108ec8:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108ecb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108ecf:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108ed3:	7e e7                	jle    c0108ebc <check_pgfault+0x160>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108ed5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108ed9:	74 24                	je     c0108eff <check_pgfault+0x1a3>
c0108edb:	c7 44 24 0c 93 76 11 	movl   $0xc0117693,0xc(%esp)
c0108ee2:	c0 
c0108ee3:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108eea:	c0 
c0108eeb:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108ef2:	00 
c0108ef3:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108efa:	e8 ad 7f ff ff       	call   c0100eac <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108eff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108f02:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108f05:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108f08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108f0d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f14:	89 04 24             	mov    %eax,(%esp)
c0108f17:	e8 19 d1 ff ff       	call   c0106035 <page_remove>
    free_page(pde2page(pgdir[0]));
c0108f1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f1f:	8b 00                	mov    (%eax),%eax
c0108f21:	89 04 24             	mov    %eax,(%esp)
c0108f24:	e8 ad f1 ff ff       	call   c01080d6 <pde2page>
c0108f29:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108f30:	00 
c0108f31:	89 04 24             	mov    %eax,(%esp)
c0108f34:	e8 0f c4 ff ff       	call   c0105348 <free_pages>
    pgdir[0] = 0;
c0108f39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f3c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108f42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f45:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108f4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f4f:	89 04 24             	mov    %eax,(%esp)
c0108f52:	e8 fd f4 ff ff       	call   c0108454 <mm_destroy>
    check_mm_struct = NULL;
c0108f57:	c7 05 0c 51 15 c0 00 	movl   $0x0,0xc015510c
c0108f5e:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108f61:	e8 14 c4 ff ff       	call   c010537a <nr_free_pages>
c0108f66:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108f69:	74 24                	je     c0108f8f <check_pgfault+0x233>
c0108f6b:	c7 44 24 0c 9c 76 11 	movl   $0xc011769c,0xc(%esp)
c0108f72:	c0 
c0108f73:	c7 44 24 08 0b 74 11 	movl   $0xc011740b,0x8(%esp)
c0108f7a:	c0 
c0108f7b:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108f82:	00 
c0108f83:	c7 04 24 20 74 11 c0 	movl   $0xc0117420,(%esp)
c0108f8a:	e8 1d 7f ff ff       	call   c0100eac <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108f8f:	c7 04 24 c3 76 11 c0 	movl   $0xc01176c3,(%esp)
c0108f96:	e8 d5 73 ff ff       	call   c0100370 <cprintf>
}
c0108f9b:	c9                   	leave  
c0108f9c:	c3                   	ret    

c0108f9d <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108f9d:	55                   	push   %ebp
c0108f9e:	89 e5                	mov    %esp,%ebp
c0108fa0:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108fa3:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108faa:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fad:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108fb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fb4:	89 04 24             	mov    %eax,(%esp)
c0108fb7:	e8 12 f2 ff ff       	call   c01081ce <find_vma>
c0108fbc:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108fbf:	a1 18 1f 15 c0       	mov    0xc0151f18,%eax
c0108fc4:	83 c0 01             	add    $0x1,%eax
c0108fc7:	a3 18 1f 15 c0       	mov    %eax,0xc0151f18
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108fcc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108fd0:	74 0b                	je     c0108fdd <do_pgfault+0x40>
c0108fd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108fd5:	8b 40 04             	mov    0x4(%eax),%eax
c0108fd8:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108fdb:	76 18                	jbe    c0108ff5 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108fdd:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fe0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108fe4:	c7 04 24 e0 76 11 c0 	movl   $0xc01176e0,(%esp)
c0108feb:	e8 80 73 ff ff       	call   c0100370 <cprintf>
        goto failed;
c0108ff0:	e9 94 01 00 00       	jmp    c0109189 <do_pgfault+0x1ec>
    }
    //check the error_code
    switch (error_code & 3) {
c0108ff5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108ff8:	83 e0 03             	and    $0x3,%eax
c0108ffb:	85 c0                	test   %eax,%eax
c0108ffd:	74 34                	je     c0109033 <do_pgfault+0x96>
c0108fff:	83 f8 01             	cmp    $0x1,%eax
c0109002:	74 1e                	je     c0109022 <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0109004:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109007:	8b 40 0c             	mov    0xc(%eax),%eax
c010900a:	83 e0 02             	and    $0x2,%eax
c010900d:	85 c0                	test   %eax,%eax
c010900f:	75 40                	jne    c0109051 <do_pgfault+0xb4>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0109011:	c7 04 24 10 77 11 c0 	movl   $0xc0117710,(%esp)
c0109018:	e8 53 73 ff ff       	call   c0100370 <cprintf>
            goto failed;
c010901d:	e9 67 01 00 00       	jmp    c0109189 <do_pgfault+0x1ec>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0109022:	c7 04 24 70 77 11 c0 	movl   $0xc0117770,(%esp)
c0109029:	e8 42 73 ff ff       	call   c0100370 <cprintf>
        goto failed;
c010902e:	e9 56 01 00 00       	jmp    c0109189 <do_pgfault+0x1ec>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0109033:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109036:	8b 40 0c             	mov    0xc(%eax),%eax
c0109039:	83 e0 05             	and    $0x5,%eax
c010903c:	85 c0                	test   %eax,%eax
c010903e:	75 12                	jne    c0109052 <do_pgfault+0xb5>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0109040:	c7 04 24 a8 77 11 c0 	movl   $0xc01177a8,(%esp)
c0109047:	e8 24 73 ff ff       	call   c0100370 <cprintf>
            goto failed;
c010904c:	e9 38 01 00 00       	jmp    c0109189 <do_pgfault+0x1ec>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c0109051:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0109052:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0109059:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010905c:	8b 40 0c             	mov    0xc(%eax),%eax
c010905f:	83 e0 02             	and    $0x2,%eax
c0109062:	85 c0                	test   %eax,%eax
c0109064:	74 04                	je     c010906a <do_pgfault+0xcd>
        perm |= PTE_W;
c0109066:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c010906a:	8b 45 10             	mov    0x10(%ebp),%eax
c010906d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109070:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109073:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109078:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c010907b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0109082:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    * VARIABLES:
    *   mm->pgdir : the PDT of these vma
    *
    */
	/*LAB3 EXERCISE 1: 2011010312 */
    ptep = get_pte(mm->pgdir, addr, 1);     //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
c0109089:	8b 45 08             	mov    0x8(%ebp),%eax
c010908c:	8b 40 0c             	mov    0xc(%eax),%eax
c010908f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0109096:	00 
c0109097:	8b 55 10             	mov    0x10(%ebp),%edx
c010909a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010909e:	89 04 24             	mov    %eax,(%esp)
c01090a1:	e8 9d c9 ff ff       	call   c0105a43 <get_pte>
c01090a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (ptep == NULL) {
c01090a9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01090ad:	75 11                	jne    c01090c0 <do_pgfault+0x123>
		cprintf("Cannot find page table entry");
c01090af:	c7 04 24 0b 78 11 c0 	movl   $0xc011780b,(%esp)
c01090b6:	e8 b5 72 ff ff       	call   c0100370 <cprintf>
		goto failed;
c01090bb:	e9 c9 00 00 00       	jmp    c0109189 <do_pgfault+0x1ec>
	}
    if (*ptep == NULL) {					//(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c01090c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01090c3:	8b 00                	mov    (%eax),%eax
c01090c5:	85 c0                	test   %eax,%eax
c01090c7:	75 35                	jne    c01090fe <do_pgfault+0x161>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c01090c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01090cc:	8b 40 0c             	mov    0xc(%eax),%eax
c01090cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01090d2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01090d6:	8b 55 10             	mov    0x10(%ebp),%edx
c01090d9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01090dd:	89 04 24             	mov    %eax,(%esp)
c01090e0:	e8 af d0 ff ff       	call   c0106194 <pgdir_alloc_page>
c01090e5:	85 c0                	test   %eax,%eax
c01090e7:	0f 85 95 00 00 00    	jne    c0109182 <do_pgfault+0x1e5>
            cprintf("Cannot allocate new page\n");
c01090ed:	c7 04 24 28 78 11 c0 	movl   $0xc0117828,(%esp)
c01090f4:	e8 77 72 ff ff       	call   c0100370 <cprintf>
            goto failed;
c01090f9:	e9 8b 00 00 00       	jmp    c0109189 <do_pgfault+0x1ec>
    *                               find the addr of disk page, read the content of disk page into this memroy page
    *    page_insert ： build the map of phy addr of an Page with the linear addr la
    *    swap_map_swappable ： set the page swappable
    */

		struct Page *page = NULL;
c01090fe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		ret = swap_in(mm, addr, &page);
c0109105:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0109108:	89 44 24 08          	mov    %eax,0x8(%esp)
c010910c:	8b 45 10             	mov    0x10(%ebp),%eax
c010910f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109113:	8b 45 08             	mov    0x8(%ebp),%eax
c0109116:	89 04 24             	mov    %eax,(%esp)
c0109119:	e8 22 e1 ff ff       	call   c0107240 <swap_in>
c010911e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (ret != 0) {
c0109121:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109125:	74 0e                	je     c0109135 <do_pgfault+0x198>
			cprintf("swap in failed\n");
c0109127:	c7 04 24 42 78 11 c0 	movl   $0xc0117842,(%esp)
c010912e:	e8 3d 72 ff ff       	call   c0100370 <cprintf>
			goto failed;
c0109133:	eb 54                	jmp    c0109189 <do_pgfault+0x1ec>
		}    
		page_insert(mm->pgdir, page, addr, perm);
c0109135:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109138:	8b 45 08             	mov    0x8(%ebp),%eax
c010913b:	8b 40 0c             	mov    0xc(%eax),%eax
c010913e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0109141:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0109145:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0109148:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010914c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109150:	89 04 24             	mov    %eax,(%esp)
c0109153:	e8 21 cf ff ff       	call   c0106079 <page_insert>
		swap_map_swappable(mm, addr, page, 1);
c0109158:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010915b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109162:	00 
c0109163:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109167:	8b 45 10             	mov    0x10(%ebp),%eax
c010916a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010916e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109171:	89 04 24             	mov    %eax,(%esp)
c0109174:	e8 fe de ff ff       	call   c0107077 <swap_map_swappable>
		page->pra_vaddr = addr;
c0109179:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010917c:	8b 55 10             	mov    0x10(%ebp),%edx
c010917f:	89 50 1c             	mov    %edx,0x1c(%eax)
	}
	ret = 0;
c0109182:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0109189:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010918c:	c9                   	leave  
c010918d:	c3                   	ret    

c010918e <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010918e:	55                   	push   %ebp
c010918f:	89 e5                	mov    %esp,%ebp
c0109191:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0109194:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109198:	0f 84 e0 00 00 00    	je     c010927e <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c010919e:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01091a5:	76 1c                	jbe    c01091c3 <user_mem_check+0x35>
c01091a7:	8b 45 10             	mov    0x10(%ebp),%eax
c01091aa:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091ad:	01 d0                	add    %edx,%eax
c01091af:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01091b2:	76 0f                	jbe    c01091c3 <user_mem_check+0x35>
c01091b4:	8b 45 10             	mov    0x10(%ebp),%eax
c01091b7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091ba:	01 d0                	add    %edx,%eax
c01091bc:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c01091c1:	76 0a                	jbe    c01091cd <user_mem_check+0x3f>
            return 0;
c01091c3:	b8 00 00 00 00       	mov    $0x0,%eax
c01091c8:	e9 e2 00 00 00       	jmp    c01092af <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01091cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01091d0:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01091d3:	8b 45 10             	mov    0x10(%ebp),%eax
c01091d6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091d9:	01 d0                	add    %edx,%eax
c01091db:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01091de:	e9 88 00 00 00       	jmp    c010926b <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01091e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01091e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01091ed:	89 04 24             	mov    %eax,(%esp)
c01091f0:	e8 d9 ef ff ff       	call   c01081ce <find_vma>
c01091f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01091f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01091fc:	74 0b                	je     c0109209 <user_mem_check+0x7b>
c01091fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109201:	8b 40 04             	mov    0x4(%eax),%eax
c0109204:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109207:	76 0a                	jbe    c0109213 <user_mem_check+0x85>
                return 0;
c0109209:	b8 00 00 00 00       	mov    $0x0,%eax
c010920e:	e9 9c 00 00 00       	jmp    c01092af <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0109213:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109216:	8b 50 0c             	mov    0xc(%eax),%edx
c0109219:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010921d:	74 07                	je     c0109226 <user_mem_check+0x98>
c010921f:	b8 02 00 00 00       	mov    $0x2,%eax
c0109224:	eb 05                	jmp    c010922b <user_mem_check+0x9d>
c0109226:	b8 01 00 00 00       	mov    $0x1,%eax
c010922b:	21 d0                	and    %edx,%eax
c010922d:	85 c0                	test   %eax,%eax
c010922f:	75 07                	jne    c0109238 <user_mem_check+0xaa>
                return 0;
c0109231:	b8 00 00 00 00       	mov    $0x0,%eax
c0109236:	eb 77                	jmp    c01092af <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0109238:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010923c:	74 24                	je     c0109262 <user_mem_check+0xd4>
c010923e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109241:	8b 40 0c             	mov    0xc(%eax),%eax
c0109244:	83 e0 08             	and    $0x8,%eax
c0109247:	85 c0                	test   %eax,%eax
c0109249:	74 17                	je     c0109262 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010924b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010924e:	8b 40 04             	mov    0x4(%eax),%eax
c0109251:	05 00 10 00 00       	add    $0x1000,%eax
c0109256:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109259:	76 07                	jbe    c0109262 <user_mem_check+0xd4>
                    return 0;
c010925b:	b8 00 00 00 00       	mov    $0x0,%eax
c0109260:	eb 4d                	jmp    c01092af <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0109262:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109265:	8b 40 08             	mov    0x8(%eax),%eax
c0109268:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c010926b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010926e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109271:	0f 82 6c ff ff ff    	jb     c01091e3 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0109277:	b8 01 00 00 00       	mov    $0x1,%eax
c010927c:	eb 31                	jmp    c01092af <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010927e:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0109285:	76 23                	jbe    c01092aa <user_mem_check+0x11c>
c0109287:	8b 45 10             	mov    0x10(%ebp),%eax
c010928a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010928d:	01 d0                	add    %edx,%eax
c010928f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109292:	76 16                	jbe    c01092aa <user_mem_check+0x11c>
c0109294:	8b 45 10             	mov    0x10(%ebp),%eax
c0109297:	8b 55 0c             	mov    0xc(%ebp),%edx
c010929a:	01 d0                	add    %edx,%eax
c010929c:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c01092a1:	77 07                	ja     c01092aa <user_mem_check+0x11c>
c01092a3:	b8 01 00 00 00       	mov    $0x1,%eax
c01092a8:	eb 05                	jmp    c01092af <user_mem_check+0x121>
c01092aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01092af:	c9                   	leave  
c01092b0:	c3                   	ret    

c01092b1 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c01092b1:	55                   	push   %ebp
c01092b2:	89 e5                	mov    %esp,%ebp
c01092b4:	83 ec 28             	sub    $0x28,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c01092b7:	8b 45 10             	mov    0x10(%ebp),%eax
c01092ba:	05 00 10 00 00       	add    $0x1000,%eax
c01092bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01092c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092c5:	89 c2                	mov    %eax,%edx
c01092c7:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c01092cd:	8b 45 10             	mov    0x10(%ebp),%eax
c01092d0:	89 d1                	mov    %edx,%ecx
c01092d2:	29 c1                	sub    %eax,%ecx
c01092d4:	89 c8                	mov    %ecx,%eax
c01092d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c01092d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092dc:	3b 45 14             	cmp    0x14(%ebp),%eax
c01092df:	76 06                	jbe    c01092e7 <copy_string+0x36>
            part = maxn;
c01092e1:	8b 45 14             	mov    0x14(%ebp),%eax
c01092e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c01092e7:	8b 45 10             	mov    0x10(%ebp),%eax
c01092ea:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01092f1:	00 
c01092f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01092f5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01092f9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109300:	89 04 24             	mov    %eax,(%esp)
c0109303:	e8 86 fe ff ff       	call   c010918e <user_mem_check>
c0109308:	85 c0                	test   %eax,%eax
c010930a:	75 0a                	jne    c0109316 <copy_string+0x65>
            return 0;
c010930c:	b8 00 00 00 00       	mov    $0x0,%eax
c0109311:	e9 86 00 00 00       	jmp    c010939c <copy_string+0xeb>
        }
        if ((alen = strnlen(src, part)) < part) {
c0109316:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109319:	89 44 24 04          	mov    %eax,0x4(%esp)
c010931d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109320:	89 04 24             	mov    %eax,(%esp)
c0109323:	e8 17 c1 00 00       	call   c011543f <strnlen>
c0109328:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010932b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010932e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109331:	73 23                	jae    c0109356 <copy_string+0xa5>
            memcpy(dst, src, alen + 1);
c0109333:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109336:	83 c0 01             	add    $0x1,%eax
c0109339:	89 44 24 08          	mov    %eax,0x8(%esp)
c010933d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109340:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109344:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109347:	89 04 24             	mov    %eax,(%esp)
c010934a:	e8 24 c5 00 00       	call   c0115873 <memcpy>
            return 1;
c010934f:	b8 01 00 00 00       	mov    $0x1,%eax
c0109354:	eb 46                	jmp    c010939c <copy_string+0xeb>
        }
        if (part == maxn) {
c0109356:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109359:	3b 45 14             	cmp    0x14(%ebp),%eax
c010935c:	75 07                	jne    c0109365 <copy_string+0xb4>
            return 0;
c010935e:	b8 00 00 00 00       	mov    $0x0,%eax
c0109363:	eb 37                	jmp    c010939c <copy_string+0xeb>
        }
        memcpy(dst, src, part);
c0109365:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109368:	89 44 24 08          	mov    %eax,0x8(%esp)
c010936c:	8b 45 10             	mov    0x10(%ebp),%eax
c010936f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109373:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109376:	89 04 24             	mov    %eax,(%esp)
c0109379:	e8 f5 c4 00 00       	call   c0115873 <memcpy>
        dst += part, src += part, maxn -= part;
c010937e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109381:	01 45 0c             	add    %eax,0xc(%ebp)
c0109384:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109387:	01 45 10             	add    %eax,0x10(%ebp)
c010938a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010938d:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c0109390:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c0109397:	e9 3d ff ff ff       	jmp    c01092d9 <copy_string+0x28>
}
c010939c:	c9                   	leave  
c010939d:	c3                   	ret    
	...

c01093a0 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c01093a0:	55                   	push   %ebp
c01093a1:	89 e5                	mov    %esp,%ebp
c01093a3:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c01093a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01093a9:	8b 04 85 20 51 15 c0 	mov    -0x3feaaee0(,%eax,4),%eax
c01093b0:	83 f8 01             	cmp    $0x1,%eax
c01093b3:	0f 85 85 00 00 00    	jne    c010943e <phi_test_sema+0x9e>
c01093b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01093bc:	8d 48 04             	lea    0x4(%eax),%ecx
c01093bf:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01093c4:	89 c8                	mov    %ecx,%eax
c01093c6:	f7 ea                	imul   %edx
c01093c8:	d1 fa                	sar    %edx
c01093ca:	89 c8                	mov    %ecx,%eax
c01093cc:	c1 f8 1f             	sar    $0x1f,%eax
c01093cf:	29 c2                	sub    %eax,%edx
c01093d1:	89 d0                	mov    %edx,%eax
c01093d3:	c1 e0 02             	shl    $0x2,%eax
c01093d6:	01 d0                	add    %edx,%eax
c01093d8:	89 ca                	mov    %ecx,%edx
c01093da:	29 c2                	sub    %eax,%edx
c01093dc:	8b 04 95 20 51 15 c0 	mov    -0x3feaaee0(,%edx,4),%eax
c01093e3:	83 f8 02             	cmp    $0x2,%eax
c01093e6:	74 56                	je     c010943e <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c01093e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01093eb:	8d 48 01             	lea    0x1(%eax),%ecx
c01093ee:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01093f3:	89 c8                	mov    %ecx,%eax
c01093f5:	f7 ea                	imul   %edx
c01093f7:	d1 fa                	sar    %edx
c01093f9:	89 c8                	mov    %ecx,%eax
c01093fb:	c1 f8 1f             	sar    $0x1f,%eax
c01093fe:	29 c2                	sub    %eax,%edx
c0109400:	89 d0                	mov    %edx,%eax
c0109402:	c1 e0 02             	shl    $0x2,%eax
c0109405:	01 d0                	add    %edx,%eax
c0109407:	89 ca                	mov    %ecx,%edx
c0109409:	29 c2                	sub    %eax,%edx
c010940b:	8b 04 95 20 51 15 c0 	mov    -0x3feaaee0(,%edx,4),%eax
c0109412:	83 f8 02             	cmp    $0x2,%eax
c0109415:	74 27                	je     c010943e <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c0109417:	8b 45 08             	mov    0x8(%ebp),%eax
c010941a:	c7 04 85 20 51 15 c0 	movl   $0x2,-0x3feaaee0(,%eax,4)
c0109421:	02 00 00 00 
        up(&s[i]);
c0109425:	8b 55 08             	mov    0x8(%ebp),%edx
c0109428:	89 d0                	mov    %edx,%eax
c010942a:	01 c0                	add    %eax,%eax
c010942c:	01 d0                	add    %edx,%eax
c010942e:	c1 e0 02             	shl    $0x2,%eax
c0109431:	05 c0 51 15 c0       	add    $0xc01551c0,%eax
c0109436:	89 04 24             	mov    %eax,(%esp)
c0109439:	e8 e3 09 00 00       	call   c0109e21 <up>
    }
}
c010943e:	c9                   	leave  
c010943f:	c3                   	ret    

c0109440 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0109440:	55                   	push   %ebp
c0109441:	89 e5                	mov    %esp,%ebp
c0109443:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109446:	c7 04 24 48 51 15 c0 	movl   $0xc0155148,(%esp)
c010944d:	e8 ea 09 00 00       	call   c0109e3c <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0109452:	8b 45 08             	mov    0x8(%ebp),%eax
c0109455:	c7 04 85 20 51 15 c0 	movl   $0x1,-0x3feaaee0(,%eax,4)
c010945c:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0109460:	8b 45 08             	mov    0x8(%ebp),%eax
c0109463:	89 04 24             	mov    %eax,(%esp)
c0109466:	e8 35 ff ff ff       	call   c01093a0 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c010946b:	c7 04 24 48 51 15 c0 	movl   $0xc0155148,(%esp)
c0109472:	e8 aa 09 00 00       	call   c0109e21 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0109477:	8b 55 08             	mov    0x8(%ebp),%edx
c010947a:	89 d0                	mov    %edx,%eax
c010947c:	01 c0                	add    %eax,%eax
c010947e:	01 d0                	add    %edx,%eax
c0109480:	c1 e0 02             	shl    $0x2,%eax
c0109483:	05 c0 51 15 c0       	add    $0xc01551c0,%eax
c0109488:	89 04 24             	mov    %eax,(%esp)
c010948b:	e8 ac 09 00 00       	call   c0109e3c <down>
}
c0109490:	c9                   	leave  
c0109491:	c3                   	ret    

c0109492 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0109492:	55                   	push   %ebp
c0109493:	89 e5                	mov    %esp,%ebp
c0109495:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109498:	c7 04 24 48 51 15 c0 	movl   $0xc0155148,(%esp)
c010949f:	e8 98 09 00 00       	call   c0109e3c <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c01094a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01094a7:	c7 04 85 20 51 15 c0 	movl   $0x0,-0x3feaaee0(,%eax,4)
c01094ae:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c01094b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01094b5:	8d 48 04             	lea    0x4(%eax),%ecx
c01094b8:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094bd:	89 c8                	mov    %ecx,%eax
c01094bf:	f7 ea                	imul   %edx
c01094c1:	d1 fa                	sar    %edx
c01094c3:	89 c8                	mov    %ecx,%eax
c01094c5:	c1 f8 1f             	sar    $0x1f,%eax
c01094c8:	29 c2                	sub    %eax,%edx
c01094ca:	89 d0                	mov    %edx,%eax
c01094cc:	c1 e0 02             	shl    $0x2,%eax
c01094cf:	01 d0                	add    %edx,%eax
c01094d1:	89 ca                	mov    %ecx,%edx
c01094d3:	29 c2                	sub    %eax,%edx
c01094d5:	89 14 24             	mov    %edx,(%esp)
c01094d8:	e8 c3 fe ff ff       	call   c01093a0 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c01094dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01094e0:	8d 48 01             	lea    0x1(%eax),%ecx
c01094e3:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094e8:	89 c8                	mov    %ecx,%eax
c01094ea:	f7 ea                	imul   %edx
c01094ec:	d1 fa                	sar    %edx
c01094ee:	89 c8                	mov    %ecx,%eax
c01094f0:	c1 f8 1f             	sar    $0x1f,%eax
c01094f3:	29 c2                	sub    %eax,%edx
c01094f5:	89 d0                	mov    %edx,%eax
c01094f7:	c1 e0 02             	shl    $0x2,%eax
c01094fa:	01 d0                	add    %edx,%eax
c01094fc:	89 ca                	mov    %ecx,%edx
c01094fe:	29 c2                	sub    %eax,%edx
c0109500:	89 14 24             	mov    %edx,(%esp)
c0109503:	e8 98 fe ff ff       	call   c01093a0 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109508:	c7 04 24 48 51 15 c0 	movl   $0xc0155148,(%esp)
c010950f:	e8 0d 09 00 00       	call   c0109e21 <up>
}
c0109514:	c9                   	leave  
c0109515:	c3                   	ret    

c0109516 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c0109516:	55                   	push   %ebp
c0109517:	89 e5                	mov    %esp,%ebp
c0109519:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c010951c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0109523:	8b 45 08             	mov    0x8(%ebp),%eax
c0109526:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0109529:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010952c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109530:	c7 04 24 54 78 11 c0 	movl   $0xc0117854,(%esp)
c0109537:	e8 34 6e ff ff       	call   c0100370 <cprintf>
    while(iter++<TIMES)
c010953c:	eb 62                	jmp    c01095a0 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c010953e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109541:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109545:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109548:	89 44 24 04          	mov    %eax,0x4(%esp)
c010954c:	c7 04 24 74 78 11 c0 	movl   $0xc0117874,(%esp)
c0109553:	e8 18 6e ff ff       	call   c0100370 <cprintf>
        do_sleep(SLEEP_TIME);
c0109558:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010955f:	e8 97 4a 00 00       	call   c010dffb <do_sleep>
        phi_take_forks_sema(i); 
c0109564:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109567:	89 04 24             	mov    %eax,(%esp)
c010956a:	e8 d1 fe ff ff       	call   c0109440 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c010956f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109572:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109576:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109579:	89 44 24 04          	mov    %eax,0x4(%esp)
c010957d:	c7 04 24 a4 78 11 c0 	movl   $0xc01178a4,(%esp)
c0109584:	e8 e7 6d ff ff       	call   c0100370 <cprintf>
        do_sleep(SLEEP_TIME);
c0109589:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109590:	e8 66 4a 00 00       	call   c010dffb <do_sleep>
        phi_put_forks_sema(i); 
c0109595:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109598:	89 04 24             	mov    %eax,(%esp)
c010959b:	e8 f2 fe ff ff       	call   c0109492 <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c01095a0:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
c01095a4:	0f 9e c0             	setle  %al
c01095a7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01095ab:	84 c0                	test   %al,%al
c01095ad:	75 8f                	jne    c010953e <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c01095af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095b6:	c7 04 24 cf 78 11 c0 	movl   $0xc01178cf,(%esp)
c01095bd:	e8 ae 6d ff ff       	call   c0100370 <cprintf>
    return 0;    
c01095c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01095c7:	c9                   	leave  
c01095c8:	c3                   	ret    

c01095c9 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c01095c9:	55                   	push   %ebp
c01095ca:	89 e5                	mov    %esp,%ebp
c01095cc:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c01095cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01095d2:	8b 04 85 80 51 15 c0 	mov    -0x3feaae80(,%eax,4),%eax
c01095d9:	83 f8 01             	cmp    $0x1,%eax
c01095dc:	0f 85 b5 00 00 00    	jne    c0109697 <phi_test_condvar+0xce>
c01095e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01095e5:	8d 48 04             	lea    0x4(%eax),%ecx
c01095e8:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01095ed:	89 c8                	mov    %ecx,%eax
c01095ef:	f7 ea                	imul   %edx
c01095f1:	d1 fa                	sar    %edx
c01095f3:	89 c8                	mov    %ecx,%eax
c01095f5:	c1 f8 1f             	sar    $0x1f,%eax
c01095f8:	29 c2                	sub    %eax,%edx
c01095fa:	89 d0                	mov    %edx,%eax
c01095fc:	c1 e0 02             	shl    $0x2,%eax
c01095ff:	01 d0                	add    %edx,%eax
c0109601:	89 ca                	mov    %ecx,%edx
c0109603:	29 c2                	sub    %eax,%edx
c0109605:	8b 04 95 80 51 15 c0 	mov    -0x3feaae80(,%edx,4),%eax
c010960c:	83 f8 02             	cmp    $0x2,%eax
c010960f:	0f 84 82 00 00 00    	je     c0109697 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c0109615:	8b 45 08             	mov    0x8(%ebp),%eax
c0109618:	8d 48 01             	lea    0x1(%eax),%ecx
c010961b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109620:	89 c8                	mov    %ecx,%eax
c0109622:	f7 ea                	imul   %edx
c0109624:	d1 fa                	sar    %edx
c0109626:	89 c8                	mov    %ecx,%eax
c0109628:	c1 f8 1f             	sar    $0x1f,%eax
c010962b:	29 c2                	sub    %eax,%edx
c010962d:	89 d0                	mov    %edx,%eax
c010962f:	c1 e0 02             	shl    $0x2,%eax
c0109632:	01 d0                	add    %edx,%eax
c0109634:	89 ca                	mov    %ecx,%edx
c0109636:	29 c2                	sub    %eax,%edx
c0109638:	8b 04 95 80 51 15 c0 	mov    -0x3feaae80(,%edx,4),%eax
c010963f:	83 f8 02             	cmp    $0x2,%eax
c0109642:	74 53                	je     c0109697 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c0109644:	8b 45 08             	mov    0x8(%ebp),%eax
c0109647:	89 44 24 04          	mov    %eax,0x4(%esp)
c010964b:	c7 04 24 ec 78 11 c0 	movl   $0xc01178ec,(%esp)
c0109652:	e8 19 6d ff ff       	call   c0100370 <cprintf>
        state_condvar[i] = EATING ;
c0109657:	8b 45 08             	mov    0x8(%ebp),%eax
c010965a:	c7 04 85 80 51 15 c0 	movl   $0x2,-0x3feaae80(,%eax,4)
c0109661:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c0109665:	8b 45 08             	mov    0x8(%ebp),%eax
c0109668:	89 44 24 04          	mov    %eax,0x4(%esp)
c010966c:	c7 04 24 20 79 11 c0 	movl   $0xc0117920,(%esp)
c0109673:	e8 f8 6c ff ff       	call   c0100370 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c0109678:	a1 80 0a 15 c0       	mov    0xc0150a80,%eax
c010967d:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109680:	8b 55 08             	mov    0x8(%ebp),%edx
c0109683:	89 d0                	mov    %edx,%eax
c0109685:	c1 e0 02             	shl    $0x2,%eax
c0109688:	01 d0                	add    %edx,%eax
c010968a:	c1 e0 02             	shl    $0x2,%eax
c010968d:	01 c8                	add    %ecx,%eax
c010968f:	89 04 24             	mov    %eax,(%esp)
c0109692:	e8 7b 04 00 00       	call   c0109b12 <cond_signal>
    }
}
c0109697:	c9                   	leave  
c0109698:	c3                   	ret    

c0109699 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0109699:	55                   	push   %ebp
c010969a:	89 e5                	mov    %esp,%ebp
c010969c:	83 ec 18             	sub    $0x18,%esp
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2011010312
	 down(&(mtp->mutex));
c010969f:	a1 80 0a 15 c0       	mov    0xc0150a80,%eax
c01096a4:	89 04 24             	mov    %eax,(%esp)
c01096a7:	e8 90 07 00 00       	call   c0109e3c <down>
	 state_condvar[i] = HUNGRY;
c01096ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01096af:	c7 04 85 80 51 15 c0 	movl   $0x1,-0x3feaae80(,%eax,4)
c01096b6:	01 00 00 00 
	 phi_test_condvar(i);
c01096ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01096bd:	89 04 24             	mov    %eax,(%esp)
c01096c0:	e8 04 ff ff ff       	call   c01095c9 <phi_test_condvar>
	 if(state_condvar[i] != EATING)
c01096c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01096c8:	8b 04 85 80 51 15 c0 	mov    -0x3feaae80(,%eax,4),%eax
c01096cf:	83 f8 02             	cmp    $0x2,%eax
c01096d2:	74 1f                	je     c01096f3 <phi_take_forks_condvar+0x5a>
		 cond_wait(&(mtp->cv[i]));
c01096d4:	a1 80 0a 15 c0       	mov    0xc0150a80,%eax
c01096d9:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01096dc:	8b 55 08             	mov    0x8(%ebp),%edx
c01096df:	89 d0                	mov    %edx,%eax
c01096e1:	c1 e0 02             	shl    $0x2,%eax
c01096e4:	01 d0                	add    %edx,%eax
c01096e6:	c1 e0 02             	shl    $0x2,%eax
c01096e9:	01 c8                	add    %ecx,%eax
c01096eb:	89 04 24             	mov    %eax,(%esp)
c01096ee:	e8 c5 04 00 00       	call   c0109bb8 <cond_wait>
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c01096f3:	a1 80 0a 15 c0       	mov    0xc0150a80,%eax
c01096f8:	8b 40 18             	mov    0x18(%eax),%eax
c01096fb:	85 c0                	test   %eax,%eax
c01096fd:	7e 12                	jle    c0109711 <phi_take_forks_condvar+0x78>
         up(&(mtp->next));
c01096ff:	a1 80 0a 15 c0       	mov    0xc0150a80,%eax
c0109704:	83 c0 0c             	add    $0xc,%eax
c0109707:	89 04 24             	mov    %eax,(%esp)
c010970a:	e8 12 07 00 00       	call   c0109e21 <up>
c010970f:	eb 0d                	jmp    c010971e <phi_take_forks_condvar+0x85>
      else
         up(&(mtp->mutex));
c0109711:	a1 80 0a 15 c0       	mov    0xc0150a80,%eax
c0109716:	89 04 24             	mov    %eax,(%esp)
c0109719:	e8 03 07 00 00       	call   c0109e21 <up>
}
c010971e:	c9                   	leave  
c010971f:	c3                   	ret    

c0109720 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0109720:	55                   	push   %ebp
c0109721:	89 e5                	mov    %esp,%ebp
c0109723:	83 ec 18             	sub    $0x18,%esp
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2011010312
	 down(&(mtp->mutex));
c0109726:	a1 80 0a 15 c0       	mov    0xc0150a80,%eax
c010972b:	89 04 24             	mov    %eax,(%esp)
c010972e:	e8 09 07 00 00       	call   c0109e3c <down>
	 state_condvar[i] = THINKING;
c0109733:	8b 45 08             	mov    0x8(%ebp),%eax
c0109736:	c7 04 85 80 51 15 c0 	movl   $0x0,-0x3feaae80(,%eax,4)
c010973d:	00 00 00 00 
	 phi_test_condvar(LEFT);
c0109741:	8b 45 08             	mov    0x8(%ebp),%eax
c0109744:	8d 48 04             	lea    0x4(%eax),%ecx
c0109747:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010974c:	89 c8                	mov    %ecx,%eax
c010974e:	f7 ea                	imul   %edx
c0109750:	d1 fa                	sar    %edx
c0109752:	89 c8                	mov    %ecx,%eax
c0109754:	c1 f8 1f             	sar    $0x1f,%eax
c0109757:	29 c2                	sub    %eax,%edx
c0109759:	89 d0                	mov    %edx,%eax
c010975b:	c1 e0 02             	shl    $0x2,%eax
c010975e:	01 d0                	add    %edx,%eax
c0109760:	89 ca                	mov    %ecx,%edx
c0109762:	29 c2                	sub    %eax,%edx
c0109764:	89 14 24             	mov    %edx,(%esp)
c0109767:	e8 5d fe ff ff       	call   c01095c9 <phi_test_condvar>
	 phi_test_condvar(RIGHT);
c010976c:	8b 45 08             	mov    0x8(%ebp),%eax
c010976f:	8d 48 01             	lea    0x1(%eax),%ecx
c0109772:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109777:	89 c8                	mov    %ecx,%eax
c0109779:	f7 ea                	imul   %edx
c010977b:	d1 fa                	sar    %edx
c010977d:	89 c8                	mov    %ecx,%eax
c010977f:	c1 f8 1f             	sar    $0x1f,%eax
c0109782:	29 c2                	sub    %eax,%edx
c0109784:	89 d0                	mov    %edx,%eax
c0109786:	c1 e0 02             	shl    $0x2,%eax
c0109789:	01 d0                	add    %edx,%eax
c010978b:	89 ca                	mov    %ecx,%edx
c010978d:	29 c2                	sub    %eax,%edx
c010978f:	89 14 24             	mov    %edx,(%esp)
c0109792:	e8 32 fe ff ff       	call   c01095c9 <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c0109797:	a1 80 0a 15 c0       	mov    0xc0150a80,%eax
c010979c:	8b 40 18             	mov    0x18(%eax),%eax
c010979f:	85 c0                	test   %eax,%eax
c01097a1:	7e 12                	jle    c01097b5 <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c01097a3:	a1 80 0a 15 c0       	mov    0xc0150a80,%eax
c01097a8:	83 c0 0c             	add    $0xc,%eax
c01097ab:	89 04 24             	mov    %eax,(%esp)
c01097ae:	e8 6e 06 00 00       	call   c0109e21 <up>
c01097b3:	eb 0d                	jmp    c01097c2 <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c01097b5:	a1 80 0a 15 c0       	mov    0xc0150a80,%eax
c01097ba:	89 04 24             	mov    %eax,(%esp)
c01097bd:	e8 5f 06 00 00       	call   c0109e21 <up>
}
c01097c2:	c9                   	leave  
c01097c3:	c3                   	ret    

c01097c4 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c01097c4:	55                   	push   %ebp
c01097c5:	89 e5                	mov    %esp,%ebp
c01097c7:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c01097ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01097d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01097d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c01097d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097de:	c7 04 24 48 79 11 c0 	movl   $0xc0117948,(%esp)
c01097e5:	e8 86 6b ff ff       	call   c0100370 <cprintf>
    while(iter++<TIMES)
c01097ea:	eb 62                	jmp    c010984e <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c01097ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097ef:	89 44 24 08          	mov    %eax,0x8(%esp)
c01097f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097fa:	c7 04 24 68 79 11 c0 	movl   $0xc0117968,(%esp)
c0109801:	e8 6a 6b ff ff       	call   c0100370 <cprintf>
        do_sleep(SLEEP_TIME);
c0109806:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010980d:	e8 e9 47 00 00       	call   c010dffb <do_sleep>
        phi_take_forks_condvar(i); 
c0109812:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109815:	89 04 24             	mov    %eax,(%esp)
c0109818:	e8 7c fe ff ff       	call   c0109699 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c010981d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109820:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109824:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109827:	89 44 24 04          	mov    %eax,0x4(%esp)
c010982b:	c7 04 24 98 79 11 c0 	movl   $0xc0117998,(%esp)
c0109832:	e8 39 6b ff ff       	call   c0100370 <cprintf>
        do_sleep(SLEEP_TIME);
c0109837:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010983e:	e8 b8 47 00 00       	call   c010dffb <do_sleep>
        phi_put_forks_condvar(i); 
c0109843:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109846:	89 04 24             	mov    %eax,(%esp)
c0109849:	e8 d2 fe ff ff       	call   c0109720 <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c010984e:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
c0109852:	0f 9e c0             	setle  %al
c0109855:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109859:	84 c0                	test   %al,%al
c010985b:	75 8f                	jne    c01097ec <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c010985d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109860:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109864:	c7 04 24 c8 79 11 c0 	movl   $0xc01179c8,(%esp)
c010986b:	e8 00 6b ff ff       	call   c0100370 <cprintf>
    return 0;    
c0109870:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109875:	c9                   	leave  
c0109876:	c3                   	ret    

c0109877 <check_sync>:

void check_sync(void){
c0109877:	55                   	push   %ebp
c0109878:	89 e5                	mov    %esp,%ebp
c010987a:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c010987d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109884:	00 
c0109885:	c7 04 24 48 51 15 c0 	movl   $0xc0155148,(%esp)
c010988c:	e8 1d 04 00 00       	call   c0109cae <sem_init>
    for(i=0;i<N;i++){
c0109891:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109898:	e9 94 00 00 00       	jmp    c0109931 <check_sync+0xba>
        sem_init(&s[i], 0);
c010989d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01098a0:	89 d0                	mov    %edx,%eax
c01098a2:	01 c0                	add    %eax,%eax
c01098a4:	01 d0                	add    %edx,%eax
c01098a6:	c1 e0 02             	shl    $0x2,%eax
c01098a9:	05 c0 51 15 c0       	add    $0xc01551c0,%eax
c01098ae:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01098b5:	00 
c01098b6:	89 04 24             	mov    %eax,(%esp)
c01098b9:	e8 f0 03 00 00       	call   c0109cae <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c01098be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098c1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01098c8:	00 
c01098c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01098cd:	c7 04 24 16 95 10 c0 	movl   $0xc0109516,(%esp)
c01098d4:	e8 fc 2c 00 00       	call   c010c5d5 <kernel_thread>
c01098d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c01098dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01098e0:	7f 1c                	jg     c01098fe <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c01098e2:	c7 44 24 08 e8 79 11 	movl   $0xc01179e8,0x8(%esp)
c01098e9:	c0 
c01098ea:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c01098f1:	00 
c01098f2:	c7 04 24 1a 7a 11 c0 	movl   $0xc0117a1a,(%esp)
c01098f9:	e8 ae 75 ff ff       	call   c0100eac <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01098fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109901:	89 04 24             	mov    %eax,(%esp)
c0109904:	e8 58 2c 00 00       	call   c010c561 <find_proc>
c0109909:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010990c:	89 04 95 94 51 15 c0 	mov    %eax,-0x3feaae6c(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c0109913:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109916:	8b 04 85 94 51 15 c0 	mov    -0x3feaae6c(,%eax,4),%eax
c010991d:	c7 44 24 04 31 7a 11 	movl   $0xc0117a31,0x4(%esp)
c0109924:	c0 
c0109925:	89 04 24             	mov    %eax,(%esp)
c0109928:	e8 1b 28 00 00       	call   c010c148 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c010992d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109931:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109935:	0f 8e 62 ff ff ff    	jle    c010989d <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c010993b:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0109942:	00 
c0109943:	c7 04 24 60 51 15 c0 	movl   $0xc0155160,(%esp)
c010994a:	e8 99 00 00 00       	call   c01099e8 <monitor_init>
    for(i=0;i<N;i++){
c010994f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109956:	e9 81 00 00 00       	jmp    c01099dc <check_sync+0x165>
        state_condvar[i]=THINKING;
c010995b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010995e:	c7 04 85 80 51 15 c0 	movl   $0x0,-0x3feaae80(,%eax,4)
c0109965:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109969:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010996c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109973:	00 
c0109974:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109978:	c7 04 24 c4 97 10 c0 	movl   $0xc01097c4,(%esp)
c010997f:	e8 51 2c 00 00       	call   c010c5d5 <kernel_thread>
c0109984:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c0109987:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010998b:	7f 1c                	jg     c01099a9 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c010998d:	c7 44 24 08 48 7a 11 	movl   $0xc0117a48,0x8(%esp)
c0109994:	c0 
c0109995:	c7 44 24 04 c1 00 00 	movl   $0xc1,0x4(%esp)
c010999c:	00 
c010999d:	c7 04 24 1a 7a 11 c0 	movl   $0xc0117a1a,(%esp)
c01099a4:	e8 03 75 ff ff       	call   c0100eac <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c01099a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099ac:	89 04 24             	mov    %eax,(%esp)
c01099af:	e8 ad 2b 00 00       	call   c010c561 <find_proc>
c01099b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01099b7:	89 04 95 34 51 15 c0 	mov    %eax,-0x3feaaecc(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c01099be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099c1:	8b 04 85 34 51 15 c0 	mov    -0x3feaaecc(,%eax,4),%eax
c01099c8:	c7 44 24 04 78 7a 11 	movl   $0xc0117a78,0x4(%esp)
c01099cf:	c0 
c01099d0:	89 04 24             	mov    %eax,(%esp)
c01099d3:	e8 70 27 00 00       	call   c010c148 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c01099d8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01099dc:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01099e0:	0f 8e 75 ff ff ff    	jle    c010995b <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c01099e6:	c9                   	leave  
c01099e7:	c3                   	ret    

c01099e8 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c01099e8:	55                   	push   %ebp
c01099e9:	89 e5                	mov    %esp,%ebp
c01099eb:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c01099ee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01099f2:	75 24                	jne    c0109a18 <monitor_init+0x30>
c01099f4:	c7 44 24 0c 94 7a 11 	movl   $0xc0117a94,0xc(%esp)
c01099fb:	c0 
c01099fc:	c7 44 24 08 9d 7a 11 	movl   $0xc0117a9d,0x8(%esp)
c0109a03:	c0 
c0109a04:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c0109a0b:	00 
c0109a0c:	c7 04 24 b2 7a 11 c0 	movl   $0xc0117ab2,(%esp)
c0109a13:	e8 94 74 ff ff       	call   c0100eac <__panic>
    mtp->next_count = 0;
c0109a18:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a1b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c0109a22:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a25:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109a2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a2f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109a36:	00 
c0109a37:	89 04 24             	mov    %eax,(%esp)
c0109a3a:	e8 6f 02 00 00       	call   c0109cae <sem_init>
    sem_init(&(mtp->next), 0);
c0109a3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a42:	83 c0 0c             	add    $0xc,%eax
c0109a45:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109a4c:	00 
c0109a4d:	89 04 24             	mov    %eax,(%esp)
c0109a50:	e8 59 02 00 00       	call   c0109cae <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c0109a55:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109a58:	89 d0                	mov    %edx,%eax
c0109a5a:	c1 e0 02             	shl    $0x2,%eax
c0109a5d:	01 d0                	add    %edx,%eax
c0109a5f:	c1 e0 02             	shl    $0x2,%eax
c0109a62:	89 04 24             	mov    %eax,(%esp)
c0109a65:	e8 ec b3 ff ff       	call   c0104e56 <kmalloc>
c0109a6a:	8b 55 08             	mov    0x8(%ebp),%edx
c0109a6d:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109a70:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a73:	8b 40 1c             	mov    0x1c(%eax),%eax
c0109a76:	85 c0                	test   %eax,%eax
c0109a78:	75 24                	jne    c0109a9e <monitor_init+0xb6>
c0109a7a:	c7 44 24 0c c6 7a 11 	movl   $0xc0117ac6,0xc(%esp)
c0109a81:	c0 
c0109a82:	c7 44 24 08 9d 7a 11 	movl   $0xc0117a9d,0x8(%esp)
c0109a89:	c0 
c0109a8a:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0109a91:	00 
c0109a92:	c7 04 24 b2 7a 11 c0 	movl   $0xc0117ab2,(%esp)
c0109a99:	e8 0e 74 ff ff       	call   c0100eac <__panic>
    for(i=0; i<num_cv; i++){
c0109a9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109aa5:	eb 61                	jmp    c0109b08 <monitor_init+0x120>
        mtp->cv[i].count=0;
c0109aa7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aaa:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109aad:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109ab0:	89 d0                	mov    %edx,%eax
c0109ab2:	c1 e0 02             	shl    $0x2,%eax
c0109ab5:	01 d0                	add    %edx,%eax
c0109ab7:	c1 e0 02             	shl    $0x2,%eax
c0109aba:	01 c8                	add    %ecx,%eax
c0109abc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0109ac3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ac6:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109ac9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109acc:	89 d0                	mov    %edx,%eax
c0109ace:	c1 e0 02             	shl    $0x2,%eax
c0109ad1:	01 d0                	add    %edx,%eax
c0109ad3:	c1 e0 02             	shl    $0x2,%eax
c0109ad6:	01 c8                	add    %ecx,%eax
c0109ad8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109adf:	00 
c0109ae0:	89 04 24             	mov    %eax,(%esp)
c0109ae3:	e8 c6 01 00 00       	call   c0109cae <sem_init>
        mtp->cv[i].owner=mtp;
c0109ae8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aeb:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109aee:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109af1:	89 d0                	mov    %edx,%eax
c0109af3:	c1 e0 02             	shl    $0x2,%eax
c0109af6:	01 d0                	add    %edx,%eax
c0109af8:	c1 e0 02             	shl    $0x2,%eax
c0109afb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109afe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b01:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c0109b04:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109b08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b0b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109b0e:	72 97                	jb     c0109aa7 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c0109b10:	c9                   	leave  
c0109b11:	c3                   	ret    

c0109b12 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c0109b12:	55                   	push   %ebp
c0109b13:	89 e5                	mov    %esp,%ebp
c0109b15:	83 ec 28             	sub    $0x28,%esp
   //LAB7 EXERCISE1: 2011010312
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b1b:	8b 40 10             	mov    0x10(%eax),%eax
c0109b1e:	8b 50 18             	mov    0x18(%eax),%edx
c0109b21:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b24:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b27:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109b2b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b32:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b36:	c7 04 24 d4 7a 11 c0 	movl   $0xc0117ad4,(%esp)
c0109b3d:	e8 2e 68 ff ff       	call   c0100370 <cprintf>
   if(cvp->count > 0) {
c0109b42:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b45:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b48:	85 c0                	test   %eax,%eax
c0109b4a:	7e 40                	jle    c0109b8c <cond_signal+0x7a>
	   monitor_t *mt = cvp->owner;
c0109b4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b4f:	8b 40 10             	mov    0x10(%eax),%eax
c0109b52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	   mt->next_count++;
c0109b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b58:	8b 40 18             	mov    0x18(%eax),%eax
c0109b5b:	8d 50 01             	lea    0x1(%eax),%edx
c0109b5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b61:	89 50 18             	mov    %edx,0x18(%eax)
	   up(&(cvp->sem));
c0109b64:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b67:	89 04 24             	mov    %eax,(%esp)
c0109b6a:	e8 b2 02 00 00       	call   c0109e21 <up>
	   down(&(mt->next));
c0109b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b72:	83 c0 0c             	add    $0xc,%eax
c0109b75:	89 04 24             	mov    %eax,(%esp)
c0109b78:	e8 bf 02 00 00       	call   c0109e3c <down>
	   mt->next_count--;
c0109b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b80:	8b 40 18             	mov    0x18(%eax),%eax
c0109b83:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109b86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b89:	89 50 18             	mov    %edx,0x18(%eax)
   }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109b8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b8f:	8b 40 10             	mov    0x10(%eax),%eax
c0109b92:	8b 50 18             	mov    0x18(%eax),%edx
c0109b95:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b98:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b9b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109b9f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109ba3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ba6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109baa:	c7 04 24 1c 7b 11 c0 	movl   $0xc0117b1c,(%esp)
c0109bb1:	e8 ba 67 ff ff       	call   c0100370 <cprintf>
}
c0109bb6:	c9                   	leave  
c0109bb7:	c3                   	ret    

c0109bb8 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109bb8:	55                   	push   %ebp
c0109bb9:	89 e5                	mov    %esp,%ebp
c0109bbb:	83 ec 28             	sub    $0x28,%esp
    //LAB7 EXERCISE1: 2011010312
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109bbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bc1:	8b 40 10             	mov    0x10(%eax),%eax
c0109bc4:	8b 50 18             	mov    0x18(%eax),%edx
c0109bc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bca:	8b 40 0c             	mov    0xc(%eax),%eax
c0109bcd:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109bd1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109bd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109bdc:	c7 04 24 60 7b 11 c0 	movl   $0xc0117b60,(%esp)
c0109be3:	e8 88 67 ff ff       	call   c0100370 <cprintf>
	monitor_t* mt = cvp->owner;
c0109be8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109beb:	8b 40 10             	mov    0x10(%eax),%eax
c0109bee:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cvp->count ++;
c0109bf1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bf4:	8b 40 0c             	mov    0xc(%eax),%eax
c0109bf7:	8d 50 01             	lea    0x1(%eax),%edx
c0109bfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bfd:	89 50 0c             	mov    %edx,0xc(%eax)
	if(mt->next_count > 0)
c0109c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c03:	8b 40 18             	mov    0x18(%eax),%eax
c0109c06:	85 c0                	test   %eax,%eax
c0109c08:	7e 10                	jle    c0109c1a <cond_wait+0x62>
		up(&(mt->next));
c0109c0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c0d:	83 c0 0c             	add    $0xc,%eax
c0109c10:	89 04 24             	mov    %eax,(%esp)
c0109c13:	e8 09 02 00 00       	call   c0109e21 <up>
c0109c18:	eb 0b                	jmp    c0109c25 <cond_wait+0x6d>
	else
		up(&(mt->mutex));
c0109c1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c1d:	89 04 24             	mov    %eax,(%esp)
c0109c20:	e8 fc 01 00 00       	call   c0109e21 <up>
	down(&(cvp->sem));
c0109c25:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c28:	89 04 24             	mov    %eax,(%esp)
c0109c2b:	e8 0c 02 00 00       	call   c0109e3c <down>
	cvp->count --;
c0109c30:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c33:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c36:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c3c:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109c3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c42:	8b 40 10             	mov    0x10(%eax),%eax
c0109c45:	8b 50 18             	mov    0x18(%eax),%edx
c0109c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c4b:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c4e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109c52:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c56:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c59:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c5d:	c7 04 24 a4 7b 11 c0 	movl   $0xc0117ba4,(%esp)
c0109c64:	e8 07 67 ff ff       	call   c0100370 <cprintf>
}
c0109c69:	c9                   	leave  
c0109c6a:	c3                   	ret    
	...

c0109c6c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109c6c:	55                   	push   %ebp
c0109c6d:	89 e5                	mov    %esp,%ebp
c0109c6f:	53                   	push   %ebx
c0109c70:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109c73:	9c                   	pushf  
c0109c74:	5b                   	pop    %ebx
c0109c75:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0109c78:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109c7b:	25 00 02 00 00       	and    $0x200,%eax
c0109c80:	85 c0                	test   %eax,%eax
c0109c82:	74 0c                	je     c0109c90 <__intr_save+0x24>
        intr_disable();
c0109c84:	e8 5d 85 ff ff       	call   c01021e6 <intr_disable>
        return 1;
c0109c89:	b8 01 00 00 00       	mov    $0x1,%eax
c0109c8e:	eb 05                	jmp    c0109c95 <__intr_save+0x29>
    }
    return 0;
c0109c90:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109c95:	83 c4 14             	add    $0x14,%esp
c0109c98:	5b                   	pop    %ebx
c0109c99:	5d                   	pop    %ebp
c0109c9a:	c3                   	ret    

c0109c9b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109c9b:	55                   	push   %ebp
c0109c9c:	89 e5                	mov    %esp,%ebp
c0109c9e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109ca1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109ca5:	74 05                	je     c0109cac <__intr_restore+0x11>
        intr_enable();
c0109ca7:	e8 34 85 ff ff       	call   c01021e0 <intr_enable>
    }
}
c0109cac:	c9                   	leave  
c0109cad:	c3                   	ret    

c0109cae <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109cae:	55                   	push   %ebp
c0109caf:	89 e5                	mov    %esp,%ebp
c0109cb1:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109cb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cb7:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109cba:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109cbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cbf:	83 c0 04             	add    $0x4,%eax
c0109cc2:	89 04 24             	mov    %eax,(%esp)
c0109cc5:	e8 35 02 00 00       	call   c0109eff <wait_queue_init>
}
c0109cca:	c9                   	leave  
c0109ccb:	c3                   	ret    

c0109ccc <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109ccc:	55                   	push   %ebp
c0109ccd:	89 e5                	mov    %esp,%ebp
c0109ccf:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109cd2:	e8 95 ff ff ff       	call   c0109c6c <__intr_save>
c0109cd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109cda:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cdd:	83 c0 04             	add    $0x4,%eax
c0109ce0:	89 04 24             	mov    %eax,(%esp)
c0109ce3:	e8 6b 04 00 00       	call   c010a153 <wait_queue_first>
c0109ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109ceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109cef:	75 0f                	jne    c0109d00 <__up+0x34>
            sem->value ++;
c0109cf1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cf4:	8b 00                	mov    (%eax),%eax
c0109cf6:	8d 50 01             	lea    0x1(%eax),%edx
c0109cf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cfc:	89 10                	mov    %edx,(%eax)
c0109cfe:	eb 58                	jmp    c0109d58 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109d00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d03:	8b 00                	mov    (%eax),%eax
c0109d05:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109d0b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109d0e:	74 24                	je     c0109d34 <__up+0x68>
c0109d10:	c7 44 24 0c e8 7b 11 	movl   $0xc0117be8,0xc(%esp)
c0109d17:	c0 
c0109d18:	c7 44 24 08 0d 7c 11 	movl   $0xc0117c0d,0x8(%esp)
c0109d1f:	c0 
c0109d20:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109d27:	00 
c0109d28:	c7 04 24 22 7c 11 c0 	movl   $0xc0117c22,(%esp)
c0109d2f:	e8 78 71 ff ff       	call   c0100eac <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109d34:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d37:	8d 50 04             	lea    0x4(%eax),%edx
c0109d3a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109d41:	00 
c0109d42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d45:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109d49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d50:	89 14 24             	mov    %edx,(%esp)
c0109d53:	e8 97 04 00 00       	call   c010a1ef <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d5b:	89 04 24             	mov    %eax,(%esp)
c0109d5e:	e8 38 ff ff ff       	call   c0109c9b <__intr_restore>
}
c0109d63:	c9                   	leave  
c0109d64:	c3                   	ret    

c0109d65 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109d65:	55                   	push   %ebp
c0109d66:	89 e5                	mov    %esp,%ebp
c0109d68:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109d6b:	e8 fc fe ff ff       	call   c0109c6c <__intr_save>
c0109d70:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109d73:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d76:	8b 00                	mov    (%eax),%eax
c0109d78:	85 c0                	test   %eax,%eax
c0109d7a:	7e 22                	jle    c0109d9e <__down+0x39>
        sem->value --;
c0109d7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d7f:	8b 00                	mov    (%eax),%eax
c0109d81:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109d84:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d87:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109d89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d8c:	89 04 24             	mov    %eax,(%esp)
c0109d8f:	e8 07 ff ff ff       	call   c0109c9b <__intr_restore>
        return 0;
c0109d94:	b8 00 00 00 00       	mov    $0x0,%eax
c0109d99:	e9 81 00 00 00       	jmp    c0109e1f <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109d9e:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109da1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109da4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109da7:	8d 50 04             	lea    0x4(%eax),%edx
c0109daa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dad:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109db1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109db4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109db8:	89 14 24             	mov    %edx,(%esp)
c0109dbb:	e8 36 05 00 00       	call   c010a2f6 <wait_current_set>
    local_intr_restore(intr_flag);
c0109dc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dc3:	89 04 24             	mov    %eax,(%esp)
c0109dc6:	e8 d0 fe ff ff       	call   c0109c9b <__intr_restore>

    schedule();
c0109dcb:	e8 3b 4a 00 00       	call   c010e80b <schedule>

    local_intr_save(intr_flag);
c0109dd0:	e8 97 fe ff ff       	call   c0109c6c <__intr_save>
c0109dd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109dd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ddb:	89 04 24             	mov    %eax,(%esp)
c0109dde:	e8 e4 03 00 00       	call   c010a1c7 <wait_in_queue>
c0109de3:	85 c0                	test   %eax,%eax
c0109de5:	74 15                	je     c0109dfc <__down+0x97>
c0109de7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dea:	8d 50 04             	lea    0x4(%eax),%edx
c0109ded:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109df0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109df4:	89 14 24             	mov    %edx,(%esp)
c0109df7:	e8 c6 01 00 00       	call   c0109fc2 <wait_queue_del>
    local_intr_restore(intr_flag);
c0109dfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dff:	89 04 24             	mov    %eax,(%esp)
c0109e02:	e8 94 fe ff ff       	call   c0109c9b <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109e07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e0a:	8b 40 04             	mov    0x4(%eax),%eax
c0109e0d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109e10:	74 08                	je     c0109e1a <__down+0xb5>
        return wait->wakeup_flags;
c0109e12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e15:	8b 40 04             	mov    0x4(%eax),%eax
c0109e18:	eb 05                	jmp    c0109e1f <__down+0xba>
    }
    return 0;
c0109e1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e1f:	c9                   	leave  
c0109e20:	c3                   	ret    

c0109e21 <up>:

void
up(semaphore_t *sem) {
c0109e21:	55                   	push   %ebp
c0109e22:	89 e5                	mov    %esp,%ebp
c0109e24:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109e27:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109e2e:	00 
c0109e2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e32:	89 04 24             	mov    %eax,(%esp)
c0109e35:	e8 92 fe ff ff       	call   c0109ccc <__up>
}
c0109e3a:	c9                   	leave  
c0109e3b:	c3                   	ret    

c0109e3c <down>:

void
down(semaphore_t *sem) {
c0109e3c:	55                   	push   %ebp
c0109e3d:	89 e5                	mov    %esp,%ebp
c0109e3f:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109e42:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109e49:	00 
c0109e4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e4d:	89 04 24             	mov    %eax,(%esp)
c0109e50:	e8 10 ff ff ff       	call   c0109d65 <__down>
c0109e55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109e58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109e5c:	74 24                	je     c0109e82 <down+0x46>
c0109e5e:	c7 44 24 0c 32 7c 11 	movl   $0xc0117c32,0xc(%esp)
c0109e65:	c0 
c0109e66:	c7 44 24 08 0d 7c 11 	movl   $0xc0117c0d,0x8(%esp)
c0109e6d:	c0 
c0109e6e:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109e75:	00 
c0109e76:	c7 04 24 22 7c 11 c0 	movl   $0xc0117c22,(%esp)
c0109e7d:	e8 2a 70 ff ff       	call   c0100eac <__panic>
}
c0109e82:	c9                   	leave  
c0109e83:	c3                   	ret    

c0109e84 <try_down>:

bool
try_down(semaphore_t *sem) {
c0109e84:	55                   	push   %ebp
c0109e85:	89 e5                	mov    %esp,%ebp
c0109e87:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109e8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109e91:	e8 d6 fd ff ff       	call   c0109c6c <__intr_save>
c0109e96:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109e99:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e9c:	8b 00                	mov    (%eax),%eax
c0109e9e:	85 c0                	test   %eax,%eax
c0109ea0:	7e 14                	jle    c0109eb6 <try_down+0x32>
        sem->value --, ret = 1;
c0109ea2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ea5:	8b 00                	mov    (%eax),%eax
c0109ea7:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109eaa:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ead:	89 10                	mov    %edx,(%eax)
c0109eaf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109eb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109eb9:	89 04 24             	mov    %eax,(%esp)
c0109ebc:	e8 da fd ff ff       	call   c0109c9b <__intr_restore>
    return ret;
c0109ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109ec4:	c9                   	leave  
c0109ec5:	c3                   	ret    
	...

c0109ec8 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109ec8:	55                   	push   %ebp
c0109ec9:	89 e5                	mov    %esp,%ebp
c0109ecb:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109ece:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109ed4:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109ed6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ed9:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109ee0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ee3:	83 c0 0c             	add    $0xc,%eax
c0109ee6:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109ee9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109eec:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109eef:	89 50 04             	mov    %edx,0x4(%eax)
c0109ef2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ef5:	8b 50 04             	mov    0x4(%eax),%edx
c0109ef8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109efb:	89 10                	mov    %edx,(%eax)
}
c0109efd:	c9                   	leave  
c0109efe:	c3                   	ret    

c0109eff <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109eff:	55                   	push   %ebp
c0109f00:	89 e5                	mov    %esp,%ebp
c0109f02:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109f05:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f08:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109f0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f0e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109f11:	89 50 04             	mov    %edx,0x4(%eax)
c0109f14:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f17:	8b 50 04             	mov    0x4(%eax),%edx
c0109f1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f1d:	89 10                	mov    %edx,(%eax)
}
c0109f1f:	c9                   	leave  
c0109f20:	c3                   	ret    

c0109f21 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109f21:	55                   	push   %ebp
c0109f22:	89 e5                	mov    %esp,%ebp
c0109f24:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109f27:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f2a:	83 c0 0c             	add    $0xc,%eax
c0109f2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f33:	8b 40 04             	mov    0x4(%eax),%eax
c0109f36:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109f39:	0f 94 c0             	sete   %al
c0109f3c:	0f b6 c0             	movzbl %al,%eax
c0109f3f:	85 c0                	test   %eax,%eax
c0109f41:	74 09                	je     c0109f4c <wait_queue_add+0x2b>
c0109f43:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f46:	8b 00                	mov    (%eax),%eax
c0109f48:	85 c0                	test   %eax,%eax
c0109f4a:	75 24                	jne    c0109f70 <wait_queue_add+0x4f>
c0109f4c:	c7 44 24 0c 40 7c 11 	movl   $0xc0117c40,0xc(%esp)
c0109f53:	c0 
c0109f54:	c7 44 24 08 75 7c 11 	movl   $0xc0117c75,0x8(%esp)
c0109f5b:	c0 
c0109f5c:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109f63:	00 
c0109f64:	c7 04 24 8a 7c 11 c0 	movl   $0xc0117c8a,(%esp)
c0109f6b:	e8 3c 6f ff ff       	call   c0100eac <__panic>
    wait->wait_queue = queue;
c0109f70:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f73:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f76:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109f79:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f7c:	8d 50 0c             	lea    0xc(%eax),%edx
c0109f7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f82:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109f85:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109f88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f8b:	8b 00                	mov    (%eax),%eax
c0109f8d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109f90:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109f93:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109f96:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f99:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109f9c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109fa2:	89 10                	mov    %edx,(%eax)
c0109fa4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109fa7:	8b 10                	mov    (%eax),%edx
c0109fa9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109fac:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109faf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109fb2:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109fb5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109fb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109fbb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109fbe:	89 10                	mov    %edx,(%eax)
}
c0109fc0:	c9                   	leave  
c0109fc1:	c3                   	ret    

c0109fc2 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109fc2:	55                   	push   %ebp
c0109fc3:	89 e5                	mov    %esp,%ebp
c0109fc5:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109fc8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fcb:	83 c0 0c             	add    $0xc,%eax
c0109fce:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109fd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fd4:	8b 40 04             	mov    0x4(%eax),%eax
c0109fd7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109fda:	0f 94 c0             	sete   %al
c0109fdd:	0f b6 c0             	movzbl %al,%eax
c0109fe0:	85 c0                	test   %eax,%eax
c0109fe2:	75 0b                	jne    c0109fef <wait_queue_del+0x2d>
c0109fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fe7:	8b 40 08             	mov    0x8(%eax),%eax
c0109fea:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109fed:	74 24                	je     c010a013 <wait_queue_del+0x51>
c0109fef:	c7 44 24 0c 9c 7c 11 	movl   $0xc0117c9c,0xc(%esp)
c0109ff6:	c0 
c0109ff7:	c7 44 24 08 75 7c 11 	movl   $0xc0117c75,0x8(%esp)
c0109ffe:	c0 
c0109fff:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c010a006:	00 
c010a007:	c7 04 24 8a 7c 11 c0 	movl   $0xc0117c8a,(%esp)
c010a00e:	e8 99 6e ff ff       	call   c0100eac <__panic>
    list_del_init(&(wait->wait_link));
c010a013:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a016:	83 c0 0c             	add    $0xc,%eax
c010a019:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a01c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a01f:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a022:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a025:	8b 40 04             	mov    0x4(%eax),%eax
c010a028:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a02b:	8b 12                	mov    (%edx),%edx
c010a02d:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a030:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a033:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a036:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a039:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a03c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a03f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a042:	89 10                	mov    %edx,(%eax)
c010a044:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a047:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a04a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a04d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a050:	89 50 04             	mov    %edx,0x4(%eax)
c010a053:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a056:	8b 50 04             	mov    0x4(%eax),%edx
c010a059:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a05c:	89 10                	mov    %edx,(%eax)
}
c010a05e:	c9                   	leave  
c010a05f:	c3                   	ret    

c010a060 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c010a060:	55                   	push   %ebp
c010a061:	89 e5                	mov    %esp,%ebp
c010a063:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a066:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a069:	83 c0 0c             	add    $0xc,%eax
c010a06c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a06f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a072:	8b 40 04             	mov    0x4(%eax),%eax
c010a075:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a078:	0f 94 c0             	sete   %al
c010a07b:	0f b6 c0             	movzbl %al,%eax
c010a07e:	85 c0                	test   %eax,%eax
c010a080:	75 0b                	jne    c010a08d <wait_queue_next+0x2d>
c010a082:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a085:	8b 40 08             	mov    0x8(%eax),%eax
c010a088:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a08b:	74 24                	je     c010a0b1 <wait_queue_next+0x51>
c010a08d:	c7 44 24 0c 9c 7c 11 	movl   $0xc0117c9c,0xc(%esp)
c010a094:	c0 
c010a095:	c7 44 24 08 75 7c 11 	movl   $0xc0117c75,0x8(%esp)
c010a09c:	c0 
c010a09d:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c010a0a4:	00 
c010a0a5:	c7 04 24 8a 7c 11 c0 	movl   $0xc0117c8a,(%esp)
c010a0ac:	e8 fb 6d ff ff       	call   c0100eac <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c010a0b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0b4:	83 c0 0c             	add    $0xc,%eax
c010a0b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a0ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0bd:	8b 40 04             	mov    0x4(%eax),%eax
c010a0c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a0c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0c6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a0c9:	74 08                	je     c010a0d3 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c010a0cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0ce:	83 e8 0c             	sub    $0xc,%eax
c010a0d1:	eb 05                	jmp    c010a0d8 <wait_queue_next+0x78>
    }
    return NULL;
c010a0d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a0d8:	c9                   	leave  
c010a0d9:	c3                   	ret    

c010a0da <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c010a0da:	55                   	push   %ebp
c010a0db:	89 e5                	mov    %esp,%ebp
c010a0dd:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a0e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0e3:	83 c0 0c             	add    $0xc,%eax
c010a0e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a0e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0ec:	8b 40 04             	mov    0x4(%eax),%eax
c010a0ef:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a0f2:	0f 94 c0             	sete   %al
c010a0f5:	0f b6 c0             	movzbl %al,%eax
c010a0f8:	85 c0                	test   %eax,%eax
c010a0fa:	75 0b                	jne    c010a107 <wait_queue_prev+0x2d>
c010a0fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0ff:	8b 40 08             	mov    0x8(%eax),%eax
c010a102:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a105:	74 24                	je     c010a12b <wait_queue_prev+0x51>
c010a107:	c7 44 24 0c 9c 7c 11 	movl   $0xc0117c9c,0xc(%esp)
c010a10e:	c0 
c010a10f:	c7 44 24 08 75 7c 11 	movl   $0xc0117c75,0x8(%esp)
c010a116:	c0 
c010a117:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010a11e:	00 
c010a11f:	c7 04 24 8a 7c 11 c0 	movl   $0xc0117c8a,(%esp)
c010a126:	e8 81 6d ff ff       	call   c0100eac <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c010a12b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a12e:	83 c0 0c             	add    $0xc,%eax
c010a131:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a134:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a137:	8b 00                	mov    (%eax),%eax
c010a139:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a13c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a13f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a142:	74 08                	je     c010a14c <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c010a144:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a147:	83 e8 0c             	sub    $0xc,%eax
c010a14a:	eb 05                	jmp    c010a151 <wait_queue_prev+0x77>
    }
    return NULL;
c010a14c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a151:	c9                   	leave  
c010a152:	c3                   	ret    

c010a153 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c010a153:	55                   	push   %ebp
c010a154:	89 e5                	mov    %esp,%ebp
c010a156:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c010a159:	8b 45 08             	mov    0x8(%ebp),%eax
c010a15c:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a15f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a162:	8b 40 04             	mov    0x4(%eax),%eax
c010a165:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a168:	8b 45 08             	mov    0x8(%ebp),%eax
c010a16b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a16e:	74 08                	je     c010a178 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c010a170:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a173:	83 e8 0c             	sub    $0xc,%eax
c010a176:	eb 05                	jmp    c010a17d <wait_queue_first+0x2a>
    }
    return NULL;
c010a178:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a17d:	c9                   	leave  
c010a17e:	c3                   	ret    

c010a17f <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c010a17f:	55                   	push   %ebp
c010a180:	89 e5                	mov    %esp,%ebp
c010a182:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010a185:	8b 45 08             	mov    0x8(%ebp),%eax
c010a188:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a18b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a18e:	8b 00                	mov    (%eax),%eax
c010a190:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a193:	8b 45 08             	mov    0x8(%ebp),%eax
c010a196:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a199:	74 08                	je     c010a1a3 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c010a19b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a19e:	83 e8 0c             	sub    $0xc,%eax
c010a1a1:	eb 05                	jmp    c010a1a8 <wait_queue_last+0x29>
    }
    return NULL;
c010a1a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a1a8:	c9                   	leave  
c010a1a9:	c3                   	ret    

c010a1aa <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c010a1aa:	55                   	push   %ebp
c010a1ab:	89 e5                	mov    %esp,%ebp
c010a1ad:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c010a1b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1b3:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a1b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1b9:	8b 40 04             	mov    0x4(%eax),%eax
c010a1bc:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a1bf:	0f 94 c0             	sete   %al
c010a1c2:	0f b6 c0             	movzbl %al,%eax
}
c010a1c5:	c9                   	leave  
c010a1c6:	c3                   	ret    

c010a1c7 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010a1c7:	55                   	push   %ebp
c010a1c8:	89 e5                	mov    %esp,%ebp
c010a1ca:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010a1cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1d0:	83 c0 0c             	add    $0xc,%eax
c010a1d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a1d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1d9:	8b 40 04             	mov    0x4(%eax),%eax
c010a1dc:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a1df:	0f 94 c0             	sete   %al
c010a1e2:	0f b6 c0             	movzbl %al,%eax
c010a1e5:	85 c0                	test   %eax,%eax
c010a1e7:	0f 94 c0             	sete   %al
c010a1ea:	0f b6 c0             	movzbl %al,%eax
}
c010a1ed:	c9                   	leave  
c010a1ee:	c3                   	ret    

c010a1ef <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010a1ef:	55                   	push   %ebp
c010a1f0:	89 e5                	mov    %esp,%ebp
c010a1f2:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c010a1f5:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a1f9:	74 12                	je     c010a20d <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c010a1fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a202:	8b 45 08             	mov    0x8(%ebp),%eax
c010a205:	89 04 24             	mov    %eax,(%esp)
c010a208:	e8 b5 fd ff ff       	call   c0109fc2 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010a20d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a210:	8b 55 10             	mov    0x10(%ebp),%edx
c010a213:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010a216:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a219:	8b 00                	mov    (%eax),%eax
c010a21b:	89 04 24             	mov    %eax,(%esp)
c010a21e:	e8 4c 45 00 00       	call   c010e76f <wakeup_proc>
}
c010a223:	c9                   	leave  
c010a224:	c3                   	ret    

c010a225 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a225:	55                   	push   %ebp
c010a226:	89 e5                	mov    %esp,%ebp
c010a228:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a22b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a22e:	89 04 24             	mov    %eax,(%esp)
c010a231:	e8 1d ff ff ff       	call   c010a153 <wait_queue_first>
c010a236:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a239:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a23d:	74 20                	je     c010a25f <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010a23f:	8b 45 10             	mov    0x10(%ebp),%eax
c010a242:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a246:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a249:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a24d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a250:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a254:	8b 45 08             	mov    0x8(%ebp),%eax
c010a257:	89 04 24             	mov    %eax,(%esp)
c010a25a:	e8 90 ff ff ff       	call   c010a1ef <wakeup_wait>
    }
}
c010a25f:	c9                   	leave  
c010a260:	c3                   	ret    

c010a261 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a261:	55                   	push   %ebp
c010a262:	89 e5                	mov    %esp,%ebp
c010a264:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a267:	8b 45 08             	mov    0x8(%ebp),%eax
c010a26a:	89 04 24             	mov    %eax,(%esp)
c010a26d:	e8 e1 fe ff ff       	call   c010a153 <wait_queue_first>
c010a272:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a275:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a279:	74 79                	je     c010a2f4 <wakeup_queue+0x93>
        if (del) {
c010a27b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a27f:	74 37                	je     c010a2b8 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a281:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a288:	00 
c010a289:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a28c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a290:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a293:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a297:	8b 45 08             	mov    0x8(%ebp),%eax
c010a29a:	89 04 24             	mov    %eax,(%esp)
c010a29d:	e8 4d ff ff ff       	call   c010a1ef <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a2a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2a5:	89 04 24             	mov    %eax,(%esp)
c010a2a8:	e8 a6 fe ff ff       	call   c010a153 <wait_queue_first>
c010a2ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2b4:	75 cb                	jne    c010a281 <wakeup_queue+0x20>
c010a2b6:	eb 3c                	jmp    c010a2f4 <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a2b8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a2bf:	00 
c010a2c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2c3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a2c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a2ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2d1:	89 04 24             	mov    %eax,(%esp)
c010a2d4:	e8 16 ff ff ff       	call   c010a1ef <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a2d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a2e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2e3:	89 04 24             	mov    %eax,(%esp)
c010a2e6:	e8 75 fd ff ff       	call   c010a060 <wait_queue_next>
c010a2eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2f2:	75 c4                	jne    c010a2b8 <wakeup_queue+0x57>
        }
    }
}
c010a2f4:	c9                   	leave  
c010a2f5:	c3                   	ret    

c010a2f6 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a2f6:	55                   	push   %ebp
c010a2f7:	89 e5                	mov    %esp,%ebp
c010a2f9:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a2fc:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010a301:	85 c0                	test   %eax,%eax
c010a303:	75 24                	jne    c010a329 <wait_current_set+0x33>
c010a305:	c7 44 24 0c d9 7c 11 	movl   $0xc0117cd9,0xc(%esp)
c010a30c:	c0 
c010a30d:	c7 44 24 08 75 7c 11 	movl   $0xc0117c75,0x8(%esp)
c010a314:	c0 
c010a315:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a31c:	00 
c010a31d:	c7 04 24 8a 7c 11 c0 	movl   $0xc0117c8a,(%esp)
c010a324:	e8 83 6b ff ff       	call   c0100eac <__panic>
    wait_init(wait, current);
c010a329:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010a32e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a332:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a335:	89 04 24             	mov    %eax,(%esp)
c010a338:	e8 8b fb ff ff       	call   c0109ec8 <wait_init>
    current->state = PROC_SLEEPING;
c010a33d:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010a342:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a348:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010a34d:	8b 55 10             	mov    0x10(%ebp),%edx
c010a350:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a356:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a359:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a35d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a360:	89 04 24             	mov    %eax,(%esp)
c010a363:	e8 b9 fb ff ff       	call   c0109f21 <wait_queue_add>
}
c010a368:	c9                   	leave  
c010a369:	c3                   	ret    
	...

c010a36c <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010a36c:	55                   	push   %ebp
c010a36d:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010a36f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a372:	8b 40 08             	mov    0x8(%eax),%eax
}
c010a375:	5d                   	pop    %ebp
c010a376:	c3                   	ret    

c010a377 <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c010a377:	55                   	push   %ebp
c010a378:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c010a37a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a37d:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a380:	5d                   	pop    %ebp
c010a381:	c3                   	ret    

c010a382 <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c010a382:	55                   	push   %ebp
c010a383:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c010a385:	8b 45 08             	mov    0x8(%ebp),%eax
c010a388:	8b 40 18             	mov    0x18(%eax),%eax
c010a38b:	8d 50 01             	lea    0x1(%eax),%edx
c010a38e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a391:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a394:	8b 45 08             	mov    0x8(%ebp),%eax
c010a397:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a39a:	5d                   	pop    %ebp
c010a39b:	c3                   	ret    

c010a39c <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c010a39c:	55                   	push   %ebp
c010a39d:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c010a39f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3a2:	8b 40 18             	mov    0x18(%eax),%eax
c010a3a5:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a3a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3ab:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a3ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3b1:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a3b4:	5d                   	pop    %ebp
c010a3b5:	c3                   	ret    

c010a3b6 <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c010a3b6:	55                   	push   %ebp
c010a3b7:	89 e5                	mov    %esp,%ebp
c010a3b9:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = current->filesp;
c010a3bc:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010a3c1:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010a3c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010a3ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a3ce:	74 0f                	je     c010a3df <get_fd_array+0x29>
c010a3d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3d3:	89 04 24             	mov    %eax,(%esp)
c010a3d6:	e8 91 ff ff ff       	call   c010a36c <files_count>
c010a3db:	85 c0                	test   %eax,%eax
c010a3dd:	7f 24                	jg     c010a403 <get_fd_array+0x4d>
c010a3df:	c7 44 24 0c ec 7c 11 	movl   $0xc0117cec,0xc(%esp)
c010a3e6:	c0 
c010a3e7:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a3ee:	c0 
c010a3ef:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a3f6:	00 
c010a3f7:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a3fe:	e8 a9 6a ff ff       	call   c0100eac <__panic>
    return filesp->fd_array;
c010a403:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a406:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a409:	c9                   	leave  
c010a40a:	c3                   	ret    

c010a40b <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010a40b:	55                   	push   %ebp
c010a40c:	89 e5                	mov    %esp,%ebp
c010a40e:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c010a411:	8b 45 08             	mov    0x8(%ebp),%eax
c010a414:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a417:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010a41e:	eb 24                	jmp    c010a444 <fd_array_init+0x39>
        file->open_count = 0;
c010a420:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a423:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010a42a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a42d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010a433:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a436:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a439:	89 50 0c             	mov    %edx,0xc(%eax)
// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a43c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010a440:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c010a444:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a447:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a44c:	76 d2                	jbe    c010a420 <fd_array_init+0x15>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c010a44e:	c9                   	leave  
c010a44f:	c3                   	ret    

c010a450 <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c010a450:	55                   	push   %ebp
c010a451:	89 e5                	mov    %esp,%ebp
c010a453:	83 ec 28             	sub    $0x28,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c010a456:	e8 5b ff ff ff       	call   c010a3b6 <get_fd_array>
c010a45b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c010a45e:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c010a465:	75 2e                	jne    c010a495 <fd_array_alloc+0x45>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a467:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c010a46e:	eb 11                	jmp    c010a481 <fd_array_alloc+0x31>
            if (file->status == FD_NONE) {
c010a470:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a473:	8b 00                	mov    (%eax),%eax
c010a475:	85 c0                	test   %eax,%eax
c010a477:	74 59                	je     c010a4d2 <fd_array_alloc+0x82>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a479:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010a47d:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c010a481:	8b 45 08             	mov    0x8(%ebp),%eax
c010a484:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a489:	76 e5                	jbe    c010a470 <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c010a48b:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c010a490:	e9 94 00 00 00       	jmp    c010a529 <fd_array_alloc+0xd9>
    }
    else {
        if (testfd(fd)) {
c010a495:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a499:	78 30                	js     c010a4cb <fd_array_alloc+0x7b>
c010a49b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a49e:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a4a3:	77 26                	ja     c010a4cb <fd_array_alloc+0x7b>
            file += fd;
c010a4a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4a8:	c1 e0 02             	shl    $0x2,%eax
c010a4ab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a4b2:	89 d1                	mov    %edx,%ecx
c010a4b4:	29 c1                	sub    %eax,%ecx
c010a4b6:	89 c8                	mov    %ecx,%eax
c010a4b8:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010a4bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4be:	8b 00                	mov    (%eax),%eax
c010a4c0:	85 c0                	test   %eax,%eax
c010a4c2:	74 11                	je     c010a4d5 <fd_array_alloc+0x85>
                goto found;
            }
            return -E_BUSY;
c010a4c4:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010a4c9:	eb 5e                	jmp    c010a529 <fd_array_alloc+0xd9>
        }
        return -E_INVAL;
c010a4cb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a4d0:	eb 57                	jmp    c010a529 <fd_array_alloc+0xd9>
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
            if (file->status == FD_NONE) {
                goto found;
c010a4d2:	90                   	nop
c010a4d3:	eb 01                	jmp    c010a4d6 <fd_array_alloc+0x86>
    }
    else {
        if (testfd(fd)) {
            file += fd;
            if (file->status == FD_NONE) {
                goto found;
c010a4d5:	90                   	nop
            return -E_BUSY;
        }
        return -E_INVAL;
    }
found:
    assert(fopen_count(file) == 0);
c010a4d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4d9:	89 04 24             	mov    %eax,(%esp)
c010a4dc:	e8 96 fe ff ff       	call   c010a377 <fopen_count>
c010a4e1:	85 c0                	test   %eax,%eax
c010a4e3:	74 24                	je     c010a509 <fd_array_alloc+0xb9>
c010a4e5:	c7 44 24 0c 3a 7d 11 	movl   $0xc0117d3a,0xc(%esp)
c010a4ec:	c0 
c010a4ed:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a4f4:	c0 
c010a4f5:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010a4fc:	00 
c010a4fd:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a504:	e8 a3 69 ff ff       	call   c0100eac <__panic>
    file->status = FD_INIT, file->node = NULL;
c010a509:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a50c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010a512:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a515:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010a51c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a51f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a522:	89 10                	mov    %edx,(%eax)
    return 0;
c010a524:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a529:	c9                   	leave  
c010a52a:	c3                   	ret    

c010a52b <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010a52b:	55                   	push   %ebp
c010a52c:	89 e5                	mov    %esp,%ebp
c010a52e:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010a531:	8b 45 08             	mov    0x8(%ebp),%eax
c010a534:	8b 00                	mov    (%eax),%eax
c010a536:	83 f8 01             	cmp    $0x1,%eax
c010a539:	74 2e                	je     c010a569 <fd_array_free+0x3e>
c010a53b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a53e:	8b 00                	mov    (%eax),%eax
c010a540:	83 f8 03             	cmp    $0x3,%eax
c010a543:	74 24                	je     c010a569 <fd_array_free+0x3e>
c010a545:	c7 44 24 0c 54 7d 11 	movl   $0xc0117d54,0xc(%esp)
c010a54c:	c0 
c010a54d:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a554:	c0 
c010a555:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010a55c:	00 
c010a55d:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a564:	e8 43 69 ff ff       	call   c0100eac <__panic>
    assert(fopen_count(file) == 0);
c010a569:	8b 45 08             	mov    0x8(%ebp),%eax
c010a56c:	89 04 24             	mov    %eax,(%esp)
c010a56f:	e8 03 fe ff ff       	call   c010a377 <fopen_count>
c010a574:	85 c0                	test   %eax,%eax
c010a576:	74 24                	je     c010a59c <fd_array_free+0x71>
c010a578:	c7 44 24 0c 3a 7d 11 	movl   $0xc0117d3a,0xc(%esp)
c010a57f:	c0 
c010a580:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a587:	c0 
c010a588:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010a58f:	00 
c010a590:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a597:	e8 10 69 ff ff       	call   c0100eac <__panic>
    if (file->status == FD_CLOSED) {
c010a59c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a59f:	8b 00                	mov    (%eax),%eax
c010a5a1:	83 f8 03             	cmp    $0x3,%eax
c010a5a4:	75 0e                	jne    c010a5b4 <fd_array_free+0x89>
        vfs_close(file->node);
c010a5a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5a9:	8b 40 14             	mov    0x14(%eax),%eax
c010a5ac:	89 04 24             	mov    %eax,(%esp)
c010a5af:	e8 98 5c 00 00       	call   c011024c <vfs_close>
    }
    file->status = FD_NONE;
c010a5b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010a5bd:	c9                   	leave  
c010a5be:	c3                   	ret    

c010a5bf <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010a5bf:	55                   	push   %ebp
c010a5c0:	89 e5                	mov    %esp,%ebp
c010a5c2:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a5c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5c8:	8b 00                	mov    (%eax),%eax
c010a5ca:	83 f8 02             	cmp    $0x2,%eax
c010a5cd:	74 24                	je     c010a5f3 <fd_array_acquire+0x34>
c010a5cf:	c7 44 24 0c 89 7d 11 	movl   $0xc0117d89,0xc(%esp)
c010a5d6:	c0 
c010a5d7:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a5de:	c0 
c010a5df:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
c010a5e6:	00 
c010a5e7:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a5ee:	e8 b9 68 ff ff       	call   c0100eac <__panic>
    fopen_count_inc(file);
c010a5f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5f6:	89 04 24             	mov    %eax,(%esp)
c010a5f9:	e8 84 fd ff ff       	call   c010a382 <fopen_count_inc>
}
c010a5fe:	c9                   	leave  
c010a5ff:	c3                   	ret    

c010a600 <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010a600:	55                   	push   %ebp
c010a601:	89 e5                	mov    %esp,%ebp
c010a603:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010a606:	8b 45 08             	mov    0x8(%ebp),%eax
c010a609:	8b 00                	mov    (%eax),%eax
c010a60b:	83 f8 02             	cmp    $0x2,%eax
c010a60e:	74 2e                	je     c010a63e <fd_array_release+0x3e>
c010a610:	8b 45 08             	mov    0x8(%ebp),%eax
c010a613:	8b 00                	mov    (%eax),%eax
c010a615:	83 f8 03             	cmp    $0x3,%eax
c010a618:	74 24                	je     c010a63e <fd_array_release+0x3e>
c010a61a:	c7 44 24 0c a4 7d 11 	movl   $0xc0117da4,0xc(%esp)
c010a621:	c0 
c010a622:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a629:	c0 
c010a62a:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010a631:	00 
c010a632:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a639:	e8 6e 68 ff ff       	call   c0100eac <__panic>
    assert(fopen_count(file) > 0);
c010a63e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a641:	89 04 24             	mov    %eax,(%esp)
c010a644:	e8 2e fd ff ff       	call   c010a377 <fopen_count>
c010a649:	85 c0                	test   %eax,%eax
c010a64b:	7f 24                	jg     c010a671 <fd_array_release+0x71>
c010a64d:	c7 44 24 0c db 7d 11 	movl   $0xc0117ddb,0xc(%esp)
c010a654:	c0 
c010a655:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a65c:	c0 
c010a65d:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c010a664:	00 
c010a665:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a66c:	e8 3b 68 ff ff       	call   c0100eac <__panic>
    if (fopen_count_dec(file) == 0) {
c010a671:	8b 45 08             	mov    0x8(%ebp),%eax
c010a674:	89 04 24             	mov    %eax,(%esp)
c010a677:	e8 20 fd ff ff       	call   c010a39c <fopen_count_dec>
c010a67c:	85 c0                	test   %eax,%eax
c010a67e:	75 0b                	jne    c010a68b <fd_array_release+0x8b>
        fd_array_free(file);
c010a680:	8b 45 08             	mov    0x8(%ebp),%eax
c010a683:	89 04 24             	mov    %eax,(%esp)
c010a686:	e8 a0 fe ff ff       	call   c010a52b <fd_array_free>
    }
}
c010a68b:	c9                   	leave  
c010a68c:	c3                   	ret    

c010a68d <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010a68d:	55                   	push   %ebp
c010a68e:	89 e5                	mov    %esp,%ebp
c010a690:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010a693:	8b 45 08             	mov    0x8(%ebp),%eax
c010a696:	8b 00                	mov    (%eax),%eax
c010a698:	83 f8 01             	cmp    $0x1,%eax
c010a69b:	75 0a                	jne    c010a6a7 <fd_array_open+0x1a>
c010a69d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6a0:	8b 40 14             	mov    0x14(%eax),%eax
c010a6a3:	85 c0                	test   %eax,%eax
c010a6a5:	75 24                	jne    c010a6cb <fd_array_open+0x3e>
c010a6a7:	c7 44 24 0c f4 7d 11 	movl   $0xc0117df4,0xc(%esp)
c010a6ae:	c0 
c010a6af:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a6b6:	c0 
c010a6b7:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c010a6be:	00 
c010a6bf:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a6c6:	e8 e1 67 ff ff       	call   c0100eac <__panic>
    file->status = FD_OPENED;
c010a6cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6ce:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010a6d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6d7:	89 04 24             	mov    %eax,(%esp)
c010a6da:	e8 a3 fc ff ff       	call   c010a382 <fopen_count_inc>
}
c010a6df:	c9                   	leave  
c010a6e0:	c3                   	ret    

c010a6e1 <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010a6e1:	55                   	push   %ebp
c010a6e2:	89 e5                	mov    %esp,%ebp
c010a6e4:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a6e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6ea:	8b 00                	mov    (%eax),%eax
c010a6ec:	83 f8 02             	cmp    $0x2,%eax
c010a6ef:	74 24                	je     c010a715 <fd_array_close+0x34>
c010a6f1:	c7 44 24 0c 89 7d 11 	movl   $0xc0117d89,0xc(%esp)
c010a6f8:	c0 
c010a6f9:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a700:	c0 
c010a701:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010a708:	00 
c010a709:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a710:	e8 97 67 ff ff       	call   c0100eac <__panic>
    assert(fopen_count(file) > 0);
c010a715:	8b 45 08             	mov    0x8(%ebp),%eax
c010a718:	89 04 24             	mov    %eax,(%esp)
c010a71b:	e8 57 fc ff ff       	call   c010a377 <fopen_count>
c010a720:	85 c0                	test   %eax,%eax
c010a722:	7f 24                	jg     c010a748 <fd_array_close+0x67>
c010a724:	c7 44 24 0c db 7d 11 	movl   $0xc0117ddb,0xc(%esp)
c010a72b:	c0 
c010a72c:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a733:	c0 
c010a734:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
c010a73b:	00 
c010a73c:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a743:	e8 64 67 ff ff       	call   c0100eac <__panic>
    file->status = FD_CLOSED;
c010a748:	8b 45 08             	mov    0x8(%ebp),%eax
c010a74b:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010a751:	8b 45 08             	mov    0x8(%ebp),%eax
c010a754:	89 04 24             	mov    %eax,(%esp)
c010a757:	e8 40 fc ff ff       	call   c010a39c <fopen_count_dec>
c010a75c:	85 c0                	test   %eax,%eax
c010a75e:	75 0b                	jne    c010a76b <fd_array_close+0x8a>
        fd_array_free(file);
c010a760:	8b 45 08             	mov    0x8(%ebp),%eax
c010a763:	89 04 24             	mov    %eax,(%esp)
c010a766:	e8 c0 fd ff ff       	call   c010a52b <fd_array_free>
    }
}
c010a76b:	c9                   	leave  
c010a76c:	c3                   	ret    

c010a76d <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010a76d:	55                   	push   %ebp
c010a76e:	89 e5                	mov    %esp,%ebp
c010a770:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010a773:	8b 45 08             	mov    0x8(%ebp),%eax
c010a776:	8b 00                	mov    (%eax),%eax
c010a778:	83 f8 01             	cmp    $0x1,%eax
c010a77b:	75 0a                	jne    c010a787 <fd_array_dup+0x1a>
c010a77d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a780:	8b 00                	mov    (%eax),%eax
c010a782:	83 f8 02             	cmp    $0x2,%eax
c010a785:	74 24                	je     c010a7ab <fd_array_dup+0x3e>
c010a787:	c7 44 24 0c 24 7e 11 	movl   $0xc0117e24,0xc(%esp)
c010a78e:	c0 
c010a78f:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a796:	c0 
c010a797:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c010a79e:	00 
c010a79f:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a7a6:	e8 01 67 ff ff       	call   c0100eac <__panic>
    to->pos = from->pos;
c010a7ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a7ae:	8b 50 10             	mov    0x10(%eax),%edx
c010a7b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7b4:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010a7b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a7ba:	8b 50 04             	mov    0x4(%eax),%edx
c010a7bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7c0:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010a7c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a7c6:	8b 50 08             	mov    0x8(%eax),%edx
c010a7c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7cc:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010a7cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a7d2:	8b 40 14             	mov    0x14(%eax),%eax
c010a7d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010a7d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7db:	89 04 24             	mov    %eax,(%esp)
c010a7de:	e8 92 4a 00 00       	call   c010f275 <inode_ref_inc>
c010a7e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7e6:	89 04 24             	mov    %eax,(%esp)
c010a7e9:	e8 8e 4b 00 00       	call   c010f37c <inode_open_inc>
    to->node = node;
c010a7ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a7f4:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010a7f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7fa:	89 04 24             	mov    %eax,(%esp)
c010a7fd:	e8 8b fe ff ff       	call   c010a68d <fd_array_open>
}
c010a802:	c9                   	leave  
c010a803:	c3                   	ret    

c010a804 <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010a804:	55                   	push   %ebp
c010a805:	89 e5                	mov    %esp,%ebp
c010a807:	53                   	push   %ebx
c010a808:	83 ec 14             	sub    $0x14,%esp
    if (testfd(fd)) {
c010a80b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a80f:	78 4d                	js     c010a85e <fd2file+0x5a>
c010a811:	8b 45 08             	mov    0x8(%ebp),%eax
c010a814:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a819:	77 43                	ja     c010a85e <fd2file+0x5a>
        struct file *file = get_fd_array() + fd;
c010a81b:	e8 96 fb ff ff       	call   c010a3b6 <get_fd_array>
c010a820:	89 c2                	mov    %eax,%edx
c010a822:	8b 45 08             	mov    0x8(%ebp),%eax
c010a825:	c1 e0 02             	shl    $0x2,%eax
c010a828:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
c010a82f:	89 cb                	mov    %ecx,%ebx
c010a831:	29 c3                	sub    %eax,%ebx
c010a833:	89 d8                	mov    %ebx,%eax
c010a835:	01 d0                	add    %edx,%eax
c010a837:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010a83a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a83d:	8b 00                	mov    (%eax),%eax
c010a83f:	83 f8 02             	cmp    $0x2,%eax
c010a842:	75 1a                	jne    c010a85e <fd2file+0x5a>
c010a844:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a847:	8b 40 0c             	mov    0xc(%eax),%eax
c010a84a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a84d:	75 0f                	jne    c010a85e <fd2file+0x5a>
            *file_store = file;
c010a84f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a852:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a855:	89 10                	mov    %edx,(%eax)
            return 0;
c010a857:	b8 00 00 00 00       	mov    $0x0,%eax
c010a85c:	eb 05                	jmp    c010a863 <fd2file+0x5f>
        }
    }
    return -E_INVAL;
c010a85e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a863:	83 c4 14             	add    $0x14,%esp
c010a866:	5b                   	pop    %ebx
c010a867:	5d                   	pop    %ebp
c010a868:	c3                   	ret    

c010a869 <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010a869:	55                   	push   %ebp
c010a86a:	89 e5                	mov    %esp,%ebp
c010a86c:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a86f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a872:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a876:	8b 45 08             	mov    0x8(%ebp),%eax
c010a879:	89 04 24             	mov    %eax,(%esp)
c010a87c:	e8 83 ff ff ff       	call   c010a804 <fd2file>
c010a881:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a884:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a888:	74 07                	je     c010a891 <file_testfd+0x28>
        return 0;
c010a88a:	b8 00 00 00 00       	mov    $0x0,%eax
c010a88f:	eb 33                	jmp    c010a8c4 <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010a891:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a895:	74 11                	je     c010a8a8 <file_testfd+0x3f>
c010a897:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a89a:	8b 40 04             	mov    0x4(%eax),%eax
c010a89d:	85 c0                	test   %eax,%eax
c010a89f:	75 07                	jne    c010a8a8 <file_testfd+0x3f>
        return 0;
c010a8a1:	b8 00 00 00 00       	mov    $0x0,%eax
c010a8a6:	eb 1c                	jmp    c010a8c4 <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010a8a8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a8ac:	74 11                	je     c010a8bf <file_testfd+0x56>
c010a8ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8b1:	8b 40 08             	mov    0x8(%eax),%eax
c010a8b4:	85 c0                	test   %eax,%eax
c010a8b6:	75 07                	jne    c010a8bf <file_testfd+0x56>
        return 0;
c010a8b8:	b8 00 00 00 00       	mov    $0x0,%eax
c010a8bd:	eb 05                	jmp    c010a8c4 <file_testfd+0x5b>
    }
    return 1;
c010a8bf:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010a8c4:	c9                   	leave  
c010a8c5:	c3                   	ret    

c010a8c6 <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010a8c6:	55                   	push   %ebp
c010a8c7:	89 e5                	mov    %esp,%ebp
c010a8c9:	83 ec 48             	sub    $0x48,%esp
    bool readable = 0, writable = 0;
c010a8cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a8d3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010a8da:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a8dd:	83 e0 03             	and    $0x3,%eax
c010a8e0:	83 f8 01             	cmp    $0x1,%eax
c010a8e3:	74 15                	je     c010a8fa <file_open+0x34>
c010a8e5:	83 f8 01             	cmp    $0x1,%eax
c010a8e8:	72 07                	jb     c010a8f1 <file_open+0x2b>
c010a8ea:	83 f8 02             	cmp    $0x2,%eax
c010a8ed:	74 14                	je     c010a903 <file_open+0x3d>
c010a8ef:	eb 21                	jmp    c010a912 <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c010a8f1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010a8f8:	eb 22                	jmp    c010a91c <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c010a8fa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a901:	eb 19                	jmp    c010a91c <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c010a903:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a90a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a90d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010a910:	eb 0a                	jmp    c010a91c <file_open+0x56>
    default:
        return -E_INVAL;
c010a912:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a917:	e9 45 01 00 00       	jmp    c010aa61 <file_open+0x19b>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010a91c:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a91f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a923:	c7 04 24 d9 6a ff ff 	movl   $0xffff6ad9,(%esp)
c010a92a:	e8 21 fb ff ff       	call   c010a450 <fd_array_alloc>
c010a92f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a932:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a936:	74 08                	je     c010a940 <file_open+0x7a>
        return ret;
c010a938:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a93b:	e9 21 01 00 00       	jmp    c010aa61 <file_open+0x19b>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010a940:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a943:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a947:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a94a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a94e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a951:	89 04 24             	mov    %eax,(%esp)
c010a954:	e8 03 56 00 00       	call   c010ff5c <vfs_open>
c010a959:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a95c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a960:	74 13                	je     c010a975 <file_open+0xaf>
        fd_array_free(file);
c010a962:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a965:	89 04 24             	mov    %eax,(%esp)
c010a968:	e8 be fb ff ff       	call   c010a52b <fd_array_free>
        return ret;
c010a96d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a970:	e9 ec 00 00 00       	jmp    c010aa61 <file_open+0x19b>
    }

    file->pos = 0;
c010a975:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a978:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010a97f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a982:	83 e0 20             	and    $0x20,%eax
c010a985:	85 c0                	test   %eax,%eax
c010a987:	0f 84 a8 00 00 00    	je     c010aa35 <file_open+0x16f>
        struct stat __stat, *stat = &__stat;
c010a98d:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010a990:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010a993:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a996:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a999:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a99d:	74 17                	je     c010a9b6 <file_open+0xf0>
c010a99f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9a2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9a5:	85 c0                	test   %eax,%eax
c010a9a7:	74 0d                	je     c010a9b6 <file_open+0xf0>
c010a9a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9ac:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9af:	8b 40 14             	mov    0x14(%eax),%eax
c010a9b2:	85 c0                	test   %eax,%eax
c010a9b4:	75 24                	jne    c010a9da <file_open+0x114>
c010a9b6:	c7 44 24 0c 58 7e 11 	movl   $0xc0117e58,0xc(%esp)
c010a9bd:	c0 
c010a9be:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010a9c5:	c0 
c010a9c6:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c010a9cd:	00 
c010a9ce:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010a9d5:	e8 d2 64 ff ff       	call   c0100eac <__panic>
c010a9da:	c7 44 24 04 a6 7e 11 	movl   $0xc0117ea6,0x4(%esp)
c010a9e1:	c0 
c010a9e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9e5:	89 04 24             	mov    %eax,(%esp)
c010a9e8:	e8 90 4a 00 00       	call   c010f47d <inode_check>
c010a9ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9f0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9f3:	8b 48 14             	mov    0x14(%eax),%ecx
c010a9f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a9f9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a9fc:	89 54 24 04          	mov    %edx,0x4(%esp)
c010aa00:	89 04 24             	mov    %eax,(%esp)
c010aa03:	ff d1                	call   *%ecx
c010aa05:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aa08:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aa0c:	74 1b                	je     c010aa29 <file_open+0x163>
            vfs_close(node);
c010aa0e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010aa11:	89 04 24             	mov    %eax,(%esp)
c010aa14:	e8 33 58 00 00       	call   c011024c <vfs_close>
            fd_array_free(file);
c010aa19:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa1c:	89 04 24             	mov    %eax,(%esp)
c010aa1f:	e8 07 fb ff ff       	call   c010a52b <fd_array_free>
            return ret;
c010aa24:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa27:	eb 38                	jmp    c010aa61 <file_open+0x19b>
        }
        file->pos = stat->st_size;
c010aa29:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa2c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aa2f:	8b 52 0c             	mov    0xc(%edx),%edx
c010aa32:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010aa35:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa38:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010aa3b:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010aa3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa41:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aa44:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010aa47:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aa4d:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010aa50:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa53:	89 04 24             	mov    %eax,(%esp)
c010aa56:	e8 32 fc ff ff       	call   c010a68d <fd_array_open>
    return file->fd;
c010aa5b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa5e:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010aa61:	c9                   	leave  
c010aa62:	c3                   	ret    

c010aa63 <file_close>:

// close file
int
file_close(int fd) {
c010aa63:	55                   	push   %ebp
c010aa64:	89 e5                	mov    %esp,%ebp
c010aa66:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010aa69:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010aa6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa70:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa73:	89 04 24             	mov    %eax,(%esp)
c010aa76:	e8 89 fd ff ff       	call   c010a804 <fd2file>
c010aa7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa82:	74 05                	je     c010aa89 <file_close+0x26>
        return ret;
c010aa84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa87:	eb 10                	jmp    c010aa99 <file_close+0x36>
    }
    fd_array_close(file);
c010aa89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa8c:	89 04 24             	mov    %eax,(%esp)
c010aa8f:	e8 4d fc ff ff       	call   c010a6e1 <fd_array_close>
    return 0;
c010aa94:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aa99:	c9                   	leave  
c010aa9a:	c3                   	ret    

c010aa9b <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010aa9b:	55                   	push   %ebp
c010aa9c:	89 e5                	mov    %esp,%ebp
c010aa9e:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010aaa1:	8b 45 14             	mov    0x14(%ebp),%eax
c010aaa4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010aaaa:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010aaad:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aab1:	8b 45 08             	mov    0x8(%ebp),%eax
c010aab4:	89 04 24             	mov    %eax,(%esp)
c010aab7:	e8 48 fd ff ff       	call   c010a804 <fd2file>
c010aabc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aabf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aac3:	74 08                	je     c010aacd <file_read+0x32>
        return ret;
c010aac5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aac8:	e9 04 01 00 00       	jmp    c010abd1 <file_read+0x136>
    }
    if (!file->readable) {
c010aacd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aad0:	8b 40 04             	mov    0x4(%eax),%eax
c010aad3:	85 c0                	test   %eax,%eax
c010aad5:	75 0a                	jne    c010aae1 <file_read+0x46>
        return -E_INVAL;
c010aad7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010aadc:	e9 f0 00 00 00       	jmp    c010abd1 <file_read+0x136>
    }
    fd_array_acquire(file);
c010aae1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aae4:	89 04 24             	mov    %eax,(%esp)
c010aae7:	e8 d3 fa ff ff       	call   c010a5bf <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010aaec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaef:	8b 40 10             	mov    0x10(%eax),%eax
c010aaf2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010aaf6:	8b 45 10             	mov    0x10(%ebp),%eax
c010aaf9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aafd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab00:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab04:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ab07:	89 04 24             	mov    %eax,(%esp)
c010ab0a:	e8 89 09 00 00       	call   c010b498 <iobuf_init>
c010ab0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010ab12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab15:	8b 40 14             	mov    0x14(%eax),%eax
c010ab18:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ab1b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ab1f:	74 17                	je     c010ab38 <file_read+0x9d>
c010ab21:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab24:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab27:	85 c0                	test   %eax,%eax
c010ab29:	74 0d                	je     c010ab38 <file_read+0x9d>
c010ab2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab2e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab31:	8b 40 0c             	mov    0xc(%eax),%eax
c010ab34:	85 c0                	test   %eax,%eax
c010ab36:	75 24                	jne    c010ab5c <file_read+0xc1>
c010ab38:	c7 44 24 0c ac 7e 11 	movl   $0xc0117eac,0xc(%esp)
c010ab3f:	c0 
c010ab40:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010ab47:	c0 
c010ab48:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010ab4f:	00 
c010ab50:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010ab57:	e8 50 63 ff ff       	call   c0100eac <__panic>
c010ab5c:	c7 44 24 04 f9 7e 11 	movl   $0xc0117ef9,0x4(%esp)
c010ab63:	c0 
c010ab64:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab67:	89 04 24             	mov    %eax,(%esp)
c010ab6a:	e8 0e 49 00 00       	call   c010f47d <inode_check>
c010ab6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab72:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab75:	8b 48 0c             	mov    0xc(%eax),%ecx
c010ab78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab7b:	8b 40 14             	mov    0x14(%eax),%eax
c010ab7e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ab81:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ab85:	89 04 24             	mov    %eax,(%esp)
c010ab88:	ff d1                	call   *%ecx
c010ab8a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010ab8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab90:	8b 50 08             	mov    0x8(%eax),%edx
c010ab93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab96:	8b 40 0c             	mov    0xc(%eax),%eax
c010ab99:	89 d1                	mov    %edx,%ecx
c010ab9b:	29 c1                	sub    %eax,%ecx
c010ab9d:	89 c8                	mov    %ecx,%eax
c010ab9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010aba2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aba5:	8b 00                	mov    (%eax),%eax
c010aba7:	83 f8 02             	cmp    $0x2,%eax
c010abaa:	75 0f                	jne    c010abbb <file_read+0x120>
        file->pos += copied;
c010abac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010abaf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010abb2:	8b 52 10             	mov    0x10(%edx),%edx
c010abb5:	03 55 e8             	add    -0x18(%ebp),%edx
c010abb8:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010abbb:	8b 45 14             	mov    0x14(%ebp),%eax
c010abbe:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010abc1:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010abc3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010abc6:	89 04 24             	mov    %eax,(%esp)
c010abc9:	e8 32 fa ff ff       	call   c010a600 <fd_array_release>
    return ret;
c010abce:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010abd1:	c9                   	leave  
c010abd2:	c3                   	ret    

c010abd3 <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010abd3:	55                   	push   %ebp
c010abd4:	89 e5                	mov    %esp,%ebp
c010abd6:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010abd9:	8b 45 14             	mov    0x14(%ebp),%eax
c010abdc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010abe2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010abe5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010abe9:	8b 45 08             	mov    0x8(%ebp),%eax
c010abec:	89 04 24             	mov    %eax,(%esp)
c010abef:	e8 10 fc ff ff       	call   c010a804 <fd2file>
c010abf4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abf7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010abfb:	74 08                	je     c010ac05 <file_write+0x32>
        return ret;
c010abfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac00:	e9 04 01 00 00       	jmp    c010ad09 <file_write+0x136>
    }
    if (!file->writable) {
c010ac05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ac08:	8b 40 08             	mov    0x8(%eax),%eax
c010ac0b:	85 c0                	test   %eax,%eax
c010ac0d:	75 0a                	jne    c010ac19 <file_write+0x46>
        return -E_INVAL;
c010ac0f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ac14:	e9 f0 00 00 00       	jmp    c010ad09 <file_write+0x136>
    }
    fd_array_acquire(file);
c010ac19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ac1c:	89 04 24             	mov    %eax,(%esp)
c010ac1f:	e8 9b f9 ff ff       	call   c010a5bf <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010ac24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ac27:	8b 40 10             	mov    0x10(%eax),%eax
c010ac2a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ac2e:	8b 45 10             	mov    0x10(%ebp),%eax
c010ac31:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ac35:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ac38:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ac3c:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ac3f:	89 04 24             	mov    %eax,(%esp)
c010ac42:	e8 51 08 00 00       	call   c010b498 <iobuf_init>
c010ac47:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010ac4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ac4d:	8b 40 14             	mov    0x14(%eax),%eax
c010ac50:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ac53:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ac57:	74 17                	je     c010ac70 <file_write+0x9d>
c010ac59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac5c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac5f:	85 c0                	test   %eax,%eax
c010ac61:	74 0d                	je     c010ac70 <file_write+0x9d>
c010ac63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac66:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac69:	8b 40 10             	mov    0x10(%eax),%eax
c010ac6c:	85 c0                	test   %eax,%eax
c010ac6e:	75 24                	jne    c010ac94 <file_write+0xc1>
c010ac70:	c7 44 24 0c 00 7f 11 	movl   $0xc0117f00,0xc(%esp)
c010ac77:	c0 
c010ac78:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010ac7f:	c0 
c010ac80:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010ac87:	00 
c010ac88:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010ac8f:	e8 18 62 ff ff       	call   c0100eac <__panic>
c010ac94:	c7 44 24 04 4e 7f 11 	movl   $0xc0117f4e,0x4(%esp)
c010ac9b:	c0 
c010ac9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac9f:	89 04 24             	mov    %eax,(%esp)
c010aca2:	e8 d6 47 00 00       	call   c010f47d <inode_check>
c010aca7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acaa:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acad:	8b 48 10             	mov    0x10(%eax),%ecx
c010acb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010acb3:	8b 40 14             	mov    0x14(%eax),%eax
c010acb6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010acb9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010acbd:	89 04 24             	mov    %eax,(%esp)
c010acc0:	ff d1                	call   *%ecx
c010acc2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010acc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acc8:	8b 50 08             	mov    0x8(%eax),%edx
c010accb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acce:	8b 40 0c             	mov    0xc(%eax),%eax
c010acd1:	89 d1                	mov    %edx,%ecx
c010acd3:	29 c1                	sub    %eax,%ecx
c010acd5:	89 c8                	mov    %ecx,%eax
c010acd7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010acda:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010acdd:	8b 00                	mov    (%eax),%eax
c010acdf:	83 f8 02             	cmp    $0x2,%eax
c010ace2:	75 0f                	jne    c010acf3 <file_write+0x120>
        file->pos += copied;
c010ace4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ace7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010acea:	8b 52 10             	mov    0x10(%edx),%edx
c010aced:	03 55 e8             	add    -0x18(%ebp),%edx
c010acf0:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010acf3:	8b 45 14             	mov    0x14(%ebp),%eax
c010acf6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010acf9:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010acfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010acfe:	89 04 24             	mov    %eax,(%esp)
c010ad01:	e8 fa f8 ff ff       	call   c010a600 <fd_array_release>
    return ret;
c010ad06:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ad09:	c9                   	leave  
c010ad0a:	c3                   	ret    

c010ad0b <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010ad0b:	55                   	push   %ebp
c010ad0c:	89 e5                	mov    %esp,%ebp
c010ad0e:	83 ec 48             	sub    $0x48,%esp
    struct stat __stat, *stat = &__stat;
c010ad11:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010ad14:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ad17:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ad1a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ad1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad21:	89 04 24             	mov    %eax,(%esp)
c010ad24:	e8 db fa ff ff       	call   c010a804 <fd2file>
c010ad29:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad30:	74 08                	je     c010ad3a <file_seek+0x2f>
        return ret;
c010ad32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad35:	e9 73 01 00 00       	jmp    c010aead <file_seek+0x1a2>
    }
    fd_array_acquire(file);
c010ad3a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad3d:	89 04 24             	mov    %eax,(%esp)
c010ad40:	e8 7a f8 ff ff       	call   c010a5bf <fd_array_acquire>

    switch (whence) {
c010ad45:	8b 45 10             	mov    0x10(%ebp),%eax
c010ad48:	83 f8 01             	cmp    $0x1,%eax
c010ad4b:	74 12                	je     c010ad5f <file_seek+0x54>
c010ad4d:	83 f8 02             	cmp    $0x2,%eax
c010ad50:	74 1b                	je     c010ad6d <file_seek+0x62>
c010ad52:	85 c0                	test   %eax,%eax
c010ad54:	0f 84 ad 00 00 00    	je     c010ae07 <file_seek+0xfc>
c010ad5a:	e9 9f 00 00 00       	jmp    c010adfe <file_seek+0xf3>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010ad5f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad62:	8b 40 10             	mov    0x10(%eax),%eax
c010ad65:	01 45 0c             	add    %eax,0xc(%ebp)
c010ad68:	e9 9e 00 00 00       	jmp    c010ae0b <file_seek+0x100>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010ad6d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad70:	8b 40 14             	mov    0x14(%eax),%eax
c010ad73:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ad76:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ad7a:	74 17                	je     c010ad93 <file_seek+0x88>
c010ad7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad7f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad82:	85 c0                	test   %eax,%eax
c010ad84:	74 0d                	je     c010ad93 <file_seek+0x88>
c010ad86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad89:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad8c:	8b 40 14             	mov    0x14(%eax),%eax
c010ad8f:	85 c0                	test   %eax,%eax
c010ad91:	75 24                	jne    c010adb7 <file_seek+0xac>
c010ad93:	c7 44 24 0c 58 7e 11 	movl   $0xc0117e58,0xc(%esp)
c010ad9a:	c0 
c010ad9b:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010ada2:	c0 
c010ada3:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c010adaa:	00 
c010adab:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010adb2:	e8 f5 60 ff ff       	call   c0100eac <__panic>
c010adb7:	c7 44 24 04 a6 7e 11 	movl   $0xc0117ea6,0x4(%esp)
c010adbe:	c0 
c010adbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adc2:	89 04 24             	mov    %eax,(%esp)
c010adc5:	e8 b3 46 00 00       	call   c010f47d <inode_check>
c010adca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adcd:	8b 40 3c             	mov    0x3c(%eax),%eax
c010add0:	8b 48 14             	mov    0x14(%eax),%ecx
c010add3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010add6:	8b 40 14             	mov    0x14(%eax),%eax
c010add9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010addc:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ade0:	89 04 24             	mov    %eax,(%esp)
c010ade3:	ff d1                	call   *%ecx
c010ade5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ade8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010adec:	75 1c                	jne    c010ae0a <file_seek+0xff>
            pos += stat->st_size;
c010adee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adf1:	8b 50 0c             	mov    0xc(%eax),%edx
c010adf4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010adf7:	01 d0                	add    %edx,%eax
c010adf9:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010adfc:	eb 0c                	jmp    c010ae0a <file_seek+0xff>
    default: ret = -E_INVAL;
c010adfe:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010ae05:	eb 04                	jmp    c010ae0b <file_seek+0x100>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010ae07:	90                   	nop
c010ae08:	eb 01                	jmp    c010ae0b <file_seek+0x100>
    case LSEEK_CUR: pos += file->pos; break;
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
            pos += stat->st_size;
        }
        break;
c010ae0a:	90                   	nop
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010ae0b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae0f:	0f 85 8a 00 00 00    	jne    c010ae9f <file_seek+0x194>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010ae15:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ae18:	8b 40 14             	mov    0x14(%eax),%eax
c010ae1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ae1e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ae22:	74 17                	je     c010ae3b <file_seek+0x130>
c010ae24:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae27:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae2a:	85 c0                	test   %eax,%eax
c010ae2c:	74 0d                	je     c010ae3b <file_seek+0x130>
c010ae2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae31:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae34:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ae37:	85 c0                	test   %eax,%eax
c010ae39:	75 24                	jne    c010ae5f <file_seek+0x154>
c010ae3b:	c7 44 24 0c 54 7f 11 	movl   $0xc0117f54,0xc(%esp)
c010ae42:	c0 
c010ae43:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010ae4a:	c0 
c010ae4b:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c010ae52:	00 
c010ae53:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010ae5a:	e8 4d 60 ff ff       	call   c0100eac <__panic>
c010ae5f:	c7 44 24 04 a4 7f 11 	movl   $0xc0117fa4,0x4(%esp)
c010ae66:	c0 
c010ae67:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae6a:	89 04 24             	mov    %eax,(%esp)
c010ae6d:	e8 0b 46 00 00       	call   c010f47d <inode_check>
c010ae72:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae75:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae78:	8b 48 2c             	mov    0x2c(%eax),%ecx
c010ae7b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ae7e:	8b 40 14             	mov    0x14(%eax),%eax
c010ae81:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ae84:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ae88:	89 04 24             	mov    %eax,(%esp)
c010ae8b:	ff d1                	call   *%ecx
c010ae8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae94:	75 09                	jne    c010ae9f <file_seek+0x194>
            file->pos = pos;
c010ae96:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ae99:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ae9c:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010ae9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010aea2:	89 04 24             	mov    %eax,(%esp)
c010aea5:	e8 56 f7 ff ff       	call   c010a600 <fd_array_release>
    return ret;
c010aeaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aead:	c9                   	leave  
c010aeae:	c3                   	ret    

c010aeaf <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010aeaf:	55                   	push   %ebp
c010aeb0:	89 e5                	mov    %esp,%ebp
c010aeb2:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010aeb5:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010aeb8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aebc:	8b 45 08             	mov    0x8(%ebp),%eax
c010aebf:	89 04 24             	mov    %eax,(%esp)
c010aec2:	e8 3d f9 ff ff       	call   c010a804 <fd2file>
c010aec7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aeca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aece:	74 08                	je     c010aed8 <file_fstat+0x29>
        return ret;
c010aed0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aed3:	e9 94 00 00 00       	jmp    c010af6c <file_fstat+0xbd>
    }
    fd_array_acquire(file);
c010aed8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aedb:	89 04 24             	mov    %eax,(%esp)
c010aede:	e8 dc f6 ff ff       	call   c010a5bf <fd_array_acquire>
    ret = vop_fstat(file->node, stat);
c010aee3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aee6:	8b 40 14             	mov    0x14(%eax),%eax
c010aee9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aeec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aef0:	74 17                	je     c010af09 <file_fstat+0x5a>
c010aef2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aef5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aef8:	85 c0                	test   %eax,%eax
c010aefa:	74 0d                	je     c010af09 <file_fstat+0x5a>
c010aefc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeff:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af02:	8b 40 14             	mov    0x14(%eax),%eax
c010af05:	85 c0                	test   %eax,%eax
c010af07:	75 24                	jne    c010af2d <file_fstat+0x7e>
c010af09:	c7 44 24 0c 58 7e 11 	movl   $0xc0117e58,0xc(%esp)
c010af10:	c0 
c010af11:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010af18:	c0 
c010af19:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c010af20:	00 
c010af21:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010af28:	e8 7f 5f ff ff       	call   c0100eac <__panic>
c010af2d:	c7 44 24 04 a6 7e 11 	movl   $0xc0117ea6,0x4(%esp)
c010af34:	c0 
c010af35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af38:	89 04 24             	mov    %eax,(%esp)
c010af3b:	e8 3d 45 00 00       	call   c010f47d <inode_check>
c010af40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af43:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af46:	8b 48 14             	mov    0x14(%eax),%ecx
c010af49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af4c:	8b 40 14             	mov    0x14(%eax),%eax
c010af4f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010af52:	89 54 24 04          	mov    %edx,0x4(%esp)
c010af56:	89 04 24             	mov    %eax,(%esp)
c010af59:	ff d1                	call   *%ecx
c010af5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010af5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af61:	89 04 24             	mov    %eax,(%esp)
c010af64:	e8 97 f6 ff ff       	call   c010a600 <fd_array_release>
    return ret;
c010af69:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010af6c:	c9                   	leave  
c010af6d:	c3                   	ret    

c010af6e <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010af6e:	55                   	push   %ebp
c010af6f:	89 e5                	mov    %esp,%ebp
c010af71:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010af74:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010af77:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af7b:	8b 45 08             	mov    0x8(%ebp),%eax
c010af7e:	89 04 24             	mov    %eax,(%esp)
c010af81:	e8 7e f8 ff ff       	call   c010a804 <fd2file>
c010af86:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af8d:	74 08                	je     c010af97 <file_fsync+0x29>
        return ret;
c010af8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af92:	e9 8d 00 00 00       	jmp    c010b024 <file_fsync+0xb6>
    }
    fd_array_acquire(file);
c010af97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af9a:	89 04 24             	mov    %eax,(%esp)
c010af9d:	e8 1d f6 ff ff       	call   c010a5bf <fd_array_acquire>
    ret = vop_fsync(file->node);
c010afa2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afa5:	8b 40 14             	mov    0x14(%eax),%eax
c010afa8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010afab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010afaf:	74 17                	je     c010afc8 <file_fsync+0x5a>
c010afb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afb4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010afb7:	85 c0                	test   %eax,%eax
c010afb9:	74 0d                	je     c010afc8 <file_fsync+0x5a>
c010afbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afbe:	8b 40 3c             	mov    0x3c(%eax),%eax
c010afc1:	8b 40 18             	mov    0x18(%eax),%eax
c010afc4:	85 c0                	test   %eax,%eax
c010afc6:	75 24                	jne    c010afec <file_fsync+0x7e>
c010afc8:	c7 44 24 0c ac 7f 11 	movl   $0xc0117fac,0xc(%esp)
c010afcf:	c0 
c010afd0:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010afd7:	c0 
c010afd8:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010afdf:	00 
c010afe0:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010afe7:	e8 c0 5e ff ff       	call   c0100eac <__panic>
c010afec:	c7 44 24 04 fa 7f 11 	movl   $0xc0117ffa,0x4(%esp)
c010aff3:	c0 
c010aff4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aff7:	89 04 24             	mov    %eax,(%esp)
c010affa:	e8 7e 44 00 00       	call   c010f47d <inode_check>
c010afff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b002:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b005:	8b 50 18             	mov    0x18(%eax),%edx
c010b008:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b00b:	8b 40 14             	mov    0x14(%eax),%eax
c010b00e:	89 04 24             	mov    %eax,(%esp)
c010b011:	ff d2                	call   *%edx
c010b013:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010b016:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b019:	89 04 24             	mov    %eax,(%esp)
c010b01c:	e8 df f5 ff ff       	call   c010a600 <fd_array_release>
    return ret;
c010b021:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b024:	c9                   	leave  
c010b025:	c3                   	ret    

c010b026 <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010b026:	55                   	push   %ebp
c010b027:	89 e5                	mov    %esp,%ebp
c010b029:	53                   	push   %ebx
c010b02a:	83 ec 34             	sub    $0x34,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010b02d:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b030:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b034:	8b 45 08             	mov    0x8(%ebp),%eax
c010b037:	89 04 24             	mov    %eax,(%esp)
c010b03a:	e8 c5 f7 ff ff       	call   c010a804 <fd2file>
c010b03f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b042:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b046:	74 08                	je     c010b050 <file_getdirentry+0x2a>
        return ret;
c010b048:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b04b:	e9 e5 00 00 00       	jmp    c010b135 <file_getdirentry+0x10f>
    }
    fd_array_acquire(file);
c010b050:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b053:	89 04 24             	mov    %eax,(%esp)
c010b056:	e8 64 f5 ff ff       	call   c010a5bf <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010b05b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b05e:	8b 00                	mov    (%eax),%eax
c010b060:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b063:	83 c2 04             	add    $0x4,%edx
c010b066:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b06a:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010b071:	00 
c010b072:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b076:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b079:	89 04 24             	mov    %eax,(%esp)
c010b07c:	e8 17 04 00 00       	call   c010b498 <iobuf_init>
c010b081:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010b084:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b087:	8b 40 14             	mov    0x14(%eax),%eax
c010b08a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b08d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b091:	74 17                	je     c010b0aa <file_getdirentry+0x84>
c010b093:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b096:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b099:	85 c0                	test   %eax,%eax
c010b09b:	74 0d                	je     c010b0aa <file_getdirentry+0x84>
c010b09d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0a0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b0a3:	8b 40 20             	mov    0x20(%eax),%eax
c010b0a6:	85 c0                	test   %eax,%eax
c010b0a8:	75 24                	jne    c010b0ce <file_getdirentry+0xa8>
c010b0aa:	c7 44 24 0c 00 80 11 	movl   $0xc0118000,0xc(%esp)
c010b0b1:	c0 
c010b0b2:	c7 44 24 08 16 7d 11 	movl   $0xc0117d16,0x8(%esp)
c010b0b9:	c0 
c010b0ba:	c7 44 24 04 4e 01 00 	movl   $0x14e,0x4(%esp)
c010b0c1:	00 
c010b0c2:	c7 04 24 2b 7d 11 c0 	movl   $0xc0117d2b,(%esp)
c010b0c9:	e8 de 5d ff ff       	call   c0100eac <__panic>
c010b0ce:	c7 44 24 04 54 80 11 	movl   $0xc0118054,0x4(%esp)
c010b0d5:	c0 
c010b0d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0d9:	89 04 24             	mov    %eax,(%esp)
c010b0dc:	e8 9c 43 00 00       	call   c010f47d <inode_check>
c010b0e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0e4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b0e7:	8b 48 20             	mov    0x20(%eax),%ecx
c010b0ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0ed:	8b 40 14             	mov    0x14(%eax),%eax
c010b0f0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b0f3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b0f7:	89 04 24             	mov    %eax,(%esp)
c010b0fa:	ff d1                	call   *%ecx
c010b0fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b103:	75 22                	jne    c010b127 <file_getdirentry+0x101>
        direntp->offset += iobuf_used(iob);
c010b105:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b108:	8b 00                	mov    (%eax),%eax
c010b10a:	89 c2                	mov    %eax,%edx
c010b10c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b10f:	8b 48 08             	mov    0x8(%eax),%ecx
c010b112:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b115:	8b 40 0c             	mov    0xc(%eax),%eax
c010b118:	89 cb                	mov    %ecx,%ebx
c010b11a:	29 c3                	sub    %eax,%ebx
c010b11c:	89 d8                	mov    %ebx,%eax
c010b11e:	01 d0                	add    %edx,%eax
c010b120:	89 c2                	mov    %eax,%edx
c010b122:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b125:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010b127:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b12a:	89 04 24             	mov    %eax,(%esp)
c010b12d:	e8 ce f4 ff ff       	call   c010a600 <fd_array_release>
    return ret;
c010b132:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b135:	83 c4 34             	add    $0x34,%esp
c010b138:	5b                   	pop    %ebx
c010b139:	5d                   	pop    %ebp
c010b13a:	c3                   	ret    

c010b13b <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010b13b:	55                   	push   %ebp
c010b13c:	89 e5                	mov    %esp,%ebp
c010b13e:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010b141:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b144:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b148:	8b 45 08             	mov    0x8(%ebp),%eax
c010b14b:	89 04 24             	mov    %eax,(%esp)
c010b14e:	e8 b1 f6 ff ff       	call   c010a804 <fd2file>
c010b153:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b156:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b15a:	74 05                	je     c010b161 <file_dup+0x26>
        return ret;
c010b15c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b15f:	eb 38                	jmp    c010b199 <file_dup+0x5e>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010b161:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b164:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b168:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b16b:	89 04 24             	mov    %eax,(%esp)
c010b16e:	e8 dd f2 ff ff       	call   c010a450 <fd_array_alloc>
c010b173:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b176:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b17a:	74 05                	je     c010b181 <file_dup+0x46>
        return ret;
c010b17c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b17f:	eb 18                	jmp    c010b199 <file_dup+0x5e>
    }
    fd_array_dup(file2, file1);
c010b181:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b184:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b187:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b18b:	89 04 24             	mov    %eax,(%esp)
c010b18e:	e8 da f5 ff ff       	call   c010a76d <fd_array_dup>
    return file2->fd;
c010b193:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b196:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010b199:	c9                   	leave  
c010b19a:	c3                   	ret    
	...

c010b19c <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010b19c:	55                   	push   %ebp
c010b19d:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010b19f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1a2:	8b 40 08             	mov    0x8(%eax),%eax
}
c010b1a5:	5d                   	pop    %ebp
c010b1a6:	c3                   	ret    

c010b1a7 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010b1a7:	55                   	push   %ebp
c010b1a8:	89 e5                	mov    %esp,%ebp
c010b1aa:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010b1ad:	e8 e7 43 00 00       	call   c010f599 <vfs_init>
    dev_init();
c010b1b2:	e8 27 5b 00 00       	call   c0110cde <dev_init>
    sfs_init();
c010b1b7:	e8 ec 68 00 00       	call   c0111aa8 <sfs_init>
}
c010b1bc:	c9                   	leave  
c010b1bd:	c3                   	ret    

c010b1be <fs_cleanup>:

void
fs_cleanup(void) {
c010b1be:	55                   	push   %ebp
c010b1bf:	89 e5                	mov    %esp,%ebp
c010b1c1:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010b1c4:	e8 8a 45 00 00       	call   c010f753 <vfs_cleanup>
}
c010b1c9:	c9                   	leave  
c010b1ca:	c3                   	ret    

c010b1cb <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010b1cb:	55                   	push   %ebp
c010b1cc:	89 e5                	mov    %esp,%ebp
c010b1ce:	83 ec 18             	sub    $0x18,%esp
    down(&(filesp->files_sem));
c010b1d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1d4:	83 c0 0c             	add    $0xc,%eax
c010b1d7:	89 04 24             	mov    %eax,(%esp)
c010b1da:	e8 5d ec ff ff       	call   c0109e3c <down>
}
c010b1df:	c9                   	leave  
c010b1e0:	c3                   	ret    

c010b1e1 <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010b1e1:	55                   	push   %ebp
c010b1e2:	89 e5                	mov    %esp,%ebp
c010b1e4:	83 ec 18             	sub    $0x18,%esp
    up(&(filesp->files_sem));
c010b1e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1ea:	83 c0 0c             	add    $0xc,%eax
c010b1ed:	89 04 24             	mov    %eax,(%esp)
c010b1f0:	e8 2c ec ff ff       	call   c0109e21 <up>
}
c010b1f5:	c9                   	leave  
c010b1f6:	c3                   	ret    

c010b1f7 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010b1f7:	55                   	push   %ebp
c010b1f8:	89 e5                	mov    %esp,%ebp
c010b1fa:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010b1fd:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b204:	e8 4d 9c ff ff       	call   c0104e56 <kmalloc>
c010b209:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b20c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b210:	74 43                	je     c010b255 <files_create+0x5e>
        filesp->pwd = NULL;
c010b212:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b215:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010b21b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b21e:	8d 50 18             	lea    0x18(%eax),%edx
c010b221:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b224:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010b227:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b22a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010b231:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b234:	83 c0 0c             	add    $0xc,%eax
c010b237:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b23e:	00 
c010b23f:	89 04 24             	mov    %eax,(%esp)
c010b242:	e8 67 ea ff ff       	call   c0109cae <sem_init>
        fd_array_init(filesp->fd_array);
c010b247:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b24a:	8b 40 04             	mov    0x4(%eax),%eax
c010b24d:	89 04 24             	mov    %eax,(%esp)
c010b250:	e8 b6 f1 ff ff       	call   c010a40b <fd_array_init>
    }
    return filesp;
c010b255:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b258:	c9                   	leave  
c010b259:	c3                   	ret    

c010b25a <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010b25a:	55                   	push   %ebp
c010b25b:	89 e5                	mov    %esp,%ebp
c010b25d:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c010b260:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b264:	74 0f                	je     c010b275 <files_destroy+0x1b>
c010b266:	8b 45 08             	mov    0x8(%ebp),%eax
c010b269:	89 04 24             	mov    %eax,(%esp)
c010b26c:	e8 2b ff ff ff       	call   c010b19c <files_count>
c010b271:	85 c0                	test   %eax,%eax
c010b273:	74 24                	je     c010b299 <files_destroy+0x3f>
c010b275:	c7 44 24 0c 60 80 11 	movl   $0xc0118060,0xc(%esp)
c010b27c:	c0 
c010b27d:	c7 44 24 08 8b 80 11 	movl   $0xc011808b,0x8(%esp)
c010b284:	c0 
c010b285:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010b28c:	00 
c010b28d:	c7 04 24 a0 80 11 c0 	movl   $0xc01180a0,(%esp)
c010b294:	e8 13 5c ff ff       	call   c0100eac <__panic>
    if (filesp->pwd != NULL) {
c010b299:	8b 45 08             	mov    0x8(%ebp),%eax
c010b29c:	8b 00                	mov    (%eax),%eax
c010b29e:	85 c0                	test   %eax,%eax
c010b2a0:	74 0d                	je     c010b2af <files_destroy+0x55>
        vop_ref_dec(filesp->pwd);
c010b2a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2a5:	8b 00                	mov    (%eax),%eax
c010b2a7:	89 04 24             	mov    %eax,(%esp)
c010b2aa:	e8 e0 3f 00 00       	call   c010f28f <inode_ref_dec>
    }
    int i;
    struct file *file = filesp->fd_array;
c010b2af:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2b2:	8b 40 04             	mov    0x4(%eax),%eax
c010b2b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b2b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b2bf:	eb 4a                	jmp    c010b30b <files_destroy+0xb1>
        if (file->status == FD_OPENED) {
c010b2c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2c4:	8b 00                	mov    (%eax),%eax
c010b2c6:	83 f8 02             	cmp    $0x2,%eax
c010b2c9:	75 0b                	jne    c010b2d6 <files_destroy+0x7c>
            fd_array_close(file);
c010b2cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2ce:	89 04 24             	mov    %eax,(%esp)
c010b2d1:	e8 0b f4 ff ff       	call   c010a6e1 <fd_array_close>
        }
        assert(file->status == FD_NONE);
c010b2d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2d9:	8b 00                	mov    (%eax),%eax
c010b2db:	85 c0                	test   %eax,%eax
c010b2dd:	74 24                	je     c010b303 <files_destroy+0xa9>
c010b2df:	c7 44 24 0c ad 80 11 	movl   $0xc01180ad,0xc(%esp)
c010b2e6:	c0 
c010b2e7:	c7 44 24 08 8b 80 11 	movl   $0xc011808b,0x8(%esp)
c010b2ee:	c0 
c010b2ef:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010b2f6:	00 
c010b2f7:	c7 04 24 a0 80 11 c0 	movl   $0xc01180a0,(%esp)
c010b2fe:	e8 a9 5b ff ff       	call   c0100eac <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b303:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b307:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b30b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b30e:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b313:	76 ac                	jbe    c010b2c1 <files_destroy+0x67>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010b315:	8b 45 08             	mov    0x8(%ebp),%eax
c010b318:	89 04 24             	mov    %eax,(%esp)
c010b31b:	e8 51 9b ff ff       	call   c0104e71 <kfree>
}
c010b320:	c9                   	leave  
c010b321:	c3                   	ret    

c010b322 <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010b322:	55                   	push   %ebp
c010b323:	89 e5                	mov    %esp,%ebp
c010b325:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c010b328:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b32c:	74 0f                	je     c010b33d <files_closeall+0x1b>
c010b32e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b331:	89 04 24             	mov    %eax,(%esp)
c010b334:	e8 63 fe ff ff       	call   c010b19c <files_count>
c010b339:	85 c0                	test   %eax,%eax
c010b33b:	7f 24                	jg     c010b361 <files_closeall+0x3f>
c010b33d:	c7 44 24 0c c8 80 11 	movl   $0xc01180c8,0xc(%esp)
c010b344:	c0 
c010b345:	c7 44 24 08 8b 80 11 	movl   $0xc011808b,0x8(%esp)
c010b34c:	c0 
c010b34d:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010b354:	00 
c010b355:	c7 04 24 a0 80 11 c0 	movl   $0xc01180a0,(%esp)
c010b35c:	e8 4b 5b ff ff       	call   c0100eac <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010b361:	8b 45 08             	mov    0x8(%ebp),%eax
c010b364:	8b 40 04             	mov    0x4(%eax),%eax
c010b367:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b36a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010b371:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010b375:	eb 1d                	jmp    c010b394 <files_closeall+0x72>
        if (file->status == FD_OPENED) {
c010b377:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b37a:	8b 00                	mov    (%eax),%eax
c010b37c:	83 f8 02             	cmp    $0x2,%eax
c010b37f:	75 0b                	jne    c010b38c <files_closeall+0x6a>
            fd_array_close(file);
c010b381:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b384:	89 04 24             	mov    %eax,(%esp)
c010b387:	e8 55 f3 ff ff       	call   c010a6e1 <fd_array_close>
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b38c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b390:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b394:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b397:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b39c:	76 d9                	jbe    c010b377 <files_closeall+0x55>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010b39e:	c9                   	leave  
c010b39f:	c3                   	ret    

c010b3a0 <dup_files>:

int
dup_files(struct files_struct *to, struct files_struct *from) {
c010b3a0:	55                   	push   %ebp
c010b3a1:	89 e5                	mov    %esp,%ebp
c010b3a3:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[dup_fs]\n");
    assert(to != NULL && from != NULL);
c010b3a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b3aa:	74 06                	je     c010b3b2 <dup_files+0x12>
c010b3ac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b3b0:	75 24                	jne    c010b3d6 <dup_files+0x36>
c010b3b2:	c7 44 24 0c f2 80 11 	movl   $0xc01180f2,0xc(%esp)
c010b3b9:	c0 
c010b3ba:	c7 44 24 08 8b 80 11 	movl   $0xc011808b,0x8(%esp)
c010b3c1:	c0 
c010b3c2:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c010b3c9:	00 
c010b3ca:	c7 04 24 a0 80 11 c0 	movl   $0xc01180a0,(%esp)
c010b3d1:	e8 d6 5a ff ff       	call   c0100eac <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010b3d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3d9:	89 04 24             	mov    %eax,(%esp)
c010b3dc:	e8 bb fd ff ff       	call   c010b19c <files_count>
c010b3e1:	85 c0                	test   %eax,%eax
c010b3e3:	75 0f                	jne    c010b3f4 <dup_files+0x54>
c010b3e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3e8:	89 04 24             	mov    %eax,(%esp)
c010b3eb:	e8 ac fd ff ff       	call   c010b19c <files_count>
c010b3f0:	85 c0                	test   %eax,%eax
c010b3f2:	7f 24                	jg     c010b418 <dup_files+0x78>
c010b3f4:	c7 44 24 0c 10 81 11 	movl   $0xc0118110,0xc(%esp)
c010b3fb:	c0 
c010b3fc:	c7 44 24 08 8b 80 11 	movl   $0xc011808b,0x8(%esp)
c010b403:	c0 
c010b404:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c010b40b:	00 
c010b40c:	c7 04 24 a0 80 11 c0 	movl   $0xc01180a0,(%esp)
c010b413:	e8 94 5a ff ff       	call   c0100eac <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010b418:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b41b:	8b 10                	mov    (%eax),%edx
c010b41d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b420:	89 10                	mov    %edx,(%eax)
c010b422:	8b 45 08             	mov    0x8(%ebp),%eax
c010b425:	8b 00                	mov    (%eax),%eax
c010b427:	85 c0                	test   %eax,%eax
c010b429:	74 0d                	je     c010b438 <dup_files+0x98>
        vop_ref_inc(to->pwd);
c010b42b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b42e:	8b 00                	mov    (%eax),%eax
c010b430:	89 04 24             	mov    %eax,(%esp)
c010b433:	e8 3d 3e 00 00       	call   c010f275 <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010b438:	8b 45 08             	mov    0x8(%ebp),%eax
c010b43b:	8b 40 04             	mov    0x4(%eax),%eax
c010b43e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b441:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b444:	8b 40 04             	mov    0x4(%eax),%eax
c010b447:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b44a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b451:	eb 31                	jmp    c010b484 <dup_files+0xe4>
        if (from_file->status == FD_OPENED) {
c010b453:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b456:	8b 00                	mov    (%eax),%eax
c010b458:	83 f8 02             	cmp    $0x2,%eax
c010b45b:	75 1b                	jne    c010b478 <dup_files+0xd8>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010b45d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b460:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010b466:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b469:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b46d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b470:	89 04 24             	mov    %eax,(%esp)
c010b473:	e8 f5 f2 ff ff       	call   c010a76d <fd_array_dup>
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b478:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b47c:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b480:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010b484:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b487:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b48c:	76 c5                	jbe    c010b453 <dup_files+0xb3>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010b48e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b493:	c9                   	leave  
c010b494:	c3                   	ret    
c010b495:	00 00                	add    %al,(%eax)
	...

c010b498 <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010b498:	55                   	push   %ebp
c010b499:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010b49b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b49e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b4a1:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010b4a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4a6:	8b 55 14             	mov    0x14(%ebp),%edx
c010b4a9:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010b4ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4af:	8b 55 10             	mov    0x10(%ebp),%edx
c010b4b2:	89 50 0c             	mov    %edx,0xc(%eax)
c010b4b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4b8:	8b 50 0c             	mov    0xc(%eax),%edx
c010b4bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4be:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010b4c1:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b4c4:	5d                   	pop    %ebp
c010b4c5:	c3                   	ret    

c010b4c6 <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010b4c6:	55                   	push   %ebp
c010b4c7:	89 e5                	mov    %esp,%ebp
c010b4c9:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b4cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4cf:	8b 40 0c             	mov    0xc(%eax),%eax
c010b4d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b4d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4d8:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b4db:	76 06                	jbe    c010b4e3 <iobuf_move+0x1d>
        alen = len;
c010b4dd:	8b 45 10             	mov    0x10(%ebp),%eax
c010b4e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b4e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b4e7:	74 57                	je     c010b540 <iobuf_move+0x7a>
        void *src = iob->io_base, *dst = data;
c010b4e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4ec:	8b 00                	mov    (%eax),%eax
c010b4ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b4f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b4f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010b4f7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b4fb:	74 12                	je     c010b50f <iobuf_move+0x49>
            void *tmp = src;
c010b4fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b500:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010b503:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b506:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b509:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b50c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010b50f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b512:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b516:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b519:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b51d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b520:	89 04 24             	mov    %eax,(%esp)
c010b523:	e8 97 a2 00 00       	call   c01157bf <memmove>
        iobuf_skip(iob, alen), len -= alen;
c010b528:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b52b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b52f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b532:	89 04 24             	mov    %eax,(%esp)
c010b535:	e8 a1 00 00 00       	call   c010b5db <iobuf_skip>
c010b53a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b53d:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010b540:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010b544:	74 08                	je     c010b54e <iobuf_move+0x88>
        *copiedp = alen;
c010b546:	8b 45 18             	mov    0x18(%ebp),%eax
c010b549:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b54c:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b54e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b552:	75 07                	jne    c010b55b <iobuf_move+0x95>
c010b554:	b8 00 00 00 00       	mov    $0x0,%eax
c010b559:	eb 05                	jmp    c010b560 <iobuf_move+0x9a>
c010b55b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b560:	c9                   	leave  
c010b561:	c3                   	ret    

c010b562 <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010b562:	55                   	push   %ebp
c010b563:	89 e5                	mov    %esp,%ebp
c010b565:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b568:	8b 45 08             	mov    0x8(%ebp),%eax
c010b56b:	8b 40 0c             	mov    0xc(%eax),%eax
c010b56e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b571:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b574:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b577:	76 06                	jbe    c010b57f <iobuf_move_zeros+0x1d>
        alen = len;
c010b579:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b57c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b57f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b583:	74 34                	je     c010b5b9 <iobuf_move_zeros+0x57>
        memset(iob->io_base, 0, alen);
c010b585:	8b 45 08             	mov    0x8(%ebp),%eax
c010b588:	8b 00                	mov    (%eax),%eax
c010b58a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b58d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b591:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b598:	00 
c010b599:	89 04 24             	mov    %eax,(%esp)
c010b59c:	e8 d3 a1 00 00       	call   c0115774 <memset>
        iobuf_skip(iob, alen), len -= alen;
c010b5a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b5a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5ab:	89 04 24             	mov    %eax,(%esp)
c010b5ae:	e8 28 00 00 00       	call   c010b5db <iobuf_skip>
c010b5b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5b6:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010b5b9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b5bd:	74 08                	je     c010b5c7 <iobuf_move_zeros+0x65>
        *copiedp = alen;
c010b5bf:	8b 45 10             	mov    0x10(%ebp),%eax
c010b5c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b5c5:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b5c7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b5cb:	75 07                	jne    c010b5d4 <iobuf_move_zeros+0x72>
c010b5cd:	b8 00 00 00 00       	mov    $0x0,%eax
c010b5d2:	eb 05                	jmp    c010b5d9 <iobuf_move_zeros+0x77>
c010b5d4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b5d9:	c9                   	leave  
c010b5da:	c3                   	ret    

c010b5db <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010b5db:	55                   	push   %ebp
c010b5dc:	89 e5                	mov    %esp,%ebp
c010b5de:	83 ec 18             	sub    $0x18,%esp
    assert(iob->io_resid >= n);
c010b5e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5e4:	8b 40 0c             	mov    0xc(%eax),%eax
c010b5e7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b5ea:	73 24                	jae    c010b610 <iobuf_skip+0x35>
c010b5ec:	c7 44 24 0c 3e 81 11 	movl   $0xc011813e,0xc(%esp)
c010b5f3:	c0 
c010b5f4:	c7 44 24 08 51 81 11 	movl   $0xc0118151,0x8(%esp)
c010b5fb:	c0 
c010b5fc:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c010b603:	00 
c010b604:	c7 04 24 66 81 11 c0 	movl   $0xc0118166,(%esp)
c010b60b:	e8 9c 58 ff ff       	call   c0100eac <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010b610:	8b 45 08             	mov    0x8(%ebp),%eax
c010b613:	8b 00                	mov    (%eax),%eax
c010b615:	89 c2                	mov    %eax,%edx
c010b617:	03 55 0c             	add    0xc(%ebp),%edx
c010b61a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b61d:	89 10                	mov    %edx,(%eax)
c010b61f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b622:	8b 40 04             	mov    0x4(%eax),%eax
c010b625:	03 45 0c             	add    0xc(%ebp),%eax
c010b628:	89 c2                	mov    %eax,%edx
c010b62a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b62d:	89 50 04             	mov    %edx,0x4(%eax)
c010b630:	8b 45 08             	mov    0x8(%ebp),%eax
c010b633:	8b 40 0c             	mov    0xc(%eax),%eax
c010b636:	89 c2                	mov    %eax,%edx
c010b638:	2b 55 0c             	sub    0xc(%ebp),%edx
c010b63b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b63e:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010b641:	c9                   	leave  
c010b642:	c3                   	ret    
	...

c010b644 <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c010b644:	55                   	push   %ebp
c010b645:	89 e5                	mov    %esp,%ebp
c010b647:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b64a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b64e:	74 25                	je     c010b675 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010b650:	8b 45 08             	mov    0x8(%ebp),%eax
c010b653:	83 c0 1c             	add    $0x1c,%eax
c010b656:	89 04 24             	mov    %eax,(%esp)
c010b659:	e8 de e7 ff ff       	call   c0109e3c <down>
        if (current != NULL) {
c010b65e:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010b663:	85 c0                	test   %eax,%eax
c010b665:	74 0e                	je     c010b675 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010b667:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010b66c:	8b 50 04             	mov    0x4(%eax),%edx
c010b66f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b672:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b675:	c9                   	leave  
c010b676:	c3                   	ret    

c010b677 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b677:	55                   	push   %ebp
c010b678:	89 e5                	mov    %esp,%ebp
c010b67a:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b67d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b681:	74 18                	je     c010b69b <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010b683:	8b 45 08             	mov    0x8(%ebp),%eax
c010b686:	83 c0 1c             	add    $0x1c,%eax
c010b689:	89 04 24             	mov    %eax,(%esp)
c010b68c:	e8 90 e7 ff ff       	call   c0109e21 <up>
        mm->locked_by = 0;
c010b691:	8b 45 08             	mov    0x8(%ebp),%eax
c010b694:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b69b:	c9                   	leave  
c010b69c:	c3                   	ret    

c010b69d <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c010b69d:	55                   	push   %ebp
c010b69e:	89 e5                	mov    %esp,%ebp
c010b6a0:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b6a3:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010b6a8:	8b 40 18             	mov    0x18(%eax),%eax
c010b6ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c010b6ae:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b6b5:	e8 9c 97 ff ff       	call   c0104e56 <kmalloc>
c010b6ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b6bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b6c1:	75 07                	jne    c010b6ca <copy_path+0x2d>
        return -E_NO_MEM;
c010b6c3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b6c8:	eb 66                	jmp    c010b730 <copy_path+0x93>
    }
    lock_mm(mm);
c010b6ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6cd:	89 04 24             	mov    %eax,(%esp)
c010b6d0:	e8 6f ff ff ff       	call   c010b644 <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c010b6d5:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010b6dc:	00 
c010b6dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b6e0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b6e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6ee:	89 04 24             	mov    %eax,(%esp)
c010b6f1:	e8 bb db ff ff       	call   c01092b1 <copy_string>
c010b6f6:	85 c0                	test   %eax,%eax
c010b6f8:	75 1e                	jne    c010b718 <copy_path+0x7b>
        unlock_mm(mm);
c010b6fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6fd:	89 04 24             	mov    %eax,(%esp)
c010b700:	e8 72 ff ff ff       	call   c010b677 <unlock_mm>
        goto failed_cleanup;
c010b705:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c010b706:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b709:	89 04 24             	mov    %eax,(%esp)
c010b70c:	e8 60 97 ff ff       	call   c0104e71 <kfree>
    return -E_INVAL;
c010b711:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b716:	eb 18                	jmp    c010b730 <copy_path+0x93>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c010b718:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b71b:	89 04 24             	mov    %eax,(%esp)
c010b71e:	e8 54 ff ff ff       	call   c010b677 <unlock_mm>
    *to = buffer;
c010b723:	8b 45 08             	mov    0x8(%ebp),%eax
c010b726:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b729:	89 10                	mov    %edx,(%eax)
    return 0;
c010b72b:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c010b730:	c9                   	leave  
c010b731:	c3                   	ret    

c010b732 <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c010b732:	55                   	push   %ebp
c010b733:	89 e5                	mov    %esp,%ebp
c010b735:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b738:	8b 45 08             	mov    0x8(%ebp),%eax
c010b73b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b73f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b742:	89 04 24             	mov    %eax,(%esp)
c010b745:	e8 53 ff ff ff       	call   c010b69d <copy_path>
c010b74a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b74d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b751:	74 05                	je     c010b758 <sysfile_open+0x26>
        return ret;
c010b753:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b756:	eb 23                	jmp    c010b77b <sysfile_open+0x49>
    }
    ret = file_open(path, open_flags);
c010b758:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b75b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b75e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b762:	89 04 24             	mov    %eax,(%esp)
c010b765:	e8 5c f1 ff ff       	call   c010a8c6 <file_open>
c010b76a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b76d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b770:	89 04 24             	mov    %eax,(%esp)
c010b773:	e8 f9 96 ff ff       	call   c0104e71 <kfree>
    return ret;
c010b778:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b77b:	c9                   	leave  
c010b77c:	c3                   	ret    

c010b77d <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c010b77d:	55                   	push   %ebp
c010b77e:	89 e5                	mov    %esp,%ebp
c010b780:	83 ec 18             	sub    $0x18,%esp
    return file_close(fd);
c010b783:	8b 45 08             	mov    0x8(%ebp),%eax
c010b786:	89 04 24             	mov    %eax,(%esp)
c010b789:	e8 d5 f2 ff ff       	call   c010aa63 <file_close>
}
c010b78e:	c9                   	leave  
c010b78f:	c3                   	ret    

c010b790 <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c010b790:	55                   	push   %ebp
c010b791:	89 e5                	mov    %esp,%ebp
c010b793:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b796:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010b79b:	8b 40 18             	mov    0x18(%eax),%eax
c010b79e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b7a1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b7a5:	75 0a                	jne    c010b7b1 <sysfile_read+0x21>
        return 0;
c010b7a7:	b8 00 00 00 00       	mov    $0x0,%eax
c010b7ac:	e9 55 01 00 00       	jmp    c010b906 <sysfile_read+0x176>
    }
    if (!file_testfd(fd, 1, 0)) {
c010b7b1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b7b8:	00 
c010b7b9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b7c0:	00 
c010b7c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7c4:	89 04 24             	mov    %eax,(%esp)
c010b7c7:	e8 9d f0 ff ff       	call   c010a869 <file_testfd>
c010b7cc:	85 c0                	test   %eax,%eax
c010b7ce:	75 0a                	jne    c010b7da <sysfile_read+0x4a>
        return -E_INVAL;
c010b7d0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b7d5:	e9 2c 01 00 00       	jmp    c010b906 <sysfile_read+0x176>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b7da:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b7e1:	e8 70 96 ff ff       	call   c0104e56 <kmalloc>
c010b7e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b7e9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b7ed:	75 0a                	jne    c010b7f9 <sysfile_read+0x69>
        return -E_NO_MEM;
c010b7ef:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b7f4:	e9 0d 01 00 00       	jmp    c010b906 <sysfile_read+0x176>
    }

    int ret = 0;
c010b7f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b800:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b807:	e9 d7 00 00 00       	jmp    c010b8e3 <sysfile_read+0x153>
        if ((alen = IOBUF_SIZE) > len) {
c010b80c:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b813:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b816:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b819:	76 06                	jbe    c010b821 <sysfile_read+0x91>
            alen = len;
c010b81b:	8b 45 10             	mov    0x10(%ebp),%eax
c010b81e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c010b821:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b824:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b827:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b82b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b82f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b832:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b836:	8b 45 08             	mov    0x8(%ebp),%eax
c010b839:	89 04 24             	mov    %eax,(%esp)
c010b83c:	e8 5a f2 ff ff       	call   c010aa9b <file_read>
c010b841:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c010b844:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b847:	85 c0                	test   %eax,%eax
c010b849:	0f 84 87 00 00 00    	je     c010b8d6 <sysfile_read+0x146>
            lock_mm(mm);
c010b84f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b852:	89 04 24             	mov    %eax,(%esp)
c010b855:	e8 ea fd ff ff       	call   c010b644 <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c010b85a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b85d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b861:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b864:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b868:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b86b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b86f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b872:	89 04 24             	mov    %eax,(%esp)
c010b875:	e8 c4 cf ff ff       	call   c010883e <copy_to_user>
c010b87a:	85 c0                	test   %eax,%eax
c010b87c:	74 40                	je     c010b8be <sysfile_read+0x12e>
                    assert(len >= alen);
c010b87e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b881:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b884:	73 24                	jae    c010b8aa <sysfile_read+0x11a>
c010b886:	c7 44 24 0c 76 81 11 	movl   $0xc0118176,0xc(%esp)
c010b88d:	c0 
c010b88e:	c7 44 24 08 82 81 11 	movl   $0xc0118182,0x8(%esp)
c010b895:	c0 
c010b896:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010b89d:	00 
c010b89e:	c7 04 24 97 81 11 c0 	movl   $0xc0118197,(%esp)
c010b8a5:	e8 02 56 ff ff       	call   c0100eac <__panic>
                    base += alen, len -= alen, copied += alen;
c010b8aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8ad:	01 45 0c             	add    %eax,0xc(%ebp)
c010b8b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8b3:	29 45 10             	sub    %eax,0x10(%ebp)
c010b8b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8b9:	01 45 f0             	add    %eax,-0x10(%ebp)
c010b8bc:	eb 0d                	jmp    c010b8cb <sysfile_read+0x13b>
                }
                else if (ret == 0) {
c010b8be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b8c2:	75 07                	jne    c010b8cb <sysfile_read+0x13b>
                    ret = -E_INVAL;
c010b8c4:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c010b8cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8ce:	89 04 24             	mov    %eax,(%esp)
c010b8d1:	e8 a1 fd ff ff       	call   c010b677 <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
c010b8d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b8da:	75 11                	jne    c010b8ed <sysfile_read+0x15d>
c010b8dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8df:	85 c0                	test   %eax,%eax
c010b8e1:	74 0a                	je     c010b8ed <sysfile_read+0x15d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b8e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b8e7:	0f 85 1f ff ff ff    	jne    c010b80c <sysfile_read+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b8ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b8f0:	89 04 24             	mov    %eax,(%esp)
c010b8f3:	e8 79 95 ff ff       	call   c0104e71 <kfree>
    if (copied != 0) {
c010b8f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b8fc:	74 05                	je     c010b903 <sysfile_read+0x173>
        return copied;
c010b8fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b901:	eb 03                	jmp    c010b906 <sysfile_read+0x176>
    }
    return ret;
c010b903:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b906:	c9                   	leave  
c010b907:	c3                   	ret    

c010b908 <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c010b908:	55                   	push   %ebp
c010b909:	89 e5                	mov    %esp,%ebp
c010b90b:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010b90e:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010b913:	8b 40 18             	mov    0x18(%eax),%eax
c010b916:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b919:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b91d:	75 0a                	jne    c010b929 <sysfile_write+0x21>
        return 0;
c010b91f:	b8 00 00 00 00       	mov    $0x0,%eax
c010b924:	e9 57 01 00 00       	jmp    c010ba80 <sysfile_write+0x178>
    }
    if (!file_testfd(fd, 0, 1)) {
c010b929:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010b930:	00 
c010b931:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b938:	00 
c010b939:	8b 45 08             	mov    0x8(%ebp),%eax
c010b93c:	89 04 24             	mov    %eax,(%esp)
c010b93f:	e8 25 ef ff ff       	call   c010a869 <file_testfd>
c010b944:	85 c0                	test   %eax,%eax
c010b946:	75 0a                	jne    c010b952 <sysfile_write+0x4a>
        return -E_INVAL;
c010b948:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b94d:	e9 2e 01 00 00       	jmp    c010ba80 <sysfile_write+0x178>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b952:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b959:	e8 f8 94 ff ff       	call   c0104e56 <kmalloc>
c010b95e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b961:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b965:	75 0a                	jne    c010b971 <sysfile_write+0x69>
        return -E_NO_MEM;
c010b967:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b96c:	e9 0f 01 00 00       	jmp    c010ba80 <sysfile_write+0x178>
    }

    int ret = 0;
c010b971:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b978:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b97f:	e9 d9 00 00 00       	jmp    c010ba5d <sysfile_write+0x155>
        if ((alen = IOBUF_SIZE) > len) {
c010b984:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b98b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b98e:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b991:	76 06                	jbe    c010b999 <sysfile_write+0x91>
            alen = len;
c010b993:	8b 45 10             	mov    0x10(%ebp),%eax
c010b996:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c010b999:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b99c:	89 04 24             	mov    %eax,(%esp)
c010b99f:	e8 a0 fc ff ff       	call   c010b644 <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c010b9a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b9a7:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b9ae:	00 
c010b9af:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b9b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b9b6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b9ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b9bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9c4:	89 04 24             	mov    %eax,(%esp)
c010b9c7:	e8 21 ce ff ff       	call   c01087ed <copy_from_user>
c010b9cc:	85 c0                	test   %eax,%eax
c010b9ce:	75 07                	jne    c010b9d7 <sysfile_write+0xcf>
                ret = -E_INVAL;
c010b9d0:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c010b9d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9da:	89 04 24             	mov    %eax,(%esp)
c010b9dd:	e8 95 fc ff ff       	call   c010b677 <unlock_mm>
        if (ret == 0) {
c010b9e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9e6:	75 68                	jne    c010ba50 <sysfile_write+0x148>
            ret = file_write(fd, buffer, alen, &alen);
c010b9e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b9eb:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b9ee:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b9f2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b9f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b9f9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba00:	89 04 24             	mov    %eax,(%esp)
c010ba03:	e8 cb f1 ff ff       	call   c010abd3 <file_write>
c010ba08:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c010ba0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba0e:	85 c0                	test   %eax,%eax
c010ba10:	74 3e                	je     c010ba50 <sysfile_write+0x148>
                assert(len >= alen);
c010ba12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba15:	39 45 10             	cmp    %eax,0x10(%ebp)
c010ba18:	73 24                	jae    c010ba3e <sysfile_write+0x136>
c010ba1a:	c7 44 24 0c 76 81 11 	movl   $0xc0118176,0xc(%esp)
c010ba21:	c0 
c010ba22:	c7 44 24 08 82 81 11 	movl   $0xc0118182,0x8(%esp)
c010ba29:	c0 
c010ba2a:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
c010ba31:	00 
c010ba32:	c7 04 24 97 81 11 c0 	movl   $0xc0118197,(%esp)
c010ba39:	e8 6e 54 ff ff       	call   c0100eac <__panic>
                base += alen, len -= alen, copied += alen;
c010ba3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba41:	01 45 0c             	add    %eax,0xc(%ebp)
c010ba44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba47:	29 45 10             	sub    %eax,0x10(%ebp)
c010ba4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba4d:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c010ba50:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba54:	75 11                	jne    c010ba67 <sysfile_write+0x15f>
c010ba56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba59:	85 c0                	test   %eax,%eax
c010ba5b:	74 0a                	je     c010ba67 <sysfile_write+0x15f>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010ba5d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010ba61:	0f 85 1d ff ff ff    	jne    c010b984 <sysfile_write+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010ba67:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba6a:	89 04 24             	mov    %eax,(%esp)
c010ba6d:	e8 ff 93 ff ff       	call   c0104e71 <kfree>
    if (copied != 0) {
c010ba72:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ba76:	74 05                	je     c010ba7d <sysfile_write+0x175>
        return copied;
c010ba78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba7b:	eb 03                	jmp    c010ba80 <sysfile_write+0x178>
    }
    return ret;
c010ba7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba80:	c9                   	leave  
c010ba81:	c3                   	ret    

c010ba82 <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c010ba82:	55                   	push   %ebp
c010ba83:	89 e5                	mov    %esp,%ebp
c010ba85:	83 ec 18             	sub    $0x18,%esp
    return file_seek(fd, pos, whence);
c010ba88:	8b 45 10             	mov    0x10(%ebp),%eax
c010ba8b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ba8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba92:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba96:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba99:	89 04 24             	mov    %eax,(%esp)
c010ba9c:	e8 6a f2 ff ff       	call   c010ad0b <file_seek>
}
c010baa1:	c9                   	leave  
c010baa2:	c3                   	ret    

c010baa3 <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c010baa3:	55                   	push   %ebp
c010baa4:	89 e5                	mov    %esp,%ebp
c010baa6:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010baa9:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010baae:	8b 40 18             	mov    0x18(%eax),%eax
c010bab1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c010bab4:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010bab7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c010baba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010babd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bac1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bac4:	89 04 24             	mov    %eax,(%esp)
c010bac7:	e8 e3 f3 ff ff       	call   c010aeaf <file_fstat>
c010bacc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bacf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bad3:	74 05                	je     c010bada <sysfile_fstat+0x37>
        return ret;
c010bad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bad8:	eb 45                	jmp    c010bb1f <sysfile_fstat+0x7c>
    }

    lock_mm(mm);
c010bada:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010badd:	89 04 24             	mov    %eax,(%esp)
c010bae0:	e8 5f fb ff ff       	call   c010b644 <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c010bae5:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
c010baec:	00 
c010baed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010baf0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010baf4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010baf7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bafb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bafe:	89 04 24             	mov    %eax,(%esp)
c010bb01:	e8 38 cd ff ff       	call   c010883e <copy_to_user>
c010bb06:	85 c0                	test   %eax,%eax
c010bb08:	75 07                	jne    c010bb11 <sysfile_fstat+0x6e>
            ret = -E_INVAL;
c010bb0a:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bb11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb14:	89 04 24             	mov    %eax,(%esp)
c010bb17:	e8 5b fb ff ff       	call   c010b677 <unlock_mm>
    return ret;
c010bb1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bb1f:	c9                   	leave  
c010bb20:	c3                   	ret    

c010bb21 <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c010bb21:	55                   	push   %ebp
c010bb22:	89 e5                	mov    %esp,%ebp
c010bb24:	83 ec 18             	sub    $0x18,%esp
    return file_fsync(fd);
c010bb27:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb2a:	89 04 24             	mov    %eax,(%esp)
c010bb2d:	e8 3c f4 ff ff       	call   c010af6e <file_fsync>
}
c010bb32:	c9                   	leave  
c010bb33:	c3                   	ret    

c010bb34 <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c010bb34:	55                   	push   %ebp
c010bb35:	89 e5                	mov    %esp,%ebp
c010bb37:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010bb3a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb3d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb41:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bb44:	89 04 24             	mov    %eax,(%esp)
c010bb47:	e8 51 fb ff ff       	call   c010b69d <copy_path>
c010bb4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb53:	74 05                	je     c010bb5a <sysfile_chdir+0x26>
        return ret;
c010bb55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb58:	eb 1c                	jmp    c010bb76 <sysfile_chdir+0x42>
    }
    ret = vfs_chdir(path);
c010bb5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb5d:	89 04 24             	mov    %eax,(%esp)
c010bb60:	e8 94 4b 00 00       	call   c01106f9 <vfs_chdir>
c010bb65:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010bb68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb6b:	89 04 24             	mov    %eax,(%esp)
c010bb6e:	e8 fe 92 ff ff       	call   c0104e71 <kfree>
    return ret;
c010bb73:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bb76:	c9                   	leave  
c010bb77:	c3                   	ret    

c010bb78 <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c010bb78:	55                   	push   %ebp
c010bb79:	89 e5                	mov    %esp,%ebp
c010bb7b:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010bb7e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb81:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb85:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bb88:	89 04 24             	mov    %eax,(%esp)
c010bb8b:	e8 0d fb ff ff       	call   c010b69d <copy_path>
c010bb90:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb97:	74 05                	je     c010bb9e <sysfile_link+0x26>
        return ret;
c010bb99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb9c:	eb 59                	jmp    c010bbf7 <sysfile_link+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010bb9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bba1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bba5:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010bba8:	89 04 24             	mov    %eax,(%esp)
c010bbab:	e8 ed fa ff ff       	call   c010b69d <copy_path>
c010bbb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bbb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bbb7:	74 10                	je     c010bbc9 <sysfile_link+0x51>
        kfree(old_path);
c010bbb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbbc:	89 04 24             	mov    %eax,(%esp)
c010bbbf:	e8 ad 92 ff ff       	call   c0104e71 <kfree>
        return ret;
c010bbc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbc7:	eb 2e                	jmp    c010bbf7 <sysfile_link+0x7f>
    }
    ret = vfs_link(old_path, new_path);
c010bbc9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bbcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbcf:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bbd3:	89 04 24             	mov    %eax,(%esp)
c010bbd6:	e8 a8 46 00 00       	call   c0110283 <vfs_link>
c010bbdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010bbde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbe1:	89 04 24             	mov    %eax,(%esp)
c010bbe4:	e8 88 92 ff ff       	call   c0104e71 <kfree>
c010bbe9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bbec:	89 04 24             	mov    %eax,(%esp)
c010bbef:	e8 7d 92 ff ff       	call   c0104e71 <kfree>
    return ret;
c010bbf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bbf7:	c9                   	leave  
c010bbf8:	c3                   	ret    

c010bbf9 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c010bbf9:	55                   	push   %ebp
c010bbfa:	89 e5                	mov    %esp,%ebp
c010bbfc:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010bbff:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc02:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc06:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bc09:	89 04 24             	mov    %eax,(%esp)
c010bc0c:	e8 8c fa ff ff       	call   c010b69d <copy_path>
c010bc11:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc18:	74 05                	je     c010bc1f <sysfile_rename+0x26>
        return ret;
c010bc1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc1d:	eb 59                	jmp    c010bc78 <sysfile_rename+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010bc1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc22:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc26:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010bc29:	89 04 24             	mov    %eax,(%esp)
c010bc2c:	e8 6c fa ff ff       	call   c010b69d <copy_path>
c010bc31:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc38:	74 10                	je     c010bc4a <sysfile_rename+0x51>
        kfree(old_path);
c010bc3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc3d:	89 04 24             	mov    %eax,(%esp)
c010bc40:	e8 2c 92 ff ff       	call   c0104e71 <kfree>
        return ret;
c010bc45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc48:	eb 2e                	jmp    c010bc78 <sysfile_rename+0x7f>
    }
    ret = vfs_rename(old_path, new_path);
c010bc4a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bc4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc50:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bc54:	89 04 24             	mov    %eax,(%esp)
c010bc57:	e8 1d 46 00 00       	call   c0110279 <vfs_rename>
c010bc5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010bc5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc62:	89 04 24             	mov    %eax,(%esp)
c010bc65:	e8 07 92 ff ff       	call   c0104e71 <kfree>
c010bc6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc6d:	89 04 24             	mov    %eax,(%esp)
c010bc70:	e8 fc 91 ff ff       	call   c0104e71 <kfree>
    return ret;
c010bc75:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bc78:	c9                   	leave  
c010bc79:	c3                   	ret    

c010bc7a <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c010bc7a:	55                   	push   %ebp
c010bc7b:	89 e5                	mov    %esp,%ebp
c010bc7d:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010bc80:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc83:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc87:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bc8a:	89 04 24             	mov    %eax,(%esp)
c010bc8d:	e8 0b fa ff ff       	call   c010b69d <copy_path>
c010bc92:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc95:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc99:	74 05                	je     c010bca0 <sysfile_unlink+0x26>
        return ret;
c010bc9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc9e:	eb 1c                	jmp    c010bcbc <sysfile_unlink+0x42>
    }
    ret = vfs_unlink(path);
c010bca0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bca3:	89 04 24             	mov    %eax,(%esp)
c010bca6:	e8 c4 45 00 00       	call   c011026f <vfs_unlink>
c010bcab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010bcae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcb1:	89 04 24             	mov    %eax,(%esp)
c010bcb4:	e8 b8 91 ff ff       	call   c0104e71 <kfree>
    return ret;
c010bcb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bcbc:	c9                   	leave  
c010bcbd:	c3                   	ret    

c010bcbe <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010bcbe:	55                   	push   %ebp
c010bcbf:	89 e5                	mov    %esp,%ebp
c010bcc1:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bcc4:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010bcc9:	8b 40 18             	mov    0x18(%eax),%eax
c010bccc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010bccf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bcd3:	75 07                	jne    c010bcdc <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010bcd5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bcda:	eb 77                	jmp    c010bd53 <sysfile_getcwd+0x95>
    }

    int ret = -E_INVAL;
c010bcdc:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010bce3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bce6:	89 04 24             	mov    %eax,(%esp)
c010bce9:	e8 56 f9 ff ff       	call   c010b644 <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010bcee:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcf1:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bcf8:	00 
c010bcf9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bcfc:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bd00:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd07:	89 04 24             	mov    %eax,(%esp)
c010bd0a:	e8 7f d4 ff ff       	call   c010918e <user_mem_check>
c010bd0f:	85 c0                	test   %eax,%eax
c010bd11:	74 32                	je     c010bd45 <sysfile_getcwd+0x87>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010bd13:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010bd1a:	00 
c010bd1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd1e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bd22:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd25:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd29:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010bd2c:	89 04 24             	mov    %eax,(%esp)
c010bd2f:	e8 64 f7 ff ff       	call   c010b498 <iobuf_init>
c010bd34:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010bd37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd3a:	89 04 24             	mov    %eax,(%esp)
c010bd3d:	e8 f6 49 00 00       	call   c0110738 <vfs_getcwd>
c010bd42:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bd45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd48:	89 04 24             	mov    %eax,(%esp)
c010bd4b:	e8 27 f9 ff ff       	call   c010b677 <unlock_mm>
    return ret;
c010bd50:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bd53:	c9                   	leave  
c010bd54:	c3                   	ret    

c010bd55 <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010bd55:	55                   	push   %ebp
c010bd56:	89 e5                	mov    %esp,%ebp
c010bd58:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bd5b:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010bd60:	8b 40 18             	mov    0x18(%eax),%eax
c010bd63:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010bd66:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c010bd6d:	e8 e4 90 ff ff       	call   c0104e56 <kmalloc>
c010bd72:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bd75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bd79:	75 0a                	jne    c010bd85 <sysfile_getdirentry+0x30>
        return -E_NO_MEM;
c010bd7b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010bd80:	e9 c2 00 00 00       	jmp    c010be47 <sysfile_getdirentry+0xf2>
    }

    int ret = 0;
c010bd85:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010bd8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd8f:	89 04 24             	mov    %eax,(%esp)
c010bd92:	e8 ad f8 ff ff       	call   c010b644 <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010bd97:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bd9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd9d:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c010bda4:	00 
c010bda5:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c010bdac:	00 
c010bdad:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bdb1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bdb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bdb8:	89 04 24             	mov    %eax,(%esp)
c010bdbb:	e8 2d ca ff ff       	call   c01087ed <copy_from_user>
c010bdc0:	85 c0                	test   %eax,%eax
c010bdc2:	75 07                	jne    c010bdcb <sysfile_getdirentry+0x76>
            ret = -E_INVAL;
c010bdc4:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bdcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bdce:	89 04 24             	mov    %eax,(%esp)
c010bdd1:	e8 a1 f8 ff ff       	call   c010b677 <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010bdd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bdda:	75 5d                	jne    c010be39 <sysfile_getdirentry+0xe4>
c010bddc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bddf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bde3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bde6:	89 04 24             	mov    %eax,(%esp)
c010bde9:	e8 38 f2 ff ff       	call   c010b026 <file_getdirentry>
c010bdee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bdf1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bdf5:	75 42                	jne    c010be39 <sysfile_getdirentry+0xe4>
        goto out;
    }

    lock_mm(mm);
c010bdf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bdfa:	89 04 24             	mov    %eax,(%esp)
c010bdfd:	e8 42 f8 ff ff       	call   c010b644 <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010be02:	c7 44 24 0c 04 01 00 	movl   $0x104,0xc(%esp)
c010be09:	00 
c010be0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be0d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010be11:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be14:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be1b:	89 04 24             	mov    %eax,(%esp)
c010be1e:	e8 1b ca ff ff       	call   c010883e <copy_to_user>
c010be23:	85 c0                	test   %eax,%eax
c010be25:	75 07                	jne    c010be2e <sysfile_getdirentry+0xd9>
            ret = -E_INVAL;
c010be27:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010be2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be31:	89 04 24             	mov    %eax,(%esp)
c010be34:	e8 3e f8 ff ff       	call   c010b677 <unlock_mm>

out:
    kfree(direntp);
c010be39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be3c:	89 04 24             	mov    %eax,(%esp)
c010be3f:	e8 2d 90 ff ff       	call   c0104e71 <kfree>
    return ret;
c010be44:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010be47:	c9                   	leave  
c010be48:	c3                   	ret    

c010be49 <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010be49:	55                   	push   %ebp
c010be4a:	89 e5                	mov    %esp,%ebp
c010be4c:	83 ec 18             	sub    $0x18,%esp
    return file_dup(fd1, fd2);
c010be4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be52:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be56:	8b 45 08             	mov    0x8(%ebp),%eax
c010be59:	89 04 24             	mov    %eax,(%esp)
c010be5c:	e8 da f2 ff ff       	call   c010b13b <file_dup>
}
c010be61:	c9                   	leave  
c010be62:	c3                   	ret    

c010be63 <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010be63:	55                   	push   %ebp
c010be64:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010be66:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010be6b:	5d                   	pop    %ebp
c010be6c:	c3                   	ret    

c010be6d <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010be6d:	55                   	push   %ebp
c010be6e:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010be70:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010be75:	5d                   	pop    %ebp
c010be76:	c3                   	ret    
	...

c010be78 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010be78:	52                   	push   %edx
    call *%ebx              # call fn
c010be79:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010be7b:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010be7c:	e8 21 0d 00 00       	call   c010cba2 <do_exit>
c010be81:	00 00                	add    %al,(%eax)
	...

c010be84 <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010be84:	55                   	push   %ebp
c010be85:	89 e5                	mov    %esp,%ebp
c010be87:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010be8a:	8b 55 10             	mov    0x10(%ebp),%edx
c010be8d:	8b 45 08             	mov    0x8(%ebp),%eax
c010be90:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010be92:	8b 45 08             	mov    0x8(%ebp),%eax
c010be95:	8b 55 0c             	mov    0xc(%ebp),%edx
c010be98:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010be9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010be9e:	83 c0 08             	add    $0x8,%eax
c010bea1:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bea4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bea7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010beaa:	89 50 04             	mov    %edx,0x4(%eax)
c010bead:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010beb0:	8b 50 04             	mov    0x4(%eax),%edx
c010beb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010beb6:	89 10                	mov    %edx,(%eax)
    return timer;
c010beb8:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010bebb:	c9                   	leave  
c010bebc:	c3                   	ret    

c010bebd <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010bebd:	55                   	push   %ebp
c010bebe:	89 e5                	mov    %esp,%ebp
c010bec0:	53                   	push   %ebx
c010bec1:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010bec4:	9c                   	pushf  
c010bec5:	5b                   	pop    %ebx
c010bec6:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c010bec9:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010becc:	25 00 02 00 00       	and    $0x200,%eax
c010bed1:	85 c0                	test   %eax,%eax
c010bed3:	74 0c                	je     c010bee1 <__intr_save+0x24>
        intr_disable();
c010bed5:	e8 0c 63 ff ff       	call   c01021e6 <intr_disable>
        return 1;
c010beda:	b8 01 00 00 00       	mov    $0x1,%eax
c010bedf:	eb 05                	jmp    c010bee6 <__intr_save+0x29>
    }
    return 0;
c010bee1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bee6:	83 c4 14             	add    $0x14,%esp
c010bee9:	5b                   	pop    %ebx
c010beea:	5d                   	pop    %ebp
c010beeb:	c3                   	ret    

c010beec <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010beec:	55                   	push   %ebp
c010beed:	89 e5                	mov    %esp,%ebp
c010beef:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010bef2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bef6:	74 05                	je     c010befd <__intr_restore+0x11>
        intr_enable();
c010bef8:	e8 e3 62 ff ff       	call   c01021e0 <intr_enable>
    }
}
c010befd:	c9                   	leave  
c010befe:	c3                   	ret    

c010beff <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010beff:	55                   	push   %ebp
c010bf00:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010bf02:	8b 55 08             	mov    0x8(%ebp),%edx
c010bf05:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c010bf0a:	89 d1                	mov    %edx,%ecx
c010bf0c:	29 c1                	sub    %eax,%ecx
c010bf0e:	89 c8                	mov    %ecx,%eax
c010bf10:	c1 f8 05             	sar    $0x5,%eax
}
c010bf13:	5d                   	pop    %ebp
c010bf14:	c3                   	ret    

c010bf15 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010bf15:	55                   	push   %ebp
c010bf16:	89 e5                	mov    %esp,%ebp
c010bf18:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010bf1b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf1e:	89 04 24             	mov    %eax,(%esp)
c010bf21:	e8 d9 ff ff ff       	call   c010beff <page2ppn>
c010bf26:	c1 e0 0c             	shl    $0xc,%eax
}
c010bf29:	c9                   	leave  
c010bf2a:	c3                   	ret    

c010bf2b <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010bf2b:	55                   	push   %ebp
c010bf2c:	89 e5                	mov    %esp,%ebp
c010bf2e:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010bf31:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf34:	89 c2                	mov    %eax,%edx
c010bf36:	c1 ea 0c             	shr    $0xc,%edx
c010bf39:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c010bf3e:	39 c2                	cmp    %eax,%edx
c010bf40:	72 1c                	jb     c010bf5e <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010bf42:	c7 44 24 08 ac 81 11 	movl   $0xc01181ac,0x8(%esp)
c010bf49:	c0 
c010bf4a:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010bf51:	00 
c010bf52:	c7 04 24 cb 81 11 c0 	movl   $0xc01181cb,(%esp)
c010bf59:	e8 4e 4f ff ff       	call   c0100eac <__panic>
    }
    return &pages[PPN(pa)];
c010bf5e:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c010bf63:	8b 55 08             	mov    0x8(%ebp),%edx
c010bf66:	c1 ea 0c             	shr    $0xc,%edx
c010bf69:	c1 e2 05             	shl    $0x5,%edx
c010bf6c:	01 d0                	add    %edx,%eax
}
c010bf6e:	c9                   	leave  
c010bf6f:	c3                   	ret    

c010bf70 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010bf70:	55                   	push   %ebp
c010bf71:	89 e5                	mov    %esp,%ebp
c010bf73:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010bf76:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf79:	89 04 24             	mov    %eax,(%esp)
c010bf7c:	e8 94 ff ff ff       	call   c010bf15 <page2pa>
c010bf81:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bf84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf87:	c1 e8 0c             	shr    $0xc,%eax
c010bf8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bf8d:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c010bf92:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010bf95:	72 23                	jb     c010bfba <page2kva+0x4a>
c010bf97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf9a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bf9e:	c7 44 24 08 dc 81 11 	movl   $0xc01181dc,0x8(%esp)
c010bfa5:	c0 
c010bfa6:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010bfad:	00 
c010bfae:	c7 04 24 cb 81 11 c0 	movl   $0xc01181cb,(%esp)
c010bfb5:	e8 f2 4e ff ff       	call   c0100eac <__panic>
c010bfba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfbd:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010bfc2:	c9                   	leave  
c010bfc3:	c3                   	ret    

c010bfc4 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010bfc4:	55                   	push   %ebp
c010bfc5:	89 e5                	mov    %esp,%ebp
c010bfc7:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010bfca:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bfd0:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010bfd7:	77 23                	ja     c010bffc <kva2page+0x38>
c010bfd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfdc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bfe0:	c7 44 24 08 00 82 11 	movl   $0xc0118200,0x8(%esp)
c010bfe7:	c0 
c010bfe8:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010bfef:	00 
c010bff0:	c7 04 24 cb 81 11 c0 	movl   $0xc01181cb,(%esp)
c010bff7:	e8 b0 4e ff ff       	call   c0100eac <__panic>
c010bffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfff:	05 00 00 00 40       	add    $0x40000000,%eax
c010c004:	89 04 24             	mov    %eax,(%esp)
c010c007:	e8 1f ff ff ff       	call   c010bf2b <pa2page>
}
c010c00c:	c9                   	leave  
c010c00d:	c3                   	ret    

c010c00e <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010c00e:	55                   	push   %ebp
c010c00f:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010c011:	8b 45 08             	mov    0x8(%ebp),%eax
c010c014:	8b 40 18             	mov    0x18(%eax),%eax
c010c017:	8d 50 01             	lea    0x1(%eax),%edx
c010c01a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c01d:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010c020:	8b 45 08             	mov    0x8(%ebp),%eax
c010c023:	8b 40 18             	mov    0x18(%eax),%eax
}
c010c026:	5d                   	pop    %ebp
c010c027:	c3                   	ret    

c010c028 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010c028:	55                   	push   %ebp
c010c029:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010c02b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c02e:	8b 40 18             	mov    0x18(%eax),%eax
c010c031:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c034:	8b 45 08             	mov    0x8(%ebp),%eax
c010c037:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010c03a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c03d:	8b 40 18             	mov    0x18(%eax),%eax
}
c010c040:	5d                   	pop    %ebp
c010c041:	c3                   	ret    

c010c042 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010c042:	55                   	push   %ebp
c010c043:	89 e5                	mov    %esp,%ebp
c010c045:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010c048:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c04c:	74 25                	je     c010c073 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010c04e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c051:	83 c0 1c             	add    $0x1c,%eax
c010c054:	89 04 24             	mov    %eax,(%esp)
c010c057:	e8 e0 dd ff ff       	call   c0109e3c <down>
        if (current != NULL) {
c010c05c:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010c061:	85 c0                	test   %eax,%eax
c010c063:	74 0e                	je     c010c073 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010c065:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010c06a:	8b 50 04             	mov    0x4(%eax),%edx
c010c06d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c070:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010c073:	c9                   	leave  
c010c074:	c3                   	ret    

c010c075 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010c075:	55                   	push   %ebp
c010c076:	89 e5                	mov    %esp,%ebp
c010c078:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010c07b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c07f:	74 18                	je     c010c099 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010c081:	8b 45 08             	mov    0x8(%ebp),%eax
c010c084:	83 c0 1c             	add    $0x1c,%eax
c010c087:	89 04 24             	mov    %eax,(%esp)
c010c08a:	e8 92 dd ff ff       	call   c0109e21 <up>
        mm->locked_by = 0;
c010c08f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c092:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010c099:	c9                   	leave  
c010c09a:	c3                   	ret    

c010c09b <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010c09b:	55                   	push   %ebp
c010c09c:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010c09e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0a1:	8b 40 08             	mov    0x8(%eax),%eax
c010c0a4:	8d 50 01             	lea    0x1(%eax),%edx
c010c0a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0aa:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010c0ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0b0:	8b 40 08             	mov    0x8(%eax),%eax
}
c010c0b3:	5d                   	pop    %ebp
c010c0b4:	c3                   	ret    

c010c0b5 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010c0b5:	55                   	push   %ebp
c010c0b6:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010c0b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0bb:	8b 40 08             	mov    0x8(%eax),%eax
c010c0be:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c0c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0c4:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010c0c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0ca:	8b 40 08             	mov    0x8(%eax),%eax
}
c010c0cd:	5d                   	pop    %ebp
c010c0ce:	c3                   	ret    

c010c0cf <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010c0cf:	55                   	push   %ebp
c010c0d0:	89 e5                	mov    %esp,%ebp
c010c0d2:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010c0d5:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c010c0dc:	e8 75 8d ff ff       	call   c0104e56 <kmalloc>
c010c0e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010c0e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c0e8:	74 59                	je     c010c143 <alloc_proc+0x74>
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
    //LAB8:EXERCISE2 2011010312 HINT:need add some code to init fs in proc_struct, ...
		memset(proc, 0, sizeof(struct proc_struct));
c010c0ea:	c7 44 24 08 c8 00 00 	movl   $0xc8,0x8(%esp)
c010c0f1:	00 
c010c0f2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c0f9:	00 
c010c0fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0fd:	89 04 24             	mov    %eax,(%esp)
c010c100:	e8 6f 96 00 00       	call   c0115774 <memset>
		proc->state = PROC_UNINIT;
c010c105:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c108:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010c10e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c111:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->cr3 = boot_cr3;
c010c118:	8b 15 24 50 15 c0    	mov    0xc0155024,%edx
c010c11e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c121:	89 50 40             	mov    %edx,0x40(%eax)
        list_init(&(proc->run_link));
c010c124:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c127:	05 a4 00 00 00       	add    $0xa4,%eax
c010c12c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c12f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c132:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c135:	89 50 04             	mov    %edx,0x4(%eax)
c010c138:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c13b:	8b 50 04             	mov    0x4(%eax),%edx
c010c13e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c141:	89 10                	mov    %edx,(%eax)
    }
    return proc;
c010c143:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c146:	c9                   	leave  
c010c147:	c3                   	ret    

c010c148 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010c148:	55                   	push   %ebp
c010c149:	89 e5                	mov    %esp,%ebp
c010c14b:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010c14e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c151:	83 c0 48             	add    $0x48,%eax
c010c154:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c15b:	00 
c010c15c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c163:	00 
c010c164:	89 04 24             	mov    %eax,(%esp)
c010c167:	e8 08 96 00 00       	call   c0115774 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010c16c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c16f:	8d 50 48             	lea    0x48(%eax),%edx
c010c172:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c179:	00 
c010c17a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c17d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c181:	89 14 24             	mov    %edx,(%esp)
c010c184:	e8 ea 96 00 00       	call   c0115873 <memcpy>
}
c010c189:	c9                   	leave  
c010c18a:	c3                   	ret    

c010c18b <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010c18b:	55                   	push   %ebp
c010c18c:	89 e5                	mov    %esp,%ebp
c010c18e:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010c191:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c198:	00 
c010c199:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c1a0:	00 
c010c1a1:	c7 04 24 60 3f 15 c0 	movl   $0xc0153f60,(%esp)
c010c1a8:	e8 c7 95 00 00       	call   c0115774 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010c1ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1b0:	83 c0 48             	add    $0x48,%eax
c010c1b3:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c1ba:	00 
c010c1bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c1bf:	c7 04 24 60 3f 15 c0 	movl   $0xc0153f60,(%esp)
c010c1c6:	e8 a8 96 00 00       	call   c0115873 <memcpy>
}
c010c1cb:	c9                   	leave  
c010c1cc:	c3                   	ret    

c010c1cd <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010c1cd:	55                   	push   %ebp
c010c1ce:	89 e5                	mov    %esp,%ebp
c010c1d0:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010c1d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1d6:	83 c0 7c             	add    $0x7c,%eax
c010c1d9:	c7 45 fc fc 51 15 c0 	movl   $0xc01551fc,-0x4(%ebp)
c010c1e0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010c1e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c1e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c1e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c1ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c1ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1f2:	8b 40 04             	mov    0x4(%eax),%eax
c010c1f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c1f8:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c1fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c1fe:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c201:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c204:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c207:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c20a:	89 10                	mov    %edx,(%eax)
c010c20c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c20f:	8b 10                	mov    (%eax),%edx
c010c211:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c214:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c217:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c21a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c21d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c220:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c223:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c226:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010c228:	8b 45 08             	mov    0x8(%ebp),%eax
c010c22b:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c232:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010c235:	8b 45 08             	mov    0x8(%ebp),%eax
c010c238:	8b 40 14             	mov    0x14(%eax),%eax
c010c23b:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c241:	8b 45 08             	mov    0x8(%ebp),%eax
c010c244:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c24a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c24d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c253:	85 c0                	test   %eax,%eax
c010c255:	74 12                	je     c010c269 <set_links+0x9c>
        proc->optr->yptr = proc;
c010c257:	8b 45 08             	mov    0x8(%ebp),%eax
c010c25a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c260:	8b 55 08             	mov    0x8(%ebp),%edx
c010c263:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010c269:	8b 45 08             	mov    0x8(%ebp),%eax
c010c26c:	8b 40 14             	mov    0x14(%eax),%eax
c010c26f:	8b 55 08             	mov    0x8(%ebp),%edx
c010c272:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010c278:	a1 40 3f 15 c0       	mov    0xc0153f40,%eax
c010c27d:	83 c0 01             	add    $0x1,%eax
c010c280:	a3 40 3f 15 c0       	mov    %eax,0xc0153f40
}
c010c285:	c9                   	leave  
c010c286:	c3                   	ret    

c010c287 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010c287:	55                   	push   %ebp
c010c288:	89 e5                	mov    %esp,%ebp
c010c28a:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010c28d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c290:	83 c0 7c             	add    $0x7c,%eax
c010c293:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c296:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c299:	8b 40 04             	mov    0x4(%eax),%eax
c010c29c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c29f:	8b 12                	mov    (%edx),%edx
c010c2a1:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c2a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c2a7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c2aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c2ad:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c2b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2b3:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c2b6:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010c2b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2bb:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c2c1:	85 c0                	test   %eax,%eax
c010c2c3:	74 18                	je     c010c2dd <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010c2c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2c8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c2ce:	8b 55 08             	mov    0x8(%ebp),%edx
c010c2d1:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010c2d7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010c2dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2e0:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c2e6:	85 c0                	test   %eax,%eax
c010c2e8:	74 1a                	je     c010c304 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010c2ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ed:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c2f3:	8b 55 08             	mov    0x8(%ebp),%edx
c010c2f6:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c2fc:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c302:	eb 15                	jmp    c010c319 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010c304:	8b 45 08             	mov    0x8(%ebp),%eax
c010c307:	8b 40 14             	mov    0x14(%eax),%eax
c010c30a:	8b 55 08             	mov    0x8(%ebp),%edx
c010c30d:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c313:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010c319:	a1 40 3f 15 c0       	mov    0xc0153f40,%eax
c010c31e:	83 e8 01             	sub    $0x1,%eax
c010c321:	a3 40 3f 15 c0       	mov    %eax,0xc0153f40
}
c010c326:	c9                   	leave  
c010c327:	c3                   	ret    

c010c328 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010c328:	55                   	push   %ebp
c010c329:	89 e5                	mov    %esp,%ebp
c010c32b:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010c32e:	c7 45 f8 fc 51 15 c0 	movl   $0xc01551fc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010c335:	a1 84 0a 15 c0       	mov    0xc0150a84,%eax
c010c33a:	83 c0 01             	add    $0x1,%eax
c010c33d:	a3 84 0a 15 c0       	mov    %eax,0xc0150a84
c010c342:	a1 84 0a 15 c0       	mov    0xc0150a84,%eax
c010c347:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c34c:	7e 0c                	jle    c010c35a <get_pid+0x32>
        last_pid = 1;
c010c34e:	c7 05 84 0a 15 c0 01 	movl   $0x1,0xc0150a84
c010c355:	00 00 00 
        goto inside;
c010c358:	eb 13                	jmp    c010c36d <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010c35a:	8b 15 84 0a 15 c0    	mov    0xc0150a84,%edx
c010c360:	a1 88 0a 15 c0       	mov    0xc0150a88,%eax
c010c365:	39 c2                	cmp    %eax,%edx
c010c367:	0f 8c ac 00 00 00    	jl     c010c419 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010c36d:	c7 05 88 0a 15 c0 00 	movl   $0x2000,0xc0150a88
c010c374:	20 00 00 
    repeat:
        le = list;
c010c377:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c37a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010c37d:	eb 7f                	jmp    c010c3fe <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010c37f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c382:	83 e8 7c             	sub    $0x7c,%eax
c010c385:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010c388:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c38b:	8b 50 04             	mov    0x4(%eax),%edx
c010c38e:	a1 84 0a 15 c0       	mov    0xc0150a84,%eax
c010c393:	39 c2                	cmp    %eax,%edx
c010c395:	75 3e                	jne    c010c3d5 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010c397:	a1 84 0a 15 c0       	mov    0xc0150a84,%eax
c010c39c:	83 c0 01             	add    $0x1,%eax
c010c39f:	a3 84 0a 15 c0       	mov    %eax,0xc0150a84
c010c3a4:	8b 15 84 0a 15 c0    	mov    0xc0150a84,%edx
c010c3aa:	a1 88 0a 15 c0       	mov    0xc0150a88,%eax
c010c3af:	39 c2                	cmp    %eax,%edx
c010c3b1:	7c 4b                	jl     c010c3fe <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010c3b3:	a1 84 0a 15 c0       	mov    0xc0150a84,%eax
c010c3b8:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c3bd:	7e 0a                	jle    c010c3c9 <get_pid+0xa1>
                        last_pid = 1;
c010c3bf:	c7 05 84 0a 15 c0 01 	movl   $0x1,0xc0150a84
c010c3c6:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010c3c9:	c7 05 88 0a 15 c0 00 	movl   $0x2000,0xc0150a88
c010c3d0:	20 00 00 
                    goto repeat;
c010c3d3:	eb a2                	jmp    c010c377 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010c3d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3d8:	8b 50 04             	mov    0x4(%eax),%edx
c010c3db:	a1 84 0a 15 c0       	mov    0xc0150a84,%eax
c010c3e0:	39 c2                	cmp    %eax,%edx
c010c3e2:	7e 1a                	jle    c010c3fe <get_pid+0xd6>
c010c3e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3e7:	8b 50 04             	mov    0x4(%eax),%edx
c010c3ea:	a1 88 0a 15 c0       	mov    0xc0150a88,%eax
c010c3ef:	39 c2                	cmp    %eax,%edx
c010c3f1:	7d 0b                	jge    c010c3fe <get_pid+0xd6>
                next_safe = proc->pid;
c010c3f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3f6:	8b 40 04             	mov    0x4(%eax),%eax
c010c3f9:	a3 88 0a 15 c0       	mov    %eax,0xc0150a88
c010c3fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c401:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c404:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c407:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010c40a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c40d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c410:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010c413:	0f 85 66 ff ff ff    	jne    c010c37f <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010c419:	a1 84 0a 15 c0       	mov    0xc0150a84,%eax
}
c010c41e:	c9                   	leave  
c010c41f:	c3                   	ret    

c010c420 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010c420:	55                   	push   %ebp
c010c421:	89 e5                	mov    %esp,%ebp
c010c423:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010c426:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010c42b:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c42e:	74 63                	je     c010c493 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010c430:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010c435:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c438:	8b 45 08             	mov    0x8(%ebp),%eax
c010c43b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010c43e:	e8 7a fa ff ff       	call   c010bebd <__intr_save>
c010c443:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010c446:	8b 45 08             	mov    0x8(%ebp),%eax
c010c449:	a3 28 1f 15 c0       	mov    %eax,0xc0151f28
            load_esp0(next->kstack + KSTACKSIZE);
c010c44e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c451:	8b 40 0c             	mov    0xc(%eax),%eax
c010c454:	05 00 20 00 00       	add    $0x2000,%eax
c010c459:	89 04 24             	mov    %eax,(%esp)
c010c45c:	e8 2e 8d ff ff       	call   c010518f <load_esp0>
            lcr3(next->cr3);
c010c461:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c464:	8b 40 40             	mov    0x40(%eax),%eax
c010c467:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010c46a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c46d:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010c470:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c473:	8d 50 1c             	lea    0x1c(%eax),%edx
c010c476:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c479:	83 c0 1c             	add    $0x1c,%eax
c010c47c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c480:	89 04 24             	mov    %eax,(%esp)
c010c483:	e8 f4 1b 00 00       	call   c010e07c <switch_to>
        }
        local_intr_restore(intr_flag);
c010c488:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c48b:	89 04 24             	mov    %eax,(%esp)
c010c48e:	e8 59 fa ff ff       	call   c010beec <__intr_restore>
    }
	
}
c010c493:	c9                   	leave  
c010c494:	c3                   	ret    

c010c495 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010c495:	55                   	push   %ebp
c010c496:	89 e5                	mov    %esp,%ebp
c010c498:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010c49b:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010c4a0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c4a3:	89 04 24             	mov    %eax,(%esp)
c010c4a6:	e8 43 67 ff ff       	call   c0102bee <forkrets>
}
c010c4ab:	c9                   	leave  
c010c4ac:	c3                   	ret    

c010c4ad <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010c4ad:	55                   	push   %ebp
c010c4ae:	89 e5                	mov    %esp,%ebp
c010c4b0:	53                   	push   %ebx
c010c4b1:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010c4b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4b7:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010c4bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4c0:	8b 40 04             	mov    0x4(%eax),%eax
c010c4c3:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c4ca:	00 
c010c4cb:	89 04 24             	mov    %eax,(%esp)
c010c4ce:	e8 b9 86 00 00       	call   c0114b8c <hash32>
c010c4d3:	c1 e0 03             	shl    $0x3,%eax
c010c4d6:	05 40 1f 15 c0       	add    $0xc0151f40,%eax
c010c4db:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4de:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010c4e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c4e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c4ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4f0:	8b 40 04             	mov    0x4(%eax),%eax
c010c4f3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c4f6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c4f9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c4fc:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010c4ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c502:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c505:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c508:	89 10                	mov    %edx,(%eax)
c010c50a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c50d:	8b 10                	mov    (%eax),%edx
c010c50f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c512:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c515:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c518:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c51b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c51e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c521:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c524:	89 10                	mov    %edx,(%eax)
}
c010c526:	83 c4 34             	add    $0x34,%esp
c010c529:	5b                   	pop    %ebx
c010c52a:	5d                   	pop    %ebp
c010c52b:	c3                   	ret    

c010c52c <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010c52c:	55                   	push   %ebp
c010c52d:	89 e5                	mov    %esp,%ebp
c010c52f:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010c532:	8b 45 08             	mov    0x8(%ebp),%eax
c010c535:	05 84 00 00 00       	add    $0x84,%eax
c010c53a:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c53d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c540:	8b 40 04             	mov    0x4(%eax),%eax
c010c543:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c546:	8b 12                	mov    (%edx),%edx
c010c548:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c54b:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c54e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c551:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c554:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c557:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c55a:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c55d:	89 10                	mov    %edx,(%eax)
}
c010c55f:	c9                   	leave  
c010c560:	c3                   	ret    

c010c561 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010c561:	55                   	push   %ebp
c010c562:	89 e5                	mov    %esp,%ebp
c010c564:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010c567:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c56b:	7e 61                	jle    c010c5ce <find_proc+0x6d>
c010c56d:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010c574:	7f 58                	jg     c010c5ce <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010c576:	8b 45 08             	mov    0x8(%ebp),%eax
c010c579:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c580:	00 
c010c581:	89 04 24             	mov    %eax,(%esp)
c010c584:	e8 03 86 00 00       	call   c0114b8c <hash32>
c010c589:	c1 e0 03             	shl    $0x3,%eax
c010c58c:	05 40 1f 15 c0       	add    $0xc0151f40,%eax
c010c591:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c594:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c597:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010c59a:	eb 1b                	jmp    c010c5b7 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010c59c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c59f:	2d 84 00 00 00       	sub    $0x84,%eax
c010c5a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010c5a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5aa:	8b 40 04             	mov    0x4(%eax),%eax
c010c5ad:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c5b0:	75 05                	jne    c010c5b7 <find_proc+0x56>
                return proc;
c010c5b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5b5:	eb 1c                	jmp    c010c5d3 <find_proc+0x72>
c010c5b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c5bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5c0:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010c5c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c5c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5c9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010c5cc:	75 ce                	jne    c010c59c <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010c5ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c5d3:	c9                   	leave  
c010c5d4:	c3                   	ret    

c010c5d5 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010c5d5:	55                   	push   %ebp
c010c5d6:	89 e5                	mov    %esp,%ebp
c010c5d8:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010c5db:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010c5e2:	00 
c010c5e3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c5ea:	00 
c010c5eb:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c5ee:	89 04 24             	mov    %eax,(%esp)
c010c5f1:	e8 7e 91 00 00       	call   c0115774 <memset>
    tf.tf_cs = KERNEL_CS;
c010c5f6:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010c5fc:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010c602:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010c606:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010c60a:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010c60e:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010c612:	8b 45 08             	mov    0x8(%ebp),%eax
c010c615:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010c618:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c61b:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010c61e:	b8 78 be 10 c0       	mov    $0xc010be78,%eax
c010c623:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010c626:	8b 45 10             	mov    0x10(%ebp),%eax
c010c629:	89 c2                	mov    %eax,%edx
c010c62b:	80 ce 01             	or     $0x1,%dh
c010c62e:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c631:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c635:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c63c:	00 
c010c63d:	89 14 24             	mov    %edx,(%esp)
c010c640:	e8 0f 04 00 00       	call   c010ca54 <do_fork>
}
c010c645:	c9                   	leave  
c010c646:	c3                   	ret    

c010c647 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010c647:	55                   	push   %ebp
c010c648:	89 e5                	mov    %esp,%ebp
c010c64a:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010c64d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c654:	e8 84 8c ff ff       	call   c01052dd <alloc_pages>
c010c659:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010c65c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c660:	74 1a                	je     c010c67c <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010c662:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c665:	89 04 24             	mov    %eax,(%esp)
c010c668:	e8 03 f9 ff ff       	call   c010bf70 <page2kva>
c010c66d:	89 c2                	mov    %eax,%edx
c010c66f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c672:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010c675:	b8 00 00 00 00       	mov    $0x0,%eax
c010c67a:	eb 05                	jmp    c010c681 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010c67c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010c681:	c9                   	leave  
c010c682:	c3                   	ret    

c010c683 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010c683:	55                   	push   %ebp
c010c684:	89 e5                	mov    %esp,%ebp
c010c686:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010c689:	8b 45 08             	mov    0x8(%ebp),%eax
c010c68c:	8b 40 0c             	mov    0xc(%eax),%eax
c010c68f:	89 04 24             	mov    %eax,(%esp)
c010c692:	e8 2d f9 ff ff       	call   c010bfc4 <kva2page>
c010c697:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010c69e:	00 
c010c69f:	89 04 24             	mov    %eax,(%esp)
c010c6a2:	e8 a1 8c ff ff       	call   c0105348 <free_pages>
}
c010c6a7:	c9                   	leave  
c010c6a8:	c3                   	ret    

c010c6a9 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010c6a9:	55                   	push   %ebp
c010c6aa:	89 e5                	mov    %esp,%ebp
c010c6ac:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010c6af:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c6b6:	e8 22 8c ff ff       	call   c01052dd <alloc_pages>
c010c6bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c6be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c6c2:	75 0a                	jne    c010c6ce <setup_pgdir+0x25>
        return -E_NO_MEM;
c010c6c4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010c6c9:	e9 80 00 00 00       	jmp    c010c74e <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010c6ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6d1:	89 04 24             	mov    %eax,(%esp)
c010c6d4:	e8 97 f8 ff ff       	call   c010bf70 <page2kva>
c010c6d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010c6dc:	a1 84 1e 15 c0       	mov    0xc0151e84,%eax
c010c6e1:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010c6e8:	00 
c010c6e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c6ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6f0:	89 04 24             	mov    %eax,(%esp)
c010c6f3:	e8 7b 91 00 00       	call   c0115873 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010c6f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6fb:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010c701:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c704:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c707:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010c70e:	77 23                	ja     c010c733 <setup_pgdir+0x8a>
c010c710:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c713:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c717:	c7 44 24 08 00 82 11 	movl   $0xc0118200,0x8(%esp)
c010c71e:	c0 
c010c71f:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c010c726:	00 
c010c727:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010c72e:	e8 79 47 ff ff       	call   c0100eac <__panic>
c010c733:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c736:	05 00 00 00 40       	add    $0x40000000,%eax
c010c73b:	83 c8 03             	or     $0x3,%eax
c010c73e:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010c740:	8b 45 08             	mov    0x8(%ebp),%eax
c010c743:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c746:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010c749:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c74e:	c9                   	leave  
c010c74f:	c3                   	ret    

c010c750 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010c750:	55                   	push   %ebp
c010c751:	89 e5                	mov    %esp,%ebp
c010c753:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010c756:	8b 45 08             	mov    0x8(%ebp),%eax
c010c759:	8b 40 0c             	mov    0xc(%eax),%eax
c010c75c:	89 04 24             	mov    %eax,(%esp)
c010c75f:	e8 60 f8 ff ff       	call   c010bfc4 <kva2page>
c010c764:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c76b:	00 
c010c76c:	89 04 24             	mov    %eax,(%esp)
c010c76f:	e8 d4 8b ff ff       	call   c0105348 <free_pages>
}
c010c774:	c9                   	leave  
c010c775:	c3                   	ret    

c010c776 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010c776:	55                   	push   %ebp
c010c777:	89 e5                	mov    %esp,%ebp
c010c779:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010c77c:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010c781:	8b 40 18             	mov    0x18(%eax),%eax
c010c784:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010c787:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c78b:	75 0a                	jne    c010c797 <copy_mm+0x21>
        return 0;
c010c78d:	b8 00 00 00 00       	mov    $0x0,%eax
c010c792:	e9 fb 00 00 00       	jmp    c010c892 <copy_mm+0x11c>
    }
    if (clone_flags & CLONE_VM) {
c010c797:	8b 45 08             	mov    0x8(%ebp),%eax
c010c79a:	25 00 01 00 00       	and    $0x100,%eax
c010c79f:	85 c0                	test   %eax,%eax
c010c7a1:	74 08                	je     c010c7ab <copy_mm+0x35>
        mm = oldmm;
c010c7a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010c7a9:	eb 5d                	jmp    c010c808 <copy_mm+0x92>
    }

    int ret = -E_NO_MEM;
c010c7ab:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010c7b2:	e8 37 b9 ff ff       	call   c01080ee <mm_create>
c010c7b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c7ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c7be:	0f 84 ca 00 00 00    	je     c010c88e <copy_mm+0x118>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010c7c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7c7:	89 04 24             	mov    %eax,(%esp)
c010c7ca:	e8 da fe ff ff       	call   c010c6a9 <setup_pgdir>
c010c7cf:	85 c0                	test   %eax,%eax
c010c7d1:	0f 85 a9 00 00 00    	jne    c010c880 <copy_mm+0x10a>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010c7d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7da:	89 04 24             	mov    %eax,(%esp)
c010c7dd:	e8 60 f8 ff ff       	call   c010c042 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010c7e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c7e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7ec:	89 04 24             	mov    %eax,(%esp)
c010c7ef:	e8 20 be ff ff       	call   c0108614 <dup_mmap>
c010c7f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010c7f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7fa:	89 04 24             	mov    %eax,(%esp)
c010c7fd:	e8 73 f8 ff ff       	call   c010c075 <unlock_mm>

    if (ret != 0) {
c010c802:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c806:	75 5f                	jne    c010c867 <copy_mm+0xf1>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010c808:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c80b:	89 04 24             	mov    %eax,(%esp)
c010c80e:	e8 fb f7 ff ff       	call   c010c00e <mm_count_inc>
    proc->mm = mm;
c010c813:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c816:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c819:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010c81c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c81f:	8b 40 0c             	mov    0xc(%eax),%eax
c010c822:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c825:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010c82c:	77 23                	ja     c010c851 <copy_mm+0xdb>
c010c82e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c831:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c835:	c7 44 24 08 00 82 11 	movl   $0xc0118200,0x8(%esp)
c010c83c:	c0 
c010c83d:	c7 44 24 04 63 01 00 	movl   $0x163,0x4(%esp)
c010c844:	00 
c010c845:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010c84c:	e8 5b 46 ff ff       	call   c0100eac <__panic>
c010c851:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c854:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010c85a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c85d:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010c860:	b8 00 00 00 00       	mov    $0x0,%eax
c010c865:	eb 2b                	jmp    c010c892 <copy_mm+0x11c>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c010c867:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010c868:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c86b:	89 04 24             	mov    %eax,(%esp)
c010c86e:	e8 a2 be ff ff       	call   c0108715 <exit_mmap>
    put_pgdir(mm);
c010c873:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c876:	89 04 24             	mov    %eax,(%esp)
c010c879:	e8 d2 fe ff ff       	call   c010c750 <put_pgdir>
c010c87e:	eb 01                	jmp    c010c881 <copy_mm+0x10b>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010c880:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010c881:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c884:	89 04 24             	mov    %eax,(%esp)
c010c887:	e8 c8 bb ff ff       	call   c0108454 <mm_destroy>
c010c88c:	eb 01                	jmp    c010c88f <copy_mm+0x119>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010c88e:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c010c88f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c892:	c9                   	leave  
c010c893:	c3                   	ret    

c010c894 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010c894:	55                   	push   %ebp
c010c895:	89 e5                	mov    %esp,%ebp
c010c897:	57                   	push   %edi
c010c898:	56                   	push   %esi
c010c899:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010c89a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c89d:	8b 40 0c             	mov    0xc(%eax),%eax
c010c8a0:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010c8a5:	89 c2                	mov    %eax,%edx
c010c8a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8aa:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010c8ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8b0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c8b3:	8b 55 10             	mov    0x10(%ebp),%edx
c010c8b6:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010c8bb:	89 c1                	mov    %eax,%ecx
c010c8bd:	83 e1 01             	and    $0x1,%ecx
c010c8c0:	85 c9                	test   %ecx,%ecx
c010c8c2:	74 0e                	je     c010c8d2 <copy_thread+0x3e>
c010c8c4:	0f b6 0a             	movzbl (%edx),%ecx
c010c8c7:	88 08                	mov    %cl,(%eax)
c010c8c9:	83 c0 01             	add    $0x1,%eax
c010c8cc:	83 c2 01             	add    $0x1,%edx
c010c8cf:	83 eb 01             	sub    $0x1,%ebx
c010c8d2:	89 c1                	mov    %eax,%ecx
c010c8d4:	83 e1 02             	and    $0x2,%ecx
c010c8d7:	85 c9                	test   %ecx,%ecx
c010c8d9:	74 0f                	je     c010c8ea <copy_thread+0x56>
c010c8db:	0f b7 0a             	movzwl (%edx),%ecx
c010c8de:	66 89 08             	mov    %cx,(%eax)
c010c8e1:	83 c0 02             	add    $0x2,%eax
c010c8e4:	83 c2 02             	add    $0x2,%edx
c010c8e7:	83 eb 02             	sub    $0x2,%ebx
c010c8ea:	89 d9                	mov    %ebx,%ecx
c010c8ec:	c1 e9 02             	shr    $0x2,%ecx
c010c8ef:	89 c7                	mov    %eax,%edi
c010c8f1:	89 d6                	mov    %edx,%esi
c010c8f3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c8f5:	89 f2                	mov    %esi,%edx
c010c8f7:	89 f8                	mov    %edi,%eax
c010c8f9:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c8fe:	89 de                	mov    %ebx,%esi
c010c900:	83 e6 02             	and    $0x2,%esi
c010c903:	85 f6                	test   %esi,%esi
c010c905:	74 0b                	je     c010c912 <copy_thread+0x7e>
c010c907:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c90b:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c90f:	83 c1 02             	add    $0x2,%ecx
c010c912:	83 e3 01             	and    $0x1,%ebx
c010c915:	85 db                	test   %ebx,%ebx
c010c917:	74 07                	je     c010c920 <copy_thread+0x8c>
c010c919:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c91d:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010c920:	8b 45 08             	mov    0x8(%ebp),%eax
c010c923:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c926:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010c92d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c930:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c933:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c936:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010c939:	8b 45 08             	mov    0x8(%ebp),%eax
c010c93c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c93f:	8b 55 08             	mov    0x8(%ebp),%edx
c010c942:	8b 52 3c             	mov    0x3c(%edx),%edx
c010c945:	8b 52 40             	mov    0x40(%edx),%edx
c010c948:	80 ce 02             	or     $0x2,%dh
c010c94b:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010c94e:	ba 95 c4 10 c0       	mov    $0xc010c495,%edx
c010c953:	8b 45 08             	mov    0x8(%ebp),%eax
c010c956:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010c959:	8b 45 08             	mov    0x8(%ebp),%eax
c010c95c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c95f:	89 c2                	mov    %eax,%edx
c010c961:	8b 45 08             	mov    0x8(%ebp),%eax
c010c964:	89 50 20             	mov    %edx,0x20(%eax)
}
c010c967:	5b                   	pop    %ebx
c010c968:	5e                   	pop    %esi
c010c969:	5f                   	pop    %edi
c010c96a:	5d                   	pop    %ebp
c010c96b:	c3                   	ret    

c010c96c <copy_files>:

//copy_files&put_files function used by do_fork in LAB8
//copy the files_struct from current to proc
static int
copy_files(uint32_t clone_flags, struct proc_struct *proc) {
c010c96c:	55                   	push   %ebp
c010c96d:	89 e5                	mov    %esp,%ebp
c010c96f:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010c972:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010c977:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c97d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010c980:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c984:	75 24                	jne    c010c9aa <copy_files+0x3e>
c010c986:	c7 44 24 0c 38 82 11 	movl   $0xc0118238,0xc(%esp)
c010c98d:	c0 
c010c98e:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010c995:	c0 
c010c996:	c7 44 24 04 81 01 00 	movl   $0x181,0x4(%esp)
c010c99d:	00 
c010c99e:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010c9a5:	e8 02 45 ff ff       	call   c0100eac <__panic>

    if (clone_flags & CLONE_FS) {
c010c9aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9ad:	25 00 08 00 00       	and    $0x800,%eax
c010c9b2:	85 c0                	test   %eax,%eax
c010c9b4:	74 08                	je     c010c9be <copy_files+0x52>
        filesp = old_filesp;
c010c9b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c9b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010c9bc:	eb 30                	jmp    c010c9ee <copy_files+0x82>
    }

    int ret = -E_NO_MEM;
c010c9be:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010c9c5:	e8 2d e8 ff ff       	call   c010b1f7 <files_create>
c010c9ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c9cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c9d1:	74 47                	je     c010ca1a <copy_files+0xae>
        goto bad_files_struct;
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
c010c9d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c9d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9dd:	89 04 24             	mov    %eax,(%esp)
c010c9e0:	e8 bb e9 ff ff       	call   c010b3a0 <dup_files>
c010c9e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c9e8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c9ec:	75 1e                	jne    c010ca0c <copy_files+0xa0>
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010c9ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9f1:	89 04 24             	mov    %eax,(%esp)
c010c9f4:	e8 a2 f6 ff ff       	call   c010c09b <files_count_inc>
    proc->filesp = filesp;
c010c9f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c9fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c9ff:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010ca05:	b8 00 00 00 00       	mov    $0x0,%eax
c010ca0a:	eb 12                	jmp    c010ca1e <copy_files+0xb2>
    if ((filesp = files_create()) == NULL) {
        goto bad_files_struct;
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
c010ca0c:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010ca0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca10:	89 04 24             	mov    %eax,(%esp)
c010ca13:	e8 42 e8 ff ff       	call   c010b25a <files_destroy>
c010ca18:	eb 01                	jmp    c010ca1b <copy_files+0xaf>
        goto good_files_struct;
    }

    int ret = -E_NO_MEM;
    if ((filesp = files_create()) == NULL) {
        goto bad_files_struct;
c010ca1a:	90                   	nop
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010ca1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010ca1e:	c9                   	leave  
c010ca1f:	c3                   	ret    

c010ca20 <put_files>:

//decrease the ref_count of files, and if ref_count==0, then destroy files_struct
static void
put_files(struct proc_struct *proc) {
c010ca20:	55                   	push   %ebp
c010ca21:	89 e5                	mov    %esp,%ebp
c010ca23:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = proc->filesp;
c010ca26:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca29:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ca2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010ca32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ca36:	74 1a                	je     c010ca52 <put_files+0x32>
        if (files_count_dec(filesp) == 0) {
c010ca38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca3b:	89 04 24             	mov    %eax,(%esp)
c010ca3e:	e8 72 f6 ff ff       	call   c010c0b5 <files_count_dec>
c010ca43:	85 c0                	test   %eax,%eax
c010ca45:	75 0b                	jne    c010ca52 <put_files+0x32>
            files_destroy(filesp);
c010ca47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca4a:	89 04 24             	mov    %eax,(%esp)
c010ca4d:	e8 08 e8 ff ff       	call   c010b25a <files_destroy>
        }
    }
}
c010ca52:	c9                   	leave  
c010ca53:	c3                   	ret    

c010ca54 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010ca54:	55                   	push   %ebp
c010ca55:	89 e5                	mov    %esp,%ebp
c010ca57:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010ca5a:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010ca61:	a1 40 3f 15 c0       	mov    0xc0153f40,%eax
c010ca66:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010ca6b:	0f 8f fe 00 00 00    	jg     c010cb6f <do_fork+0x11b>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010ca71:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
	// 1. call alloc_proc to allocate a proc_struct
	proc = alloc_proc();
c010ca78:	e8 52 f6 ff ff       	call   c010c0cf <alloc_proc>
c010ca7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL) {
c010ca80:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ca84:	0f 84 e8 00 00 00    	je     c010cb72 <do_fork+0x11e>
        goto fork_out;
    }
    proc->parent = current;
c010ca8a:	8b 15 28 1f 15 c0    	mov    0xc0151f28,%edx
c010ca90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca93:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010ca96:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010ca9b:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010caa1:	85 c0                	test   %eax,%eax
c010caa3:	74 24                	je     c010cac9 <do_fork+0x75>
c010caa5:	c7 44 24 0c 60 82 11 	movl   $0xc0118260,0xc(%esp)
c010caac:	c0 
c010caad:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010cab4:	c0 
c010cab5:	c7 44 24 04 dc 01 00 	movl   $0x1dc,0x4(%esp)
c010cabc:	00 
c010cabd:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010cac4:	e8 e3 43 ff ff       	call   c0100eac <__panic>
	
	// 2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
c010cac9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cacc:	89 04 24             	mov    %eax,(%esp)
c010cacf:	e8 73 fb ff ff       	call   c010c647 <setup_kstack>
c010cad4:	85 c0                	test   %eax,%eax
c010cad6:	0f 85 b8 00 00 00    	jne    c010cb94 <do_fork+0x140>
        goto bad_fork_cleanup_proc;
    }
	
	if(copy_files(clone_flags, proc))   
c010cadc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cadf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cae3:	8b 45 08             	mov    0x8(%ebp),%eax
c010cae6:	89 04 24             	mov    %eax,(%esp)
c010cae9:	e8 7e fe ff ff       	call   c010c96c <copy_files>
c010caee:	85 c0                	test   %eax,%eax
c010caf0:	0f 85 90 00 00 00    	jne    c010cb86 <do_fork+0x132>
		goto bad_fork_cleanup_kstack;   
	
	// 3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
c010caf6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010caf9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cafd:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb00:	89 04 24             	mov    %eax,(%esp)
c010cb03:	e8 6e fc ff ff       	call   c010c776 <copy_mm>
c010cb08:	85 c0                	test   %eax,%eax
c010cb0a:	75 6c                	jne    c010cb78 <do_fork+0x124>
        goto bad_fork_cleanup_files;
    }
	// 4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);
c010cb0c:	8b 45 10             	mov    0x10(%ebp),%eax
c010cb0f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cb13:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb16:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb1d:	89 04 24             	mov    %eax,(%esp)
c010cb20:	e8 6f fd ff ff       	call   c010c894 <copy_thread>

	// 5. insert proc_struct into hash_list && proc_list
    bool intr_flag;
    local_intr_save(intr_flag);
c010cb25:	e8 93 f3 ff ff       	call   c010bebd <__intr_save>
c010cb2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    proc->pid = get_pid();
c010cb2d:	e8 f6 f7 ff ff       	call   c010c328 <get_pid>
c010cb32:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010cb35:	89 42 04             	mov    %eax,0x4(%edx)
    hash_proc(proc);
c010cb38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb3b:	89 04 24             	mov    %eax,(%esp)
c010cb3e:	e8 6a f9 ff ff       	call   c010c4ad <hash_proc>
    set_links(proc);
c010cb43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb46:	89 04 24             	mov    %eax,(%esp)
c010cb49:	e8 7f f6 ff ff       	call   c010c1cd <set_links>
    local_intr_restore(intr_flag);
c010cb4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb51:	89 04 24             	mov    %eax,(%esp)
c010cb54:	e8 93 f3 ff ff       	call   c010beec <__intr_restore>
	
	// 6. call wakeup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c010cb59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb5c:	89 04 24             	mov    %eax,(%esp)
c010cb5f:	e8 0b 1c 00 00       	call   c010e76f <wakeup_proc>
	// 7. set ret vaule using child proc's pid
    ret = proc->pid;
c010cb64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb67:	8b 40 04             	mov    0x4(%eax),%eax
c010cb6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cb6d:	eb 04                	jmp    c010cb73 <do_fork+0x11f>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010cb6f:	90                   	nop
c010cb70:	eb 01                	jmp    c010cb73 <do_fork+0x11f>
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
	// 1. call alloc_proc to allocate a proc_struct
	proc = alloc_proc();
    if (proc == NULL) {
        goto fork_out;
c010cb72:	90                   	nop
	// 6. call wakeup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
	// 7. set ret vaule using child proc's pid
    ret = proc->pid;
fork_out:
    return ret;
c010cb73:	8b 45 f4             	mov    -0xc(%ebp),%eax
bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
    goto fork_out;
}
c010cb76:	c9                   	leave  
c010cb77:	c3                   	ret    
	if(copy_files(clone_flags, proc))   
		goto bad_fork_cleanup_kstack;   
	
	// 3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_files;
c010cb78:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_files:  //for LAB8
    put_files(proc);
c010cb79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb7c:	89 04 24             	mov    %eax,(%esp)
c010cb7f:	e8 9c fe ff ff       	call   c010ca20 <put_files>
c010cb84:	eb 01                	jmp    c010cb87 <do_fork+0x133>
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
    }
	
	if(copy_files(clone_flags, proc))   
		goto bad_fork_cleanup_kstack;   
c010cb86:	90                   	nop
    return ret;

bad_fork_cleanup_files:  //for LAB8
    put_files(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010cb87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb8a:	89 04 24             	mov    %eax,(%esp)
c010cb8d:	e8 f1 fa ff ff       	call   c010c683 <put_kstack>
c010cb92:	eb 01                	jmp    c010cb95 <do_fork+0x141>
    proc->parent = current;
    assert(current->wait_state == 0);
	
	// 2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
c010cb94:	90                   	nop
bad_fork_cleanup_files:  //for LAB8
    put_files(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010cb95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb98:	89 04 24             	mov    %eax,(%esp)
c010cb9b:	e8 d1 82 ff ff       	call   c0104e71 <kfree>
    goto fork_out;
c010cba0:	eb d1                	jmp    c010cb73 <do_fork+0x11f>

c010cba2 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010cba2:	55                   	push   %ebp
c010cba3:	89 e5                	mov    %esp,%ebp
c010cba5:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010cba8:	8b 15 28 1f 15 c0    	mov    0xc0151f28,%edx
c010cbae:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010cbb3:	39 c2                	cmp    %eax,%edx
c010cbb5:	75 1c                	jne    c010cbd3 <do_exit+0x31>
        panic("idleproc exit.\n");
c010cbb7:	c7 44 24 08 79 82 11 	movl   $0xc0118279,0x8(%esp)
c010cbbe:	c0 
c010cbbf:	c7 44 24 04 0c 02 00 	movl   $0x20c,0x4(%esp)
c010cbc6:	00 
c010cbc7:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010cbce:	e8 d9 42 ff ff       	call   c0100eac <__panic>
    }
    if (current == initproc) {
c010cbd3:	8b 15 28 1f 15 c0    	mov    0xc0151f28,%edx
c010cbd9:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010cbde:	39 c2                	cmp    %eax,%edx
c010cbe0:	75 1c                	jne    c010cbfe <do_exit+0x5c>
        panic("initproc exit.\n");
c010cbe2:	c7 44 24 08 89 82 11 	movl   $0xc0118289,0x8(%esp)
c010cbe9:	c0 
c010cbea:	c7 44 24 04 0f 02 00 	movl   $0x20f,0x4(%esp)
c010cbf1:	00 
c010cbf2:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010cbf9:	e8 ae 42 ff ff       	call   c0100eac <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010cbfe:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010cc03:	8b 40 18             	mov    0x18(%eax),%eax
c010cc06:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010cc09:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cc0d:	74 4a                	je     c010cc59 <do_exit+0xb7>
        lcr3(boot_cr3);
c010cc0f:	a1 24 50 15 c0       	mov    0xc0155024,%eax
c010cc14:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cc17:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cc1a:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010cc1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc20:	89 04 24             	mov    %eax,(%esp)
c010cc23:	e8 00 f4 ff ff       	call   c010c028 <mm_count_dec>
c010cc28:	85 c0                	test   %eax,%eax
c010cc2a:	75 21                	jne    c010cc4d <do_exit+0xab>
            exit_mmap(mm);
c010cc2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc2f:	89 04 24             	mov    %eax,(%esp)
c010cc32:	e8 de ba ff ff       	call   c0108715 <exit_mmap>
            put_pgdir(mm);
c010cc37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc3a:	89 04 24             	mov    %eax,(%esp)
c010cc3d:	e8 0e fb ff ff       	call   c010c750 <put_pgdir>
            mm_destroy(mm);
c010cc42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc45:	89 04 24             	mov    %eax,(%esp)
c010cc48:	e8 07 b8 ff ff       	call   c0108454 <mm_destroy>
        }
        current->mm = NULL;
c010cc4d:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010cc52:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_files(current); //for LAB8
c010cc59:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010cc5e:	89 04 24             	mov    %eax,(%esp)
c010cc61:	e8 ba fd ff ff       	call   c010ca20 <put_files>
    current->state = PROC_ZOMBIE;
c010cc66:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010cc6b:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010cc71:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010cc76:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc79:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010cc7f:	e8 39 f2 ff ff       	call   c010bebd <__intr_save>
c010cc84:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010cc87:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010cc8c:	8b 40 14             	mov    0x14(%eax),%eax
c010cc8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010cc92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc95:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cc9b:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cca0:	0f 85 b9 00 00 00    	jne    c010cd5f <do_exit+0x1bd>
            wakeup_proc(proc);
c010cca6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cca9:	89 04 24             	mov    %eax,(%esp)
c010ccac:	e8 be 1a 00 00       	call   c010e76f <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010ccb1:	e9 a9 00 00 00       	jmp    c010cd5f <do_exit+0x1bd>
            proc = current->cptr;
c010ccb6:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010ccbb:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010ccc1:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010ccc4:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010ccc9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cccc:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010ccd2:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010ccd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccdb:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010cce2:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010cce5:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010ccea:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010ccf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccf3:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010ccf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccfc:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010cd02:	85 c0                	test   %eax,%eax
c010cd04:	74 14                	je     c010cd1a <do_exit+0x178>
                initproc->cptr->yptr = proc;
c010cd06:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010cd0b:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cd11:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd14:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010cd1a:	8b 15 24 1f 15 c0    	mov    0xc0151f24,%edx
c010cd20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd23:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010cd26:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010cd2b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd2e:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010cd34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd37:	8b 00                	mov    (%eax),%eax
c010cd39:	83 f8 03             	cmp    $0x3,%eax
c010cd3c:	75 22                	jne    c010cd60 <do_exit+0x1be>
                if (initproc->wait_state == WT_CHILD) {
c010cd3e:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010cd43:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cd49:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cd4e:	75 10                	jne    c010cd60 <do_exit+0x1be>
                    wakeup_proc(initproc);
c010cd50:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010cd55:	89 04 24             	mov    %eax,(%esp)
c010cd58:	e8 12 1a 00 00       	call   c010e76f <wakeup_proc>
c010cd5d:	eb 01                	jmp    c010cd60 <do_exit+0x1be>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010cd5f:	90                   	nop
c010cd60:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010cd65:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cd6b:	85 c0                	test   %eax,%eax
c010cd6d:	0f 85 43 ff ff ff    	jne    c010ccb6 <do_exit+0x114>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010cd73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd76:	89 04 24             	mov    %eax,(%esp)
c010cd79:	e8 6e f1 ff ff       	call   c010beec <__intr_restore>
    
    schedule();
c010cd7e:	e8 88 1a 00 00       	call   c010e80b <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010cd83:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010cd88:	8b 40 04             	mov    0x4(%eax),%eax
c010cd8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cd8f:	c7 44 24 08 9c 82 11 	movl   $0xc011829c,0x8(%esp)
c010cd96:	c0 
c010cd97:	c7 44 24 04 3c 02 00 	movl   $0x23c,0x4(%esp)
c010cd9e:	00 
c010cd9f:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010cda6:	e8 01 41 ff ff       	call   c0100eac <__panic>

c010cdab <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010cdab:	55                   	push   %ebp
c010cdac:	89 e5                	mov    %esp,%ebp
c010cdae:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010cdb1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010cdb8:	00 
c010cdb9:	8b 45 14             	mov    0x14(%ebp),%eax
c010cdbc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cdc0:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdc3:	89 04 24             	mov    %eax,(%esp)
c010cdc6:	e8 b7 ec ff ff       	call   c010ba82 <sysfile_seek>
c010cdcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cdce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cdd2:	74 05                	je     c010cdd9 <load_icode_read+0x2e>
        return ret;
c010cdd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdd7:	eb 38                	jmp    c010ce11 <load_icode_read+0x66>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010cdd9:	8b 45 10             	mov    0x10(%ebp),%eax
c010cddc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cde0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cde3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cde7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdea:	89 04 24             	mov    %eax,(%esp)
c010cded:	e8 9e e9 ff ff       	call   c010b790 <sysfile_read>
c010cdf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cdf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdf8:	3b 45 10             	cmp    0x10(%ebp),%eax
c010cdfb:	74 0f                	je     c010ce0c <load_icode_read+0x61>
        return (ret < 0) ? ret : -1;
c010cdfd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010ce02:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce06:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010ce0a:	eb 05                	jmp    c010ce11 <load_icode_read+0x66>
    }
    return 0;
c010ce0c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ce11:	c9                   	leave  
c010ce12:	c3                   	ret    

c010ce13 <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010ce13:	55                   	push   %ebp
c010ce14:	89 e5                	mov    %esp,%ebp
c010ce16:	53                   	push   %ebx
c010ce17:	81 ec c4 00 00 00    	sub    $0xc4,%esp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
	if (current->mm != NULL) {
c010ce1d:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010ce22:	8b 40 18             	mov    0x18(%eax),%eax
c010ce25:	85 c0                	test   %eax,%eax
c010ce27:	74 1c                	je     c010ce45 <load_icode+0x32>
        panic("load_icode: current->mm must be empty.\n");
c010ce29:	c7 44 24 08 bc 82 11 	movl   $0xc01182bc,0x8(%esp)
c010ce30:	c0 
c010ce31:	c7 44 24 04 69 02 00 	movl   $0x269,0x4(%esp)
c010ce38:	00 
c010ce39:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010ce40:	e8 67 40 ff ff       	call   c0100eac <__panic>
    }
	struct proghdr *ph = NULL;
c010ce45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    int ret = -E_NO_MEM;
c010ce4c:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010ce53:	e8 96 b2 ff ff       	call   c01080ee <mm_create>
c010ce58:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010ce5b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c010ce5f:	0f 84 6c 07 00 00    	je     c010d5d1 <load_icode+0x7be>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010ce65:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ce68:	89 04 24             	mov    %eax,(%esp)
c010ce6b:	e8 39 f8 ff ff       	call   c010c6a9 <setup_pgdir>
c010ce70:	85 c0                	test   %eax,%eax
c010ce72:	0f 85 4b 07 00 00    	jne    c010d5c3 <load_icode+0x7b0>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
	struct elfhdr elf_header;
	struct elfhdr *elf = &elf_header;
c010ce78:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010ce7e:	89 45 c0             	mov    %eax,-0x40(%ebp)
	load_icode_read(fd, (void *)elf, sizeof(struct elfhdr), 0);
c010ce81:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010ce88:	00 
c010ce89:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
c010ce90:	00 
c010ce91:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce94:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce98:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce9b:	89 04 24             	mov    %eax,(%esp)
c010ce9e:	e8 08 ff ff ff       	call   c010cdab <load_icode_read>
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)

	ph = kmalloc(sizeof(struct proghdr) * elf->e_phnum);
c010cea3:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cea6:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010ceaa:	0f b7 c0             	movzwl %ax,%eax
c010cead:	c1 e0 05             	shl    $0x5,%eax
c010ceb0:	89 04 24             	mov    %eax,(%esp)
c010ceb3:	e8 9e 7f ff ff       	call   c0104e56 <kmalloc>
c010ceb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	load_icode_read(fd, (void *)ph, sizeof(struct proghdr) * elf->e_phnum, elf->e_phoff);
c010cebb:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cebe:	8b 40 1c             	mov    0x1c(%eax),%eax
c010cec1:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010cec4:	0f b7 52 2c          	movzwl 0x2c(%edx),%edx
c010cec8:	0f b7 d2             	movzwl %dx,%edx
c010cecb:	c1 e2 05             	shl    $0x5,%edx
c010cece:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ced2:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ced6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ced9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cedd:	8b 45 08             	mov    0x8(%ebp),%eax
c010cee0:	89 04 24             	mov    %eax,(%esp)
c010cee3:	e8 c3 fe ff ff       	call   c010cdab <load_icode_read>
    //struct proghdr *ph = (struct proghdr *)(binary + elf_header.e_phoff);
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010cee8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ceeb:	8b 00                	mov    (%eax),%eax
c010ceed:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010cef2:	74 0c                	je     c010cf00 <load_icode+0xed>
        ret = -E_INVAL_ELF;
c010cef4:	c7 45 f0 f8 ff ff ff 	movl   $0xfffffff8,-0x10(%ebp)
        goto bad_elf_cleanup_pgdir;
c010cefb:	e9 b6 06 00 00       	jmp    c010d5b6 <load_icode+0x7a3>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010cf00:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf03:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010cf07:	0f b7 c0             	movzwl %ax,%eax
c010cf0a:	c1 e0 05             	shl    $0x5,%eax
c010cf0d:	03 45 f4             	add    -0xc(%ebp),%eax
c010cf10:	89 45 bc             	mov    %eax,-0x44(%ebp)
    for (; ph < ph_end; ph ++) {
c010cf13:	e9 21 03 00 00       	jmp    c010d239 <load_icode+0x426>
		//(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010cf18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf1b:	8b 00                	mov    (%eax),%eax
c010cf1d:	83 f8 01             	cmp    $0x1,%eax
c010cf20:	0f 85 08 03 00 00    	jne    c010d22e <load_icode+0x41b>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010cf26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf29:	8b 50 10             	mov    0x10(%eax),%edx
c010cf2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf2f:	8b 40 14             	mov    0x14(%eax),%eax
c010cf32:	39 c2                	cmp    %eax,%edx
c010cf34:	76 0c                	jbe    c010cf42 <load_icode+0x12f>
            ret = -E_INVAL_ELF;
c010cf36:	c7 45 f0 f8 ff ff ff 	movl   $0xfffffff8,-0x10(%ebp)
            goto bad_cleanup_mmap;
c010cf3d:	e9 69 06 00 00       	jmp    c010d5ab <load_icode+0x798>
        }
        if (ph->p_filesz == 0) {
c010cf42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf45:	8b 40 10             	mov    0x10(%eax),%eax
c010cf48:	85 c0                	test   %eax,%eax
c010cf4a:	0f 84 e1 02 00 00    	je     c010d231 <load_icode+0x41e>
            continue ;
        }
		//(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010cf50:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010cf57:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010cf5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf61:	8b 40 18             	mov    0x18(%eax),%eax
c010cf64:	83 e0 01             	and    $0x1,%eax
c010cf67:	84 c0                	test   %al,%al
c010cf69:	74 04                	je     c010cf6f <load_icode+0x15c>
c010cf6b:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010cf6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf72:	8b 40 18             	mov    0x18(%eax),%eax
c010cf75:	83 e0 02             	and    $0x2,%eax
c010cf78:	85 c0                	test   %eax,%eax
c010cf7a:	74 04                	je     c010cf80 <load_icode+0x16d>
c010cf7c:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010cf80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf83:	8b 40 18             	mov    0x18(%eax),%eax
c010cf86:	83 e0 04             	and    $0x4,%eax
c010cf89:	85 c0                	test   %eax,%eax
c010cf8b:	74 04                	je     c010cf91 <load_icode+0x17e>
c010cf8d:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010cf91:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cf94:	83 e0 02             	and    $0x2,%eax
c010cf97:	85 c0                	test   %eax,%eax
c010cf99:	74 04                	je     c010cf9f <load_icode+0x18c>
c010cf9b:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010cf9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cfa2:	8b 50 14             	mov    0x14(%eax),%edx
c010cfa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cfa8:	8b 40 08             	mov    0x8(%eax),%eax
c010cfab:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010cfb2:	00 
c010cfb3:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010cfb6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010cfba:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cfbe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cfc2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cfc5:	89 04 24             	mov    %eax,(%esp)
c010cfc8:	e8 29 b5 ff ff       	call   c01084f6 <mm_map>
c010cfcd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cfd0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cfd4:	0f 85 c7 05 00 00    	jne    c010d5a1 <load_icode+0x78e>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = ph->p_offset;
c010cfda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cfdd:	8b 40 04             	mov    0x4(%eax),%eax
c010cfe0:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010cfe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cfe6:	8b 40 08             	mov    0x8(%eax),%eax
c010cfe9:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cfec:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cfef:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010cff2:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010cff5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010cffa:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010cffd:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)

		//(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010d004:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d007:	8b 50 08             	mov    0x8(%eax),%edx
c010d00a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d00d:	8b 40 10             	mov    0x10(%eax),%eax
c010d010:	01 d0                	add    %edx,%eax
c010d012:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		//(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010d015:	e9 98 00 00 00       	jmp    c010d0b2 <load_icode+0x29f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d01a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d01d:	8b 40 0c             	mov    0xc(%eax),%eax
c010d020:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d023:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d027:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d02a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d02e:	89 04 24             	mov    %eax,(%esp)
c010d031:	e8 5e 91 ff ff       	call   c0106194 <pgdir_alloc_page>
c010d036:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d039:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d03d:	0f 84 61 05 00 00    	je     c010d5a4 <load_icode+0x791>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d043:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d046:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d049:	89 d1                	mov    %edx,%ecx
c010d04b:	29 c1                	sub    %eax,%ecx
c010d04d:	89 c8                	mov    %ecx,%eax
c010d04f:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d052:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d057:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d05a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d05d:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d064:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d067:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d06a:	73 0f                	jae    c010d07b <load_icode+0x268>
                size -= la - end;
c010d06c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d06f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d072:	89 d1                	mov    %edx,%ecx
c010d074:	29 c1                	sub    %eax,%ecx
c010d076:	89 c8                	mov    %ecx,%eax
c010d078:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
			load_icode_read(fd, (void *)(page2kva(page) + off), size, from);
c010d07b:	8b 5d e0             	mov    -0x20(%ebp),%ebx
c010d07e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d081:	89 04 24             	mov    %eax,(%esp)
c010d084:	e8 e7 ee ff ff       	call   c010bf70 <page2kva>
c010d089:	03 45 b0             	add    -0x50(%ebp),%eax
c010d08c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010d090:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010d093:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d097:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d09b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d09e:	89 04 24             	mov    %eax,(%esp)
c010d0a1:	e8 05 fd ff ff       	call   c010cdab <load_icode_read>
            // memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
c010d0a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d0a9:	01 45 d8             	add    %eax,-0x28(%ebp)
c010d0ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d0af:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

		//(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
		//(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010d0b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d0b5:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d0b8:	0f 82 5c ff ff ff    	jb     c010d01a <load_icode+0x207>
            // memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

		//(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010d0be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d0c1:	8b 50 08             	mov    0x8(%eax),%edx
c010d0c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d0c7:	8b 40 14             	mov    0x14(%eax),%eax
c010d0ca:	01 d0                	add    %edx,%eax
c010d0cc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        if (start < la) {
c010d0cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d0d2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d0d5:	0f 83 45 01 00 00    	jae    c010d220 <load_icode+0x40d>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010d0db:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d0de:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d0e1:	0f 84 4d 01 00 00    	je     c010d234 <load_icode+0x421>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010d0e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d0ea:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d0ed:	89 d1                	mov    %edx,%ecx
c010d0ef:	29 c1                	sub    %eax,%ecx
c010d0f1:	89 c8                	mov    %ecx,%eax
c010d0f3:	05 00 10 00 00       	add    $0x1000,%eax
c010d0f8:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d0fb:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d100:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d103:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010d106:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d109:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d10c:	73 0f                	jae    c010d11d <load_icode+0x30a>
                size -= la - end;
c010d10e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d111:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d114:	89 d1                	mov    %edx,%ecx
c010d116:	29 c1                	sub    %eax,%ecx
c010d118:	89 c8                	mov    %ecx,%eax
c010d11a:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
			// load_icode_read(fd, (void *)(page2kva(page) + off), size, 0);
            memset(page2kva(page) + off, 0, size);
c010d11d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d120:	89 04 24             	mov    %eax,(%esp)
c010d123:	e8 48 ee ff ff       	call   c010bf70 <page2kva>
c010d128:	03 45 b0             	add    -0x50(%ebp),%eax
c010d12b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010d12e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d132:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d139:	00 
c010d13a:	89 04 24             	mov    %eax,(%esp)
c010d13d:	e8 32 86 00 00       	call   c0115774 <memset>
            start += size;
c010d142:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d145:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010d148:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d14b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d14e:	73 0c                	jae    c010d15c <load_icode+0x349>
c010d150:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d153:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d156:	0f 84 c4 00 00 00    	je     c010d220 <load_icode+0x40d>
c010d15c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d15f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d162:	72 0c                	jb     c010d170 <load_icode+0x35d>
c010d164:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d167:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d16a:	0f 84 b0 00 00 00    	je     c010d220 <load_icode+0x40d>
c010d170:	c7 44 24 0c e4 82 11 	movl   $0xc01182e4,0xc(%esp)
c010d177:	c0 
c010d178:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010d17f:	c0 
c010d180:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c010d187:	00 
c010d188:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010d18f:	e8 18 3d ff ff       	call   c0100eac <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d194:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d197:	8b 40 0c             	mov    0xc(%eax),%eax
c010d19a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d19d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d1a1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d1a4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d1a8:	89 04 24             	mov    %eax,(%esp)
c010d1ab:	e8 e4 8f ff ff       	call   c0106194 <pgdir_alloc_page>
c010d1b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d1b3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d1b7:	0f 84 ea 03 00 00    	je     c010d5a7 <load_icode+0x794>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d1bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d1c0:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d1c3:	89 d1                	mov    %edx,%ecx
c010d1c5:	29 c1                	sub    %eax,%ecx
c010d1c7:	89 c8                	mov    %ecx,%eax
c010d1c9:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d1cc:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d1d1:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d1d4:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d1d7:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d1de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d1e1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d1e4:	73 0f                	jae    c010d1f5 <load_icode+0x3e2>
                size -= la - end;
c010d1e6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d1e9:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d1ec:	89 d1                	mov    %edx,%ecx
c010d1ee:	29 c1                	sub    %eax,%ecx
c010d1f0:	89 c8                	mov    %ecx,%eax
c010d1f2:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d1f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d1f8:	89 04 24             	mov    %eax,(%esp)
c010d1fb:	e8 70 ed ff ff       	call   c010bf70 <page2kva>
c010d200:	03 45 b0             	add    -0x50(%ebp),%eax
c010d203:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010d206:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d20a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d211:	00 
c010d212:	89 04 24             	mov    %eax,(%esp)
c010d215:	e8 5a 85 00 00       	call   c0115774 <memset>
            start += size;
c010d21a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d21d:	01 45 d8             	add    %eax,-0x28(%ebp)
			// load_icode_read(fd, (void *)(page2kva(page) + off), size, 0);
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010d220:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d223:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d226:	0f 82 68 ff ff ff    	jb     c010d194 <load_icode+0x381>
c010d22c:	eb 07                	jmp    c010d235 <load_icode+0x422>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
		//(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c010d22e:	90                   	nop
c010d22f:	eb 04                	jmp    c010d235 <load_icode+0x422>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c010d231:	90                   	nop
c010d232:	eb 01                	jmp    c010d235 <load_icode+0x422>
		//(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c010d234:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010d235:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010d239:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d23c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
c010d23f:	0f 82 d3 fc ff ff    	jb     c010cf18 <load_icode+0x105>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010d245:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010d24c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d253:	00 
c010d254:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d257:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d25b:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010d262:	00 
c010d263:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010d26a:	af 
c010d26b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d26e:	89 04 24             	mov    %eax,(%esp)
c010d271:	e8 80 b2 ff ff       	call   c01084f6 <mm_map>
c010d276:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d279:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d27d:	0f 85 27 03 00 00    	jne    c010d5aa <load_icode+0x797>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010d283:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d286:	8b 40 0c             	mov    0xc(%eax),%eax
c010d289:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d290:	00 
c010d291:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010d298:	af 
c010d299:	89 04 24             	mov    %eax,(%esp)
c010d29c:	e8 f3 8e ff ff       	call   c0106194 <pgdir_alloc_page>
c010d2a1:	85 c0                	test   %eax,%eax
c010d2a3:	75 24                	jne    c010d2c9 <load_icode+0x4b6>
c010d2a5:	c7 44 24 0c 20 83 11 	movl   $0xc0118320,0xc(%esp)
c010d2ac:	c0 
c010d2ad:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010d2b4:	c0 
c010d2b5:	c7 44 24 04 d6 02 00 	movl   $0x2d6,0x4(%esp)
c010d2bc:	00 
c010d2bd:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010d2c4:	e8 e3 3b ff ff       	call   c0100eac <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010d2c9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d2cc:	8b 40 0c             	mov    0xc(%eax),%eax
c010d2cf:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d2d6:	00 
c010d2d7:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010d2de:	af 
c010d2df:	89 04 24             	mov    %eax,(%esp)
c010d2e2:	e8 ad 8e ff ff       	call   c0106194 <pgdir_alloc_page>
c010d2e7:	85 c0                	test   %eax,%eax
c010d2e9:	75 24                	jne    c010d30f <load_icode+0x4fc>
c010d2eb:	c7 44 24 0c 64 83 11 	movl   $0xc0118364,0xc(%esp)
c010d2f2:	c0 
c010d2f3:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010d2fa:	c0 
c010d2fb:	c7 44 24 04 d7 02 00 	movl   $0x2d7,0x4(%esp)
c010d302:	00 
c010d303:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010d30a:	e8 9d 3b ff ff       	call   c0100eac <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010d30f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d312:	8b 40 0c             	mov    0xc(%eax),%eax
c010d315:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d31c:	00 
c010d31d:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010d324:	af 
c010d325:	89 04 24             	mov    %eax,(%esp)
c010d328:	e8 67 8e ff ff       	call   c0106194 <pgdir_alloc_page>
c010d32d:	85 c0                	test   %eax,%eax
c010d32f:	75 24                	jne    c010d355 <load_icode+0x542>
c010d331:	c7 44 24 0c a8 83 11 	movl   $0xc01183a8,0xc(%esp)
c010d338:	c0 
c010d339:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010d340:	c0 
c010d341:	c7 44 24 04 d8 02 00 	movl   $0x2d8,0x4(%esp)
c010d348:	00 
c010d349:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010d350:	e8 57 3b ff ff       	call   c0100eac <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010d355:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d358:	8b 40 0c             	mov    0xc(%eax),%eax
c010d35b:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d362:	00 
c010d363:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010d36a:	af 
c010d36b:	89 04 24             	mov    %eax,(%esp)
c010d36e:	e8 21 8e ff ff       	call   c0106194 <pgdir_alloc_page>
c010d373:	85 c0                	test   %eax,%eax
c010d375:	75 24                	jne    c010d39b <load_icode+0x588>
c010d377:	c7 44 24 0c ec 83 11 	movl   $0xc01183ec,0xc(%esp)
c010d37e:	c0 
c010d37f:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010d386:	c0 
c010d387:	c7 44 24 04 d9 02 00 	movl   $0x2d9,0x4(%esp)
c010d38e:	00 
c010d38f:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010d396:	e8 11 3b ff ff       	call   c0100eac <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010d39b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d39e:	89 04 24             	mov    %eax,(%esp)
c010d3a1:	e8 68 ec ff ff       	call   c010c00e <mm_count_inc>
    current->mm = mm;
c010d3a6:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d3ab:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010d3ae:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010d3b1:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d3b6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010d3b9:	8b 52 0c             	mov    0xc(%edx),%edx
c010d3bc:	89 55 ac             	mov    %edx,-0x54(%ebp)
c010d3bf:	81 7d ac ff ff ff bf 	cmpl   $0xbfffffff,-0x54(%ebp)
c010d3c6:	77 23                	ja     c010d3eb <load_icode+0x5d8>
c010d3c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d3cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d3cf:	c7 44 24 08 00 82 11 	movl   $0xc0118200,0x8(%esp)
c010d3d6:	c0 
c010d3d7:	c7 44 24 04 de 02 00 	movl   $0x2de,0x4(%esp)
c010d3de:	00 
c010d3df:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010d3e6:	e8 c1 3a ff ff       	call   c0100eac <__panic>
c010d3eb:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010d3ee:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010d3f4:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010d3f7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d3fa:	8b 40 0c             	mov    0xc(%eax),%eax
c010d3fd:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010d400:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c010d407:	77 23                	ja     c010d42c <load_icode+0x619>
c010d409:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d40c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d410:	c7 44 24 08 00 82 11 	movl   $0xc0118200,0x8(%esp)
c010d417:	c0 
c010d418:	c7 44 24 04 df 02 00 	movl   $0x2df,0x4(%esp)
c010d41f:	00 
c010d420:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010d427:	e8 80 3a ff ff       	call   c0100eac <__panic>
c010d42c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d42f:	05 00 00 00 40       	add    $0x40000000,%eax
c010d434:	89 45 98             	mov    %eax,-0x68(%ebp)
c010d437:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d43a:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010d43d:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d442:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d445:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010d448:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010d44f:	00 
c010d450:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d457:	00 
c010d458:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d45b:	89 04 24             	mov    %eax,(%esp)
c010d45e:	e8 11 83 00 00       	call   c0115774 <memset>
	
	// Allocate stack storage for actual arguments
	uint32_t argv_size = 0, i;
c010d463:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++)
c010d46a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d471:	eb 28                	jmp    c010d49b <load_icode+0x688>
        argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1;
c010d473:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d476:	c1 e0 02             	shl    $0x2,%eax
c010d479:	03 45 10             	add    0x10(%ebp),%eax
c010d47c:	8b 00                	mov    (%eax),%eax
c010d47e:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d485:	00 
c010d486:	89 04 24             	mov    %eax,(%esp)
c010d489:	e8 b1 7f 00 00       	call   c011543f <strnlen>
c010d48e:	03 45 d0             	add    -0x30(%ebp),%eax
c010d491:	83 c0 01             	add    $0x1,%eax
c010d494:	89 45 d0             	mov    %eax,-0x30(%ebp)
    struct trapframe *tf = current->tf;
    memset(tf, 0, sizeof(struct trapframe));
	
	// Allocate stack storage for actual arguments
	uint32_t argv_size = 0, i;
    for (i = 0; i < argc; i ++)
c010d497:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d49b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d49e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d4a1:	77 d0                	ja     c010d473 <load_icode+0x660>
        argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1;
    uintptr_t stack_top = USTACKTOP - argv_size;
c010d4a3:	b8 00 00 00 b0       	mov    $0xb0000000,%eax
c010d4a8:	2b 45 d0             	sub    -0x30(%ebp),%eax
c010d4ab:	89 45 a0             	mov    %eax,-0x60(%ebp)
	stack_top = stack_top & 0xFFFFFFFC;				// Align stack top to 4 bytes boundaries
c010d4ae:	83 65 a0 fc          	andl   $0xfffffffc,-0x60(%ebp)
	uintptr_t content_ptr = stack_top;
c010d4b2:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d4b5:	89 45 c8             	mov    %eax,-0x38(%ebp)
	// Allocate stack storage for argument pointers
    stack_top -= argc * sizeof(char *);
c010d4b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4bb:	c1 e0 02             	shl    $0x2,%eax
c010d4be:	29 45 a0             	sub    %eax,-0x60(%ebp)
    uintptr_t argv_ptr = stack_top;
c010d4c1:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d4c4:	89 45 9c             	mov    %eax,-0x64(%ebp)
	// Copy contents and pointers into the stack
    for (i = 0; i < argc; i ++) {
c010d4c7:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d4ce:	eb 4f                	jmp    c010d51f <load_icode+0x70c>
        ((char **)argv_ptr)[i] = strcpy(content_ptr, kargv[i]);
c010d4d0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d4d3:	c1 e0 02             	shl    $0x2,%eax
c010d4d6:	03 45 9c             	add    -0x64(%ebp),%eax
c010d4d9:	89 c3                	mov    %eax,%ebx
c010d4db:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d4de:	c1 e0 02             	shl    $0x2,%eax
c010d4e1:	03 45 10             	add    0x10(%ebp),%eax
c010d4e4:	8b 10                	mov    (%eax),%edx
c010d4e6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d4e9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d4ed:	89 04 24             	mov    %eax,(%esp)
c010d4f0:	e8 a2 7f 00 00       	call   c0115497 <strcpy>
c010d4f5:	89 03                	mov    %eax,(%ebx)
        content_ptr += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1;
c010d4f7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d4fa:	c1 e0 02             	shl    $0x2,%eax
c010d4fd:	03 45 10             	add    0x10(%ebp),%eax
c010d500:	8b 00                	mov    (%eax),%eax
c010d502:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d509:	00 
c010d50a:	89 04 24             	mov    %eax,(%esp)
c010d50d:	e8 2d 7f 00 00       	call   c011543f <strnlen>
c010d512:	03 45 c8             	add    -0x38(%ebp),%eax
c010d515:	83 c0 01             	add    $0x1,%eax
c010d518:	89 45 c8             	mov    %eax,-0x38(%ebp)
	uintptr_t content_ptr = stack_top;
	// Allocate stack storage for argument pointers
    stack_top -= argc * sizeof(char *);
    uintptr_t argv_ptr = stack_top;
	// Copy contents and pointers into the stack
    for (i = 0; i < argc; i ++) {
c010d51b:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d51f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d522:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d525:	77 a9                	ja     c010d4d0 <load_icode+0x6bd>
        ((char **)argv_ptr)[i] = strcpy(content_ptr, kargv[i]);
        content_ptr += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1;
    }
	// Allocate stack storage for argment count
    stack_top -= sizeof(int);
c010d527:	83 6d a0 04          	subl   $0x4,-0x60(%ebp)
    *(int *)stack_top = argc;
c010d52b:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d52e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d531:	89 10                	mov    %edx,(%eax)
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
	tf->tf_cs = USER_CS;
c010d533:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d536:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
	tf->tf_ds = USER_DS;
c010d53c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d53f:	66 c7 40 2c 23 00    	movw   $0x23,0x2c(%eax)
	tf->tf_es = USER_DS;
c010d545:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d548:	66 c7 40 28 23 00    	movw   $0x23,0x28(%eax)
	tf->tf_ss = USER_DS;
c010d54e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d551:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
	tf->tf_esp = stack_top;
c010d557:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d55a:	8b 55 a0             	mov    -0x60(%ebp),%edx
c010d55d:	89 50 44             	mov    %edx,0x44(%eax)
	tf->tf_eip = elf->e_entry;
c010d560:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d563:	8b 50 18             	mov    0x18(%eax),%edx
c010d566:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d569:	89 50 38             	mov    %edx,0x38(%eax)
	tf->tf_eflags |= FL_IF;
c010d56c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d56f:	8b 40 40             	mov    0x40(%eax),%eax
c010d572:	89 c2                	mov    %eax,%edx
c010d574:	80 ce 02             	or     $0x2,%dh
c010d577:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d57a:	89 50 40             	mov    %edx,0x40(%eax)
    ret = 0;
c010d57d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
out:
	if (ph != NULL)
c010d584:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d588:	74 0b                	je     c010d595 <load_icode+0x782>
		kfree(ph);
c010d58a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d58d:	89 04 24             	mov    %eax,(%esp)
c010d590:	e8 dc 78 ff ff       	call   c0104e71 <kfree>
    return ret;
c010d595:	8b 45 f0             	mov    -0x10(%ebp),%eax
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
}
c010d598:	81 c4 c4 00 00 00    	add    $0xc4,%esp
c010d59e:	5b                   	pop    %ebx
c010d59f:	5d                   	pop    %ebp
c010d5a0:	c3                   	ret    
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c010d5a1:	90                   	nop
c010d5a2:	eb 07                	jmp    c010d5ab <load_icode+0x798>
		//(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
		//(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010d5a4:	90                   	nop
c010d5a5:	eb 04                	jmp    c010d5ab <load_icode+0x798>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010d5a7:	90                   	nop
c010d5a8:	eb 01                	jmp    c010d5ab <load_icode+0x798>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c010d5aa:	90                   	nop
out:
	if (ph != NULL)
		kfree(ph);
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c010d5ab:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d5ae:	89 04 24             	mov    %eax,(%esp)
c010d5b1:	e8 5f b1 ff ff       	call   c0108715 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010d5b6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d5b9:	89 04 24             	mov    %eax,(%esp)
c010d5bc:	e8 8f f1 ff ff       	call   c010c750 <put_pgdir>
c010d5c1:	eb 01                	jmp    c010d5c4 <load_icode+0x7b1>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010d5c3:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010d5c4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d5c7:	89 04 24             	mov    %eax,(%esp)
c010d5ca:	e8 85 ae ff ff       	call   c0108454 <mm_destroy>
bad_mm:
    goto out;
c010d5cf:	eb b3                	jmp    c010d584 <load_icode+0x771>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010d5d1:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010d5d2:	eb b0                	jmp    c010d584 <load_icode+0x771>

c010d5d4 <put_kargv>:
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010d5d4:	55                   	push   %ebp
c010d5d5:	89 e5                	mov    %esp,%ebp
c010d5d7:	83 ec 18             	sub    $0x18,%esp
    while (argc > 0) {
c010d5da:	eb 17                	jmp    c010d5f3 <put_kargv+0x1f>
        kfree(kargv[-- argc]);
c010d5dc:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010d5e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5e3:	c1 e0 02             	shl    $0x2,%eax
c010d5e6:	03 45 0c             	add    0xc(%ebp),%eax
c010d5e9:	8b 00                	mov    (%eax),%eax
c010d5eb:	89 04 24             	mov    %eax,(%esp)
c010d5ee:	e8 7e 78 ff ff       	call   c0104e71 <kfree>
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010d5f3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d5f7:	7f e3                	jg     c010d5dc <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010d5f9:	c9                   	leave  
c010d5fa:	c3                   	ret    

c010d5fb <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010d5fb:	55                   	push   %ebp
c010d5fc:	89 e5                	mov    %esp,%ebp
c010d5fe:	83 ec 28             	sub    $0x28,%esp
    int i, ret = -E_INVAL;
c010d601:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010d608:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d60b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d612:	8b 45 14             	mov    0x14(%ebp),%eax
c010d615:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d61c:	00 
c010d61d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d621:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d625:	8b 45 08             	mov    0x8(%ebp),%eax
c010d628:	89 04 24             	mov    %eax,(%esp)
c010d62b:	e8 5e bb ff ff       	call   c010918e <user_mem_check>
c010d630:	85 c0                	test   %eax,%eax
c010d632:	75 08                	jne    c010d63c <copy_kargv+0x41>
        return ret;
c010d634:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d637:	e9 96 00 00 00       	jmp    c010d6d2 <copy_kargv+0xd7>
    }
    for (i = 0; i < argc; i ++) {
c010d63c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d643:	eb 61                	jmp    c010d6a6 <copy_kargv+0xab>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010d645:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010d64c:	e8 05 78 ff ff       	call   c0104e56 <kmalloc>
c010d651:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d654:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d658:	74 5b                	je     c010d6b5 <copy_kargv+0xba>
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010d65a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d65d:	c1 e0 02             	shl    $0x2,%eax
c010d660:	03 45 14             	add    0x14(%ebp),%eax
c010d663:	8b 00                	mov    (%eax),%eax
c010d665:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010d66c:	00 
c010d66d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d671:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d674:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d678:	8b 45 08             	mov    0x8(%ebp),%eax
c010d67b:	89 04 24             	mov    %eax,(%esp)
c010d67e:	e8 2e bc ff ff       	call   c01092b1 <copy_string>
c010d683:	85 c0                	test   %eax,%eax
c010d685:	75 0d                	jne    c010d694 <copy_kargv+0x99>
            kfree(buffer);
c010d687:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d68a:	89 04 24             	mov    %eax,(%esp)
c010d68d:	e8 df 77 ff ff       	call   c0104e71 <kfree>
            goto failed_cleanup;
c010d692:	eb 29                	jmp    c010d6bd <copy_kargv+0xc2>
        }
        kargv[i] = buffer;
c010d694:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d697:	c1 e0 02             	shl    $0x2,%eax
c010d69a:	03 45 10             	add    0x10(%ebp),%eax
c010d69d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d6a0:	89 10                	mov    %edx,(%eax)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010d6a2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d6a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6a9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d6ac:	7c 97                	jl     c010d645 <copy_kargv+0x4a>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010d6ae:	b8 00 00 00 00       	mov    $0x0,%eax
c010d6b3:	eb 1d                	jmp    c010d6d2 <copy_kargv+0xd7>
        return ret;
    }
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
c010d6b5:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010d6b6:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
failed_cleanup:
    put_kargv(i, kargv);
c010d6bd:	8b 45 10             	mov    0x10(%ebp),%eax
c010d6c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d6c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6c7:	89 04 24             	mov    %eax,(%esp)
c010d6ca:	e8 05 ff ff ff       	call   c010d5d4 <put_kargv>
    return ret;
c010d6cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d6d2:	c9                   	leave  
c010d6d3:	c3                   	ret    

c010d6d4 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010d6d4:	55                   	push   %ebp
c010d6d5:	89 e5                	mov    %esp,%ebp
c010d6d7:	81 ec e8 00 00 00    	sub    $0xe8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010d6dd:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d6e2:	8b 40 18             	mov    0x18(%eax),%eax
c010d6e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010d6e8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d6ec:	7e 06                	jle    c010d6f4 <do_execve+0x20>
c010d6ee:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010d6f2:	7e 0a                	jle    c010d6fe <do_execve+0x2a>
        return -E_INVAL;
c010d6f4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d6f9:	e9 12 02 00 00       	jmp    c010d910 <do_execve+0x23c>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010d6fe:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010d705:	00 
c010d706:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d70d:	00 
c010d70e:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d711:	89 04 24             	mov    %eax,(%esp)
c010d714:	e8 5b 80 00 00       	call   c0115774 <memset>
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010d719:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010d720:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d723:	89 04 24             	mov    %eax,(%esp)
c010d726:	e8 17 e9 ff ff       	call   c010c042 <lock_mm>
    if (name == NULL) {
c010d72b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d72f:	75 29                	jne    c010d75a <do_execve+0x86>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010d731:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d736:	8b 40 04             	mov    0x4(%eax),%eax
c010d739:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d73d:	c7 44 24 08 2f 84 11 	movl   $0xc011842f,0x8(%esp)
c010d744:	c0 
c010d745:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010d74c:	00 
c010d74d:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d750:	89 04 24             	mov    %eax,(%esp)
c010d753:	e8 16 7b 00 00       	call   c011526e <snprintf>
c010d758:	eb 38                	jmp    c010d792 <do_execve+0xbe>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010d75a:	c7 44 24 0c 33 00 00 	movl   $0x33,0xc(%esp)
c010d761:	00 
c010d762:	8b 45 08             	mov    0x8(%ebp),%eax
c010d765:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d769:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d76c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d770:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d773:	89 04 24             	mov    %eax,(%esp)
c010d776:	e8 36 bb ff ff       	call   c01092b1 <copy_string>
c010d77b:	85 c0                	test   %eax,%eax
c010d77d:	75 13                	jne    c010d792 <do_execve+0xbe>
            unlock_mm(mm);
c010d77f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d782:	89 04 24             	mov    %eax,(%esp)
c010d785:	e8 eb e8 ff ff       	call   c010c075 <unlock_mm>
            return ret;
c010d78a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d78d:	e9 7e 01 00 00       	jmp    c010d910 <do_execve+0x23c>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010d792:	8b 45 10             	mov    0x10(%ebp),%eax
c010d795:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d799:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d79f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d7a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d7aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7ad:	89 04 24             	mov    %eax,(%esp)
c010d7b0:	e8 46 fe ff ff       	call   c010d5fb <copy_kargv>
c010d7b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d7b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d7bc:	74 13                	je     c010d7d1 <do_execve+0xfd>
        unlock_mm(mm);
c010d7be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7c1:	89 04 24             	mov    %eax,(%esp)
c010d7c4:	e8 ac e8 ff ff       	call   c010c075 <unlock_mm>
        return ret;
c010d7c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d7cc:	e9 3f 01 00 00       	jmp    c010d910 <do_execve+0x23c>
    }
    path = argv[0];
c010d7d1:	8b 45 10             	mov    0x10(%ebp),%eax
c010d7d4:	8b 00                	mov    (%eax),%eax
c010d7d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010d7d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7dc:	89 04 24             	mov    %eax,(%esp)
c010d7df:	e8 91 e8 ff ff       	call   c010c075 <unlock_mm>
    files_closeall(current->filesp);
c010d7e4:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d7e9:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d7ef:	89 04 24             	mov    %eax,(%esp)
c010d7f2:	e8 2b db ff ff       	call   c010b322 <files_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010d7f7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d7fe:	00 
c010d7ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d802:	89 04 24             	mov    %eax,(%esp)
c010d805:	e8 28 df ff ff       	call   c010b732 <sysfile_open>
c010d80a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d80d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d810:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d813:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d817:	0f 88 ac 00 00 00    	js     c010d8c9 <do_execve+0x1f5>
        goto execve_exit;
    }
    if (mm != NULL) {
c010d81d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d821:	74 4a                	je     c010d86d <do_execve+0x199>
        lcr3(boot_cr3);
c010d823:	a1 24 50 15 c0       	mov    0xc0155024,%eax
c010d828:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d82b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d82e:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010d831:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d834:	89 04 24             	mov    %eax,(%esp)
c010d837:	e8 ec e7 ff ff       	call   c010c028 <mm_count_dec>
c010d83c:	85 c0                	test   %eax,%eax
c010d83e:	75 21                	jne    c010d861 <do_execve+0x18d>
            exit_mmap(mm);
c010d840:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d843:	89 04 24             	mov    %eax,(%esp)
c010d846:	e8 ca ae ff ff       	call   c0108715 <exit_mmap>
            put_pgdir(mm);
c010d84b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d84e:	89 04 24             	mov    %eax,(%esp)
c010d851:	e8 fa ee ff ff       	call   c010c750 <put_pgdir>
            mm_destroy(mm);
c010d856:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d859:	89 04 24             	mov    %eax,(%esp)
c010d85c:	e8 f3 ab ff ff       	call   c0108454 <mm_destroy>
        }
        current->mm = NULL;
c010d861:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d866:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010d86d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010d874:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d87a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d87e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d881:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d885:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d888:	89 04 24             	mov    %eax,(%esp)
c010d88b:	e8 83 f5 ff ff       	call   c010ce13 <load_icode>
c010d890:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d893:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d897:	75 33                	jne    c010d8cc <do_execve+0x1f8>
        goto execve_exit;
    }
    put_kargv(argc, kargv);
c010d899:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d89f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d8a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d8a6:	89 04 24             	mov    %eax,(%esp)
c010d8a9:	e8 26 fd ff ff       	call   c010d5d4 <put_kargv>
    set_proc_name(current, local_name);
c010d8ae:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d8b3:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010d8b6:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d8ba:	89 04 24             	mov    %eax,(%esp)
c010d8bd:	e8 86 e8 ff ff       	call   c010c148 <set_proc_name>
    return 0;
c010d8c2:	b8 00 00 00 00       	mov    $0x0,%eax
c010d8c7:	eb 47                	jmp    c010d910 <do_execve+0x23c>
    files_closeall(current->filesp);

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
        goto execve_exit;
c010d8c9:	90                   	nop
c010d8ca:	eb 01                	jmp    c010d8cd <do_execve+0x1f9>
        }
        current->mm = NULL;
    }
    ret= -E_NO_MEM;;
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
        goto execve_exit;
c010d8cc:	90                   	nop
    put_kargv(argc, kargv);
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    put_kargv(argc, kargv);
c010d8cd:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d8d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d8d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d8da:	89 04 24             	mov    %eax,(%esp)
c010d8dd:	e8 f2 fc ff ff       	call   c010d5d4 <put_kargv>
    do_exit(ret);
c010d8e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8e5:	89 04 24             	mov    %eax,(%esp)
c010d8e8:	e8 b5 f2 ff ff       	call   c010cba2 <do_exit>
    panic("already exit: %e.\n", ret);
c010d8ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d8f4:	c7 44 24 08 39 84 11 	movl   $0xc0118439,0x8(%esp)
c010d8fb:	c0 
c010d8fc:	c7 44 24 04 76 03 00 	movl   $0x376,0x4(%esp)
c010d903:	00 
c010d904:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010d90b:	e8 9c 35 ff ff       	call   c0100eac <__panic>
}
c010d910:	c9                   	leave  
c010d911:	c3                   	ret    

c010d912 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010d912:	55                   	push   %ebp
c010d913:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010d915:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d91a:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010d921:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d926:	5d                   	pop    %ebp
c010d927:	c3                   	ret    

c010d928 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010d928:	55                   	push   %ebp
c010d929:	89 e5                	mov    %esp,%ebp
c010d92b:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010d92e:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d933:	8b 40 18             	mov    0x18(%eax),%eax
c010d936:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010d939:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d93d:	74 31                	je     c010d970 <do_wait+0x48>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010d93f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d942:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010d949:	00 
c010d94a:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010d951:	00 
c010d952:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d956:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d959:	89 04 24             	mov    %eax,(%esp)
c010d95c:	e8 2d b8 ff ff       	call   c010918e <user_mem_check>
c010d961:	85 c0                	test   %eax,%eax
c010d963:	75 0b                	jne    c010d970 <do_wait+0x48>
            return -E_INVAL;
c010d965:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d96a:	e9 56 01 00 00       	jmp    c010dac5 <do_wait+0x19d>
        current->wait_state = WT_CHILD;
        schedule();
        if (current->flags & PF_EXITING) {
            do_exit(-E_KILLED);
        }
        goto repeat;
c010d96f:	90                   	nop
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010d970:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010d977:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d97b:	74 39                	je     c010d9b6 <do_wait+0x8e>
        proc = find_proc(pid);
c010d97d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d980:	89 04 24             	mov    %eax,(%esp)
c010d983:	e8 d9 eb ff ff       	call   c010c561 <find_proc>
c010d988:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010d98b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d98f:	74 58                	je     c010d9e9 <do_wait+0xc1>
c010d991:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d994:	8b 50 14             	mov    0x14(%eax),%edx
c010d997:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d99c:	39 c2                	cmp    %eax,%edx
c010d99e:	75 49                	jne    c010d9e9 <do_wait+0xc1>
            haskid = 1;
c010d9a0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d9a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9aa:	8b 00                	mov    (%eax),%eax
c010d9ac:	83 f8 03             	cmp    $0x3,%eax
c010d9af:	75 38                	jne    c010d9e9 <do_wait+0xc1>
                goto found;
c010d9b1:	e9 87 00 00 00       	jmp    c010da3d <do_wait+0x115>
            }
        }
    }
    else {
        proc = current->cptr;
c010d9b6:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d9bb:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010d9c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010d9c4:	eb 1d                	jmp    c010d9e3 <do_wait+0xbb>
            haskid = 1;
c010d9c6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d9cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9d0:	8b 00                	mov    (%eax),%eax
c010d9d2:	83 f8 03             	cmp    $0x3,%eax
c010d9d5:	74 65                	je     c010da3c <do_wait+0x114>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010d9d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9da:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010d9e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d9e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d9e7:	75 dd                	jne    c010d9c6 <do_wait+0x9e>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010d9e9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d9ed:	74 43                	je     c010da32 <do_wait+0x10a>
        current->state = PROC_SLEEPING;
c010d9ef:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d9f4:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010d9fa:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010d9ff:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010da06:	00 00 80 
        schedule();
c010da09:	e8 fd 0d 00 00       	call   c010e80b <schedule>
        if (current->flags & PF_EXITING) {
c010da0e:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010da13:	8b 40 44             	mov    0x44(%eax),%eax
c010da16:	83 e0 01             	and    $0x1,%eax
c010da19:	84 c0                	test   %al,%al
c010da1b:	0f 84 4e ff ff ff    	je     c010d96f <do_wait+0x47>
            do_exit(-E_KILLED);
c010da21:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010da28:	e8 75 f1 ff ff       	call   c010cba2 <do_exit>
        }
        goto repeat;
c010da2d:	e9 3d ff ff ff       	jmp    c010d96f <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010da32:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010da37:	e9 89 00 00 00       	jmp    c010dac5 <do_wait+0x19d>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010da3c:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010da3d:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010da42:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010da45:	74 0a                	je     c010da51 <do_wait+0x129>
c010da47:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010da4c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010da4f:	75 1c                	jne    c010da6d <do_wait+0x145>
        panic("wait idleproc or initproc.\n");
c010da51:	c7 44 24 08 4c 84 11 	movl   $0xc011844c,0x8(%esp)
c010da58:	c0 
c010da59:	c7 44 24 04 af 03 00 	movl   $0x3af,0x4(%esp)
c010da60:	00 
c010da61:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010da68:	e8 3f 34 ff ff       	call   c0100eac <__panic>
    }
    if (code_store != NULL) {
c010da6d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010da71:	74 0e                	je     c010da81 <do_wait+0x159>
        *code_store = proc->exit_code;
c010da73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da76:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010da7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da7f:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010da81:	e8 37 e4 ff ff       	call   c010bebd <__intr_save>
c010da86:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010da89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da8c:	89 04 24             	mov    %eax,(%esp)
c010da8f:	e8 98 ea ff ff       	call   c010c52c <unhash_proc>
        remove_links(proc);
c010da94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da97:	89 04 24             	mov    %eax,(%esp)
c010da9a:	e8 e8 e7 ff ff       	call   c010c287 <remove_links>
    }
    local_intr_restore(intr_flag);
c010da9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010daa2:	89 04 24             	mov    %eax,(%esp)
c010daa5:	e8 42 e4 ff ff       	call   c010beec <__intr_restore>
    put_kstack(proc);
c010daaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010daad:	89 04 24             	mov    %eax,(%esp)
c010dab0:	e8 ce eb ff ff       	call   c010c683 <put_kstack>
    kfree(proc);
c010dab5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dab8:	89 04 24             	mov    %eax,(%esp)
c010dabb:	e8 b1 73 ff ff       	call   c0104e71 <kfree>
    return 0;
c010dac0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dac5:	c9                   	leave  
c010dac6:	c3                   	ret    

c010dac7 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010dac7:	55                   	push   %ebp
c010dac8:	89 e5                	mov    %esp,%ebp
c010daca:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010dacd:	8b 45 08             	mov    0x8(%ebp),%eax
c010dad0:	89 04 24             	mov    %eax,(%esp)
c010dad3:	e8 89 ea ff ff       	call   c010c561 <find_proc>
c010dad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dadb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dadf:	74 44                	je     c010db25 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010dae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dae4:	8b 40 44             	mov    0x44(%eax),%eax
c010dae7:	83 e0 01             	and    $0x1,%eax
c010daea:	85 c0                	test   %eax,%eax
c010daec:	75 30                	jne    c010db1e <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010daee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010daf1:	8b 40 44             	mov    0x44(%eax),%eax
c010daf4:	89 c2                	mov    %eax,%edx
c010daf6:	83 ca 01             	or     $0x1,%edx
c010daf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dafc:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010daff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db02:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010db08:	85 c0                	test   %eax,%eax
c010db0a:	79 0b                	jns    c010db17 <do_kill+0x50>
                wakeup_proc(proc);
c010db0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db0f:	89 04 24             	mov    %eax,(%esp)
c010db12:	e8 58 0c 00 00       	call   c010e76f <wakeup_proc>
            }
            return 0;
c010db17:	b8 00 00 00 00       	mov    $0x0,%eax
c010db1c:	eb 0c                	jmp    c010db2a <do_kill+0x63>
        }
        return -E_KILLED;
c010db1e:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010db23:	eb 05                	jmp    c010db2a <do_kill+0x63>
    }
    return -E_INVAL;
c010db25:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010db2a:	c9                   	leave  
c010db2b:	c3                   	ret    

c010db2c <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010db2c:	55                   	push   %ebp
c010db2d:	89 e5                	mov    %esp,%ebp
c010db2f:	56                   	push   %esi
c010db30:	53                   	push   %ebx
c010db31:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010db34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (argv[argc] != NULL) {
c010db3b:	eb 04                	jmp    c010db41 <kernel_execve+0x15>
        argc ++;
c010db3d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010db41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db44:	c1 e0 02             	shl    $0x2,%eax
c010db47:	03 45 0c             	add    0xc(%ebp),%eax
c010db4a:	8b 00                	mov    (%eax),%eax
c010db4c:	85 c0                	test   %eax,%eax
c010db4e:	75 ed                	jne    c010db3d <kernel_execve+0x11>
        argc ++;
    }
    asm volatile (
c010db50:	b8 04 00 00 00       	mov    $0x4,%eax
c010db55:	8b 55 08             	mov    0x8(%ebp),%edx
c010db58:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010db5b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010db5e:	89 c6                	mov    %eax,%esi
c010db60:	89 f0                	mov    %esi,%eax
c010db62:	cd 80                	int    $0x80
c010db64:	89 c6                	mov    %eax,%esi
c010db66:	89 75 f0             	mov    %esi,-0x10(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010db69:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010db6c:	83 c4 10             	add    $0x10,%esp
c010db6f:	5b                   	pop    %ebx
c010db70:	5e                   	pop    %esi
c010db71:	5d                   	pop    %ebp
c010db72:	c3                   	ret    

c010db73 <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010db73:	55                   	push   %ebp
c010db74:	89 e5                	mov    %esp,%ebp
c010db76:	83 ec 28             	sub    $0x28,%esp
#ifdef TEST
#ifdef TESTSCRIPT
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
c010db79:	c7 45 f0 68 84 11 c0 	movl   $0xc0118468,-0x10(%ebp)
c010db80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010db87:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010db8c:	8b 40 04             	mov    0x4(%eax),%eax
c010db8f:	c7 44 24 08 68 84 11 	movl   $0xc0118468,0x8(%esp)
c010db96:	c0 
c010db97:	89 44 24 04          	mov    %eax,0x4(%esp)
c010db9b:	c7 04 24 70 84 11 c0 	movl   $0xc0118470,(%esp)
c010dba2:	e8 c9 27 ff ff       	call   c0100370 <cprintf>
c010dba7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010dbaa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dbae:	c7 04 24 68 84 11 c0 	movl   $0xc0118468,(%esp)
c010dbb5:	e8 72 ff ff ff       	call   c010db2c <kernel_execve>
#endif
#else
    KERNEL_EXECVE(sh);
#endif
    panic("user_main execve failed.\n");
c010dbba:	c7 44 24 08 97 84 11 	movl   $0xc0118497,0x8(%esp)
c010dbc1:	c0 
c010dbc2:	c7 44 24 04 fa 03 00 	movl   $0x3fa,0x4(%esp)
c010dbc9:	00 
c010dbca:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010dbd1:	e8 d6 32 ff ff       	call   c0100eac <__panic>

c010dbd6 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010dbd6:	55                   	push   %ebp
c010dbd7:	89 e5                	mov    %esp,%ebp
c010dbd9:	83 ec 38             	sub    $0x38,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010dbdc:	c7 04 24 b1 84 11 c0 	movl   $0xc01184b1,(%esp)
c010dbe3:	e8 2d 1a 00 00       	call   c010f615 <vfs_set_bootfs>
c010dbe8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dbeb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dbef:	74 23                	je     c010dc14 <init_main+0x3e>
        panic("set boot fs failed: %e.\n", ret);
c010dbf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbf4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010dbf8:	c7 44 24 08 b8 84 11 	movl   $0xc01184b8,0x8(%esp)
c010dbff:	c0 
c010dc00:	c7 44 24 04 02 04 00 	movl   $0x402,0x4(%esp)
c010dc07:	00 
c010dc08:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010dc0f:	e8 98 32 ff ff       	call   c0100eac <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010dc14:	e8 61 77 ff ff       	call   c010537a <nr_free_pages>
c010dc19:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010dc1c:	e8 18 71 ff ff       	call   c0104d39 <kallocated>
c010dc21:	89 45 ec             	mov    %eax,-0x14(%ebp)
	
    int pid = kernel_thread(user_main, NULL, 0);
c010dc24:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010dc2b:	00 
c010dc2c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dc33:	00 
c010dc34:	c7 04 24 73 db 10 c0 	movl   $0xc010db73,(%esp)
c010dc3b:	e8 95 e9 ff ff       	call   c010c5d5 <kernel_thread>
c010dc40:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010dc43:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010dc47:	7f 1c                	jg     c010dc65 <init_main+0x8f>
        panic("create user_main failed.\n");
c010dc49:	c7 44 24 08 d1 84 11 	movl   $0xc01184d1,0x8(%esp)
c010dc50:	c0 
c010dc51:	c7 44 24 04 0a 04 00 	movl   $0x40a,0x4(%esp)
c010dc58:	00 
c010dc59:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010dc60:	e8 47 32 ff ff       	call   c0100eac <__panic>
    }

	extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010dc65:	e8 0d bc ff ff       	call   c0109877 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010dc6a:	eb 05                	jmp    c010dc71 <init_main+0x9b>
        schedule();
c010dc6c:	e8 9a 0b 00 00       	call   c010e80b <schedule>
    }

	extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010dc71:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dc78:	00 
c010dc79:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010dc80:	e8 a3 fc ff ff       	call   c010d928 <do_wait>
c010dc85:	85 c0                	test   %eax,%eax
c010dc87:	74 e3                	je     c010dc6c <init_main+0x96>
        schedule();
    }

    fs_cleanup();
c010dc89:	e8 30 d5 ff ff       	call   c010b1be <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010dc8e:	c7 04 24 ec 84 11 c0 	movl   $0xc01184ec,(%esp)
c010dc95:	e8 d6 26 ff ff       	call   c0100370 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010dc9a:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010dc9f:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010dca5:	85 c0                	test   %eax,%eax
c010dca7:	75 1e                	jne    c010dcc7 <init_main+0xf1>
c010dca9:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010dcae:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010dcb4:	85 c0                	test   %eax,%eax
c010dcb6:	75 0f                	jne    c010dcc7 <init_main+0xf1>
c010dcb8:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010dcbd:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010dcc3:	85 c0                	test   %eax,%eax
c010dcc5:	74 24                	je     c010dceb <init_main+0x115>
c010dcc7:	c7 44 24 0c 10 85 11 	movl   $0xc0118510,0xc(%esp)
c010dcce:	c0 
c010dccf:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010dcd6:	c0 
c010dcd7:	c7 44 24 04 17 04 00 	movl   $0x417,0x4(%esp)
c010dcde:	00 
c010dcdf:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010dce6:	e8 c1 31 ff ff       	call   c0100eac <__panic>
    assert(nr_process == 2);
c010dceb:	a1 40 3f 15 c0       	mov    0xc0153f40,%eax
c010dcf0:	83 f8 02             	cmp    $0x2,%eax
c010dcf3:	74 24                	je     c010dd19 <init_main+0x143>
c010dcf5:	c7 44 24 0c 5b 85 11 	movl   $0xc011855b,0xc(%esp)
c010dcfc:	c0 
c010dcfd:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010dd04:	c0 
c010dd05:	c7 44 24 04 18 04 00 	movl   $0x418,0x4(%esp)
c010dd0c:	00 
c010dd0d:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010dd14:	e8 93 31 ff ff       	call   c0100eac <__panic>
c010dd19:	c7 45 e4 fc 51 15 c0 	movl   $0xc01551fc,-0x1c(%ebp)
c010dd20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dd23:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010dd26:	8b 15 24 1f 15 c0    	mov    0xc0151f24,%edx
c010dd2c:	83 c2 7c             	add    $0x7c,%edx
c010dd2f:	39 d0                	cmp    %edx,%eax
c010dd31:	74 24                	je     c010dd57 <init_main+0x181>
c010dd33:	c7 44 24 0c 6c 85 11 	movl   $0xc011856c,0xc(%esp)
c010dd3a:	c0 
c010dd3b:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010dd42:	c0 
c010dd43:	c7 44 24 04 19 04 00 	movl   $0x419,0x4(%esp)
c010dd4a:	00 
c010dd4b:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010dd52:	e8 55 31 ff ff       	call   c0100eac <__panic>
c010dd57:	c7 45 e0 fc 51 15 c0 	movl   $0xc01551fc,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010dd5e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dd61:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010dd63:	8b 15 24 1f 15 c0    	mov    0xc0151f24,%edx
c010dd69:	83 c2 7c             	add    $0x7c,%edx
c010dd6c:	39 d0                	cmp    %edx,%eax
c010dd6e:	74 24                	je     c010dd94 <init_main+0x1be>
c010dd70:	c7 44 24 0c 9c 85 11 	movl   $0xc011859c,0xc(%esp)
c010dd77:	c0 
c010dd78:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010dd7f:	c0 
c010dd80:	c7 44 24 04 1a 04 00 	movl   $0x41a,0x4(%esp)
c010dd87:	00 
c010dd88:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010dd8f:	e8 18 31 ff ff       	call   c0100eac <__panic>

    cprintf("init check memory pass.\n");
c010dd94:	c7 04 24 cc 85 11 c0 	movl   $0xc01185cc,(%esp)
c010dd9b:	e8 d0 25 ff ff       	call   c0100370 <cprintf>
    return 0;
c010dda0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dda5:	c9                   	leave  
c010dda6:	c3                   	ret    

c010dda7 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010dda7:	55                   	push   %ebp
c010dda8:	89 e5                	mov    %esp,%ebp
c010ddaa:	53                   	push   %ebx
c010ddab:	83 ec 24             	sub    $0x24,%esp
c010ddae:	c7 45 ec fc 51 15 c0 	movl   $0xc01551fc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010ddb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ddb8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ddbb:	89 50 04             	mov    %edx,0x4(%eax)
c010ddbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ddc1:	8b 50 04             	mov    0x4(%eax),%edx
c010ddc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ddc7:	89 10                	mov    %edx,(%eax)
    int i;
    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ddc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ddd0:	eb 26                	jmp    c010ddf8 <proc_init+0x51>
        list_init(hash_list + i);
c010ddd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ddd5:	c1 e0 03             	shl    $0x3,%eax
c010ddd8:	05 40 1f 15 c0       	add    $0xc0151f40,%eax
c010dddd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010dde0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dde3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010dde6:	89 50 04             	mov    %edx,0x4(%eax)
c010dde9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ddec:	8b 50 04             	mov    0x4(%eax),%edx
c010ddef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ddf2:	89 10                	mov    %edx,(%eax)
//           - create the second kernel thread init_main
void
proc_init(void) {
    int i;
    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ddf4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010ddf8:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010ddff:	7e d1                	jle    c010ddd2 <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010de01:	e8 c9 e2 ff ff       	call   c010c0cf <alloc_proc>
c010de06:	a3 20 1f 15 c0       	mov    %eax,0xc0151f20
c010de0b:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010de10:	85 c0                	test   %eax,%eax
c010de12:	75 1c                	jne    c010de30 <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010de14:	c7 44 24 08 e5 85 11 	movl   $0xc01185e5,0x8(%esp)
c010de1b:	c0 
c010de1c:	c7 44 24 04 2b 04 00 	movl   $0x42b,0x4(%esp)
c010de23:	00 
c010de24:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010de2b:	e8 7c 30 ff ff       	call   c0100eac <__panic>
    }
    idleproc->pid = 0;
c010de30:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010de35:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010de3c:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010de41:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010de47:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010de4c:	ba 00 e0 14 c0       	mov    $0xc014e000,%edx
c010de51:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010de54:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010de59:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010de60:	8b 1d 20 1f 15 c0    	mov    0xc0151f20,%ebx
c010de66:	e8 8c d3 ff ff       	call   c010b1f7 <files_create>
c010de6b:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010de71:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010de77:	85 c0                	test   %eax,%eax
c010de79:	75 1c                	jne    c010de97 <proc_init+0xf0>
        panic("create filesp (idleproc) failed.\n");
c010de7b:	c7 44 24 08 00 86 11 	movl   $0xc0118600,0x8(%esp)
c010de82:	c0 
c010de83:	c7 44 24 04 33 04 00 	movl   $0x433,0x4(%esp)
c010de8a:	00 
c010de8b:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010de92:	e8 15 30 ff ff       	call   c0100eac <__panic>
    }
    files_count_inc(idleproc->filesp);
c010de97:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010de9c:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010dea2:	89 04 24             	mov    %eax,(%esp)
c010dea5:	e8 f1 e1 ff ff       	call   c010c09b <files_count_inc>
    
    set_proc_name(idleproc, "idle");
c010deaa:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010deaf:	c7 44 24 04 22 86 11 	movl   $0xc0118622,0x4(%esp)
c010deb6:	c0 
c010deb7:	89 04 24             	mov    %eax,(%esp)
c010deba:	e8 89 e2 ff ff       	call   c010c148 <set_proc_name>
    nr_process ++;
c010debf:	a1 40 3f 15 c0       	mov    0xc0153f40,%eax
c010dec4:	83 c0 01             	add    $0x1,%eax
c010dec7:	a3 40 3f 15 c0       	mov    %eax,0xc0153f40

    current = idleproc;
c010decc:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010ded1:	a3 28 1f 15 c0       	mov    %eax,0xc0151f28

    int pid = kernel_thread(init_main, NULL, 0);
c010ded6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010dedd:	00 
c010dede:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dee5:	00 
c010dee6:	c7 04 24 d6 db 10 c0 	movl   $0xc010dbd6,(%esp)
c010deed:	e8 e3 e6 ff ff       	call   c010c5d5 <kernel_thread>
c010def2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010def5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010def9:	7f 1c                	jg     c010df17 <proc_init+0x170>
        panic("create init_main failed.\n");
c010defb:	c7 44 24 08 27 86 11 	movl   $0xc0118627,0x8(%esp)
c010df02:	c0 
c010df03:	c7 44 24 04 3e 04 00 	movl   $0x43e,0x4(%esp)
c010df0a:	00 
c010df0b:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010df12:	e8 95 2f ff ff       	call   c0100eac <__panic>
    }

    initproc = find_proc(pid);
c010df17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010df1a:	89 04 24             	mov    %eax,(%esp)
c010df1d:	e8 3f e6 ff ff       	call   c010c561 <find_proc>
c010df22:	a3 24 1f 15 c0       	mov    %eax,0xc0151f24
    set_proc_name(initproc, "init");
c010df27:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010df2c:	c7 44 24 04 41 86 11 	movl   $0xc0118641,0x4(%esp)
c010df33:	c0 
c010df34:	89 04 24             	mov    %eax,(%esp)
c010df37:	e8 0c e2 ff ff       	call   c010c148 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010df3c:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010df41:	85 c0                	test   %eax,%eax
c010df43:	74 0c                	je     c010df51 <proc_init+0x1aa>
c010df45:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010df4a:	8b 40 04             	mov    0x4(%eax),%eax
c010df4d:	85 c0                	test   %eax,%eax
c010df4f:	74 24                	je     c010df75 <proc_init+0x1ce>
c010df51:	c7 44 24 0c 48 86 11 	movl   $0xc0118648,0xc(%esp)
c010df58:	c0 
c010df59:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010df60:	c0 
c010df61:	c7 44 24 04 44 04 00 	movl   $0x444,0x4(%esp)
c010df68:	00 
c010df69:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010df70:	e8 37 2f ff ff       	call   c0100eac <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010df75:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010df7a:	85 c0                	test   %eax,%eax
c010df7c:	74 0d                	je     c010df8b <proc_init+0x1e4>
c010df7e:	a1 24 1f 15 c0       	mov    0xc0151f24,%eax
c010df83:	8b 40 04             	mov    0x4(%eax),%eax
c010df86:	83 f8 01             	cmp    $0x1,%eax
c010df89:	74 24                	je     c010dfaf <proc_init+0x208>
c010df8b:	c7 44 24 0c 70 86 11 	movl   $0xc0118670,0xc(%esp)
c010df92:	c0 
c010df93:	c7 44 24 08 4b 82 11 	movl   $0xc011824b,0x8(%esp)
c010df9a:	c0 
c010df9b:	c7 44 24 04 45 04 00 	movl   $0x445,0x4(%esp)
c010dfa2:	00 
c010dfa3:	c7 04 24 24 82 11 c0 	movl   $0xc0118224,(%esp)
c010dfaa:	e8 fd 2e ff ff       	call   c0100eac <__panic>
	
}
c010dfaf:	83 c4 24             	add    $0x24,%esp
c010dfb2:	5b                   	pop    %ebx
c010dfb3:	5d                   	pop    %ebp
c010dfb4:	c3                   	ret    

c010dfb5 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010dfb5:	55                   	push   %ebp
c010dfb6:	89 e5                	mov    %esp,%ebp
c010dfb8:	83 ec 08             	sub    $0x8,%esp
c010dfbb:	eb 01                	jmp    c010dfbe <cpu_idle+0x9>
    while (1) {
        if (current->need_resched) {
            schedule();
        }
    }
c010dfbd:	90                   	nop

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
    while (1) {
        if (current->need_resched) {
c010dfbe:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010dfc3:	8b 40 10             	mov    0x10(%eax),%eax
c010dfc6:	85 c0                	test   %eax,%eax
c010dfc8:	74 f3                	je     c010dfbd <cpu_idle+0x8>
            schedule();
c010dfca:	e8 3c 08 00 00       	call   c010e80b <schedule>
        }
    }
c010dfcf:	eb ec                	jmp    c010dfbd <cpu_idle+0x8>

c010dfd1 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010dfd1:	55                   	push   %ebp
c010dfd2:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010dfd4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010dfd8:	75 11                	jne    c010dfeb <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010dfda:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010dfdf:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010dfe6:	00 00 00 
c010dfe9:	eb 0e                	jmp    c010dff9 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010dfeb:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010dff0:	8b 55 08             	mov    0x8(%ebp),%edx
c010dff3:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010dff9:	5d                   	pop    %ebp
c010dffa:	c3                   	ret    

c010dffb <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010dffb:	55                   	push   %ebp
c010dffc:	89 e5                	mov    %esp,%ebp
c010dffe:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010e001:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e005:	75 07                	jne    c010e00e <do_sleep+0x13>
        return 0;
c010e007:	b8 00 00 00 00       	mov    $0x0,%eax
c010e00c:	eb 6b                	jmp    c010e079 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010e00e:	e8 aa de ff ff       	call   c010bebd <__intr_save>
c010e013:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010e016:	8b 55 08             	mov    0x8(%ebp),%edx
c010e019:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010e01e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e022:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e026:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010e029:	89 04 24             	mov    %eax,(%esp)
c010e02c:	e8 53 de ff ff       	call   c010be84 <timer_init>
c010e031:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010e034:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010e039:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010e03f:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010e044:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010e04b:	00 00 80 
    add_timer(timer);
c010e04e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e051:	89 04 24             	mov    %eax,(%esp)
c010e054:	e8 3d 08 00 00       	call   c010e896 <add_timer>
    local_intr_restore(intr_flag);
c010e059:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e05c:	89 04 24             	mov    %eax,(%esp)
c010e05f:	e8 88 de ff ff       	call   c010beec <__intr_restore>

    schedule();
c010e064:	e8 a2 07 00 00       	call   c010e80b <schedule>

    del_timer(timer);
c010e069:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e06c:	89 04 24             	mov    %eax,(%esp)
c010e06f:	e8 60 09 00 00       	call   c010e9d4 <del_timer>
    return 0;
c010e074:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e079:	c9                   	leave  
c010e07a:	c3                   	ret    
	...

c010e07c <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010e07c:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010e080:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010e082:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010e085:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010e088:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010e08b:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010e08e:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010e091:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010e094:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010e097:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010e09b:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010e09e:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010e0a1:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010e0a4:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010e0a7:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010e0aa:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010e0ad:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010e0b0:	ff 30                	pushl  (%eax)

    ret
c010e0b2:	c3                   	ret    
	...

c010e0b4 <RR_init>:
#include <proc.h>
#include <assert.h>
#include <default_sched.h>

static void
RR_init(struct run_queue *rq) {
c010e0b4:	55                   	push   %ebp
c010e0b5:	89 e5                	mov    %esp,%ebp
c010e0b7:	83 ec 10             	sub    $0x10,%esp
    list_init(&(rq->run_list));
c010e0ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0bd:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e0c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e0c3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010e0c6:	89 50 04             	mov    %edx,0x4(%eax)
c010e0c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e0cc:	8b 50 04             	mov    0x4(%eax),%edx
c010e0cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e0d2:	89 10                	mov    %edx,(%eax)
    rq->proc_num = 0;
c010e0d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0d7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010e0de:	c9                   	leave  
c010e0df:	c3                   	ret    

c010e0e0 <RR_enqueue>:

static void
RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010e0e0:	55                   	push   %ebp
c010e0e1:	89 e5                	mov    %esp,%ebp
c010e0e3:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(proc->run_link)));
c010e0e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e0e9:	05 a4 00 00 00       	add    $0xa4,%eax
c010e0ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e0f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e0f4:	8b 40 04             	mov    0x4(%eax),%eax
c010e0f7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e0fa:	0f 94 c0             	sete   %al
c010e0fd:	0f b6 c0             	movzbl %al,%eax
c010e100:	85 c0                	test   %eax,%eax
c010e102:	75 24                	jne    c010e128 <RR_enqueue+0x48>
c010e104:	c7 44 24 0c 98 86 11 	movl   $0xc0118698,0xc(%esp)
c010e10b:	c0 
c010e10c:	c7 44 24 08 b6 86 11 	movl   $0xc01186b6,0x8(%esp)
c010e113:	c0 
c010e114:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
c010e11b:	00 
c010e11c:	c7 04 24 cb 86 11 c0 	movl   $0xc01186cb,(%esp)
c010e123:	e8 84 2d ff ff       	call   c0100eac <__panic>
    list_add_before(&(rq->run_list), &(proc->run_link));
c010e128:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e12b:	8d 90 a4 00 00 00    	lea    0xa4(%eax),%edx
c010e131:	8b 45 08             	mov    0x8(%ebp),%eax
c010e134:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e137:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010e13a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e13d:	8b 00                	mov    (%eax),%eax
c010e13f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e142:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010e145:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010e148:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e14b:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e14e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e151:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e154:	89 10                	mov    %edx,(%eax)
c010e156:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e159:	8b 10                	mov    (%eax),%edx
c010e15b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e15e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e161:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e164:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010e167:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e16a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e16d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e170:	89 10                	mov    %edx,(%eax)
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010e172:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e175:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e17b:	85 c0                	test   %eax,%eax
c010e17d:	74 13                	je     c010e192 <RR_enqueue+0xb2>
c010e17f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e182:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010e188:	8b 45 08             	mov    0x8(%ebp),%eax
c010e18b:	8b 40 0c             	mov    0xc(%eax),%eax
c010e18e:	39 c2                	cmp    %eax,%edx
c010e190:	7e 0f                	jle    c010e1a1 <RR_enqueue+0xc1>
        proc->time_slice = rq->max_time_slice;
c010e192:	8b 45 08             	mov    0x8(%ebp),%eax
c010e195:	8b 50 0c             	mov    0xc(%eax),%edx
c010e198:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e19b:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    proc->rq = rq;
c010e1a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1a4:	8b 55 08             	mov    0x8(%ebp),%edx
c010e1a7:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    rq->proc_num ++;
c010e1ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1b0:	8b 40 08             	mov    0x8(%eax),%eax
c010e1b3:	8d 50 01             	lea    0x1(%eax),%edx
c010e1b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1b9:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e1bc:	c9                   	leave  
c010e1bd:	c3                   	ret    

c010e1be <RR_dequeue>:

static void
RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010e1be:	55                   	push   %ebp
c010e1bf:	89 e5                	mov    %esp,%ebp
c010e1c1:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
c010e1c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1c7:	05 a4 00 00 00       	add    $0xa4,%eax
c010e1cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e1cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e1d2:	8b 40 04             	mov    0x4(%eax),%eax
c010e1d5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e1d8:	0f 94 c0             	sete   %al
c010e1db:	0f b6 c0             	movzbl %al,%eax
c010e1de:	85 c0                	test   %eax,%eax
c010e1e0:	75 0e                	jne    c010e1f0 <RR_dequeue+0x32>
c010e1e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1e5:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
c010e1eb:	3b 45 08             	cmp    0x8(%ebp),%eax
c010e1ee:	74 24                	je     c010e214 <RR_dequeue+0x56>
c010e1f0:	c7 44 24 0c ec 86 11 	movl   $0xc01186ec,0xc(%esp)
c010e1f7:	c0 
c010e1f8:	c7 44 24 08 b6 86 11 	movl   $0xc01186b6,0x8(%esp)
c010e1ff:	c0 
c010e200:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c010e207:	00 
c010e208:	c7 04 24 cb 86 11 c0 	movl   $0xc01186cb,(%esp)
c010e20f:	e8 98 2c ff ff       	call   c0100eac <__panic>
    list_del_init(&(proc->run_link));
c010e214:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e217:	05 a4 00 00 00       	add    $0xa4,%eax
c010e21c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e21f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e222:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010e225:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e228:	8b 40 04             	mov    0x4(%eax),%eax
c010e22b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e22e:	8b 12                	mov    (%edx),%edx
c010e230:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010e233:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010e236:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e239:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e23c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010e23f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e242:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e245:	89 10                	mov    %edx,(%eax)
c010e247:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e24a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010e24d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e250:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010e253:	89 50 04             	mov    %edx,0x4(%eax)
c010e256:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e259:	8b 50 04             	mov    0x4(%eax),%edx
c010e25c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e25f:	89 10                	mov    %edx,(%eax)
    rq->proc_num --;
c010e261:	8b 45 08             	mov    0x8(%ebp),%eax
c010e264:	8b 40 08             	mov    0x8(%eax),%eax
c010e267:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e26a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e26d:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e270:	c9                   	leave  
c010e271:	c3                   	ret    

c010e272 <RR_pick_next>:

static struct proc_struct *
RR_pick_next(struct run_queue *rq) {
c010e272:	55                   	push   %ebp
c010e273:	89 e5                	mov    %esp,%ebp
c010e275:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(rq->run_list));
c010e278:	8b 45 08             	mov    0x8(%ebp),%eax
c010e27b:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e27e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e281:	8b 40 04             	mov    0x4(%eax),%eax
c010e284:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(rq->run_list)) {
c010e287:	8b 45 08             	mov    0x8(%ebp),%eax
c010e28a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010e28d:	74 0a                	je     c010e299 <RR_pick_next+0x27>
        return le2proc(le, run_link);
c010e28f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e292:	2d a4 00 00 00       	sub    $0xa4,%eax
c010e297:	eb 05                	jmp    c010e29e <RR_pick_next+0x2c>
    }
    return NULL;
c010e299:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e29e:	c9                   	leave  
c010e29f:	c3                   	ret    

c010e2a0 <RR_proc_tick>:

static void
RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010e2a0:	55                   	push   %ebp
c010e2a1:	89 e5                	mov    %esp,%ebp
    if (proc->time_slice > 0) {
c010e2a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2a6:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e2ac:	85 c0                	test   %eax,%eax
c010e2ae:	7e 15                	jle    c010e2c5 <RR_proc_tick+0x25>
        proc->time_slice --;
c010e2b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2b3:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e2b9:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e2bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2bf:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    if (proc->time_slice == 0) {
c010e2c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2c8:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e2ce:	85 c0                	test   %eax,%eax
c010e2d0:	75 0a                	jne    c010e2dc <RR_proc_tick+0x3c>
        proc->need_resched = 1;
c010e2d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2d5:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010e2dc:	5d                   	pop    %ebp
c010e2dd:	c3                   	ret    
	...

c010e2e0 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010e2e0:	55                   	push   %ebp
c010e2e1:	89 e5                	mov    %esp,%ebp
c010e2e3:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010e2e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e2ea:	75 08                	jne    c010e2f4 <skew_heap_merge+0x14>
c010e2ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2ef:	e9 bd 00 00 00       	jmp    c010e3b1 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010e2f4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e2f8:	75 08                	jne    c010e302 <skew_heap_merge+0x22>
c010e2fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2fd:	e9 af 00 00 00       	jmp    c010e3b1 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010e302:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e305:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e309:	8b 45 08             	mov    0x8(%ebp),%eax
c010e30c:	89 04 24             	mov    %eax,(%esp)
c010e30f:	8b 45 10             	mov    0x10(%ebp),%eax
c010e312:	ff d0                	call   *%eax
c010e314:	83 f8 ff             	cmp    $0xffffffff,%eax
c010e317:	75 4d                	jne    c010e366 <skew_heap_merge+0x86>
     {
          r = a->left;
c010e319:	8b 45 08             	mov    0x8(%ebp),%eax
c010e31c:	8b 40 04             	mov    0x4(%eax),%eax
c010e31f:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010e322:	8b 45 08             	mov    0x8(%ebp),%eax
c010e325:	8b 40 08             	mov    0x8(%eax),%eax
c010e328:	8b 55 10             	mov    0x10(%ebp),%edx
c010e32b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e32f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e332:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e336:	89 04 24             	mov    %eax,(%esp)
c010e339:	e8 a2 ff ff ff       	call   c010e2e0 <skew_heap_merge>
c010e33e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010e341:	8b 45 08             	mov    0x8(%ebp),%eax
c010e344:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e347:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010e34a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e34d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e350:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010e353:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e357:	74 08                	je     c010e361 <skew_heap_merge+0x81>
c010e359:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e35c:	8b 55 08             	mov    0x8(%ebp),%edx
c010e35f:	89 10                	mov    %edx,(%eax)

          return a;
c010e361:	8b 45 08             	mov    0x8(%ebp),%eax
c010e364:	eb 4b                	jmp    c010e3b1 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010e366:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e369:	8b 40 04             	mov    0x4(%eax),%eax
c010e36c:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010e36f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e372:	8b 40 08             	mov    0x8(%eax),%eax
c010e375:	8b 55 10             	mov    0x10(%ebp),%edx
c010e378:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e37c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e380:	8b 45 08             	mov    0x8(%ebp),%eax
c010e383:	89 04 24             	mov    %eax,(%esp)
c010e386:	e8 55 ff ff ff       	call   c010e2e0 <skew_heap_merge>
c010e38b:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010e38e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e391:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e394:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010e397:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e39a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e39d:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010e3a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e3a4:	74 08                	je     c010e3ae <skew_heap_merge+0xce>
c010e3a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e3a9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e3ac:	89 10                	mov    %edx,(%eax)

          return b;
c010e3ae:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010e3b1:	c9                   	leave  
c010e3b2:	c3                   	ret    

c010e3b3 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010e3b3:	55                   	push   %ebp
c010e3b4:	89 e5                	mov    %esp,%ebp
c010e3b6:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010e3b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3bc:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e3c1:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010e3c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3c7:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e3cc:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010e3cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e3d2:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010e3d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e3db:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e3e1:	89 d1                	mov    %edx,%ecx
c010e3e3:	29 c1                	sub    %eax,%ecx
c010e3e5:	89 c8                	mov    %ecx,%eax
c010e3e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010e3ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e3ee:	7e 07                	jle    c010e3f7 <proc_stride_comp_f+0x44>
c010e3f0:	b8 01 00 00 00       	mov    $0x1,%eax
c010e3f5:	eb 12                	jmp    c010e409 <proc_stride_comp_f+0x56>
     else if (c == 0) return 0;
c010e3f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e3fb:	75 07                	jne    c010e404 <proc_stride_comp_f+0x51>
c010e3fd:	b8 00 00 00 00       	mov    $0x0,%eax
c010e402:	eb 05                	jmp    c010e409 <proc_stride_comp_f+0x56>
     else return -1;
c010e404:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010e409:	c9                   	leave  
c010e40a:	c3                   	ret    

c010e40b <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010e40b:	55                   	push   %ebp
c010e40c:	89 e5                	mov    %esp,%ebp
c010e40e:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: 2011010312
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
	list_init(&(rq->run_list));
c010e411:	8b 45 08             	mov    0x8(%ebp),%eax
c010e414:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010e417:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e41a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010e41d:	89 50 04             	mov    %edx,0x4(%eax)
c010e420:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e423:	8b 50 04             	mov    0x4(%eax),%edx
c010e426:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e429:	89 10                	mov    %edx,(%eax)
	rq->max_time_slice = MAX_TIME_SLICE;
c010e42b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e42e:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
	rq->lab6_run_pool = NULL;
c010e435:	8b 45 08             	mov    0x8(%ebp),%eax
c010e438:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	rq->proc_num = 0;	
c010e43f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e442:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010e449:	c9                   	leave  
c010e44a:	c3                   	ret    

c010e44b <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010e44b:	55                   	push   %ebp
c010e44c:	89 e5                	mov    %esp,%ebp
c010e44e:	83 ec 28             	sub    $0x28,%esp
      *         list_add_before: insert  a entry into the last of list   
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
	rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e451:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e454:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e45a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e45d:	8b 40 10             	mov    0x10(%eax),%eax
c010e460:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e463:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e466:	c7 45 ec b3 e3 10 c0 	movl   $0xc010e3b3,-0x14(%ebp)
c010e46d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e470:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010e473:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e476:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010e47c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e47f:	8b 10                	mov    (%eax),%edx
c010e481:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e484:	89 50 08             	mov    %edx,0x8(%eax)
c010e487:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e48a:	8b 50 08             	mov    0x8(%eax),%edx
c010e48d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e490:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010e493:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e496:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e49a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e49d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e4a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4a4:	89 04 24             	mov    %eax,(%esp)
c010e4a7:	e8 34 fe ff ff       	call   c010e2e0 <skew_heap_merge>
c010e4ac:	89 c2                	mov    %eax,%edx
c010e4ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4b1:	89 50 10             	mov    %edx,0x10(%eax)
	proc->time_slice = rq->max_time_slice;
c010e4b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4b7:	8b 50 0c             	mov    0xc(%eax),%edx
c010e4ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e4bd:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
	proc->rq = rq;
c010e4c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e4c6:	8b 55 08             	mov    0x8(%ebp),%edx
c010e4c9:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
	rq->proc_num++;
c010e4cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4d2:	8b 40 08             	mov    0x8(%eax),%eax
c010e4d5:	8d 50 01             	lea    0x1(%eax),%edx
c010e4d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4db:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e4de:	c9                   	leave  
c010e4df:	c3                   	ret    

c010e4e0 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010e4e0:	55                   	push   %ebp
c010e4e1:	89 e5                	mov    %esp,%ebp
c010e4e3:	83 ec 38             	sub    $0x38,%esp
      * (1) remove the proc from rq correctly
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
	rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e4e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e4e9:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e4ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4f2:	8b 40 10             	mov    0x10(%eax),%eax
c010e4f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e4f8:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e4fb:	c7 45 ec b3 e3 10 c0 	movl   $0xc010e3b3,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010e502:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e505:	8b 00                	mov    (%eax),%eax
c010e507:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010e50a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e50d:	8b 50 08             	mov    0x8(%eax),%edx
c010e510:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e513:	8b 40 04             	mov    0x4(%eax),%eax
c010e516:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010e519:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010e51d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e521:	89 04 24             	mov    %eax,(%esp)
c010e524:	e8 b7 fd ff ff       	call   c010e2e0 <skew_heap_merge>
c010e529:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010e52c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e530:	74 08                	je     c010e53a <stride_dequeue+0x5a>
c010e532:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e535:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e538:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010e53a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e53e:	74 24                	je     c010e564 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010e540:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e543:	8b 40 04             	mov    0x4(%eax),%eax
c010e546:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010e549:	75 0b                	jne    c010e556 <stride_dequeue+0x76>
               p->left = rep;
c010e54b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e54e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e551:	89 50 04             	mov    %edx,0x4(%eax)
c010e554:	eb 09                	jmp    c010e55f <stride_dequeue+0x7f>
          else p->right = rep;
c010e556:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e559:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e55c:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010e55f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e562:	eb 03                	jmp    c010e567 <stride_dequeue+0x87>
     }
     else return rep;
c010e564:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e567:	89 c2                	mov    %eax,%edx
c010e569:	8b 45 08             	mov    0x8(%ebp),%eax
c010e56c:	89 50 10             	mov    %edx,0x10(%eax)
	rq->proc_num--;
c010e56f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e572:	8b 40 08             	mov    0x8(%eax),%eax
c010e575:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e578:	8b 45 08             	mov    0x8(%ebp),%eax
c010e57b:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e57e:	c9                   	leave  
c010e57f:	c3                   	ret    

c010e580 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010e580:	55                   	push   %ebp
c010e581:	89 e5                	mov    %esp,%ebp
c010e583:	53                   	push   %ebx
c010e584:	83 ec 14             	sub    $0x14,%esp
             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
	if (rq->lab6_run_pool == NULL)
c010e587:	8b 45 08             	mov    0x8(%ebp),%eax
c010e58a:	8b 40 10             	mov    0x10(%eax),%eax
c010e58d:	85 c0                	test   %eax,%eax
c010e58f:	75 07                	jne    c010e598 <stride_pick_next+0x18>
		return NULL;
c010e591:	b8 00 00 00 00       	mov    $0x0,%eax
c010e596:	eb 53                	jmp    c010e5eb <stride_pick_next+0x6b>
    struct proc_struct *next_proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010e598:	8b 45 08             	mov    0x8(%ebp),%eax
c010e59b:	8b 40 10             	mov    0x10(%eax),%eax
c010e59e:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e5a3:	89 45 f8             	mov    %eax,-0x8(%ebp)
	next_proc->lab6_stride += next_proc->lab6_priority == 0 ? BIG_STRIDE : BIG_STRIDE / next_proc->lab6_priority;	
c010e5a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e5a9:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010e5af:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e5b2:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010e5b8:	85 c0                	test   %eax,%eax
c010e5ba:	74 1b                	je     c010e5d7 <stride_pick_next+0x57>
c010e5bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e5bf:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010e5c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e5c8:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010e5cd:	ba 00 00 00 00       	mov    $0x0,%edx
c010e5d2:	f7 75 e8             	divl   -0x18(%ebp)
c010e5d5:	eb 05                	jmp    c010e5dc <stride_pick_next+0x5c>
c010e5d7:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010e5dc:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010e5df:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e5e2:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
	return next_proc;
c010e5e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
	
}
c010e5eb:	83 c4 14             	add    $0x14,%esp
c010e5ee:	5b                   	pop    %ebx
c010e5ef:	5d                   	pop    %ebp
c010e5f0:	c3                   	ret    

c010e5f1 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010e5f1:	55                   	push   %ebp
c010e5f2:	89 e5                	mov    %esp,%ebp
     /* LAB6: 2011010312 */
	if(proc->time_slice == 0)
c010e5f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e5f7:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e5fd:	85 c0                	test   %eax,%eax
c010e5ff:	75 0c                	jne    c010e60d <stride_proc_tick+0x1c>
		proc->need_resched = 1;
c010e601:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e604:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
c010e60b:	eb 15                	jmp    c010e622 <stride_proc_tick+0x31>
	else
		proc->time_slice--;
c010e60d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e610:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e616:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e619:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e61c:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
}
c010e622:	5d                   	pop    %ebp
c010e623:	c3                   	ret    

c010e624 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010e624:	55                   	push   %ebp
c010e625:	89 e5                	mov    %esp,%ebp
c010e627:	53                   	push   %ebx
c010e628:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010e62b:	9c                   	pushf  
c010e62c:	5b                   	pop    %ebx
c010e62d:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c010e630:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010e633:	25 00 02 00 00       	and    $0x200,%eax
c010e638:	85 c0                	test   %eax,%eax
c010e63a:	74 0c                	je     c010e648 <__intr_save+0x24>
        intr_disable();
c010e63c:	e8 a5 3b ff ff       	call   c01021e6 <intr_disable>
        return 1;
c010e641:	b8 01 00 00 00       	mov    $0x1,%eax
c010e646:	eb 05                	jmp    c010e64d <__intr_save+0x29>
    }
    return 0;
c010e648:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e64d:	83 c4 14             	add    $0x14,%esp
c010e650:	5b                   	pop    %ebx
c010e651:	5d                   	pop    %ebp
c010e652:	c3                   	ret    

c010e653 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010e653:	55                   	push   %ebp
c010e654:	89 e5                	mov    %esp,%ebp
c010e656:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010e659:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e65d:	74 05                	je     c010e664 <__intr_restore+0x11>
        intr_enable();
c010e65f:	e8 7c 3b ff ff       	call   c01021e0 <intr_enable>
    }
}
c010e664:	c9                   	leave  
c010e665:	c3                   	ret    

c010e666 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010e666:	55                   	push   %ebp
c010e667:	89 e5                	mov    %esp,%ebp
c010e669:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e66c:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010e671:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e674:	74 19                	je     c010e68f <sched_class_enqueue+0x29>
        sched_class->enqueue(rq, proc);
c010e676:	a1 9c 3f 15 c0       	mov    0xc0153f9c,%eax
c010e67b:	8b 48 08             	mov    0x8(%eax),%ecx
c010e67e:	a1 a0 3f 15 c0       	mov    0xc0153fa0,%eax
c010e683:	8b 55 08             	mov    0x8(%ebp),%edx
c010e686:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e68a:	89 04 24             	mov    %eax,(%esp)
c010e68d:	ff d1                	call   *%ecx
    }
}
c010e68f:	c9                   	leave  
c010e690:	c3                   	ret    

c010e691 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010e691:	55                   	push   %ebp
c010e692:	89 e5                	mov    %esp,%ebp
c010e694:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010e697:	a1 9c 3f 15 c0       	mov    0xc0153f9c,%eax
c010e69c:	8b 48 0c             	mov    0xc(%eax),%ecx
c010e69f:	a1 a0 3f 15 c0       	mov    0xc0153fa0,%eax
c010e6a4:	8b 55 08             	mov    0x8(%ebp),%edx
c010e6a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e6ab:	89 04 24             	mov    %eax,(%esp)
c010e6ae:	ff d1                	call   *%ecx
}
c010e6b0:	c9                   	leave  
c010e6b1:	c3                   	ret    

c010e6b2 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010e6b2:	55                   	push   %ebp
c010e6b3:	89 e5                	mov    %esp,%ebp
c010e6b5:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010e6b8:	a1 9c 3f 15 c0       	mov    0xc0153f9c,%eax
c010e6bd:	8b 50 10             	mov    0x10(%eax),%edx
c010e6c0:	a1 a0 3f 15 c0       	mov    0xc0153fa0,%eax
c010e6c5:	89 04 24             	mov    %eax,(%esp)
c010e6c8:	ff d2                	call   *%edx
}
c010e6ca:	c9                   	leave  
c010e6cb:	c3                   	ret    

c010e6cc <sched_class_proc_tick>:

void
sched_class_proc_tick(struct proc_struct *proc) {
c010e6cc:	55                   	push   %ebp
c010e6cd:	89 e5                	mov    %esp,%ebp
c010e6cf:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e6d2:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010e6d7:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e6da:	74 1b                	je     c010e6f7 <sched_class_proc_tick+0x2b>
        sched_class->proc_tick(rq, proc);
c010e6dc:	a1 9c 3f 15 c0       	mov    0xc0153f9c,%eax
c010e6e1:	8b 48 14             	mov    0x14(%eax),%ecx
c010e6e4:	a1 a0 3f 15 c0       	mov    0xc0153fa0,%eax
c010e6e9:	8b 55 08             	mov    0x8(%ebp),%edx
c010e6ec:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e6f0:	89 04 24             	mov    %eax,(%esp)
c010e6f3:	ff d1                	call   *%ecx
c010e6f5:	eb 0a                	jmp    c010e701 <sched_class_proc_tick+0x35>
    }
    else {
        proc->need_resched = 1;
c010e6f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6fa:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010e701:	c9                   	leave  
c010e702:	c3                   	ret    

c010e703 <sched_init>:

static struct run_queue __rq;
extern struct sched_class stride_sched_class;

void
sched_init(void) {
c010e703:	55                   	push   %ebp
c010e704:	89 e5                	mov    %esp,%ebp
c010e706:	83 ec 28             	sub    $0x28,%esp
c010e709:	c7 45 f4 94 3f 15 c0 	movl   $0xc0153f94,-0xc(%ebp)
c010e710:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e713:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e716:	89 50 04             	mov    %edx,0x4(%eax)
c010e719:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e71c:	8b 50 04             	mov    0x4(%eax),%edx
c010e71f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e722:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &stride_sched_class;
c010e724:	c7 05 9c 3f 15 c0 a4 	movl   $0xc0150aa4,0xc0153f9c
c010e72b:	0a 15 c0 

    rq = &__rq;
c010e72e:	c7 05 a0 3f 15 c0 a4 	movl   $0xc0153fa4,0xc0153fa0
c010e735:	3f 15 c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010e738:	a1 a0 3f 15 c0       	mov    0xc0153fa0,%eax
c010e73d:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010e744:	a1 9c 3f 15 c0       	mov    0xc0153f9c,%eax
c010e749:	8b 50 04             	mov    0x4(%eax),%edx
c010e74c:	a1 a0 3f 15 c0       	mov    0xc0153fa0,%eax
c010e751:	89 04 24             	mov    %eax,(%esp)
c010e754:	ff d2                	call   *%edx

    cprintf("sched class: %s\n", sched_class->name);
c010e756:	a1 9c 3f 15 c0       	mov    0xc0153f9c,%eax
c010e75b:	8b 00                	mov    (%eax),%eax
c010e75d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e761:	c7 04 24 3c 87 11 c0 	movl   $0xc011873c,(%esp)
c010e768:	e8 03 1c ff ff       	call   c0100370 <cprintf>
}
c010e76d:	c9                   	leave  
c010e76e:	c3                   	ret    

c010e76f <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010e76f:	55                   	push   %ebp
c010e770:	89 e5                	mov    %esp,%ebp
c010e772:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010e775:	8b 45 08             	mov    0x8(%ebp),%eax
c010e778:	8b 00                	mov    (%eax),%eax
c010e77a:	83 f8 03             	cmp    $0x3,%eax
c010e77d:	75 24                	jne    c010e7a3 <wakeup_proc+0x34>
c010e77f:	c7 44 24 0c 4d 87 11 	movl   $0xc011874d,0xc(%esp)
c010e786:	c0 
c010e787:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010e78e:	c0 
c010e78f:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010e796:	00 
c010e797:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010e79e:	e8 09 27 ff ff       	call   c0100eac <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010e7a3:	e8 7c fe ff ff       	call   c010e624 <__intr_save>
c010e7a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010e7ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7ae:	8b 00                	mov    (%eax),%eax
c010e7b0:	83 f8 02             	cmp    $0x2,%eax
c010e7b3:	74 2d                	je     c010e7e2 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010e7b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7b8:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010e7be:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7c1:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010e7c8:	00 00 00 
            if (proc != current) {
c010e7cb:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010e7d0:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e7d3:	74 29                	je     c010e7fe <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010e7d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7d8:	89 04 24             	mov    %eax,(%esp)
c010e7db:	e8 86 fe ff ff       	call   c010e666 <sched_class_enqueue>
c010e7e0:	eb 1c                	jmp    c010e7fe <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010e7e2:	c7 44 24 08 93 87 11 	movl   $0xc0118793,0x8(%esp)
c010e7e9:	c0 
c010e7ea:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c010e7f1:	00 
c010e7f2:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010e7f9:	e8 1d 27 ff ff       	call   c0100f1b <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010e7fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e801:	89 04 24             	mov    %eax,(%esp)
c010e804:	e8 4a fe ff ff       	call   c010e653 <__intr_restore>
}
c010e809:	c9                   	leave  
c010e80a:	c3                   	ret    

c010e80b <schedule>:

void
schedule(void) {
c010e80b:	55                   	push   %ebp
c010e80c:	89 e5                	mov    %esp,%ebp
c010e80e:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010e811:	e8 0e fe ff ff       	call   c010e624 <__intr_save>
c010e816:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010e819:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010e81e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010e825:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010e82a:	8b 00                	mov    (%eax),%eax
c010e82c:	83 f8 02             	cmp    $0x2,%eax
c010e82f:	75 0d                	jne    c010e83e <schedule+0x33>
            sched_class_enqueue(current);
c010e831:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010e836:	89 04 24             	mov    %eax,(%esp)
c010e839:	e8 28 fe ff ff       	call   c010e666 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010e83e:	e8 6f fe ff ff       	call   c010e6b2 <sched_class_pick_next>
c010e843:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e846:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e84a:	74 0b                	je     c010e857 <schedule+0x4c>
            sched_class_dequeue(next);
c010e84c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e84f:	89 04 24             	mov    %eax,(%esp)
c010e852:	e8 3a fe ff ff       	call   c010e691 <sched_class_dequeue>
        }
        if (next == NULL) {
c010e857:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e85b:	75 08                	jne    c010e865 <schedule+0x5a>
            next = idleproc;
c010e85d:	a1 20 1f 15 c0       	mov    0xc0151f20,%eax
c010e862:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010e865:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e868:	8b 40 08             	mov    0x8(%eax),%eax
c010e86b:	8d 50 01             	lea    0x1(%eax),%edx
c010e86e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e871:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010e874:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010e879:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e87c:	74 0b                	je     c010e889 <schedule+0x7e>
            proc_run(next);
c010e87e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e881:	89 04 24             	mov    %eax,(%esp)
c010e884:	e8 97 db ff ff       	call   c010c420 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010e889:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e88c:	89 04 24             	mov    %eax,(%esp)
c010e88f:	e8 bf fd ff ff       	call   c010e653 <__intr_restore>
}
c010e894:	c9                   	leave  
c010e895:	c3                   	ret    

c010e896 <add_timer>:

void
add_timer(timer_t *timer) {
c010e896:	55                   	push   %ebp
c010e897:	89 e5                	mov    %esp,%ebp
c010e899:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e89c:	e8 83 fd ff ff       	call   c010e624 <__intr_save>
c010e8a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010e8a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8a7:	8b 00                	mov    (%eax),%eax
c010e8a9:	85 c0                	test   %eax,%eax
c010e8ab:	74 0a                	je     c010e8b7 <add_timer+0x21>
c010e8ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8b0:	8b 40 04             	mov    0x4(%eax),%eax
c010e8b3:	85 c0                	test   %eax,%eax
c010e8b5:	75 24                	jne    c010e8db <add_timer+0x45>
c010e8b7:	c7 44 24 0c b0 87 11 	movl   $0xc01187b0,0xc(%esp)
c010e8be:	c0 
c010e8bf:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010e8c6:	c0 
c010e8c7:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010e8ce:	00 
c010e8cf:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010e8d6:	e8 d1 25 ff ff       	call   c0100eac <__panic>
        assert(list_empty(&(timer->timer_link)));
c010e8db:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8de:	83 c0 08             	add    $0x8,%eax
c010e8e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e8e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e8e7:	8b 40 04             	mov    0x4(%eax),%eax
c010e8ea:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e8ed:	0f 94 c0             	sete   %al
c010e8f0:	0f b6 c0             	movzbl %al,%eax
c010e8f3:	85 c0                	test   %eax,%eax
c010e8f5:	75 24                	jne    c010e91b <add_timer+0x85>
c010e8f7:	c7 44 24 0c dc 87 11 	movl   $0xc01187dc,0xc(%esp)
c010e8fe:	c0 
c010e8ff:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010e906:	c0 
c010e907:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010e90e:	00 
c010e90f:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010e916:	e8 91 25 ff ff       	call   c0100eac <__panic>
c010e91b:	c7 45 e4 94 3f 15 c0 	movl   $0xc0153f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e922:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e925:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010e928:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010e92b:	eb 4a                	jmp    c010e977 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010e92d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e930:	83 e8 08             	sub    $0x8,%eax
c010e933:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010e936:	8b 45 08             	mov    0x8(%ebp),%eax
c010e939:	8b 10                	mov    (%eax),%edx
c010e93b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e93e:	8b 00                	mov    (%eax),%eax
c010e940:	39 c2                	cmp    %eax,%edx
c010e942:	73 13                	jae    c010e957 <add_timer+0xc1>
                next->expires -= timer->expires;
c010e944:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e947:	8b 10                	mov    (%eax),%edx
c010e949:	8b 45 08             	mov    0x8(%ebp),%eax
c010e94c:	8b 00                	mov    (%eax),%eax
c010e94e:	29 c2                	sub    %eax,%edx
c010e950:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e953:	89 10                	mov    %edx,(%eax)
                break;
c010e955:	eb 29                	jmp    c010e980 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010e957:	8b 45 08             	mov    0x8(%ebp),%eax
c010e95a:	8b 10                	mov    (%eax),%edx
c010e95c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e95f:	8b 00                	mov    (%eax),%eax
c010e961:	29 c2                	sub    %eax,%edx
c010e963:	8b 45 08             	mov    0x8(%ebp),%eax
c010e966:	89 10                	mov    %edx,(%eax)
c010e968:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e96b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e96e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e971:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010e974:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010e977:	81 7d f4 94 3f 15 c0 	cmpl   $0xc0153f94,-0xc(%ebp)
c010e97e:	75 ad                	jne    c010e92d <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010e980:	8b 45 08             	mov    0x8(%ebp),%eax
c010e983:	8d 50 08             	lea    0x8(%eax),%edx
c010e986:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e989:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e98c:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010e98f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e992:	8b 00                	mov    (%eax),%eax
c010e994:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e997:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e99a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010e99d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e9a0:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e9a3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e9a6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e9a9:	89 10                	mov    %edx,(%eax)
c010e9ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e9ae:	8b 10                	mov    (%eax),%edx
c010e9b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e9b3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e9b6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e9b9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010e9bc:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e9bf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e9c2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e9c5:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010e9c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e9ca:	89 04 24             	mov    %eax,(%esp)
c010e9cd:	e8 81 fc ff ff       	call   c010e653 <__intr_restore>
}
c010e9d2:	c9                   	leave  
c010e9d3:	c3                   	ret    

c010e9d4 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010e9d4:	55                   	push   %ebp
c010e9d5:	89 e5                	mov    %esp,%ebp
c010e9d7:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e9da:	e8 45 fc ff ff       	call   c010e624 <__intr_save>
c010e9df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010e9e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9e5:	83 c0 08             	add    $0x8,%eax
c010e9e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e9eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9ee:	8b 40 04             	mov    0x4(%eax),%eax
c010e9f1:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e9f4:	0f 94 c0             	sete   %al
c010e9f7:	0f b6 c0             	movzbl %al,%eax
c010e9fa:	85 c0                	test   %eax,%eax
c010e9fc:	0f 85 89 00 00 00    	jne    c010ea8b <del_timer+0xb7>
            if (timer->expires != 0) {
c010ea02:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea05:	8b 00                	mov    (%eax),%eax
c010ea07:	85 c0                	test   %eax,%eax
c010ea09:	74 35                	je     c010ea40 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010ea0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea0e:	83 c0 08             	add    $0x8,%eax
c010ea11:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ea14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ea17:	8b 40 04             	mov    0x4(%eax),%eax
c010ea1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010ea1d:	81 7d f0 94 3f 15 c0 	cmpl   $0xc0153f94,-0x10(%ebp)
c010ea24:	74 1a                	je     c010ea40 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010ea26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea29:	83 e8 08             	sub    $0x8,%eax
c010ea2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010ea2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ea32:	8b 10                	mov    (%eax),%edx
c010ea34:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea37:	8b 00                	mov    (%eax),%eax
c010ea39:	01 c2                	add    %eax,%edx
c010ea3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ea3e:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010ea40:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea43:	83 c0 08             	add    $0x8,%eax
c010ea46:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ea49:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ea4c:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010ea4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ea52:	8b 40 04             	mov    0x4(%eax),%eax
c010ea55:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010ea58:	8b 12                	mov    (%edx),%edx
c010ea5a:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010ea5d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010ea60:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ea63:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ea66:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ea69:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ea6c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ea6f:	89 10                	mov    %edx,(%eax)
c010ea71:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ea74:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010ea77:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ea7a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010ea7d:	89 50 04             	mov    %edx,0x4(%eax)
c010ea80:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ea83:	8b 50 04             	mov    0x4(%eax),%edx
c010ea86:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ea89:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010ea8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea8e:	89 04 24             	mov    %eax,(%esp)
c010ea91:	e8 bd fb ff ff       	call   c010e653 <__intr_restore>
}
c010ea96:	c9                   	leave  
c010ea97:	c3                   	ret    

c010ea98 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010ea98:	55                   	push   %ebp
c010ea99:	89 e5                	mov    %esp,%ebp
c010ea9b:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010ea9e:	e8 81 fb ff ff       	call   c010e624 <__intr_save>
c010eaa3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010eaa6:	c7 45 e4 94 3f 15 c0 	movl   $0xc0153f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010eaad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010eab0:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010eab3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010eab6:	81 7d f4 94 3f 15 c0 	cmpl   $0xc0153f94,-0xc(%ebp)
c010eabd:	0f 84 fc 00 00 00    	je     c010ebbf <run_timer_list+0x127>
            timer_t *timer = le2timer(le, timer_link);
c010eac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eac6:	83 e8 08             	sub    $0x8,%eax
c010eac9:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010eacc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eacf:	8b 00                	mov    (%eax),%eax
c010ead1:	85 c0                	test   %eax,%eax
c010ead3:	75 24                	jne    c010eaf9 <run_timer_list+0x61>
c010ead5:	c7 44 24 0c fd 87 11 	movl   $0xc01187fd,0xc(%esp)
c010eadc:	c0 
c010eadd:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010eae4:	c0 
c010eae5:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010eaec:	00 
c010eaed:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010eaf4:	e8 b3 23 ff ff       	call   c0100eac <__panic>
            timer->expires --;
c010eaf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eafc:	8b 00                	mov    (%eax),%eax
c010eafe:	8d 50 ff             	lea    -0x1(%eax),%edx
c010eb01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb04:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010eb06:	e9 a4 00 00 00       	jmp    c010ebaf <run_timer_list+0x117>
c010eb0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010eb11:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010eb14:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010eb17:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010eb1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb1d:	8b 40 04             	mov    0x4(%eax),%eax
c010eb20:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010eb23:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb26:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010eb2c:	85 c0                	test   %eax,%eax
c010eb2e:	74 31                	je     c010eb61 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010eb30:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb33:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010eb39:	85 c0                	test   %eax,%eax
c010eb3b:	78 4a                	js     c010eb87 <run_timer_list+0xef>
c010eb3d:	c7 44 24 0c 14 88 11 	movl   $0xc0118814,0xc(%esp)
c010eb44:	c0 
c010eb45:	c7 44 24 08 68 87 11 	movl   $0xc0118768,0x8(%esp)
c010eb4c:	c0 
c010eb4d:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010eb54:	00 
c010eb55:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010eb5c:	e8 4b 23 ff ff       	call   c0100eac <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010eb61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb64:	8b 40 04             	mov    0x4(%eax),%eax
c010eb67:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010eb6b:	c7 44 24 08 38 88 11 	movl   $0xc0118838,0x8(%esp)
c010eb72:	c0 
c010eb73:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010eb7a:	00 
c010eb7b:	c7 04 24 7d 87 11 c0 	movl   $0xc011877d,(%esp)
c010eb82:	e8 94 23 ff ff       	call   c0100f1b <__warn>
                }
                wakeup_proc(proc);
c010eb87:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb8a:	89 04 24             	mov    %eax,(%esp)
c010eb8d:	e8 dd fb ff ff       	call   c010e76f <wakeup_proc>
                del_timer(timer);
c010eb92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb95:	89 04 24             	mov    %eax,(%esp)
c010eb98:	e8 37 fe ff ff       	call   c010e9d4 <del_timer>
                if (le == &timer_list) {
c010eb9d:	81 7d f4 94 3f 15 c0 	cmpl   $0xc0153f94,-0xc(%ebp)
c010eba4:	74 18                	je     c010ebbe <run_timer_list+0x126>
                    break;
                }
                timer = le2timer(le, timer_link);
c010eba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eba9:	83 e8 08             	sub    $0x8,%eax
c010ebac:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010ebaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebb2:	8b 00                	mov    (%eax),%eax
c010ebb4:	85 c0                	test   %eax,%eax
c010ebb6:	0f 84 4f ff ff ff    	je     c010eb0b <run_timer_list+0x73>
c010ebbc:	eb 01                	jmp    c010ebbf <run_timer_list+0x127>
                    warn("process %d's wait_state == 0.\n", proc->pid);
                }
                wakeup_proc(proc);
                del_timer(timer);
                if (le == &timer_list) {
                    break;
c010ebbe:	90                   	nop
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010ebbf:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010ebc4:	89 04 24             	mov    %eax,(%esp)
c010ebc7:	e8 00 fb ff ff       	call   c010e6cc <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010ebcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ebcf:	89 04 24             	mov    %eax,(%esp)
c010ebd2:	e8 7c fa ff ff       	call   c010e653 <__intr_restore>
}
c010ebd7:	c9                   	leave  
c010ebd8:	c3                   	ret    
c010ebd9:	00 00                	add    %al,(%eax)
	...

c010ebdc <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010ebdc:	55                   	push   %ebp
c010ebdd:	89 e5                	mov    %esp,%ebp
c010ebdf:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010ebe2:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebe5:	8b 00                	mov    (%eax),%eax
c010ebe7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010ebea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebed:	89 04 24             	mov    %eax,(%esp)
c010ebf0:	e8 ad df ff ff       	call   c010cba2 <do_exit>
}
c010ebf5:	c9                   	leave  
c010ebf6:	c3                   	ret    

c010ebf7 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010ebf7:	55                   	push   %ebp
c010ebf8:	89 e5                	mov    %esp,%ebp
c010ebfa:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010ebfd:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010ec02:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ec05:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010ec08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec0b:	8b 40 44             	mov    0x44(%eax),%eax
c010ec0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010ec11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec14:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec1f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010ec26:	e8 29 de ff ff       	call   c010ca54 <do_fork>
}
c010ec2b:	c9                   	leave  
c010ec2c:	c3                   	ret    

c010ec2d <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010ec2d:	55                   	push   %ebp
c010ec2e:	89 e5                	mov    %esp,%ebp
c010ec30:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ec33:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec36:	8b 00                	mov    (%eax),%eax
c010ec38:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010ec3b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec3e:	83 c0 04             	add    $0x4,%eax
c010ec41:	8b 00                	mov    (%eax),%eax
c010ec43:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010ec46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec49:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec50:	89 04 24             	mov    %eax,(%esp)
c010ec53:	e8 d0 ec ff ff       	call   c010d928 <do_wait>
}
c010ec58:	c9                   	leave  
c010ec59:	c3                   	ret    

c010ec5a <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010ec5a:	55                   	push   %ebp
c010ec5b:	89 e5                	mov    %esp,%ebp
c010ec5d:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010ec60:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec63:	8b 00                	mov    (%eax),%eax
c010ec65:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010ec68:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec6b:	83 c0 04             	add    $0x4,%eax
c010ec6e:	8b 00                	mov    (%eax),%eax
c010ec70:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010ec73:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec76:	83 c0 08             	add    $0x8,%eax
c010ec79:	8b 00                	mov    (%eax),%eax
c010ec7b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010ec7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ec81:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec88:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec8f:	89 04 24             	mov    %eax,(%esp)
c010ec92:	e8 3d ea ff ff       	call   c010d6d4 <do_execve>
}
c010ec97:	c9                   	leave  
c010ec98:	c3                   	ret    

c010ec99 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010ec99:	55                   	push   %ebp
c010ec9a:	89 e5                	mov    %esp,%ebp
c010ec9c:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010ec9f:	e8 6e ec ff ff       	call   c010d912 <do_yield>
}
c010eca4:	c9                   	leave  
c010eca5:	c3                   	ret    

c010eca6 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010eca6:	55                   	push   %ebp
c010eca7:	89 e5                	mov    %esp,%ebp
c010eca9:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ecac:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecaf:	8b 00                	mov    (%eax),%eax
c010ecb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010ecb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecb7:	89 04 24             	mov    %eax,(%esp)
c010ecba:	e8 08 ee ff ff       	call   c010dac7 <do_kill>
}
c010ecbf:	c9                   	leave  
c010ecc0:	c3                   	ret    

c010ecc1 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010ecc1:	55                   	push   %ebp
c010ecc2:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010ecc4:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010ecc9:	8b 40 04             	mov    0x4(%eax),%eax
}
c010eccc:	5d                   	pop    %ebp
c010eccd:	c3                   	ret    

c010ecce <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010ecce:	55                   	push   %ebp
c010eccf:	89 e5                	mov    %esp,%ebp
c010ecd1:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010ecd4:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecd7:	8b 00                	mov    (%eax),%eax
c010ecd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010ecdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecdf:	89 04 24             	mov    %eax,(%esp)
c010ece2:	e8 b1 16 ff ff       	call   c0100398 <cputchar>
    return 0;
c010ece7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ecec:	c9                   	leave  
c010eced:	c3                   	ret    

c010ecee <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010ecee:	55                   	push   %ebp
c010ecef:	89 e5                	mov    %esp,%ebp
c010ecf1:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010ecf4:	e8 a1 80 ff ff       	call   c0106d9a <print_pgdir>
    return 0;
c010ecf9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ecfe:	c9                   	leave  
c010ecff:	c3                   	ret    

c010ed00 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010ed00:	55                   	push   %ebp
c010ed01:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ed03:	a1 10 50 15 c0       	mov    0xc0155010,%eax
}
c010ed08:	5d                   	pop    %ebp
c010ed09:	c3                   	ret    

c010ed0a <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010ed0a:	55                   	push   %ebp
c010ed0b:	89 e5                	mov    %esp,%ebp
c010ed0d:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010ed10:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed13:	8b 00                	mov    (%eax),%eax
c010ed15:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010ed18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed1b:	89 04 24             	mov    %eax,(%esp)
c010ed1e:	e8 ae f2 ff ff       	call   c010dfd1 <lab6_set_priority>
    return 0;
c010ed23:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ed28:	c9                   	leave  
c010ed29:	c3                   	ret    

c010ed2a <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010ed2a:	55                   	push   %ebp
c010ed2b:	89 e5                	mov    %esp,%ebp
c010ed2d:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010ed30:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed33:	8b 00                	mov    (%eax),%eax
c010ed35:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010ed38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed3b:	89 04 24             	mov    %eax,(%esp)
c010ed3e:	e8 b8 f2 ff ff       	call   c010dffb <do_sleep>
}
c010ed43:	c9                   	leave  
c010ed44:	c3                   	ret    

c010ed45 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010ed45:	55                   	push   %ebp
c010ed46:	89 e5                	mov    %esp,%ebp
c010ed48:	83 ec 28             	sub    $0x28,%esp
    const char *path = (const char *)arg[0];
c010ed4b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed4e:	8b 00                	mov    (%eax),%eax
c010ed50:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010ed53:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed56:	8b 40 04             	mov    0x4(%eax),%eax
c010ed59:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010ed5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed5f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed66:	89 04 24             	mov    %eax,(%esp)
c010ed69:	e8 c4 c9 ff ff       	call   c010b732 <sysfile_open>
}
c010ed6e:	c9                   	leave  
c010ed6f:	c3                   	ret    

c010ed70 <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010ed70:	55                   	push   %ebp
c010ed71:	89 e5                	mov    %esp,%ebp
c010ed73:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed76:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed79:	8b 00                	mov    (%eax),%eax
c010ed7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010ed7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed81:	89 04 24             	mov    %eax,(%esp)
c010ed84:	e8 f4 c9 ff ff       	call   c010b77d <sysfile_close>
}
c010ed89:	c9                   	leave  
c010ed8a:	c3                   	ret    

c010ed8b <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010ed8b:	55                   	push   %ebp
c010ed8c:	89 e5                	mov    %esp,%ebp
c010ed8e:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed91:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed94:	8b 00                	mov    (%eax),%eax
c010ed96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010ed99:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed9c:	83 c0 04             	add    $0x4,%eax
c010ed9f:	8b 00                	mov    (%eax),%eax
c010eda1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010eda4:	8b 45 08             	mov    0x8(%ebp),%eax
c010eda7:	8b 40 08             	mov    0x8(%eax),%eax
c010edaa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010edad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010edb0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010edb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010edb7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010edbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edbe:	89 04 24             	mov    %eax,(%esp)
c010edc1:	e8 ca c9 ff ff       	call   c010b790 <sysfile_read>
}
c010edc6:	c9                   	leave  
c010edc7:	c3                   	ret    

c010edc8 <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010edc8:	55                   	push   %ebp
c010edc9:	89 e5                	mov    %esp,%ebp
c010edcb:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010edce:	8b 45 08             	mov    0x8(%ebp),%eax
c010edd1:	8b 00                	mov    (%eax),%eax
c010edd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010edd6:	8b 45 08             	mov    0x8(%ebp),%eax
c010edd9:	83 c0 04             	add    $0x4,%eax
c010eddc:	8b 00                	mov    (%eax),%eax
c010edde:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010ede1:	8b 45 08             	mov    0x8(%ebp),%eax
c010ede4:	8b 40 08             	mov    0x8(%eax),%eax
c010ede7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010edea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eded:	89 44 24 08          	mov    %eax,0x8(%esp)
c010edf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010edf4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010edf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edfb:	89 04 24             	mov    %eax,(%esp)
c010edfe:	e8 05 cb ff ff       	call   c010b908 <sysfile_write>
}
c010ee03:	c9                   	leave  
c010ee04:	c3                   	ret    

c010ee05 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010ee05:	55                   	push   %ebp
c010ee06:	89 e5                	mov    %esp,%ebp
c010ee08:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ee0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee0e:	8b 00                	mov    (%eax),%eax
c010ee10:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010ee13:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee16:	83 c0 04             	add    $0x4,%eax
c010ee19:	8b 00                	mov    (%eax),%eax
c010ee1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010ee1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee21:	83 c0 08             	add    $0x8,%eax
c010ee24:	8b 00                	mov    (%eax),%eax
c010ee26:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010ee29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ee2c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ee30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee33:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee3a:	89 04 24             	mov    %eax,(%esp)
c010ee3d:	e8 40 cc ff ff       	call   c010ba82 <sysfile_seek>
}
c010ee42:	c9                   	leave  
c010ee43:	c3                   	ret    

c010ee44 <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010ee44:	55                   	push   %ebp
c010ee45:	89 e5                	mov    %esp,%ebp
c010ee47:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ee4a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee4d:	8b 00                	mov    (%eax),%eax
c010ee4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010ee52:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee55:	83 c0 04             	add    $0x4,%eax
c010ee58:	8b 00                	mov    (%eax),%eax
c010ee5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010ee5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee60:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee67:	89 04 24             	mov    %eax,(%esp)
c010ee6a:	e8 34 cc ff ff       	call   c010baa3 <sysfile_fstat>
}
c010ee6f:	c9                   	leave  
c010ee70:	c3                   	ret    

c010ee71 <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010ee71:	55                   	push   %ebp
c010ee72:	89 e5                	mov    %esp,%ebp
c010ee74:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ee77:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee7a:	8b 00                	mov    (%eax),%eax
c010ee7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010ee7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee82:	89 04 24             	mov    %eax,(%esp)
c010ee85:	e8 97 cc ff ff       	call   c010bb21 <sysfile_fsync>
}
c010ee8a:	c9                   	leave  
c010ee8b:	c3                   	ret    

c010ee8c <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010ee8c:	55                   	push   %ebp
c010ee8d:	89 e5                	mov    %esp,%ebp
c010ee8f:	83 ec 28             	sub    $0x28,%esp
    char *buf = (char *)arg[0];
c010ee92:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee95:	8b 00                	mov    (%eax),%eax
c010ee97:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ee9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee9d:	8b 40 04             	mov    0x4(%eax),%eax
c010eea0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010eea3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eea6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eeaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eead:	89 04 24             	mov    %eax,(%esp)
c010eeb0:	e8 09 ce ff ff       	call   c010bcbe <sysfile_getcwd>
}
c010eeb5:	c9                   	leave  
c010eeb6:	c3                   	ret    

c010eeb7 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010eeb7:	55                   	push   %ebp
c010eeb8:	89 e5                	mov    %esp,%ebp
c010eeba:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eebd:	8b 45 08             	mov    0x8(%ebp),%eax
c010eec0:	8b 00                	mov    (%eax),%eax
c010eec2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010eec5:	8b 45 08             	mov    0x8(%ebp),%eax
c010eec8:	83 c0 04             	add    $0x4,%eax
c010eecb:	8b 00                	mov    (%eax),%eax
c010eecd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010eed0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eed3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eed7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eeda:	89 04 24             	mov    %eax,(%esp)
c010eedd:	e8 73 ce ff ff       	call   c010bd55 <sysfile_getdirentry>
}
c010eee2:	c9                   	leave  
c010eee3:	c3                   	ret    

c010eee4 <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010eee4:	55                   	push   %ebp
c010eee5:	89 e5                	mov    %esp,%ebp
c010eee7:	83 ec 28             	sub    $0x28,%esp
    int fd1 = (int)arg[0];
c010eeea:	8b 45 08             	mov    0x8(%ebp),%eax
c010eeed:	8b 00                	mov    (%eax),%eax
c010eeef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010eef2:	8b 45 08             	mov    0x8(%ebp),%eax
c010eef5:	83 c0 04             	add    $0x4,%eax
c010eef8:	8b 00                	mov    (%eax),%eax
c010eefa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010eefd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef00:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ef04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef07:	89 04 24             	mov    %eax,(%esp)
c010ef0a:	e8 3a cf ff ff       	call   c010be49 <sysfile_dup>
}
c010ef0f:	c9                   	leave  
c010ef10:	c3                   	ret    

c010ef11 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010ef11:	55                   	push   %ebp
c010ef12:	89 e5                	mov    %esp,%ebp
c010ef14:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010ef17:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010ef1c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ef1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ef22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef25:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ef28:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ef2b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ef2f:	78 60                	js     c010ef91 <syscall+0x80>
c010ef31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef34:	3d ff 00 00 00       	cmp    $0xff,%eax
c010ef39:	77 56                	ja     c010ef91 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010ef3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef3e:	8b 04 85 c0 0a 15 c0 	mov    -0x3feaf540(,%eax,4),%eax
c010ef45:	85 c0                	test   %eax,%eax
c010ef47:	74 48                	je     c010ef91 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010ef49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef4c:	8b 40 14             	mov    0x14(%eax),%eax
c010ef4f:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ef52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef55:	8b 40 18             	mov    0x18(%eax),%eax
c010ef58:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010ef5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef5e:	8b 40 10             	mov    0x10(%eax),%eax
c010ef61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ef64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef67:	8b 00                	mov    (%eax),%eax
c010ef69:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ef6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef6f:	8b 40 04             	mov    0x4(%eax),%eax
c010ef72:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ef75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef78:	8b 14 85 c0 0a 15 c0 	mov    -0x3feaf540(,%eax,4),%edx
c010ef7f:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010ef82:	89 04 24             	mov    %eax,(%esp)
c010ef85:	ff d2                	call   *%edx
c010ef87:	89 c2                	mov    %eax,%edx
c010ef89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef8c:	89 50 1c             	mov    %edx,0x1c(%eax)
        }
    }
    print_trapframe(tf);
    panic("undefined syscall %d, pid = %d, name = %s.\n",
            num, current->pid, current->name);
}
c010ef8f:	c9                   	leave  
c010ef90:	c3                   	ret    
            arg[4] = tf->tf_regs.reg_esi;
            tf->tf_regs.reg_eax = syscalls[num](arg);
            return ;
        }
    }
    print_trapframe(tf);
c010ef91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef94:	89 04 24             	mov    %eax,(%esp)
c010ef97:	e8 0f 36 ff ff       	call   c01025ab <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ef9c:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010efa1:	8d 50 48             	lea    0x48(%eax),%edx
c010efa4:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c010efa9:	8b 40 04             	mov    0x4(%eax),%eax
c010efac:	89 54 24 14          	mov    %edx,0x14(%esp)
c010efb0:	89 44 24 10          	mov    %eax,0x10(%esp)
c010efb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010efb7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010efbb:	c7 44 24 08 58 88 11 	movl   $0xc0118858,0x8(%esp)
c010efc2:	c0 
c010efc3:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010efca:	00 
c010efcb:	c7 04 24 84 88 11 c0 	movl   $0xc0118884,(%esp)
c010efd2:	e8 d5 1e ff ff       	call   c0100eac <__panic>
	...

c010efd8 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010efd8:	55                   	push   %ebp
c010efd9:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010efdb:	8b 55 08             	mov    0x8(%ebp),%edx
c010efde:	a1 28 50 15 c0       	mov    0xc0155028,%eax
c010efe3:	89 d1                	mov    %edx,%ecx
c010efe5:	29 c1                	sub    %eax,%ecx
c010efe7:	89 c8                	mov    %ecx,%eax
c010efe9:	c1 f8 05             	sar    $0x5,%eax
}
c010efec:	5d                   	pop    %ebp
c010efed:	c3                   	ret    

c010efee <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010efee:	55                   	push   %ebp
c010efef:	89 e5                	mov    %esp,%ebp
c010eff1:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010eff4:	8b 45 08             	mov    0x8(%ebp),%eax
c010eff7:	89 04 24             	mov    %eax,(%esp)
c010effa:	e8 d9 ff ff ff       	call   c010efd8 <page2ppn>
c010efff:	c1 e0 0c             	shl    $0xc,%eax
}
c010f002:	c9                   	leave  
c010f003:	c3                   	ret    

c010f004 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010f004:	55                   	push   %ebp
c010f005:	89 e5                	mov    %esp,%ebp
c010f007:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010f00a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f00d:	89 04 24             	mov    %eax,(%esp)
c010f010:	e8 d9 ff ff ff       	call   c010efee <page2pa>
c010f015:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f018:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f01b:	c1 e8 0c             	shr    $0xc,%eax
c010f01e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f021:	a1 80 1e 15 c0       	mov    0xc0151e80,%eax
c010f026:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010f029:	72 23                	jb     c010f04e <page2kva+0x4a>
c010f02b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f02e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f032:	c7 44 24 08 9c 88 11 	movl   $0xc011889c,0x8(%esp)
c010f039:	c0 
c010f03a:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010f041:	00 
c010f042:	c7 04 24 bf 88 11 c0 	movl   $0xc01188bf,(%esp)
c010f049:	e8 5e 1e ff ff       	call   c0100eac <__panic>
c010f04e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f051:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010f056:	c9                   	leave  
c010f057:	c3                   	ret    

c010f058 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010f058:	55                   	push   %ebp
c010f059:	89 e5                	mov    %esp,%ebp
c010f05b:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010f05e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f065:	e8 69 2c ff ff       	call   c0101cd3 <ide_device_valid>
c010f06a:	85 c0                	test   %eax,%eax
c010f06c:	75 1c                	jne    c010f08a <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010f06e:	c7 44 24 08 cd 88 11 	movl   $0xc01188cd,0x8(%esp)
c010f075:	c0 
c010f076:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010f07d:	00 
c010f07e:	c7 04 24 e7 88 11 c0 	movl   $0xc01188e7,(%esp)
c010f085:	e8 22 1e ff ff       	call   c0100eac <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010f08a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f091:	e8 7c 2c ff ff       	call   c0101d12 <ide_device_size>
c010f096:	c1 e8 03             	shr    $0x3,%eax
c010f099:	a3 dc 50 15 c0       	mov    %eax,0xc01550dc
}
c010f09e:	c9                   	leave  
c010f09f:	c3                   	ret    

c010f0a0 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010f0a0:	55                   	push   %ebp
c010f0a1:	89 e5                	mov    %esp,%ebp
c010f0a3:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010f0a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f0a9:	89 04 24             	mov    %eax,(%esp)
c010f0ac:	e8 53 ff ff ff       	call   c010f004 <page2kva>
c010f0b1:	8b 55 08             	mov    0x8(%ebp),%edx
c010f0b4:	c1 ea 08             	shr    $0x8,%edx
c010f0b7:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f0ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f0be:	74 0b                	je     c010f0cb <swapfs_read+0x2b>
c010f0c0:	8b 15 dc 50 15 c0    	mov    0xc01550dc,%edx
c010f0c6:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010f0c9:	72 23                	jb     c010f0ee <swapfs_read+0x4e>
c010f0cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0ce:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f0d2:	c7 44 24 08 fd 88 11 	movl   $0xc01188fd,0x8(%esp)
c010f0d9:	c0 
c010f0da:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010f0e1:	00 
c010f0e2:	c7 04 24 e7 88 11 c0 	movl   $0xc01188e7,(%esp)
c010f0e9:	e8 be 1d ff ff       	call   c0100eac <__panic>
c010f0ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f0f1:	c1 e2 03             	shl    $0x3,%edx
c010f0f4:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010f0fb:	00 
c010f0fc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f100:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f104:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f10b:	e8 41 2c ff ff       	call   c0101d51 <ide_read_secs>
}
c010f110:	c9                   	leave  
c010f111:	c3                   	ret    

c010f112 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010f112:	55                   	push   %ebp
c010f113:	89 e5                	mov    %esp,%ebp
c010f115:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010f118:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f11b:	89 04 24             	mov    %eax,(%esp)
c010f11e:	e8 e1 fe ff ff       	call   c010f004 <page2kva>
c010f123:	8b 55 08             	mov    0x8(%ebp),%edx
c010f126:	c1 ea 08             	shr    $0x8,%edx
c010f129:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f12c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f130:	74 0b                	je     c010f13d <swapfs_write+0x2b>
c010f132:	8b 15 dc 50 15 c0    	mov    0xc01550dc,%edx
c010f138:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010f13b:	72 23                	jb     c010f160 <swapfs_write+0x4e>
c010f13d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f140:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f144:	c7 44 24 08 fd 88 11 	movl   $0xc01188fd,0x8(%esp)
c010f14b:	c0 
c010f14c:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010f153:	00 
c010f154:	c7 04 24 e7 88 11 c0 	movl   $0xc01188e7,(%esp)
c010f15b:	e8 4c 1d ff ff       	call   c0100eac <__panic>
c010f160:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f163:	c1 e2 03             	shl    $0x3,%edx
c010f166:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010f16d:	00 
c010f16e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f172:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f176:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f17d:	e8 18 2e ff ff       	call   c0101f9a <ide_write_secs>
}
c010f182:	c9                   	leave  
c010f183:	c3                   	ret    

c010f184 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010f184:	55                   	push   %ebp
c010f185:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010f187:	8b 45 08             	mov    0x8(%ebp),%eax
c010f18a:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f18d:	5d                   	pop    %ebp
c010f18e:	c3                   	ret    

c010f18f <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010f18f:	55                   	push   %ebp
c010f190:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010f192:	8b 45 08             	mov    0x8(%ebp),%eax
c010f195:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f198:	5d                   	pop    %ebp
c010f199:	c3                   	ret    

c010f19a <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010f19a:	55                   	push   %ebp
c010f19b:	89 e5                	mov    %esp,%ebp
c010f19d:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010f1a0:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010f1a7:	e8 aa 5c ff ff       	call   c0104e56 <kmalloc>
c010f1ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f1af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f1b3:	74 09                	je     c010f1be <__alloc_inode+0x24>
        node->in_type = type;
c010f1b5:	8b 55 08             	mov    0x8(%ebp),%edx
c010f1b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f1bb:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010f1be:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f1c1:	c9                   	leave  
c010f1c2:	c3                   	ret    

c010f1c3 <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010f1c3:	55                   	push   %ebp
c010f1c4:	89 e5                	mov    %esp,%ebp
c010f1c6:	83 ec 18             	sub    $0x18,%esp
    node->ref_count = 0;
c010f1c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1cc:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010f1d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1d6:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010f1dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1e0:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f1e3:	89 50 3c             	mov    %edx,0x3c(%eax)
c010f1e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1e9:	8b 55 10             	mov    0x10(%ebp),%edx
c010f1ec:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010f1ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1f2:	89 04 24             	mov    %eax,(%esp)
c010f1f5:	e8 7b 00 00 00       	call   c010f275 <inode_ref_inc>
}
c010f1fa:	c9                   	leave  
c010f1fb:	c3                   	ret    

c010f1fc <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010f1fc:	55                   	push   %ebp
c010f1fd:	89 e5                	mov    %esp,%ebp
c010f1ff:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) == 0);
c010f202:	8b 45 08             	mov    0x8(%ebp),%eax
c010f205:	89 04 24             	mov    %eax,(%esp)
c010f208:	e8 77 ff ff ff       	call   c010f184 <inode_ref_count>
c010f20d:	85 c0                	test   %eax,%eax
c010f20f:	74 24                	je     c010f235 <inode_kill+0x39>
c010f211:	c7 44 24 0c 1c 89 11 	movl   $0xc011891c,0xc(%esp)
c010f218:	c0 
c010f219:	c7 44 24 08 37 89 11 	movl   $0xc0118937,0x8(%esp)
c010f220:	c0 
c010f221:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%esp)
c010f228:	00 
c010f229:	c7 04 24 4c 89 11 c0 	movl   $0xc011894c,(%esp)
c010f230:	e8 77 1c ff ff       	call   c0100eac <__panic>
    assert(inode_open_count(node) == 0);
c010f235:	8b 45 08             	mov    0x8(%ebp),%eax
c010f238:	89 04 24             	mov    %eax,(%esp)
c010f23b:	e8 4f ff ff ff       	call   c010f18f <inode_open_count>
c010f240:	85 c0                	test   %eax,%eax
c010f242:	74 24                	je     c010f268 <inode_kill+0x6c>
c010f244:	c7 44 24 0c 60 89 11 	movl   $0xc0118960,0xc(%esp)
c010f24b:	c0 
c010f24c:	c7 44 24 08 37 89 11 	movl   $0xc0118937,0x8(%esp)
c010f253:	c0 
c010f254:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c010f25b:	00 
c010f25c:	c7 04 24 4c 89 11 c0 	movl   $0xc011894c,(%esp)
c010f263:	e8 44 1c ff ff       	call   c0100eac <__panic>
    kfree(node);
c010f268:	8b 45 08             	mov    0x8(%ebp),%eax
c010f26b:	89 04 24             	mov    %eax,(%esp)
c010f26e:	e8 fe 5b ff ff       	call   c0104e71 <kfree>
}
c010f273:	c9                   	leave  
c010f274:	c3                   	ret    

c010f275 <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010f275:	55                   	push   %ebp
c010f276:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010f278:	8b 45 08             	mov    0x8(%ebp),%eax
c010f27b:	8b 40 30             	mov    0x30(%eax),%eax
c010f27e:	8d 50 01             	lea    0x1(%eax),%edx
c010f281:	8b 45 08             	mov    0x8(%ebp),%eax
c010f284:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010f287:	8b 45 08             	mov    0x8(%ebp),%eax
c010f28a:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f28d:	5d                   	pop    %ebp
c010f28e:	c3                   	ret    

c010f28f <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010f28f:	55                   	push   %ebp
c010f290:	89 e5                	mov    %esp,%ebp
c010f292:	83 ec 28             	sub    $0x28,%esp
    assert(inode_ref_count(node) > 0);
c010f295:	8b 45 08             	mov    0x8(%ebp),%eax
c010f298:	89 04 24             	mov    %eax,(%esp)
c010f29b:	e8 e4 fe ff ff       	call   c010f184 <inode_ref_count>
c010f2a0:	85 c0                	test   %eax,%eax
c010f2a2:	7f 24                	jg     c010f2c8 <inode_ref_dec+0x39>
c010f2a4:	c7 44 24 0c 7c 89 11 	movl   $0xc011897c,0xc(%esp)
c010f2ab:	c0 
c010f2ac:	c7 44 24 08 37 89 11 	movl   $0xc0118937,0x8(%esp)
c010f2b3:	c0 
c010f2b4:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
c010f2bb:	00 
c010f2bc:	c7 04 24 4c 89 11 c0 	movl   $0xc011894c,(%esp)
c010f2c3:	e8 e4 1b ff ff       	call   c0100eac <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010f2c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2cb:	8b 40 30             	mov    0x30(%eax),%eax
c010f2ce:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f2d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2d4:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010f2d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2da:	8b 40 30             	mov    0x30(%eax),%eax
c010f2dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010f2e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f2e4:	0f 85 8d 00 00 00    	jne    c010f377 <inode_ref_dec+0xe8>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010f2ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f2f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f2f4:	74 17                	je     c010f30d <inode_ref_dec+0x7e>
c010f2f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f2f9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f2fc:	85 c0                	test   %eax,%eax
c010f2fe:	74 0d                	je     c010f30d <inode_ref_dec+0x7e>
c010f300:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f303:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f306:	8b 40 24             	mov    0x24(%eax),%eax
c010f309:	85 c0                	test   %eax,%eax
c010f30b:	75 24                	jne    c010f331 <inode_ref_dec+0xa2>
c010f30d:	c7 44 24 0c 98 89 11 	movl   $0xc0118998,0xc(%esp)
c010f314:	c0 
c010f315:	c7 44 24 08 37 89 11 	movl   $0xc0118937,0x8(%esp)
c010f31c:	c0 
c010f31d:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010f324:	00 
c010f325:	c7 04 24 4c 89 11 c0 	movl   $0xc011894c,(%esp)
c010f32c:	e8 7b 1b ff ff       	call   c0100eac <__panic>
c010f331:	c7 44 24 04 e8 89 11 	movl   $0xc01189e8,0x4(%esp)
c010f338:	c0 
c010f339:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f33c:	89 04 24             	mov    %eax,(%esp)
c010f33f:	e8 39 01 00 00       	call   c010f47d <inode_check>
c010f344:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f347:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f34a:	8b 50 24             	mov    0x24(%eax),%edx
c010f34d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f350:	89 04 24             	mov    %eax,(%esp)
c010f353:	ff d2                	call   *%edx
c010f355:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f358:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f35c:	74 19                	je     c010f377 <inode_ref_dec+0xe8>
c010f35e:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010f362:	74 13                	je     c010f377 <inode_ref_dec+0xe8>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010f364:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f367:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f36b:	c7 04 24 f0 89 11 c0 	movl   $0xc01189f0,(%esp)
c010f372:	e8 f9 0f ff ff       	call   c0100370 <cprintf>
        }
    }
    return ref_count;
c010f377:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f37a:	c9                   	leave  
c010f37b:	c3                   	ret    

c010f37c <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010f37c:	55                   	push   %ebp
c010f37d:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010f37f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f382:	8b 40 34             	mov    0x34(%eax),%eax
c010f385:	8d 50 01             	lea    0x1(%eax),%edx
c010f388:	8b 45 08             	mov    0x8(%ebp),%eax
c010f38b:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010f38e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f391:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f394:	5d                   	pop    %ebp
c010f395:	c3                   	ret    

c010f396 <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010f396:	55                   	push   %ebp
c010f397:	89 e5                	mov    %esp,%ebp
c010f399:	83 ec 28             	sub    $0x28,%esp
    assert(inode_open_count(node) > 0);
c010f39c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f39f:	89 04 24             	mov    %eax,(%esp)
c010f3a2:	e8 e8 fd ff ff       	call   c010f18f <inode_open_count>
c010f3a7:	85 c0                	test   %eax,%eax
c010f3a9:	7f 24                	jg     c010f3cf <inode_open_dec+0x39>
c010f3ab:	c7 44 24 0c 10 8a 11 	movl   $0xc0118a10,0xc(%esp)
c010f3b2:	c0 
c010f3b3:	c7 44 24 08 37 89 11 	movl   $0xc0118937,0x8(%esp)
c010f3ba:	c0 
c010f3bb:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
c010f3c2:	00 
c010f3c3:	c7 04 24 4c 89 11 c0 	movl   $0xc011894c,(%esp)
c010f3ca:	e8 dd 1a ff ff       	call   c0100eac <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010f3cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3d2:	8b 40 34             	mov    0x34(%eax),%eax
c010f3d5:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f3d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3db:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010f3de:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3e1:	8b 40 34             	mov    0x34(%eax),%eax
c010f3e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010f3e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f3eb:	0f 85 87 00 00 00    	jne    c010f478 <inode_open_dec+0xe2>
        if ((ret = vop_close(node)) != 0) {
c010f3f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f3f7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f3fb:	74 17                	je     c010f414 <inode_open_dec+0x7e>
c010f3fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f400:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f403:	85 c0                	test   %eax,%eax
c010f405:	74 0d                	je     c010f414 <inode_open_dec+0x7e>
c010f407:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f40a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f40d:	8b 40 08             	mov    0x8(%eax),%eax
c010f410:	85 c0                	test   %eax,%eax
c010f412:	75 24                	jne    c010f438 <inode_open_dec+0xa2>
c010f414:	c7 44 24 0c 2c 8a 11 	movl   $0xc0118a2c,0xc(%esp)
c010f41b:	c0 
c010f41c:	c7 44 24 08 37 89 11 	movl   $0xc0118937,0x8(%esp)
c010f423:	c0 
c010f424:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c010f42b:	00 
c010f42c:	c7 04 24 4c 89 11 c0 	movl   $0xc011894c,(%esp)
c010f433:	e8 74 1a ff ff       	call   c0100eac <__panic>
c010f438:	c7 44 24 04 7a 8a 11 	movl   $0xc0118a7a,0x4(%esp)
c010f43f:	c0 
c010f440:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f443:	89 04 24             	mov    %eax,(%esp)
c010f446:	e8 32 00 00 00       	call   c010f47d <inode_check>
c010f44b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f44e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f451:	8b 50 08             	mov    0x8(%eax),%edx
c010f454:	8b 45 08             	mov    0x8(%ebp),%eax
c010f457:	89 04 24             	mov    %eax,(%esp)
c010f45a:	ff d2                	call   *%edx
c010f45c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f45f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f463:	74 13                	je     c010f478 <inode_open_dec+0xe2>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010f465:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f468:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f46c:	c7 04 24 80 8a 11 c0 	movl   $0xc0118a80,(%esp)
c010f473:	e8 f8 0e ff ff       	call   c0100370 <cprintf>
        }
    }
    return open_count;
c010f478:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f47b:	c9                   	leave  
c010f47c:	c3                   	ret    

c010f47d <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010f47d:	55                   	push   %ebp
c010f47e:	89 e5                	mov    %esp,%ebp
c010f480:	83 ec 28             	sub    $0x28,%esp
    assert(node != NULL && node->in_ops != NULL);
c010f483:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f487:	74 0a                	je     c010f493 <inode_check+0x16>
c010f489:	8b 45 08             	mov    0x8(%ebp),%eax
c010f48c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f48f:	85 c0                	test   %eax,%eax
c010f491:	75 24                	jne    c010f4b7 <inode_check+0x3a>
c010f493:	c7 44 24 0c a0 8a 11 	movl   $0xc0118aa0,0xc(%esp)
c010f49a:	c0 
c010f49b:	c7 44 24 08 37 89 11 	movl   $0xc0118937,0x8(%esp)
c010f4a2:	c0 
c010f4a3:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c010f4aa:	00 
c010f4ab:	c7 04 24 4c 89 11 c0 	movl   $0xc011894c,(%esp)
c010f4b2:	e8 f5 19 ff ff       	call   c0100eac <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010f4b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010f4ba:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f4bd:	8b 00                	mov    (%eax),%eax
c010f4bf:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010f4c4:	74 24                	je     c010f4ea <inode_check+0x6d>
c010f4c6:	c7 44 24 0c c8 8a 11 	movl   $0xc0118ac8,0xc(%esp)
c010f4cd:	c0 
c010f4ce:	c7 44 24 08 37 89 11 	movl   $0xc0118937,0x8(%esp)
c010f4d5:	c0 
c010f4d6:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c010f4dd:	00 
c010f4de:	c7 04 24 4c 89 11 c0 	movl   $0xc011894c,(%esp)
c010f4e5:	e8 c2 19 ff ff       	call   c0100eac <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010f4ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010f4ed:	89 04 24             	mov    %eax,(%esp)
c010f4f0:	e8 8f fc ff ff       	call   c010f184 <inode_ref_count>
c010f4f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f4f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f4fb:	89 04 24             	mov    %eax,(%esp)
c010f4fe:	e8 8c fc ff ff       	call   c010f18f <inode_open_count>
c010f503:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010f506:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f509:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f50c:	7c 06                	jl     c010f514 <inode_check+0x97>
c010f50e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f512:	79 24                	jns    c010f538 <inode_check+0xbb>
c010f514:	c7 44 24 0c f0 8a 11 	movl   $0xc0118af0,0xc(%esp)
c010f51b:	c0 
c010f51c:	c7 44 24 08 37 89 11 	movl   $0xc0118937,0x8(%esp)
c010f523:	c0 
c010f524:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c010f52b:	00 
c010f52c:	c7 04 24 4c 89 11 c0 	movl   $0xc011894c,(%esp)
c010f533:	e8 74 19 ff ff       	call   c0100eac <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010f538:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010f53f:	7f 09                	jg     c010f54a <inode_check+0xcd>
c010f541:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010f548:	7e 24                	jle    c010f56e <inode_check+0xf1>
c010f54a:	c7 44 24 0c 1c 8b 11 	movl   $0xc0118b1c,0xc(%esp)
c010f551:	c0 
c010f552:	c7 44 24 08 37 89 11 	movl   $0xc0118937,0x8(%esp)
c010f559:	c0 
c010f55a:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010f561:	00 
c010f562:	c7 04 24 4c 89 11 c0 	movl   $0xc011894c,(%esp)
c010f569:	e8 3e 19 ff ff       	call   c0100eac <__panic>
}
c010f56e:	c9                   	leave  
c010f56f:	c3                   	ret    

c010f570 <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010f570:	55                   	push   %ebp
c010f571:	89 e5                	mov    %esp,%ebp
c010f573:	83 ec 28             	sub    $0x28,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010f576:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c010f57d:	e8 d4 58 ff ff       	call   c0104e56 <kmalloc>
c010f582:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f585:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f589:	74 09                	je     c010f594 <__alloc_fs+0x24>
        fs->fs_type = type;
c010f58b:	8b 55 08             	mov    0x8(%ebp),%edx
c010f58e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f591:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010f594:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f597:	c9                   	leave  
c010f598:	c3                   	ret    

c010f599 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010f599:	55                   	push   %ebp
c010f59a:	89 e5                	mov    %esp,%ebp
c010f59c:	83 ec 18             	sub    $0x18,%esp
    sem_init(&bootfs_sem, 1);
c010f59f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f5a6:	00 
c010f5a7:	c7 04 24 b8 3f 15 c0 	movl   $0xc0153fb8,(%esp)
c010f5ae:	e8 fb a6 ff ff       	call   c0109cae <sem_init>
    vfs_devlist_init();
c010f5b3:	e8 64 01 00 00       	call   c010f71c <vfs_devlist_init>
}
c010f5b8:	c9                   	leave  
c010f5b9:	c3                   	ret    

c010f5ba <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010f5ba:	55                   	push   %ebp
c010f5bb:	89 e5                	mov    %esp,%ebp
c010f5bd:	83 ec 18             	sub    $0x18,%esp
    down(&bootfs_sem);
c010f5c0:	c7 04 24 b8 3f 15 c0 	movl   $0xc0153fb8,(%esp)
c010f5c7:	e8 70 a8 ff ff       	call   c0109e3c <down>
}
c010f5cc:	c9                   	leave  
c010f5cd:	c3                   	ret    

c010f5ce <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010f5ce:	55                   	push   %ebp
c010f5cf:	89 e5                	mov    %esp,%ebp
c010f5d1:	83 ec 18             	sub    $0x18,%esp
    up(&bootfs_sem);
c010f5d4:	c7 04 24 b8 3f 15 c0 	movl   $0xc0153fb8,(%esp)
c010f5db:	e8 41 a8 ff ff       	call   c0109e21 <up>
}
c010f5e0:	c9                   	leave  
c010f5e1:	c3                   	ret    

c010f5e2 <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010f5e2:	55                   	push   %ebp
c010f5e3:	89 e5                	mov    %esp,%ebp
c010f5e5:	83 ec 28             	sub    $0x28,%esp
    struct inode *old;
    lock_bootfs();
c010f5e8:	e8 cd ff ff ff       	call   c010f5ba <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010f5ed:	a1 c4 3f 15 c0       	mov    0xc0153fc4,%eax
c010f5f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f5f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5f8:	a3 c4 3f 15 c0       	mov    %eax,0xc0153fc4
    }
    unlock_bootfs();
c010f5fd:	e8 cc ff ff ff       	call   c010f5ce <unlock_bootfs>
    if (old != NULL) {
c010f602:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f606:	74 0b                	je     c010f613 <change_bootfs+0x31>
        vop_ref_dec(old);
c010f608:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f60b:	89 04 24             	mov    %eax,(%esp)
c010f60e:	e8 7c fc ff ff       	call   c010f28f <inode_ref_dec>
    }
}
c010f613:	c9                   	leave  
c010f614:	c3                   	ret    

c010f615 <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010f615:	55                   	push   %ebp
c010f616:	89 e5                	mov    %esp,%ebp
c010f618:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f61b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010f622:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f626:	74 62                	je     c010f68a <vfs_set_bootfs+0x75>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010f628:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010f62f:	00 
c010f630:	8b 45 08             	mov    0x8(%ebp),%eax
c010f633:	89 04 24             	mov    %eax,(%esp)
c010f636:	e8 7e 5f 00 00       	call   c01155b9 <strchr>
c010f63b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f63e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f642:	74 0d                	je     c010f651 <vfs_set_bootfs+0x3c>
c010f644:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f647:	83 c0 01             	add    $0x1,%eax
c010f64a:	0f b6 00             	movzbl (%eax),%eax
c010f64d:	84 c0                	test   %al,%al
c010f64f:	74 07                	je     c010f658 <vfs_set_bootfs+0x43>
            return -E_INVAL;
c010f651:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f656:	eb 42                	jmp    c010f69a <vfs_set_bootfs+0x85>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010f658:	8b 45 08             	mov    0x8(%ebp),%eax
c010f65b:	89 04 24             	mov    %eax,(%esp)
c010f65e:	e8 96 10 00 00       	call   c01106f9 <vfs_chdir>
c010f663:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f666:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f66a:	74 05                	je     c010f671 <vfs_set_bootfs+0x5c>
            return ret;
c010f66c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f66f:	eb 29                	jmp    c010f69a <vfs_set_bootfs+0x85>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010f671:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010f674:	89 04 24             	mov    %eax,(%esp)
c010f677:	e8 51 0f 00 00       	call   c01105cd <vfs_get_curdir>
c010f67c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f67f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f683:	74 05                	je     c010f68a <vfs_set_bootfs+0x75>
            return ret;
c010f685:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f688:	eb 10                	jmp    c010f69a <vfs_set_bootfs+0x85>
        }
    }
    change_bootfs(node);
c010f68a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f68d:	89 04 24             	mov    %eax,(%esp)
c010f690:	e8 4d ff ff ff       	call   c010f5e2 <change_bootfs>
    return 0;
c010f695:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f69a:	c9                   	leave  
c010f69b:	c3                   	ret    

c010f69c <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010f69c:	55                   	push   %ebp
c010f69d:	89 e5                	mov    %esp,%ebp
c010f69f:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f6a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010f6a9:	a1 c4 3f 15 c0       	mov    0xc0153fc4,%eax
c010f6ae:	85 c0                	test   %eax,%eax
c010f6b0:	74 25                	je     c010f6d7 <vfs_get_bootfs+0x3b>
        lock_bootfs();
c010f6b2:	e8 03 ff ff ff       	call   c010f5ba <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010f6b7:	a1 c4 3f 15 c0       	mov    0xc0153fc4,%eax
c010f6bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f6bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f6c3:	74 0d                	je     c010f6d2 <vfs_get_bootfs+0x36>
                vop_ref_inc(bootfs_node);
c010f6c5:	a1 c4 3f 15 c0       	mov    0xc0153fc4,%eax
c010f6ca:	89 04 24             	mov    %eax,(%esp)
c010f6cd:	e8 a3 fb ff ff       	call   c010f275 <inode_ref_inc>
            }
        }
        unlock_bootfs();
c010f6d2:	e8 f7 fe ff ff       	call   c010f5ce <unlock_bootfs>
    }
    if (node == NULL) {
c010f6d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f6db:	75 07                	jne    c010f6e4 <vfs_get_bootfs+0x48>
        return -E_NOENT;
c010f6dd:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010f6e2:	eb 0d                	jmp    c010f6f1 <vfs_get_bootfs+0x55>
    }
    *node_store = node;
c010f6e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010f6e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f6ea:	89 10                	mov    %edx,(%eax)
    return 0;
c010f6ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f6f1:	c9                   	leave  
c010f6f2:	c3                   	ret    
	...

c010f6f4 <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010f6f4:	55                   	push   %ebp
c010f6f5:	89 e5                	mov    %esp,%ebp
c010f6f7:	83 ec 18             	sub    $0x18,%esp
    down(&vdev_list_sem);
c010f6fa:	c7 04 24 d0 3f 15 c0 	movl   $0xc0153fd0,(%esp)
c010f701:	e8 36 a7 ff ff       	call   c0109e3c <down>
}
c010f706:	c9                   	leave  
c010f707:	c3                   	ret    

c010f708 <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010f708:	55                   	push   %ebp
c010f709:	89 e5                	mov    %esp,%ebp
c010f70b:	83 ec 18             	sub    $0x18,%esp
    up(&vdev_list_sem);
c010f70e:	c7 04 24 d0 3f 15 c0 	movl   $0xc0153fd0,(%esp)
c010f715:	e8 07 a7 ff ff       	call   c0109e21 <up>
}
c010f71a:	c9                   	leave  
c010f71b:	c3                   	ret    

c010f71c <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010f71c:	55                   	push   %ebp
c010f71d:	89 e5                	mov    %esp,%ebp
c010f71f:	83 ec 28             	sub    $0x28,%esp
c010f722:	c7 45 f4 c8 3f 15 c0 	movl   $0xc0153fc8,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010f729:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f72c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f72f:	89 50 04             	mov    %edx,0x4(%eax)
c010f732:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f735:	8b 50 04             	mov    0x4(%eax),%edx
c010f738:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f73b:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010f73d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f744:	00 
c010f745:	c7 04 24 d0 3f 15 c0 	movl   $0xc0153fd0,(%esp)
c010f74c:	e8 5d a5 ff ff       	call   c0109cae <sem_init>
}
c010f751:	c9                   	leave  
c010f752:	c3                   	ret    

c010f753 <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010f753:	55                   	push   %ebp
c010f754:	89 e5                	mov    %esp,%ebp
c010f756:	83 ec 38             	sub    $0x38,%esp
c010f759:	c7 45 e8 c8 3f 15 c0 	movl   $0xc0153fc8,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f760:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f763:	8b 40 04             	mov    0x4(%eax),%eax
c010f766:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010f769:	0f 94 c0             	sete   %al
c010f76c:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f76f:	85 c0                	test   %eax,%eax
c010f771:	75 57                	jne    c010f7ca <vfs_cleanup+0x77>
        lock_vdev_list();
c010f773:	e8 7c ff ff ff       	call   c010f6f4 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f778:	c7 45 f0 c8 3f 15 c0 	movl   $0xc0153fc8,-0x10(%ebp)
c010f77f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f782:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f785:	eb 27                	jmp    c010f7ae <vfs_cleanup+0x5b>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f787:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f78a:	83 e8 10             	sub    $0x10,%eax
c010f78d:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->fs != NULL) {
c010f790:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f793:	8b 40 08             	mov    0x8(%eax),%eax
c010f796:	85 c0                	test   %eax,%eax
c010f798:	74 14                	je     c010f7ae <vfs_cleanup+0x5b>
                    fsop_cleanup(vdev->fs);
c010f79a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f79d:	8b 40 08             	mov    0x8(%eax),%eax
c010f7a0:	8b 50 7c             	mov    0x7c(%eax),%edx
c010f7a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7a6:	8b 40 08             	mov    0x8(%eax),%eax
c010f7a9:	89 04 24             	mov    %eax,(%esp)
c010f7ac:	ff d2                	call   *%edx
c010f7ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f7b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f7b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f7b7:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f7ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f7bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f7c0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f7c3:	75 c2                	jne    c010f787 <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010f7c5:	e8 3e ff ff ff       	call   c010f708 <unlock_vdev_list>
    }
}
c010f7ca:	c9                   	leave  
c010f7cb:	c3                   	ret    

c010f7cc <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010f7cc:	55                   	push   %ebp
c010f7cd:	89 e5                	mov    %esp,%ebp
c010f7cf:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c010f7d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f7d6:	75 24                	jne    c010f7fc <vfs_get_root+0x30>
c010f7d8:	c7 44 24 0c 58 8b 11 	movl   $0xc0118b58,0xc(%esp)
c010f7df:	c0 
c010f7e0:	c7 44 24 08 68 8b 11 	movl   $0xc0118b68,0x8(%esp)
c010f7e7:	c0 
c010f7e8:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010f7ef:	00 
c010f7f0:	c7 04 24 7d 8b 11 c0 	movl   $0xc0118b7d,(%esp)
c010f7f7:	e8 b0 16 ff ff       	call   c0100eac <__panic>
    int ret = -E_NO_DEV;
c010f7fc:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010f803:	c7 45 e0 c8 3f 15 c0 	movl   $0xc0153fc8,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f80a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f80d:	8b 40 04             	mov    0x4(%eax),%eax
c010f810:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010f813:	0f 94 c0             	sete   %al
c010f816:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f819:	85 c0                	test   %eax,%eax
c010f81b:	0f 85 c3 00 00 00    	jne    c010f8e4 <vfs_get_root+0x118>
        lock_vdev_list();
c010f821:	e8 ce fe ff ff       	call   c010f6f4 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f826:	c7 45 e8 c8 3f 15 c0 	movl   $0xc0153fc8,-0x18(%ebp)
c010f82d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f830:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010f833:	e9 8c 00 00 00       	jmp    c010f8c4 <vfs_get_root+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f838:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f83b:	83 e8 10             	sub    $0x10,%eax
c010f83e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010f841:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f844:	8b 00                	mov    (%eax),%eax
c010f846:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f84a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f84d:	89 04 24             	mov    %eax,(%esp)
c010f850:	e8 bf 5c 00 00       	call   c0115514 <strcmp>
c010f855:	85 c0                	test   %eax,%eax
c010f857:	75 6b                	jne    c010f8c4 <vfs_get_root+0xf8>
                    struct inode *found = NULL;
c010f859:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010f860:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f863:	8b 40 08             	mov    0x8(%eax),%eax
c010f866:	85 c0                	test   %eax,%eax
c010f868:	74 19                	je     c010f883 <vfs_get_root+0xb7>
                        found = fsop_get_root(vdev->fs);
c010f86a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f86d:	8b 40 08             	mov    0x8(%eax),%eax
c010f870:	8b 50 74             	mov    0x74(%eax),%edx
c010f873:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f876:	8b 40 08             	mov    0x8(%eax),%eax
c010f879:	89 04 24             	mov    %eax,(%esp)
c010f87c:	ff d2                	call   *%edx
c010f87e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f881:	eb 21                	jmp    c010f8a4 <vfs_get_root+0xd8>
                    }
                    else if (!vdev->mountable) {
c010f883:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f886:	8b 40 0c             	mov    0xc(%eax),%eax
c010f889:	85 c0                	test   %eax,%eax
c010f88b:	75 17                	jne    c010f8a4 <vfs_get_root+0xd8>
                        vop_ref_inc(vdev->devnode);
c010f88d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f890:	8b 40 04             	mov    0x4(%eax),%eax
c010f893:	89 04 24             	mov    %eax,(%esp)
c010f896:	e8 da f9 ff ff       	call   c010f275 <inode_ref_inc>
                        found = vdev->devnode;
c010f89b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f89e:	8b 40 04             	mov    0x4(%eax),%eax
c010f8a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010f8a4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f8a8:	74 11                	je     c010f8bb <vfs_get_root+0xef>
                        ret = 0, *node_store = found;
c010f8aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f8b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f8b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f8b7:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010f8b9:	eb 24                	jmp    c010f8df <vfs_get_root+0x113>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010f8bb:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010f8c2:	eb 1b                	jmp    c010f8df <vfs_get_root+0x113>
c010f8c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f8c7:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f8ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f8cd:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f8d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f8d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f8d6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010f8d9:	0f 85 59 ff ff ff    	jne    c010f838 <vfs_get_root+0x6c>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010f8df:	e8 24 fe ff ff       	call   c010f708 <unlock_vdev_list>
    }
    return ret;
c010f8e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f8e7:	c9                   	leave  
c010f8e8:	c3                   	ret    

c010f8e9 <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010f8e9:	55                   	push   %ebp
c010f8ea:	89 e5                	mov    %esp,%ebp
c010f8ec:	83 ec 28             	sub    $0x28,%esp
    assert(fs != NULL);
c010f8ef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f8f3:	75 24                	jne    c010f919 <vfs_get_devname+0x30>
c010f8f5:	c7 44 24 0c 92 8b 11 	movl   $0xc0118b92,0xc(%esp)
c010f8fc:	c0 
c010f8fd:	c7 44 24 08 68 8b 11 	movl   $0xc0118b68,0x8(%esp)
c010f904:	c0 
c010f905:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010f90c:	00 
c010f90d:	c7 04 24 7d 8b 11 c0 	movl   $0xc0118b7d,(%esp)
c010f914:	e8 93 15 ff ff       	call   c0100eac <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f919:	c7 45 f0 c8 3f 15 c0 	movl   $0xc0153fc8,-0x10(%ebp)
c010f920:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f923:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f926:	eb 1b                	jmp    c010f943 <vfs_get_devname+0x5a>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f928:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f92b:	83 e8 10             	sub    $0x10,%eax
c010f92e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010f931:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f934:	8b 40 08             	mov    0x8(%eax),%eax
c010f937:	3b 45 08             	cmp    0x8(%ebp),%eax
c010f93a:	75 07                	jne    c010f943 <vfs_get_devname+0x5a>
            return vdev->devname;
c010f93c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f93f:	8b 00                	mov    (%eax),%eax
c010f941:	eb 1c                	jmp    c010f95f <vfs_get_devname+0x76>
c010f943:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f946:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f949:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f94c:	8b 40 04             	mov    0x4(%eax),%eax
 */
const char *
vfs_get_devname(struct fs *fs) {
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f94f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f952:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f955:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f958:	75 ce                	jne    c010f928 <vfs_get_devname+0x3f>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010f95a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f95f:	c9                   	leave  
c010f960:	c3                   	ret    

c010f961 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010f961:	55                   	push   %ebp
c010f962:	89 e5                	mov    %esp,%ebp
c010f964:	83 ec 28             	sub    $0x28,%esp
    list_entry_t *list = &vdev_list, *le = list;
c010f967:	c7 45 f0 c8 3f 15 c0 	movl   $0xc0153fc8,-0x10(%ebp)
c010f96e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f971:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f974:	eb 28                	jmp    c010f99e <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f976:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f979:	83 e8 10             	sub    $0x10,%eax
c010f97c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010f97f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f982:	8b 00                	mov    (%eax),%eax
c010f984:	8b 55 08             	mov    0x8(%ebp),%edx
c010f987:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f98b:	89 04 24             	mov    %eax,(%esp)
c010f98e:	e8 81 5b 00 00       	call   c0115514 <strcmp>
c010f993:	85 c0                	test   %eax,%eax
c010f995:	75 07                	jne    c010f99e <check_devname_conflict+0x3d>
            return 0;
c010f997:	b8 00 00 00 00       	mov    $0x0,%eax
c010f99c:	eb 1c                	jmp    c010f9ba <check_devname_conflict+0x59>
c010f99e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f9a1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f9a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f9a7:	8b 40 04             	mov    0x4(%eax),%eax
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f9aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f9ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f9b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f9b3:	75 c1                	jne    c010f976 <check_devname_conflict+0x15>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010f9b5:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010f9ba:	c9                   	leave  
c010f9bb:	c3                   	ret    

c010f9bc <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010f9bc:	55                   	push   %ebp
c010f9bd:	89 e5                	mov    %esp,%ebp
c010f9bf:	83 ec 48             	sub    $0x48,%esp
    assert(devname != NULL);
c010f9c2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f9c6:	75 24                	jne    c010f9ec <vfs_do_add+0x30>
c010f9c8:	c7 44 24 0c 58 8b 11 	movl   $0xc0118b58,0xc(%esp)
c010f9cf:	c0 
c010f9d0:	c7 44 24 08 68 8b 11 	movl   $0xc0118b68,0x8(%esp)
c010f9d7:	c0 
c010f9d8:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
c010f9df:	00 
c010f9e0:	c7 04 24 7d 8b 11 c0 	movl   $0xc0118b7d,(%esp)
c010f9e7:	e8 c0 14 ff ff       	call   c0100eac <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010f9ec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f9f0:	75 06                	jne    c010f9f8 <vfs_do_add+0x3c>
c010f9f2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f9f6:	74 37                	je     c010fa2f <vfs_do_add+0x73>
c010f9f8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f9fc:	74 0d                	je     c010fa0b <vfs_do_add+0x4f>
c010f9fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fa01:	8b 40 2c             	mov    0x2c(%eax),%eax
c010fa04:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010fa09:	74 24                	je     c010fa2f <vfs_do_add+0x73>
c010fa0b:	c7 44 24 0c a0 8b 11 	movl   $0xc0118ba0,0xc(%esp)
c010fa12:	c0 
c010fa13:	c7 44 24 08 68 8b 11 	movl   $0xc0118b68,0x8(%esp)
c010fa1a:	c0 
c010fa1b:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c010fa22:	00 
c010fa23:	c7 04 24 7d 8b 11 c0 	movl   $0xc0118b7d,(%esp)
c010fa2a:	e8 7d 14 ff ff       	call   c0100eac <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010fa2f:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa32:	89 04 24             	mov    %eax,(%esp)
c010fa35:	e8 da 59 00 00       	call   c0115414 <strlen>
c010fa3a:	83 f8 1f             	cmp    $0x1f,%eax
c010fa3d:	76 0a                	jbe    c010fa49 <vfs_do_add+0x8d>
        return -E_TOO_BIG;
c010fa3f:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010fa44:	e9 00 01 00 00       	jmp    c010fb49 <vfs_do_add+0x18d>
    }

    int ret = -E_NO_MEM;
c010fa49:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010fa50:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa53:	89 04 24             	mov    %eax,(%esp)
c010fa56:	e8 bd 09 ff ff       	call   c0100418 <strdup>
c010fa5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fa5e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fa62:	75 08                	jne    c010fa6c <vfs_do_add+0xb0>
        return ret;
c010fa64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fa67:	e9 dd 00 00 00       	jmp    c010fb49 <vfs_do_add+0x18d>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010fa6c:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010fa73:	e8 de 53 ff ff       	call   c0104e56 <kmalloc>
c010fa78:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fa7b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fa7f:	0f 84 b5 00 00 00    	je     c010fb3a <vfs_do_add+0x17e>
        goto failed_cleanup_name;
    }

    ret = -E_EXISTS;
c010fa85:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010fa8c:	e8 63 fc ff ff       	call   c010f6f4 <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010fa91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa94:	89 04 24             	mov    %eax,(%esp)
c010fa97:	e8 c5 fe ff ff       	call   c010f961 <check_devname_conflict>
c010fa9c:	85 c0                	test   %eax,%eax
c010fa9e:	75 16                	jne    c010fab6 <vfs_do_add+0xfa>
        unlock_vdev_list();
c010faa0:	e8 63 fc ff ff       	call   c010f708 <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010faa5:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010faa6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010faa9:	89 04 24             	mov    %eax,(%esp)
c010faac:	e8 c0 53 ff ff       	call   c0104e71 <kfree>
c010fab1:	e9 85 00 00 00       	jmp    c010fb3b <vfs_do_add+0x17f>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010fab6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fab9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fabc:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010fabe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fac1:	8b 55 0c             	mov    0xc(%ebp),%edx
c010fac4:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010fac7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010faca:	8b 55 14             	mov    0x14(%ebp),%edx
c010facd:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010fad0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fad3:	8b 55 10             	mov    0x10(%ebp),%edx
c010fad6:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010fad9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fadc:	83 c0 10             	add    $0x10,%eax
c010fadf:	c7 45 e8 c8 3f 15 c0 	movl   $0xc0153fc8,-0x18(%ebp)
c010fae6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010fae9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010faec:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010faef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010faf2:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010faf5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010faf8:	8b 40 04             	mov    0x4(%eax),%eax
c010fafb:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010fafe:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010fb01:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010fb04:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010fb07:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010fb0a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fb0d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fb10:	89 10                	mov    %edx,(%eax)
c010fb12:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fb15:	8b 10                	mov    (%eax),%edx
c010fb17:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010fb1a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010fb1d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fb20:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010fb23:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010fb26:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fb29:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010fb2c:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010fb2e:	e8 d5 fb ff ff       	call   c010f708 <unlock_vdev_list>
    return 0;
c010fb33:	b8 00 00 00 00       	mov    $0x0,%eax
c010fb38:	eb 0f                	jmp    c010fb49 <vfs_do_add+0x18d>
        return ret;
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
        goto failed_cleanup_name;
c010fb3a:	90                   	nop
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010fb3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb3e:	89 04 24             	mov    %eax,(%esp)
c010fb41:	e8 2b 53 ff ff       	call   c0104e71 <kfree>
    return ret;
c010fb46:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fb49:	c9                   	leave  
c010fb4a:	c3                   	ret    

c010fb4b <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010fb4b:	55                   	push   %ebp
c010fb4c:	89 e5                	mov    %esp,%ebp
c010fb4e:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010fb51:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010fb58:	00 
c010fb59:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fb5c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010fb60:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010fb67:	00 
c010fb68:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb6b:	89 04 24             	mov    %eax,(%esp)
c010fb6e:	e8 49 fe ff ff       	call   c010f9bc <vfs_do_add>
}
c010fb73:	c9                   	leave  
c010fb74:	c3                   	ret    

c010fb75 <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010fb75:	55                   	push   %ebp
c010fb76:	89 e5                	mov    %esp,%ebp
c010fb78:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010fb7b:	8b 45 10             	mov    0x10(%ebp),%eax
c010fb7e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010fb82:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010fb89:	00 
c010fb8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fb8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fb91:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb94:	89 04 24             	mov    %eax,(%esp)
c010fb97:	e8 20 fe ff ff       	call   c010f9bc <vfs_do_add>
}
c010fb9c:	c9                   	leave  
c010fb9d:	c3                   	ret    

c010fb9e <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010fb9e:	55                   	push   %ebp
c010fb9f:	89 e5                	mov    %esp,%ebp
c010fba1:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c010fba4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010fba8:	75 24                	jne    c010fbce <find_mount+0x30>
c010fbaa:	c7 44 24 0c 58 8b 11 	movl   $0xc0118b58,0xc(%esp)
c010fbb1:	c0 
c010fbb2:	c7 44 24 08 68 8b 11 	movl   $0xc0118b68,0x8(%esp)
c010fbb9:	c0 
c010fbba:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010fbc1:	00 
c010fbc2:	c7 04 24 7d 8b 11 c0 	movl   $0xc0118b7d,(%esp)
c010fbc9:	e8 de 12 ff ff       	call   c0100eac <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010fbce:	c7 45 f0 c8 3f 15 c0 	movl   $0xc0153fc8,-0x10(%ebp)
c010fbd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fbd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010fbdb:	eb 3a                	jmp    c010fc17 <find_mount+0x79>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fbdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fbe0:	83 e8 10             	sub    $0x10,%eax
c010fbe3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010fbe6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbe9:	8b 40 0c             	mov    0xc(%eax),%eax
c010fbec:	85 c0                	test   %eax,%eax
c010fbee:	74 27                	je     c010fc17 <find_mount+0x79>
c010fbf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbf3:	8b 00                	mov    (%eax),%eax
c010fbf5:	8b 55 08             	mov    0x8(%ebp),%edx
c010fbf8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010fbfc:	89 04 24             	mov    %eax,(%esp)
c010fbff:	e8 10 59 00 00       	call   c0115514 <strcmp>
c010fc04:	85 c0                	test   %eax,%eax
c010fc06:	75 0f                	jne    c010fc17 <find_mount+0x79>
            *vdev_store = vdev;
c010fc08:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fc0b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fc0e:	89 10                	mov    %edx,(%eax)
            return 0;
c010fc10:	b8 00 00 00 00       	mov    $0x0,%eax
c010fc15:	eb 1c                	jmp    c010fc33 <find_mount+0x95>
c010fc17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010fc1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc20:	8b 40 04             	mov    0x4(%eax),%eax
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010fc23:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fc26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc29:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010fc2c:	75 af                	jne    c010fbdd <find_mount+0x3f>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010fc2e:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010fc33:	c9                   	leave  
c010fc34:	c3                   	ret    

c010fc35 <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010fc35:	55                   	push   %ebp
c010fc36:	89 e5                	mov    %esp,%ebp
c010fc38:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010fc3b:	e8 b4 fa ff ff       	call   c010f6f4 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010fc40:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010fc43:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc47:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc4a:	89 04 24             	mov    %eax,(%esp)
c010fc4d:	e8 4c ff ff ff       	call   c010fb9e <find_mount>
c010fc52:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fc55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fc59:	0f 85 f6 00 00 00    	jne    c010fd55 <vfs_mount+0x120>
        goto out;
    }
    if (vdev->fs != NULL) {
c010fc5f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc62:	8b 40 08             	mov    0x8(%eax),%eax
c010fc65:	85 c0                	test   %eax,%eax
c010fc67:	74 0c                	je     c010fc75 <vfs_mount+0x40>
        ret = -E_BUSY;
c010fc69:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010fc70:	e9 e1 00 00 00       	jmp    c010fd56 <vfs_mount+0x121>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fc75:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc78:	8b 00                	mov    (%eax),%eax
c010fc7a:	85 c0                	test   %eax,%eax
c010fc7c:	74 0a                	je     c010fc88 <vfs_mount+0x53>
c010fc7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc81:	8b 40 0c             	mov    0xc(%eax),%eax
c010fc84:	85 c0                	test   %eax,%eax
c010fc86:	75 24                	jne    c010fcac <vfs_mount+0x77>
c010fc88:	c7 44 24 0c fc 8b 11 	movl   $0xc0118bfc,0xc(%esp)
c010fc8f:	c0 
c010fc90:	c7 44 24 08 68 8b 11 	movl   $0xc0118b68,0x8(%esp)
c010fc97:	c0 
c010fc98:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c010fc9f:	00 
c010fca0:	c7 04 24 7d 8b 11 c0 	movl   $0xc0118b7d,(%esp)
c010fca7:	e8 00 12 ff ff       	call   c0100eac <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010fcac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fcaf:	8b 40 04             	mov    0x4(%eax),%eax
c010fcb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fcb5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fcb9:	74 0d                	je     c010fcc8 <vfs_mount+0x93>
c010fcbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fcbe:	8b 40 2c             	mov    0x2c(%eax),%eax
c010fcc1:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010fcc6:	74 24                	je     c010fcec <vfs_mount+0xb7>
c010fcc8:	c7 44 24 0c 28 8c 11 	movl   $0xc0118c28,0xc(%esp)
c010fccf:	c0 
c010fcd0:	c7 44 24 08 68 8b 11 	movl   $0xc0118b68,0x8(%esp)
c010fcd7:	c0 
c010fcd8:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010fcdf:	00 
c010fce0:	c7 04 24 7d 8b 11 c0 	movl   $0xc0118b7d,(%esp)
c010fce7:	e8 c0 11 ff ff       	call   c0100eac <__panic>
c010fcec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fcef:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010fcf2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fcf5:	83 c0 08             	add    $0x8,%eax
c010fcf8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fcfc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fcff:	89 04 24             	mov    %eax,(%esp)
c010fd02:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fd05:	ff d0                	call   *%eax
c010fd07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fd0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fd0e:	75 46                	jne    c010fd56 <vfs_mount+0x121>
        assert(vdev->fs != NULL);
c010fd10:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fd13:	8b 40 08             	mov    0x8(%eax),%eax
c010fd16:	85 c0                	test   %eax,%eax
c010fd18:	75 24                	jne    c010fd3e <vfs_mount+0x109>
c010fd1a:	c7 44 24 0c 5b 8c 11 	movl   $0xc0118c5b,0xc(%esp)
c010fd21:	c0 
c010fd22:	c7 44 24 08 68 8b 11 	movl   $0xc0118b68,0x8(%esp)
c010fd29:	c0 
c010fd2a:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010fd31:	00 
c010fd32:	c7 04 24 7d 8b 11 c0 	movl   $0xc0118b7d,(%esp)
c010fd39:	e8 6e 11 ff ff       	call   c0100eac <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010fd3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fd41:	8b 00                	mov    (%eax),%eax
c010fd43:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd47:	c7 04 24 6c 8c 11 c0 	movl   $0xc0118c6c,(%esp)
c010fd4e:	e8 1d 06 ff ff       	call   c0100370 <cprintf>
c010fd53:	eb 01                	jmp    c010fd56 <vfs_mount+0x121>
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
    int ret;
    lock_vdev_list();
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
        goto out;
c010fd55:	90                   	nop
        assert(vdev->fs != NULL);
        cprintf("vfs: mount %s.\n", vdev->devname);
    }

out:
    unlock_vdev_list();
c010fd56:	e8 ad f9 ff ff       	call   c010f708 <unlock_vdev_list>
    return ret;
c010fd5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fd5e:	c9                   	leave  
c010fd5f:	c3                   	ret    

c010fd60 <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010fd60:	55                   	push   %ebp
c010fd61:	89 e5                	mov    %esp,%ebp
c010fd63:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010fd66:	e8 89 f9 ff ff       	call   c010f6f4 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010fd6b:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010fd6e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd72:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd75:	89 04 24             	mov    %eax,(%esp)
c010fd78:	e8 21 fe ff ff       	call   c010fb9e <find_mount>
c010fd7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fd80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fd84:	0f 85 a8 00 00 00    	jne    c010fe32 <vfs_unmount+0xd2>
        goto out;
    }
    if (vdev->fs == NULL) {
c010fd8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd8d:	8b 40 08             	mov    0x8(%eax),%eax
c010fd90:	85 c0                	test   %eax,%eax
c010fd92:	75 0c                	jne    c010fda0 <vfs_unmount+0x40>
        ret = -E_INVAL;
c010fd94:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010fd9b:	e9 96 00 00 00       	jmp    c010fe36 <vfs_unmount+0xd6>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fda0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fda3:	8b 00                	mov    (%eax),%eax
c010fda5:	85 c0                	test   %eax,%eax
c010fda7:	74 0a                	je     c010fdb3 <vfs_unmount+0x53>
c010fda9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdac:	8b 40 0c             	mov    0xc(%eax),%eax
c010fdaf:	85 c0                	test   %eax,%eax
c010fdb1:	75 24                	jne    c010fdd7 <vfs_unmount+0x77>
c010fdb3:	c7 44 24 0c fc 8b 11 	movl   $0xc0118bfc,0xc(%esp)
c010fdba:	c0 
c010fdbb:	c7 44 24 08 68 8b 11 	movl   $0xc0118b68,0x8(%esp)
c010fdc2:	c0 
c010fdc3:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010fdca:	00 
c010fdcb:	c7 04 24 7d 8b 11 c0 	movl   $0xc0118b7d,(%esp)
c010fdd2:	e8 d5 10 ff ff       	call   c0100eac <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fdd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdda:	8b 40 08             	mov    0x8(%eax),%eax
c010fddd:	8b 50 70             	mov    0x70(%eax),%edx
c010fde0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fde3:	8b 40 08             	mov    0x8(%eax),%eax
c010fde6:	89 04 24             	mov    %eax,(%esp)
c010fde9:	ff d2                	call   *%edx
c010fdeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fdee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fdf2:	75 41                	jne    c010fe35 <vfs_unmount+0xd5>
        goto out;
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010fdf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdf7:	8b 40 08             	mov    0x8(%eax),%eax
c010fdfa:	8b 50 78             	mov    0x78(%eax),%edx
c010fdfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fe00:	8b 40 08             	mov    0x8(%eax),%eax
c010fe03:	89 04 24             	mov    %eax,(%esp)
c010fe06:	ff d2                	call   *%edx
c010fe08:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fe0b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fe0f:	75 25                	jne    c010fe36 <vfs_unmount+0xd6>
        vdev->fs = NULL;
c010fe11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fe14:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010fe1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fe1e:	8b 00                	mov    (%eax),%eax
c010fe20:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe24:	c7 04 24 7c 8c 11 c0 	movl   $0xc0118c7c,(%esp)
c010fe2b:	e8 40 05 ff ff       	call   c0100370 <cprintf>
c010fe30:	eb 04                	jmp    c010fe36 <vfs_unmount+0xd6>
vfs_unmount(const char *devname) {
    int ret;
    lock_vdev_list();
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
        goto out;
c010fe32:	90                   	nop
c010fe33:	eb 01                	jmp    c010fe36 <vfs_unmount+0xd6>
        goto out;
    }
    assert(vdev->devname != NULL && vdev->mountable);

    if ((ret = fsop_sync(vdev->fs)) != 0) {
        goto out;
c010fe35:	90                   	nop
        vdev->fs = NULL;
        cprintf("vfs: unmount %s.\n", vdev->devname);
    }

out:
    unlock_vdev_list();
c010fe36:	e8 cd f8 ff ff       	call   c010f708 <unlock_vdev_list>
    return ret;
c010fe3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fe3e:	c9                   	leave  
c010fe3f:	c3                   	ret    

c010fe40 <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010fe40:	55                   	push   %ebp
c010fe41:	89 e5                	mov    %esp,%ebp
c010fe43:	83 ec 38             	sub    $0x38,%esp
c010fe46:	c7 45 e4 c8 3f 15 c0 	movl   $0xc0153fc8,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010fe4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fe50:	8b 40 04             	mov    0x4(%eax),%eax
c010fe53:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010fe56:	0f 94 c0             	sete   %al
c010fe59:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010fe5c:	85 c0                	test   %eax,%eax
c010fe5e:	0f 85 f1 00 00 00    	jne    c010ff55 <vfs_unmount_all+0x115>
        lock_vdev_list();
c010fe64:	e8 8b f8 ff ff       	call   c010f6f4 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010fe69:	c7 45 f0 c8 3f 15 c0 	movl   $0xc0153fc8,-0x10(%ebp)
c010fe70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fe73:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010fe76:	e9 ba 00 00 00       	jmp    c010ff35 <vfs_unmount_all+0xf5>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fe7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fe7e:	83 e8 10             	sub    $0x10,%eax
c010fe81:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010fe84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe87:	8b 40 0c             	mov    0xc(%eax),%eax
c010fe8a:	85 c0                	test   %eax,%eax
c010fe8c:	0f 84 a3 00 00 00    	je     c010ff35 <vfs_unmount_all+0xf5>
c010fe92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe95:	8b 40 08             	mov    0x8(%eax),%eax
c010fe98:	85 c0                	test   %eax,%eax
c010fe9a:	0f 84 95 00 00 00    	je     c010ff35 <vfs_unmount_all+0xf5>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fea0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fea3:	8b 40 08             	mov    0x8(%eax),%eax
c010fea6:	8b 50 70             	mov    0x70(%eax),%edx
c010fea9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010feac:	8b 40 08             	mov    0x8(%eax),%eax
c010feaf:	89 04 24             	mov    %eax,(%esp)
c010feb2:	ff d2                	call   *%edx
c010feb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010feb7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010febb:	74 1e                	je     c010fedb <vfs_unmount_all+0x9b>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010febd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fec0:	8b 00                	mov    (%eax),%eax
c010fec2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fec5:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fec9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fecd:	c7 04 24 90 8c 11 c0 	movl   $0xc0118c90,(%esp)
c010fed4:	e8 97 04 ff ff       	call   c0100370 <cprintf>
                        continue ;
c010fed9:	eb 5a                	jmp    c010ff35 <vfs_unmount_all+0xf5>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010fedb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fede:	8b 40 08             	mov    0x8(%eax),%eax
c010fee1:	8b 50 78             	mov    0x78(%eax),%edx
c010fee4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fee7:	8b 40 08             	mov    0x8(%eax),%eax
c010feea:	89 04 24             	mov    %eax,(%esp)
c010feed:	ff d2                	call   *%edx
c010feef:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fef6:	74 1e                	je     c010ff16 <vfs_unmount_all+0xd6>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010fef8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fefb:	8b 00                	mov    (%eax),%eax
c010fefd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ff00:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ff04:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ff08:	c7 04 24 b8 8c 11 c0 	movl   $0xc0118cb8,(%esp)
c010ff0f:	e8 5c 04 ff ff       	call   c0100370 <cprintf>
                        continue ;
c010ff14:	eb 1f                	jmp    c010ff35 <vfs_unmount_all+0xf5>
                    }
                    vdev->fs = NULL;
c010ff16:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ff19:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010ff20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ff23:	8b 00                	mov    (%eax),%eax
c010ff25:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ff29:	c7 04 24 7c 8c 11 c0 	movl   $0xc0118c7c,(%esp)
c010ff30:	e8 3b 04 ff ff       	call   c0100370 <cprintf>
c010ff35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ff38:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ff3b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ff3e:	8b 40 04             	mov    0x4(%eax),%eax
vfs_unmount_all(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010ff41:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ff44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ff47:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010ff4a:	0f 85 2b ff ff ff    	jne    c010fe7b <vfs_unmount_all+0x3b>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010ff50:	e8 b3 f7 ff ff       	call   c010f708 <unlock_vdev_list>
    }
    return 0;
c010ff55:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ff5a:	c9                   	leave  
c010ff5b:	c3                   	ret    

c010ff5c <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010ff5c:	55                   	push   %ebp
c010ff5d:	89 e5                	mov    %esp,%ebp
c010ff5f:	53                   	push   %ebx
c010ff60:	83 ec 44             	sub    $0x44,%esp
    bool can_write = 0;
c010ff63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010ff6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff6d:	83 e0 03             	and    $0x3,%eax
c010ff70:	85 c0                	test   %eax,%eax
c010ff72:	74 18                	je     c010ff8c <vfs_open+0x30>
c010ff74:	83 f8 02             	cmp    $0x2,%eax
c010ff77:	77 09                	ja     c010ff82 <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010ff79:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010ff80:	eb 0b                	jmp    c010ff8d <vfs_open+0x31>
    default:
        return -E_INVAL;
c010ff82:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ff87:	e9 ba 02 00 00       	jmp    c0110246 <vfs_open+0x2ea>
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010ff8c:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010ff8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff90:	83 e0 10             	and    $0x10,%eax
c010ff93:	85 c0                	test   %eax,%eax
c010ff95:	74 10                	je     c010ffa7 <vfs_open+0x4b>
        if (!can_write) {
c010ff97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ff9b:	75 0a                	jne    c010ffa7 <vfs_open+0x4b>
            return -E_INVAL;
c010ff9d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ffa2:	e9 9f 02 00 00       	jmp    c0110246 <vfs_open+0x2ea>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010ffa7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffaa:	83 e0 08             	and    $0x8,%eax
c010ffad:	85 c0                	test   %eax,%eax
c010ffaf:	0f 95 c0             	setne  %al
c010ffb2:	0f b6 c0             	movzbl %al,%eax
c010ffb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010ffb8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffbb:	83 e0 04             	and    $0x4,%eax
c010ffbe:	85 c0                	test   %eax,%eax
c010ffc0:	0f 95 c0             	setne  %al
c010ffc3:	0f b6 c0             	movzbl %al,%eax
c010ffc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010ffc9:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010ffcc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ffd0:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffd3:	89 04 24             	mov    %eax,(%esp)
c010ffd6:	e8 71 04 00 00       	call   c011044c <vfs_lookup>
c010ffdb:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010ffde:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ffe2:	0f 84 cc 00 00 00    	je     c01100b4 <vfs_open+0x158>
        if (ret == -16 && (create)) {
c010ffe8:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010ffec:	0f 85 ba 00 00 00    	jne    c01100ac <vfs_open+0x150>
c010fff2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fff6:	0f 84 b0 00 00 00    	je     c01100ac <vfs_open+0x150>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010fffc:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ffff:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110003:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0110006:	89 44 24 04          	mov    %eax,0x4(%esp)
c011000a:	8b 45 08             	mov    0x8(%ebp),%eax
c011000d:	89 04 24             	mov    %eax,(%esp)
c0110010:	e8 15 05 00 00       	call   c011052a <vfs_lookup_parent>
c0110015:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110018:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011001c:	74 08                	je     c0110026 <vfs_open+0xca>
                return ret;
c011001e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110021:	e9 20 02 00 00       	jmp    c0110246 <vfs_open+0x2ea>
            }
            ret = vop_create(dir, name, excl, &node);
c0110026:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0110029:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011002c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0110030:	74 17                	je     c0110049 <vfs_open+0xed>
c0110032:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110035:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110038:	85 c0                	test   %eax,%eax
c011003a:	74 0d                	je     c0110049 <vfs_open+0xed>
c011003c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011003f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110042:	8b 40 34             	mov    0x34(%eax),%eax
c0110045:	85 c0                	test   %eax,%eax
c0110047:	75 24                	jne    c011006d <vfs_open+0x111>
c0110049:	c7 44 24 0c e4 8c 11 	movl   $0xc0118ce4,0xc(%esp)
c0110050:	c0 
c0110051:	c7 44 24 08 33 8d 11 	movl   $0xc0118d33,0x8(%esp)
c0110058:	c0 
c0110059:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0110060:	00 
c0110061:	c7 04 24 48 8d 11 c0 	movl   $0xc0118d48,(%esp)
c0110068:	e8 3f 0e ff ff       	call   c0100eac <__panic>
c011006d:	c7 44 24 04 5e 8d 11 	movl   $0xc0118d5e,0x4(%esp)
c0110074:	c0 
c0110075:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110078:	89 04 24             	mov    %eax,(%esp)
c011007b:	e8 fd f3 ff ff       	call   c010f47d <inode_check>
c0110080:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110083:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110086:	8b 58 34             	mov    0x34(%eax),%ebx
c0110089:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c011008c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011008f:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0110092:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0110096:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0110099:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c011009d:	89 54 24 04          	mov    %edx,0x4(%esp)
c01100a1:	89 04 24             	mov    %eax,(%esp)
c01100a4:	ff d3                	call   *%ebx
c01100a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c01100a9:	90                   	nop
c01100aa:	eb 1e                	jmp    c01100ca <vfs_open+0x16e>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c01100ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01100af:	e9 92 01 00 00       	jmp    c0110246 <vfs_open+0x2ea>
    } else if (excl && create) {
c01100b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01100b8:	74 10                	je     c01100ca <vfs_open+0x16e>
c01100ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01100be:	74 0a                	je     c01100ca <vfs_open+0x16e>
        return -E_EXISTS;
c01100c0:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c01100c5:	e9 7c 01 00 00       	jmp    c0110246 <vfs_open+0x2ea>
    }
    assert(node != NULL);
c01100ca:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01100cd:	85 c0                	test   %eax,%eax
c01100cf:	75 24                	jne    c01100f5 <vfs_open+0x199>
c01100d1:	c7 44 24 0c 65 8d 11 	movl   $0xc0118d65,0xc(%esp)
c01100d8:	c0 
c01100d9:	c7 44 24 08 33 8d 11 	movl   $0xc0118d33,0x8(%esp)
c01100e0:	c0 
c01100e1:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
c01100e8:	00 
c01100e9:	c7 04 24 48 8d 11 c0 	movl   $0xc0118d48,(%esp)
c01100f0:	e8 b7 0d ff ff       	call   c0100eac <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c01100f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01100f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01100fb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01100ff:	74 17                	je     c0110118 <vfs_open+0x1bc>
c0110101:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110104:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110107:	85 c0                	test   %eax,%eax
c0110109:	74 0d                	je     c0110118 <vfs_open+0x1bc>
c011010b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011010e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110111:	8b 40 04             	mov    0x4(%eax),%eax
c0110114:	85 c0                	test   %eax,%eax
c0110116:	75 24                	jne    c011013c <vfs_open+0x1e0>
c0110118:	c7 44 24 0c 74 8d 11 	movl   $0xc0118d74,0xc(%esp)
c011011f:	c0 
c0110120:	c7 44 24 08 33 8d 11 	movl   $0xc0118d33,0x8(%esp)
c0110127:	c0 
c0110128:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c011012f:	00 
c0110130:	c7 04 24 48 8d 11 c0 	movl   $0xc0118d48,(%esp)
c0110137:	e8 70 0d ff ff       	call   c0100eac <__panic>
c011013c:	c7 44 24 04 c1 8d 11 	movl   $0xc0118dc1,0x4(%esp)
c0110143:	c0 
c0110144:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110147:	89 04 24             	mov    %eax,(%esp)
c011014a:	e8 2e f3 ff ff       	call   c010f47d <inode_check>
c011014f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110152:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110155:	8b 48 04             	mov    0x4(%eax),%ecx
c0110158:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011015b:	8b 55 0c             	mov    0xc(%ebp),%edx
c011015e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110162:	89 04 24             	mov    %eax,(%esp)
c0110165:	ff d1                	call   *%ecx
c0110167:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011016a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011016e:	74 13                	je     c0110183 <vfs_open+0x227>
        vop_ref_dec(node);
c0110170:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110173:	89 04 24             	mov    %eax,(%esp)
c0110176:	e8 14 f1 ff ff       	call   c010f28f <inode_ref_dec>
        return ret;
c011017b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011017e:	e9 c3 00 00 00       	jmp    c0110246 <vfs_open+0x2ea>
    }

    vop_open_inc(node);
c0110183:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110186:	89 04 24             	mov    %eax,(%esp)
c0110189:	e8 ee f1 ff ff       	call   c010f37c <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
c011018e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110191:	83 e0 10             	and    $0x10,%eax
c0110194:	85 c0                	test   %eax,%eax
c0110196:	75 0a                	jne    c01101a2 <vfs_open+0x246>
c0110198:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011019c:	0f 84 97 00 00 00    	je     c0110239 <vfs_open+0x2dd>
        if ((ret = vop_truncate(node, 0)) != 0) {
c01101a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01101a5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01101a8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01101ac:	74 17                	je     c01101c5 <vfs_open+0x269>
c01101ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01101b1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01101b4:	85 c0                	test   %eax,%eax
c01101b6:	74 0d                	je     c01101c5 <vfs_open+0x269>
c01101b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01101bb:	8b 40 3c             	mov    0x3c(%eax),%eax
c01101be:	8b 40 30             	mov    0x30(%eax),%eax
c01101c1:	85 c0                	test   %eax,%eax
c01101c3:	75 24                	jne    c01101e9 <vfs_open+0x28d>
c01101c5:	c7 44 24 0c c8 8d 11 	movl   $0xc0118dc8,0xc(%esp)
c01101cc:	c0 
c01101cd:	c7 44 24 08 33 8d 11 	movl   $0xc0118d33,0x8(%esp)
c01101d4:	c0 
c01101d5:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01101dc:	00 
c01101dd:	c7 04 24 48 8d 11 c0 	movl   $0xc0118d48,(%esp)
c01101e4:	e8 c3 0c ff ff       	call   c0100eac <__panic>
c01101e9:	c7 44 24 04 19 8e 11 	movl   $0xc0118e19,0x4(%esp)
c01101f0:	c0 
c01101f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01101f4:	89 04 24             	mov    %eax,(%esp)
c01101f7:	e8 81 f2 ff ff       	call   c010f47d <inode_check>
c01101fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01101ff:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110202:	8b 50 30             	mov    0x30(%eax),%edx
c0110205:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110208:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011020f:	00 
c0110210:	89 04 24             	mov    %eax,(%esp)
c0110213:	ff d2                	call   *%edx
c0110215:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110218:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011021c:	74 1b                	je     c0110239 <vfs_open+0x2dd>
            vop_open_dec(node);
c011021e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110221:	89 04 24             	mov    %eax,(%esp)
c0110224:	e8 6d f1 ff ff       	call   c010f396 <inode_open_dec>
            vop_ref_dec(node);
c0110229:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011022c:	89 04 24             	mov    %eax,(%esp)
c011022f:	e8 5b f0 ff ff       	call   c010f28f <inode_ref_dec>
            return ret;
c0110234:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110237:	eb 0d                	jmp    c0110246 <vfs_open+0x2ea>
        }
    }
    *node_store = node;
c0110239:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011023c:	8b 45 10             	mov    0x10(%ebp),%eax
c011023f:	89 10                	mov    %edx,(%eax)
    return 0;
c0110241:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110246:	83 c4 44             	add    $0x44,%esp
c0110249:	5b                   	pop    %ebx
c011024a:	5d                   	pop    %ebp
c011024b:	c3                   	ret    

c011024c <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c011024c:	55                   	push   %ebp
c011024d:	89 e5                	mov    %esp,%ebp
c011024f:	83 ec 18             	sub    $0x18,%esp
    vop_open_dec(node);
c0110252:	8b 45 08             	mov    0x8(%ebp),%eax
c0110255:	89 04 24             	mov    %eax,(%esp)
c0110258:	e8 39 f1 ff ff       	call   c010f396 <inode_open_dec>
    vop_ref_dec(node);
c011025d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110260:	89 04 24             	mov    %eax,(%esp)
c0110263:	e8 27 f0 ff ff       	call   c010f28f <inode_ref_dec>
    return 0;
c0110268:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011026d:	c9                   	leave  
c011026e:	c3                   	ret    

c011026f <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c011026f:	55                   	push   %ebp
c0110270:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110272:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110277:	5d                   	pop    %ebp
c0110278:	c3                   	ret    

c0110279 <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c0110279:	55                   	push   %ebp
c011027a:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011027c:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110281:	5d                   	pop    %ebp
c0110282:	c3                   	ret    

c0110283 <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c0110283:	55                   	push   %ebp
c0110284:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110286:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011028b:	5d                   	pop    %ebp
c011028c:	c3                   	ret    

c011028d <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c011028d:	55                   	push   %ebp
c011028e:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110290:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110295:	5d                   	pop    %ebp
c0110296:	c3                   	ret    

c0110297 <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c0110297:	55                   	push   %ebp
c0110298:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011029a:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011029f:	5d                   	pop    %ebp
c01102a0:	c3                   	ret    

c01102a1 <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c01102a1:	55                   	push   %ebp
c01102a2:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01102a4:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01102a9:	5d                   	pop    %ebp
c01102aa:	c3                   	ret    
	...

c01102ac <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c01102ac:	55                   	push   %ebp
c01102ad:	89 e5                	mov    %esp,%ebp
c01102af:	83 ec 38             	sub    $0x38,%esp
    int i, slash = -1, colon = -1;
c01102b2:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c01102b9:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c01102c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01102c7:	eb 2e                	jmp    c01102f7 <get_device+0x4b>
        if (path[i] == ':') { colon = i; break; }
c01102c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102cc:	03 45 08             	add    0x8(%ebp),%eax
c01102cf:	0f b6 00             	movzbl (%eax),%eax
c01102d2:	3c 3a                	cmp    $0x3a,%al
c01102d4:	75 08                	jne    c01102de <get_device+0x32>
c01102d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01102dc:	eb 26                	jmp    c0110304 <get_device+0x58>
        if (path[i] == '/') { slash = i; break; }
c01102de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102e1:	03 45 08             	add    0x8(%ebp),%eax
c01102e4:	0f b6 00             	movzbl (%eax),%eax
c01102e7:	3c 2f                	cmp    $0x2f,%al
c01102e9:	75 08                	jne    c01102f3 <get_device+0x47>
c01102eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01102f1:	eb 11                	jmp    c0110304 <get_device+0x58>
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c01102f3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01102f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102fa:	03 45 08             	add    0x8(%ebp),%eax
c01102fd:	0f b6 00             	movzbl (%eax),%eax
c0110300:	84 c0                	test   %al,%al
c0110302:	75 c5                	jne    c01102c9 <get_device+0x1d>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c0110304:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110308:	79 1e                	jns    c0110328 <get_device+0x7c>
c011030a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011030e:	74 18                	je     c0110328 <get_device+0x7c>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c0110310:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110313:	8b 55 08             	mov    0x8(%ebp),%edx
c0110316:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c0110318:	8b 45 10             	mov    0x10(%ebp),%eax
c011031b:	89 04 24             	mov    %eax,(%esp)
c011031e:	e8 aa 02 00 00       	call   c01105cd <vfs_get_curdir>
c0110323:	e9 22 01 00 00       	jmp    c011044a <get_device+0x19e>
    }
    if (colon > 0) {
c0110328:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011032c:	7e 3e                	jle    c011036c <get_device+0xc0>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c011032e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110331:	03 45 08             	add    0x8(%ebp),%eax
c0110334:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c0110337:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c011033b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011033e:	03 45 08             	add    0x8(%ebp),%eax
c0110341:	0f b6 00             	movzbl (%eax),%eax
c0110344:	3c 2f                	cmp    $0x2f,%al
c0110346:	74 ef                	je     c0110337 <get_device+0x8b>
        *subpath = path + colon;
c0110348:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011034b:	89 c2                	mov    %eax,%edx
c011034d:	03 55 08             	add    0x8(%ebp),%edx
c0110350:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110353:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c0110355:	8b 45 10             	mov    0x10(%ebp),%eax
c0110358:	89 44 24 04          	mov    %eax,0x4(%esp)
c011035c:	8b 45 08             	mov    0x8(%ebp),%eax
c011035f:	89 04 24             	mov    %eax,(%esp)
c0110362:	e8 65 f4 ff ff       	call   c010f7cc <vfs_get_root>
c0110367:	e9 de 00 00 00       	jmp    c011044a <get_device+0x19e>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c011036c:	8b 45 08             	mov    0x8(%ebp),%eax
c011036f:	0f b6 00             	movzbl (%eax),%eax
c0110372:	3c 2f                	cmp    $0x2f,%al
c0110374:	75 20                	jne    c0110396 <get_device+0xea>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c0110376:	8b 45 10             	mov    0x10(%ebp),%eax
c0110379:	89 04 24             	mov    %eax,(%esp)
c011037c:	e8 1b f3 ff ff       	call   c010f69c <vfs_get_bootfs>
c0110381:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110384:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110388:	0f 84 a1 00 00 00    	je     c011042f <get_device+0x183>
            return ret;
c011038e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110391:	e9 b4 00 00 00       	jmp    c011044a <get_device+0x19e>
        }
    }
    else {
        assert(*path == ':');
c0110396:	8b 45 08             	mov    0x8(%ebp),%eax
c0110399:	0f b6 00             	movzbl (%eax),%eax
c011039c:	3c 3a                	cmp    $0x3a,%al
c011039e:	74 24                	je     c01103c4 <get_device+0x118>
c01103a0:	c7 44 24 0c 24 8e 11 	movl   $0xc0118e24,0xc(%esp)
c01103a7:	c0 
c01103a8:	c7 44 24 08 31 8e 11 	movl   $0xc0118e31,0x8(%esp)
c01103af:	c0 
c01103b0:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c01103b7:	00 
c01103b8:	c7 04 24 46 8e 11 c0 	movl   $0xc0118e46,(%esp)
c01103bf:	e8 e8 0a ff ff       	call   c0100eac <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c01103c4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01103c7:	89 04 24             	mov    %eax,(%esp)
c01103ca:	e8 fe 01 00 00       	call   c01105cd <vfs_get_curdir>
c01103cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01103d2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01103d6:	74 05                	je     c01103dd <get_device+0x131>
            return ret;
c01103d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01103db:	eb 6d                	jmp    c011044a <get_device+0x19e>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c01103dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01103e0:	8b 40 38             	mov    0x38(%eax),%eax
c01103e3:	85 c0                	test   %eax,%eax
c01103e5:	75 24                	jne    c011040b <get_device+0x15f>
c01103e7:	c7 44 24 0c 5e 8e 11 	movl   $0xc0118e5e,0xc(%esp)
c01103ee:	c0 
c01103ef:	c7 44 24 08 31 8e 11 	movl   $0xc0118e31,0x8(%esp)
c01103f6:	c0 
c01103f7:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c01103fe:	00 
c01103ff:	c7 04 24 46 8e 11 c0 	movl   $0xc0118e46,(%esp)
c0110406:	e8 a1 0a ff ff       	call   c0100eac <__panic>
        *node_store = fsop_get_root(node->in_fs);
c011040b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011040e:	8b 40 38             	mov    0x38(%eax),%eax
c0110411:	8b 50 74             	mov    0x74(%eax),%edx
c0110414:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110417:	8b 40 38             	mov    0x38(%eax),%eax
c011041a:	89 04 24             	mov    %eax,(%esp)
c011041d:	ff d2                	call   *%edx
c011041f:	8b 55 10             	mov    0x10(%ebp),%edx
c0110422:	89 02                	mov    %eax,(%edx)
        vop_ref_dec(node);
c0110424:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110427:	89 04 24             	mov    %eax,(%esp)
c011042a:	e8 60 ee ff ff       	call   c010f28f <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c011042f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0110433:	8b 45 08             	mov    0x8(%ebp),%eax
c0110436:	0f b6 00             	movzbl (%eax),%eax
c0110439:	3c 2f                	cmp    $0x2f,%al
c011043b:	74 f2                	je     c011042f <get_device+0x183>
    *subpath = path;
c011043d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110440:	8b 55 08             	mov    0x8(%ebp),%edx
c0110443:	89 10                	mov    %edx,(%eax)
    return 0;
c0110445:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011044a:	c9                   	leave  
c011044b:	c3                   	ret    

c011044c <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c011044c:	55                   	push   %ebp
c011044d:	89 e5                	mov    %esp,%ebp
c011044f:	53                   	push   %ebx
c0110450:	83 ec 24             	sub    $0x24,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c0110453:	8b 45 08             	mov    0x8(%ebp),%eax
c0110456:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0110459:	89 54 24 08          	mov    %edx,0x8(%esp)
c011045d:	8d 55 08             	lea    0x8(%ebp),%edx
c0110460:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110464:	89 04 24             	mov    %eax,(%esp)
c0110467:	e8 40 fe ff ff       	call   c01102ac <get_device>
c011046c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011046f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110473:	74 08                	je     c011047d <vfs_lookup+0x31>
        return ret;
c0110475:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110478:	e9 a7 00 00 00       	jmp    c0110524 <vfs_lookup+0xd8>
    }
    if (*path != '\0') {
c011047d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110480:	0f b6 00             	movzbl (%eax),%eax
c0110483:	84 c0                	test   %al,%al
c0110485:	0f 84 8c 00 00 00    	je     c0110517 <vfs_lookup+0xcb>
        ret = vop_lookup(node, path, node_store);
c011048b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011048e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110491:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110495:	74 17                	je     c01104ae <vfs_lookup+0x62>
c0110497:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011049a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011049d:	85 c0                	test   %eax,%eax
c011049f:	74 0d                	je     c01104ae <vfs_lookup+0x62>
c01104a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104a4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104a7:	8b 40 38             	mov    0x38(%eax),%eax
c01104aa:	85 c0                	test   %eax,%eax
c01104ac:	75 24                	jne    c01104d2 <vfs_lookup+0x86>
c01104ae:	c7 44 24 0c 74 8e 11 	movl   $0xc0118e74,0xc(%esp)
c01104b5:	c0 
c01104b6:	c7 44 24 08 31 8e 11 	movl   $0xc0118e31,0x8(%esp)
c01104bd:	c0 
c01104be:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c01104c5:	00 
c01104c6:	c7 04 24 46 8e 11 c0 	movl   $0xc0118e46,(%esp)
c01104cd:	e8 da 09 ff ff       	call   c0100eac <__panic>
c01104d2:	c7 44 24 04 c3 8e 11 	movl   $0xc0118ec3,0x4(%esp)
c01104d9:	c0 
c01104da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104dd:	89 04 24             	mov    %eax,(%esp)
c01104e0:	e8 98 ef ff ff       	call   c010f47d <inode_check>
c01104e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104e8:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104eb:	8b 58 38             	mov    0x38(%eax),%ebx
c01104ee:	8b 55 08             	mov    0x8(%ebp),%edx
c01104f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01104f4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01104f7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01104fb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01104ff:	89 04 24             	mov    %eax,(%esp)
c0110502:	ff d3                	call   *%ebx
c0110504:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c0110507:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011050a:	89 04 24             	mov    %eax,(%esp)
c011050d:	e8 7d ed ff ff       	call   c010f28f <inode_ref_dec>
        return ret;
c0110512:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110515:	eb 0d                	jmp    c0110524 <vfs_lookup+0xd8>
    }
    *node_store = node;
c0110517:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011051a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011051d:	89 10                	mov    %edx,(%eax)
    return 0;
c011051f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110524:	83 c4 24             	add    $0x24,%esp
c0110527:	5b                   	pop    %ebx
c0110528:	5d                   	pop    %ebp
c0110529:	c3                   	ret    

c011052a <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c011052a:	55                   	push   %ebp
c011052b:	89 e5                	mov    %esp,%ebp
c011052d:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c0110530:	8b 45 08             	mov    0x8(%ebp),%eax
c0110533:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0110536:	89 54 24 08          	mov    %edx,0x8(%esp)
c011053a:	8d 55 08             	lea    0x8(%ebp),%edx
c011053d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110541:	89 04 24             	mov    %eax,(%esp)
c0110544:	e8 63 fd ff ff       	call   c01102ac <get_device>
c0110549:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011054c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110550:	74 05                	je     c0110557 <vfs_lookup_parent+0x2d>
        return ret;
c0110552:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110555:	eb 15                	jmp    c011056c <vfs_lookup_parent+0x42>
    }
    *endp = path;
c0110557:	8b 55 08             	mov    0x8(%ebp),%edx
c011055a:	8b 45 10             	mov    0x10(%ebp),%eax
c011055d:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c011055f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110562:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110565:	89 10                	mov    %edx,(%eax)
    return 0;
c0110567:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011056c:	c9                   	leave  
c011056d:	c3                   	ret    
	...

c0110570 <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c0110570:	55                   	push   %ebp
c0110571:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c0110573:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c0110578:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c011057e:	8b 00                	mov    (%eax),%eax
}
c0110580:	5d                   	pop    %ebp
c0110581:	c3                   	ret    

c0110582 <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c0110582:	55                   	push   %ebp
c0110583:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c0110585:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c011058a:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0110590:	8b 55 08             	mov    0x8(%ebp),%edx
c0110593:	89 10                	mov    %edx,(%eax)
}
c0110595:	5d                   	pop    %ebp
c0110596:	c3                   	ret    

c0110597 <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c0110597:	55                   	push   %ebp
c0110598:	89 e5                	mov    %esp,%ebp
c011059a:	83 ec 18             	sub    $0x18,%esp
    lock_files(current->filesp);
c011059d:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c01105a2:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01105a8:	89 04 24             	mov    %eax,(%esp)
c01105ab:	e8 1b ac ff ff       	call   c010b1cb <lock_files>
}
c01105b0:	c9                   	leave  
c01105b1:	c3                   	ret    

c01105b2 <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c01105b2:	55                   	push   %ebp
c01105b3:	89 e5                	mov    %esp,%ebp
c01105b5:	83 ec 18             	sub    $0x18,%esp
    unlock_files(current->filesp);
c01105b8:	a1 28 1f 15 c0       	mov    0xc0151f28,%eax
c01105bd:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01105c3:	89 04 24             	mov    %eax,(%esp)
c01105c6:	e8 16 ac ff ff       	call   c010b1e1 <unlock_files>
}
c01105cb:	c9                   	leave  
c01105cc:	c3                   	ret    

c01105cd <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c01105cd:	55                   	push   %ebp
c01105ce:	89 e5                	mov    %esp,%ebp
c01105d0:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c01105d3:	e8 98 ff ff ff       	call   c0110570 <get_cwd_nolock>
c01105d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01105db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01105df:	74 1a                	je     c01105fb <vfs_get_curdir+0x2e>
        vop_ref_inc(node);
c01105e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01105e4:	89 04 24             	mov    %eax,(%esp)
c01105e7:	e8 89 ec ff ff       	call   c010f275 <inode_ref_inc>
        *dir_store = node;
c01105ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01105ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01105f2:	89 10                	mov    %edx,(%eax)
        return 0;
c01105f4:	b8 00 00 00 00       	mov    $0x0,%eax
c01105f9:	eb 05                	jmp    c0110600 <vfs_get_curdir+0x33>
    }
    return -E_NOENT;
c01105fb:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0110600:	c9                   	leave  
c0110601:	c3                   	ret    

c0110602 <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c0110602:	55                   	push   %ebp
c0110603:	89 e5                	mov    %esp,%ebp
c0110605:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c0110608:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c011060f:	e8 83 ff ff ff       	call   c0110597 <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c0110614:	e8 57 ff ff ff       	call   c0110570 <get_cwd_nolock>
c0110619:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011061c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011061f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0110622:	0f 84 c7 00 00 00    	je     c01106ef <vfs_set_curdir+0xed>
        if (dir != NULL) {
c0110628:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011062c:	0f 84 9e 00 00 00    	je     c01106d0 <vfs_set_curdir+0xce>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c0110632:	8b 45 08             	mov    0x8(%ebp),%eax
c0110635:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110638:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011063c:	74 17                	je     c0110655 <vfs_set_curdir+0x53>
c011063e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110641:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110644:	85 c0                	test   %eax,%eax
c0110646:	74 0d                	je     c0110655 <vfs_set_curdir+0x53>
c0110648:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011064b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011064e:	8b 40 28             	mov    0x28(%eax),%eax
c0110651:	85 c0                	test   %eax,%eax
c0110653:	75 24                	jne    c0110679 <vfs_set_curdir+0x77>
c0110655:	c7 44 24 0c cc 8e 11 	movl   $0xc0118ecc,0xc(%esp)
c011065c:	c0 
c011065d:	c7 44 24 08 1c 8f 11 	movl   $0xc0118f1c,0x8(%esp)
c0110664:	c0 
c0110665:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c011066c:	00 
c011066d:	c7 04 24 31 8f 11 c0 	movl   $0xc0118f31,(%esp)
c0110674:	e8 33 08 ff ff       	call   c0100eac <__panic>
c0110679:	c7 44 24 04 47 8f 11 	movl   $0xc0118f47,0x4(%esp)
c0110680:	c0 
c0110681:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110684:	89 04 24             	mov    %eax,(%esp)
c0110687:	e8 f1 ed ff ff       	call   c010f47d <inode_check>
c011068c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011068f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110692:	8b 50 28             	mov    0x28(%eax),%edx
c0110695:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0110698:	89 44 24 04          	mov    %eax,0x4(%esp)
c011069c:	8b 45 08             	mov    0x8(%ebp),%eax
c011069f:	89 04 24             	mov    %eax,(%esp)
c01106a2:	ff d2                	call   *%edx
c01106a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01106a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01106ab:	75 41                	jne    c01106ee <vfs_set_curdir+0xec>
                goto out;
            }
            if (!S_ISDIR(type)) {
c01106ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01106b0:	25 00 70 00 00       	and    $0x7000,%eax
c01106b5:	3d 00 20 00 00       	cmp    $0x2000,%eax
c01106ba:	74 09                	je     c01106c5 <vfs_set_curdir+0xc3>
                ret = -E_NOTDIR;
c01106bc:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c01106c3:	eb 2a                	jmp    c01106ef <vfs_set_curdir+0xed>
            }
            vop_ref_inc(dir);
c01106c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01106c8:	89 04 24             	mov    %eax,(%esp)
c01106cb:	e8 a5 eb ff ff       	call   c010f275 <inode_ref_inc>
        }
        set_cwd_nolock(dir);
c01106d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01106d3:	89 04 24             	mov    %eax,(%esp)
c01106d6:	e8 a7 fe ff ff       	call   c0110582 <set_cwd_nolock>
        if (old_dir != NULL) {
c01106db:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01106df:	74 0e                	je     c01106ef <vfs_set_curdir+0xed>
            vop_ref_dec(old_dir);
c01106e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01106e4:	89 04 24             	mov    %eax,(%esp)
c01106e7:	e8 a3 eb ff ff       	call   c010f28f <inode_ref_dec>
c01106ec:	eb 01                	jmp    c01106ef <vfs_set_curdir+0xed>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
        if (dir != NULL) {
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
                goto out;
c01106ee:	90                   	nop
        if (old_dir != NULL) {
            vop_ref_dec(old_dir);
        }
    }
out:
    unlock_cfs();
c01106ef:	e8 be fe ff ff       	call   c01105b2 <unlock_cfs>
    return ret;
c01106f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01106f7:	c9                   	leave  
c01106f8:	c3                   	ret    

c01106f9 <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c01106f9:	55                   	push   %ebp
c01106fa:	89 e5                	mov    %esp,%ebp
c01106fc:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c01106ff:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0110702:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110706:	8b 45 08             	mov    0x8(%ebp),%eax
c0110709:	89 04 24             	mov    %eax,(%esp)
c011070c:	e8 3b fd ff ff       	call   c011044c <vfs_lookup>
c0110711:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110714:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110718:	75 19                	jne    c0110733 <vfs_chdir+0x3a>
        ret = vfs_set_curdir(node);
c011071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011071d:	89 04 24             	mov    %eax,(%esp)
c0110720:	e8 dd fe ff ff       	call   c0110602 <vfs_set_curdir>
c0110725:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c0110728:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011072b:	89 04 24             	mov    %eax,(%esp)
c011072e:	e8 5c eb ff ff       	call   c010f28f <inode_ref_dec>
    }
    return ret;
c0110733:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110736:	c9                   	leave  
c0110737:	c3                   	ret    

c0110738 <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c0110738:	55                   	push   %ebp
c0110739:	89 e5                	mov    %esp,%ebp
c011073b:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c011073e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0110741:	89 04 24             	mov    %eax,(%esp)
c0110744:	e8 84 fe ff ff       	call   c01105cd <vfs_get_curdir>
c0110749:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011074c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110750:	74 08                	je     c011075a <vfs_getcwd+0x22>
        return ret;
c0110752:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110755:	e9 3d 01 00 00       	jmp    c0110897 <vfs_getcwd+0x15f>
    }
    assert(node->in_fs != NULL);
c011075a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011075d:	8b 40 38             	mov    0x38(%eax),%eax
c0110760:	85 c0                	test   %eax,%eax
c0110762:	75 24                	jne    c0110788 <vfs_getcwd+0x50>
c0110764:	c7 44 24 0c 4f 8f 11 	movl   $0xc0118f4f,0xc(%esp)
c011076b:	c0 
c011076c:	c7 44 24 08 1c 8f 11 	movl   $0xc0118f1c,0x8(%esp)
c0110773:	c0 
c0110774:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c011077b:	00 
c011077c:	c7 04 24 31 8f 11 c0 	movl   $0xc0118f31,(%esp)
c0110783:	e8 24 07 ff ff       	call   c0100eac <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c0110788:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011078b:	8b 40 38             	mov    0x38(%eax),%eax
c011078e:	89 04 24             	mov    %eax,(%esp)
c0110791:	e8 53 f1 ff ff       	call   c010f8e9 <vfs_get_devname>
c0110796:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c0110799:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011079c:	89 04 24             	mov    %eax,(%esp)
c011079f:	e8 70 4c 00 00       	call   c0115414 <strlen>
c01107a4:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01107ab:	00 
c01107ac:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01107b3:	00 
c01107b4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01107b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01107bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01107bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01107c2:	89 04 24             	mov    %eax,(%esp)
c01107c5:	e8 fc ac ff ff       	call   c010b4c6 <iobuf_move>
c01107ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01107cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01107d1:	0f 85 ae 00 00 00    	jne    c0110885 <vfs_getcwd+0x14d>
        goto out;
    }
    char colon = ':';
c01107d7:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c01107db:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01107e2:	00 
c01107e3:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01107ea:	00 
c01107eb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01107f2:	00 
c01107f3:	8d 45 e7             	lea    -0x19(%ebp),%eax
c01107f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01107fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01107fd:	89 04 24             	mov    %eax,(%esp)
c0110800:	e8 c1 ac ff ff       	call   c010b4c6 <iobuf_move>
c0110805:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110808:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011080c:	75 7a                	jne    c0110888 <vfs_getcwd+0x150>
        goto out;
    }
    ret = vop_namefile(node, iob);
c011080e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110811:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110814:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110818:	74 17                	je     c0110831 <vfs_getcwd+0xf9>
c011081a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011081d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110820:	85 c0                	test   %eax,%eax
c0110822:	74 0d                	je     c0110831 <vfs_getcwd+0xf9>
c0110824:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110827:	8b 40 3c             	mov    0x3c(%eax),%eax
c011082a:	8b 40 1c             	mov    0x1c(%eax),%eax
c011082d:	85 c0                	test   %eax,%eax
c011082f:	75 24                	jne    c0110855 <vfs_getcwd+0x11d>
c0110831:	c7 44 24 0c 64 8f 11 	movl   $0xc0118f64,0xc(%esp)
c0110838:	c0 
c0110839:	c7 44 24 08 1c 8f 11 	movl   $0xc0118f1c,0x8(%esp)
c0110840:	c0 
c0110841:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0110848:	00 
c0110849:	c7 04 24 31 8f 11 c0 	movl   $0xc0118f31,(%esp)
c0110850:	e8 57 06 ff ff       	call   c0100eac <__panic>
c0110855:	c7 44 24 04 b5 8f 11 	movl   $0xc0118fb5,0x4(%esp)
c011085c:	c0 
c011085d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110860:	89 04 24             	mov    %eax,(%esp)
c0110863:	e8 15 ec ff ff       	call   c010f47d <inode_check>
c0110868:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011086b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011086e:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0110871:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110874:	8b 55 08             	mov    0x8(%ebp),%edx
c0110877:	89 54 24 04          	mov    %edx,0x4(%esp)
c011087b:	89 04 24             	mov    %eax,(%esp)
c011087e:	ff d1                	call   *%ecx
c0110880:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110883:	eb 04                	jmp    c0110889 <vfs_getcwd+0x151>
    }
    assert(node->in_fs != NULL);

    const char *devname = vfs_get_devname(node->in_fs);
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
        goto out;
c0110885:	90                   	nop
c0110886:	eb 01                	jmp    c0110889 <vfs_getcwd+0x151>
    }
    char colon = ':';
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
        goto out;
c0110888:	90                   	nop
    }
    ret = vop_namefile(node, iob);

out:
    vop_ref_dec(node);
c0110889:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011088c:	89 04 24             	mov    %eax,(%esp)
c011088f:	e8 fb e9 ff ff       	call   c010f28f <inode_ref_dec>
    return ret;
c0110894:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110897:	c9                   	leave  
c0110898:	c3                   	ret    
c0110899:	00 00                	add    %al,(%eax)
	...

c011089c <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c011089c:	55                   	push   %ebp
c011089d:	89 e5                	mov    %esp,%ebp
c011089f:	83 ec 28             	sub    $0x28,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c01108a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108a5:	83 e0 3c             	and    $0x3c,%eax
c01108a8:	85 c0                	test   %eax,%eax
c01108aa:	74 07                	je     c01108b3 <dev_open+0x17>
        return -E_INVAL;
c01108ac:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01108b1:	eb 58                	jmp    c011090b <dev_open+0x6f>
    }
    struct device *dev = vop_info(node, device);
c01108b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01108b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01108b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01108bd:	74 0d                	je     c01108cc <dev_open+0x30>
c01108bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108c2:	8b 40 2c             	mov    0x2c(%eax),%eax
c01108c5:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01108ca:	74 24                	je     c01108f0 <dev_open+0x54>
c01108cc:	c7 44 24 0c c0 8f 11 	movl   $0xc0118fc0,0xc(%esp)
c01108d3:	c0 
c01108d4:	c7 44 24 08 f3 8f 11 	movl   $0xc0118ff3,0x8(%esp)
c01108db:	c0 
c01108dc:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c01108e3:	00 
c01108e4:	c7 04 24 08 90 11 c0 	movl   $0xc0119008,(%esp)
c01108eb:	e8 bc 05 ff ff       	call   c0100eac <__panic>
c01108f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c01108f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01108f9:	8b 50 08             	mov    0x8(%eax),%edx
c01108fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110903:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110906:	89 04 24             	mov    %eax,(%esp)
c0110909:	ff d2                	call   *%edx
}
c011090b:	c9                   	leave  
c011090c:	c3                   	ret    

c011090d <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c011090d:	55                   	push   %ebp
c011090e:	89 e5                	mov    %esp,%ebp
c0110910:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110913:	8b 45 08             	mov    0x8(%ebp),%eax
c0110916:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110919:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011091d:	74 0d                	je     c011092c <dev_close+0x1f>
c011091f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110922:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110925:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011092a:	74 24                	je     c0110950 <dev_close+0x43>
c011092c:	c7 44 24 0c c0 8f 11 	movl   $0xc0118fc0,0xc(%esp)
c0110933:	c0 
c0110934:	c7 44 24 08 f3 8f 11 	movl   $0xc0118ff3,0x8(%esp)
c011093b:	c0 
c011093c:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0110943:	00 
c0110944:	c7 04 24 08 90 11 c0 	movl   $0xc0119008,(%esp)
c011094b:	e8 5c 05 ff ff       	call   c0100eac <__panic>
c0110950:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110953:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c0110956:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110959:	8b 50 0c             	mov    0xc(%eax),%edx
c011095c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011095f:	89 04 24             	mov    %eax,(%esp)
c0110962:	ff d2                	call   *%edx
}
c0110964:	c9                   	leave  
c0110965:	c3                   	ret    

c0110966 <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c0110966:	55                   	push   %ebp
c0110967:	89 e5                	mov    %esp,%ebp
c0110969:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011096c:	8b 45 08             	mov    0x8(%ebp),%eax
c011096f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110972:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110976:	74 0d                	je     c0110985 <dev_read+0x1f>
c0110978:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011097b:	8b 40 2c             	mov    0x2c(%eax),%eax
c011097e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110983:	74 24                	je     c01109a9 <dev_read+0x43>
c0110985:	c7 44 24 0c c0 8f 11 	movl   $0xc0118fc0,0xc(%esp)
c011098c:	c0 
c011098d:	c7 44 24 08 f3 8f 11 	movl   $0xc0118ff3,0x8(%esp)
c0110994:	c0 
c0110995:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
c011099c:	00 
c011099d:	c7 04 24 08 90 11 c0 	movl   $0xc0119008,(%esp)
c01109a4:	e8 03 05 ff ff       	call   c0100eac <__panic>
c01109a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c01109af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109b2:	8b 50 10             	mov    0x10(%eax),%edx
c01109b5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01109bc:	00 
c01109bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01109c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01109c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109c7:	89 04 24             	mov    %eax,(%esp)
c01109ca:	ff d2                	call   *%edx
}
c01109cc:	c9                   	leave  
c01109cd:	c3                   	ret    

c01109ce <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c01109ce:	55                   	push   %ebp
c01109cf:	89 e5                	mov    %esp,%ebp
c01109d1:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01109d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01109d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01109da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01109de:	74 0d                	je     c01109ed <dev_write+0x1f>
c01109e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109e3:	8b 40 2c             	mov    0x2c(%eax),%eax
c01109e6:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01109eb:	74 24                	je     c0110a11 <dev_write+0x43>
c01109ed:	c7 44 24 0c c0 8f 11 	movl   $0xc0118fc0,0xc(%esp)
c01109f4:	c0 
c01109f5:	c7 44 24 08 f3 8f 11 	movl   $0xc0118ff3,0x8(%esp)
c01109fc:	c0 
c01109fd:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0110a04:	00 
c0110a05:	c7 04 24 08 90 11 c0 	movl   $0xc0119008,(%esp)
c0110a0c:	e8 9b 04 ff ff       	call   c0100eac <__panic>
c0110a11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a14:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c0110a17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a1a:	8b 50 10             	mov    0x10(%eax),%edx
c0110a1d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110a24:	00 
c0110a25:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a28:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110a2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a2f:	89 04 24             	mov    %eax,(%esp)
c0110a32:	ff d2                	call   *%edx
}
c0110a34:	c9                   	leave  
c0110a35:	c3                   	ret    

c0110a36 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c0110a36:	55                   	push   %ebp
c0110a37:	89 e5                	mov    %esp,%ebp
c0110a39:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110a3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a46:	74 0d                	je     c0110a55 <dev_ioctl+0x1f>
c0110a48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a4b:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110a4e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110a53:	74 24                	je     c0110a79 <dev_ioctl+0x43>
c0110a55:	c7 44 24 0c c0 8f 11 	movl   $0xc0118fc0,0xc(%esp)
c0110a5c:	c0 
c0110a5d:	c7 44 24 08 f3 8f 11 	movl   $0xc0118ff3,0x8(%esp)
c0110a64:	c0 
c0110a65:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
c0110a6c:	00 
c0110a6d:	c7 04 24 08 90 11 c0 	movl   $0xc0119008,(%esp)
c0110a74:	e8 33 04 ff ff       	call   c0100eac <__panic>
c0110a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c0110a7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a82:	8b 50 14             	mov    0x14(%eax),%edx
c0110a85:	8b 45 10             	mov    0x10(%ebp),%eax
c0110a88:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110a8c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110a93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a96:	89 04 24             	mov    %eax,(%esp)
c0110a99:	ff d2                	call   *%edx
}
c0110a9b:	c9                   	leave  
c0110a9c:	c3                   	ret    

c0110a9d <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c0110a9d:	55                   	push   %ebp
c0110a9e:	89 e5                	mov    %esp,%ebp
c0110aa0:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0110aa3:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0110aaa:	00 
c0110aab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110ab2:	00 
c0110ab3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ab6:	89 04 24             	mov    %eax,(%esp)
c0110ab9:	e8 b6 4c 00 00       	call   c0115774 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c0110abe:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ac1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110ac4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110ac8:	74 17                	je     c0110ae1 <dev_fstat+0x44>
c0110aca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110acd:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110ad0:	85 c0                	test   %eax,%eax
c0110ad2:	74 0d                	je     c0110ae1 <dev_fstat+0x44>
c0110ad4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ad7:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110ada:	8b 40 28             	mov    0x28(%eax),%eax
c0110add:	85 c0                	test   %eax,%eax
c0110adf:	75 24                	jne    c0110b05 <dev_fstat+0x68>
c0110ae1:	c7 44 24 0c 1c 90 11 	movl   $0xc011901c,0xc(%esp)
c0110ae8:	c0 
c0110ae9:	c7 44 24 08 f3 8f 11 	movl   $0xc0118ff3,0x8(%esp)
c0110af0:	c0 
c0110af1:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0110af8:	00 
c0110af9:	c7 04 24 08 90 11 c0 	movl   $0xc0119008,(%esp)
c0110b00:	e8 a7 03 ff ff       	call   c0100eac <__panic>
c0110b05:	c7 44 24 04 6c 90 11 	movl   $0xc011906c,0x4(%esp)
c0110b0c:	c0 
c0110b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b10:	89 04 24             	mov    %eax,(%esp)
c0110b13:	e8 65 e9 ff ff       	call   c010f47d <inode_check>
c0110b18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b1b:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110b1e:	8b 50 28             	mov    0x28(%eax),%edx
c0110b21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b24:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110b28:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b2b:	89 04 24             	mov    %eax,(%esp)
c0110b2e:	ff d2                	call   *%edx
c0110b30:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110b33:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110b37:	74 05                	je     c0110b3e <dev_fstat+0xa1>
        return ret;
c0110b39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b3c:	eb 72                	jmp    c0110bb0 <dev_fstat+0x113>
    }
    struct device *dev = vop_info(node, device);
c0110b3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b41:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110b44:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110b48:	74 0d                	je     c0110b57 <dev_fstat+0xba>
c0110b4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b4d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110b50:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110b55:	74 24                	je     c0110b7b <dev_fstat+0xde>
c0110b57:	c7 44 24 0c c0 8f 11 	movl   $0xc0118fc0,0xc(%esp)
c0110b5e:	c0 
c0110b5f:	c7 44 24 08 f3 8f 11 	movl   $0xc0118ff3,0x8(%esp)
c0110b66:	c0 
c0110b67:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0110b6e:	00 
c0110b6f:	c7 04 24 08 90 11 c0 	movl   $0xc0119008,(%esp)
c0110b76:	e8 31 03 ff ff       	call   c0100eac <__panic>
c0110b7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c0110b81:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b84:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c0110b8b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110b8e:	8b 10                	mov    (%eax),%edx
c0110b90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b93:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c0110b96:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b99:	8b 50 08             	mov    0x8(%eax),%edx
c0110b9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110b9f:	8b 40 04             	mov    0x4(%eax),%eax
c0110ba2:	0f af d0             	imul   %eax,%edx
c0110ba5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ba8:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0110bab:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110bb0:	c9                   	leave  
c0110bb1:	c3                   	ret    

c0110bb2 <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c0110bb2:	55                   	push   %ebp
c0110bb3:	89 e5                	mov    %esp,%ebp
c0110bb5:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110bb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0110bbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110bbe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110bc2:	74 0d                	je     c0110bd1 <dev_gettype+0x1f>
c0110bc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110bc7:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110bca:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110bcf:	74 24                	je     c0110bf5 <dev_gettype+0x43>
c0110bd1:	c7 44 24 0c c0 8f 11 	movl   $0xc0118fc0,0xc(%esp)
c0110bd8:	c0 
c0110bd9:	c7 44 24 08 f3 8f 11 	movl   $0xc0118ff3,0x8(%esp)
c0110be0:	c0 
c0110be1:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0110be8:	00 
c0110be9:	c7 04 24 08 90 11 c0 	movl   $0xc0119008,(%esp)
c0110bf0:	e8 b7 02 ff ff       	call   c0100eac <__panic>
c0110bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110bf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c0110bfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110bfe:	8b 00                	mov    (%eax),%eax
c0110c00:	85 c0                	test   %eax,%eax
c0110c02:	74 07                	je     c0110c0b <dev_gettype+0x59>
c0110c04:	b8 00 50 00 00       	mov    $0x5000,%eax
c0110c09:	eb 05                	jmp    c0110c10 <dev_gettype+0x5e>
c0110c0b:	b8 00 40 00 00       	mov    $0x4000,%eax
c0110c10:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110c13:	89 02                	mov    %eax,(%edx)
    return 0;
c0110c15:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110c1a:	c9                   	leave  
c0110c1b:	c3                   	ret    

c0110c1c <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c0110c1c:	55                   	push   %ebp
c0110c1d:	89 e5                	mov    %esp,%ebp
c0110c1f:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110c22:	8b 45 08             	mov    0x8(%ebp),%eax
c0110c25:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110c28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110c2c:	74 0d                	je     c0110c3b <dev_tryseek+0x1f>
c0110c2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c31:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110c34:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110c39:	74 24                	je     c0110c5f <dev_tryseek+0x43>
c0110c3b:	c7 44 24 0c c0 8f 11 	movl   $0xc0118fc0,0xc(%esp)
c0110c42:	c0 
c0110c43:	c7 44 24 08 f3 8f 11 	movl   $0xc0118ff3,0x8(%esp)
c0110c4a:	c0 
c0110c4b:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0110c52:	00 
c0110c53:	c7 04 24 08 90 11 c0 	movl   $0xc0119008,(%esp)
c0110c5a:	e8 4d 02 ff ff       	call   c0100eac <__panic>
c0110c5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c62:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c0110c65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c68:	8b 00                	mov    (%eax),%eax
c0110c6a:	85 c0                	test   %eax,%eax
c0110c6c:	74 38                	je     c0110ca6 <dev_tryseek+0x8a>
        if ((pos % dev->d_blocksize) == 0) {
c0110c6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c71:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110c74:	8b 4a 04             	mov    0x4(%edx),%ecx
c0110c77:	ba 00 00 00 00       	mov    $0x0,%edx
c0110c7c:	f7 f1                	div    %ecx
c0110c7e:	89 d0                	mov    %edx,%eax
c0110c80:	85 c0                	test   %eax,%eax
c0110c82:	75 22                	jne    c0110ca6 <dev_tryseek+0x8a>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c0110c84:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0110c88:	78 1c                	js     c0110ca6 <dev_tryseek+0x8a>
c0110c8a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110c8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c90:	8b 08                	mov    (%eax),%ecx
c0110c92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c95:	8b 40 04             	mov    0x4(%eax),%eax
c0110c98:	0f af c1             	imul   %ecx,%eax
c0110c9b:	39 c2                	cmp    %eax,%edx
c0110c9d:	73 07                	jae    c0110ca6 <dev_tryseek+0x8a>
                return 0;
c0110c9f:	b8 00 00 00 00       	mov    $0x0,%eax
c0110ca4:	eb 05                	jmp    c0110cab <dev_tryseek+0x8f>
            }
        }
    }
    return -E_INVAL;
c0110ca6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110cab:	c9                   	leave  
c0110cac:	c3                   	ret    

c0110cad <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c0110cad:	55                   	push   %ebp
c0110cae:	89 e5                	mov    %esp,%ebp
c0110cb0:	83 ec 18             	sub    $0x18,%esp
    if (*path != '\0') {
c0110cb3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110cb6:	0f b6 00             	movzbl (%eax),%eax
c0110cb9:	84 c0                	test   %al,%al
c0110cbb:	74 07                	je     c0110cc4 <dev_lookup+0x17>
        return -E_NOENT;
c0110cbd:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0110cc2:	eb 18                	jmp    c0110cdc <dev_lookup+0x2f>
    }
    vop_ref_inc(node);
c0110cc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0110cc7:	89 04 24             	mov    %eax,(%esp)
c0110cca:	e8 a6 e5 ff ff       	call   c010f275 <inode_ref_inc>
    *node_store = node;
c0110ccf:	8b 45 10             	mov    0x10(%ebp),%eax
c0110cd2:	8b 55 08             	mov    0x8(%ebp),%edx
c0110cd5:	89 10                	mov    %edx,(%eax)
    return 0;
c0110cd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110cdc:	c9                   	leave  
c0110cdd:	c3                   	ret    

c0110cde <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c0110cde:	55                   	push   %ebp
c0110cdf:	89 e5                	mov    %esp,%ebp
c0110ce1:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c0110ce4:	e8 9b 07 00 00       	call   c0111484 <dev_init_stdin>
    init_device(stdout);
c0110ce9:	e8 17 09 00 00       	call   c0111605 <dev_init_stdout>
    init_device(disk0);
c0110cee:	e8 26 04 00 00       	call   c0111119 <dev_init_disk0>
}
c0110cf3:	c9                   	leave  
c0110cf4:	c3                   	ret    

c0110cf5 <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c0110cf5:	55                   	push   %ebp
c0110cf6:	89 e5                	mov    %esp,%ebp
c0110cf8:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c0110cfb:	c7 04 24 34 12 00 00 	movl   $0x1234,(%esp)
c0110d02:	e8 93 e4 ff ff       	call   c010f19a <__alloc_inode>
c0110d07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110d0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110d0e:	74 1b                	je     c0110d2b <dev_create_inode+0x36>
        vop_init(node, &dev_node_ops, NULL);
c0110d10:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110d17:	00 
c0110d18:	c7 44 24 04 80 90 11 	movl   $0xc0119080,0x4(%esp)
c0110d1f:	c0 
c0110d20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d23:	89 04 24             	mov    %eax,(%esp)
c0110d26:	e8 98 e4 ff ff       	call   c010f1c3 <inode_init>
    }
    return node;
c0110d2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110d2e:	c9                   	leave  
c0110d2f:	c3                   	ret    

c0110d30 <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c0110d30:	55                   	push   %ebp
c0110d31:	89 e5                	mov    %esp,%ebp
c0110d33:	83 ec 18             	sub    $0x18,%esp
    down(&(disk0_sem));
c0110d36:	c7 04 24 e0 3f 15 c0 	movl   $0xc0153fe0,(%esp)
c0110d3d:	e8 fa 90 ff ff       	call   c0109e3c <down>
}
c0110d42:	c9                   	leave  
c0110d43:	c3                   	ret    

c0110d44 <unlock_disk0>:

static void
unlock_disk0(void) {
c0110d44:	55                   	push   %ebp
c0110d45:	89 e5                	mov    %esp,%ebp
c0110d47:	83 ec 18             	sub    $0x18,%esp
    up(&(disk0_sem));
c0110d4a:	c7 04 24 e0 3f 15 c0 	movl   $0xc0153fe0,(%esp)
c0110d51:	e8 cb 90 ff ff       	call   c0109e21 <up>
}
c0110d56:	c9                   	leave  
c0110d57:	c3                   	ret    

c0110d58 <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c0110d58:	55                   	push   %ebp
c0110d59:	89 e5                	mov    %esp,%ebp
    return 0;
c0110d5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110d60:	5d                   	pop    %ebp
c0110d61:	c3                   	ret    

c0110d62 <disk0_close>:

static int
disk0_close(struct device *dev) {
c0110d62:	55                   	push   %ebp
c0110d63:	89 e5                	mov    %esp,%ebp
    return 0;
c0110d65:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110d6a:	5d                   	pop    %ebp
c0110d6b:	c3                   	ret    

c0110d6c <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110d6c:	55                   	push   %ebp
c0110d6d:	89 e5                	mov    %esp,%ebp
c0110d6f:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110d72:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d75:	c1 e0 03             	shl    $0x3,%eax
c0110d78:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110d7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d7e:	c1 e0 03             	shl    $0x3,%eax
c0110d81:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110d84:	a1 dc 3f 15 c0       	mov    0xc0153fdc,%eax
c0110d89:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110d8c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110d90:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110d94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110d9b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110da2:	e8 aa 0f ff ff       	call   c0101d51 <ide_read_secs>
c0110da7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110daa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110dae:	74 3f                	je     c0110def <disk0_read_blks_nolock+0x83>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110db0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110db3:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110dba:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110dc1:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110dc8:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110dcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0110dcf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110dd3:	c7 44 24 08 c0 90 11 	movl   $0xc01190c0,0x8(%esp)
c0110dda:	c0 
c0110ddb:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0110de2:	00 
c0110de3:	c7 04 24 08 91 11 c0 	movl   $0xc0119108,(%esp)
c0110dea:	e8 bd 00 ff ff       	call   c0100eac <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110def:	c9                   	leave  
c0110df0:	c3                   	ret    

c0110df1 <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110df1:	55                   	push   %ebp
c0110df2:	89 e5                	mov    %esp,%ebp
c0110df4:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110df7:	8b 45 08             	mov    0x8(%ebp),%eax
c0110dfa:	c1 e0 03             	shl    $0x3,%eax
c0110dfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110e00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e03:	c1 e0 03             	shl    $0x3,%eax
c0110e06:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110e09:	a1 dc 3f 15 c0       	mov    0xc0153fdc,%eax
c0110e0e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110e11:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110e15:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110e19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e1c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110e20:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110e27:	e8 6e 11 ff ff       	call   c0101f9a <ide_write_secs>
c0110e2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110e2f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110e33:	74 3f                	je     c0110e74 <disk0_write_blks_nolock+0x83>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110e35:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e38:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110e3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110e3f:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110e43:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e46:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110e4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e4d:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110e51:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e54:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110e58:	c7 44 24 08 24 91 11 	movl   $0xc0119124,0x8(%esp)
c0110e5f:	c0 
c0110e60:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
c0110e67:	00 
c0110e68:	c7 04 24 08 91 11 c0 	movl   $0xc0119108,(%esp)
c0110e6f:	e8 38 00 ff ff       	call   c0100eac <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110e74:	c9                   	leave  
c0110e75:	c3                   	ret    

c0110e76 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c0110e76:	55                   	push   %ebp
c0110e77:	89 e5                	mov    %esp,%ebp
c0110e79:	83 ec 48             	sub    $0x48,%esp
    off_t offset = iob->io_offset;
c0110e7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e7f:	8b 40 04             	mov    0x4(%eax),%eax
c0110e82:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c0110e85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e88:	8b 40 0c             	mov    0xc(%eax),%eax
c0110e8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c0110e8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110e91:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0110e97:	85 c0                	test   %eax,%eax
c0110e99:	0f 48 c2             	cmovs  %edx,%eax
c0110e9c:	c1 f8 0c             	sar    $0xc,%eax
c0110e9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c0110ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ea5:	c1 e8 0c             	shr    $0xc,%eax
c0110ea8:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c0110eab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110eae:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110eb3:	85 c0                	test   %eax,%eax
c0110eb5:	75 0c                	jne    c0110ec3 <disk0_io+0x4d>
c0110eb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110eba:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110ebf:	85 c0                	test   %eax,%eax
c0110ec1:	74 0a                	je     c0110ecd <disk0_io+0x57>
        return -E_INVAL;
c0110ec3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110ec8:	e9 7a 01 00 00       	jmp    c0111047 <disk0_io+0x1d1>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c0110ecd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110ed0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110ed3:	01 c2                	add    %eax,%edx
c0110ed5:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ed8:	8b 00                	mov    (%eax),%eax
c0110eda:	39 c2                	cmp    %eax,%edx
c0110edc:	76 0a                	jbe    c0110ee8 <disk0_io+0x72>
        return -E_INVAL;
c0110ede:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110ee3:	e9 5f 01 00 00       	jmp    c0111047 <disk0_io+0x1d1>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c0110ee8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110eec:	75 0a                	jne    c0110ef8 <disk0_io+0x82>
        return 0;
c0110eee:	b8 00 00 00 00       	mov    $0x0,%eax
c0110ef3:	e9 4f 01 00 00       	jmp    c0111047 <disk0_io+0x1d1>
    }

    lock_disk0();
c0110ef8:	e8 33 fe ff ff       	call   c0110d30 <lock_disk0>
    while (resid != 0) {
c0110efd:	e9 31 01 00 00       	jmp    c0111033 <disk0_io+0x1bd>
        size_t copied, alen = DISK0_BUFSIZE;
c0110f02:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c0110f09:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110f0d:	0f 84 89 00 00 00    	je     c0110f9c <disk0_io+0x126>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c0110f13:	a1 dc 3f 15 c0       	mov    0xc0153fdc,%eax
c0110f18:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110f1b:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110f1f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0110f26:	00 
c0110f27:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110f2a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110f2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110f32:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110f35:	89 04 24             	mov    %eax,(%esp)
c0110f38:	e8 89 a5 ff ff       	call   c010b4c6 <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c0110f3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f40:	85 c0                	test   %eax,%eax
c0110f42:	74 14                	je     c0110f58 <disk0_io+0xe2>
c0110f44:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f47:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110f4a:	77 0c                	ja     c0110f58 <disk0_io+0xe2>
c0110f4c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f4f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110f54:	85 c0                	test   %eax,%eax
c0110f56:	74 24                	je     c0110f7c <disk0_io+0x106>
c0110f58:	c7 44 24 0c 70 91 11 	movl   $0xc0119170,0xc(%esp)
c0110f5f:	c0 
c0110f60:	c7 44 24 08 ae 91 11 	movl   $0xc01191ae,0x8(%esp)
c0110f67:	c0 
c0110f68:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0110f6f:	00 
c0110f70:	c7 04 24 08 91 11 c0 	movl   $0xc0119108,(%esp)
c0110f77:	e8 30 ff fe ff       	call   c0100eac <__panic>
            nblks = copied / DISK0_BLKSIZE;
c0110f7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f7f:	c1 e8 0c             	shr    $0xc,%eax
c0110f82:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c0110f85:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110f88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110f8f:	89 04 24             	mov    %eax,(%esp)
c0110f92:	e8 5a fe ff ff       	call   c0110df1 <disk0_write_blks_nolock>
c0110f97:	e9 8b 00 00 00       	jmp    c0111027 <disk0_io+0x1b1>
        }
        else {
            if (alen > resid) {
c0110f9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110f9f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110fa2:	76 06                	jbe    c0110faa <disk0_io+0x134>
                alen = resid;
c0110fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110fa7:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c0110faa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110fad:	c1 e8 0c             	shr    $0xc,%eax
c0110fb0:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c0110fb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110fb6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110fba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110fbd:	89 04 24             	mov    %eax,(%esp)
c0110fc0:	e8 a7 fd ff ff       	call   c0110d6c <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c0110fc5:	a1 dc 3f 15 c0       	mov    0xc0153fdc,%eax
c0110fca:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110fcd:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110fd1:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110fd8:	00 
c0110fd9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110fdc:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110fe0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110fe7:	89 04 24             	mov    %eax,(%esp)
c0110fea:	e8 d7 a4 ff ff       	call   c010b4c6 <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c0110fef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110ff2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0110ff5:	75 0c                	jne    c0111003 <disk0_io+0x18d>
c0110ff7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110ffa:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110fff:	85 c0                	test   %eax,%eax
c0111001:	74 24                	je     c0111027 <disk0_io+0x1b1>
c0111003:	c7 44 24 0c c4 91 11 	movl   $0xc01191c4,0xc(%esp)
c011100a:	c0 
c011100b:	c7 44 24 08 ae 91 11 	movl   $0xc01191ae,0x8(%esp)
c0111012:	c0 
c0111013:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
c011101a:	00 
c011101b:	c7 04 24 08 91 11 c0 	movl   $0xc0119108,(%esp)
c0111022:	e8 85 fe fe ff       	call   c0100eac <__panic>
        }
        resid -= copied, blkno += nblks;
c0111027:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011102a:	29 45 f4             	sub    %eax,-0xc(%ebp)
c011102d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111030:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c0111033:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111037:	0f 85 c5 fe ff ff    	jne    c0110f02 <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c011103d:	e8 02 fd ff ff       	call   c0110d44 <unlock_disk0>
    return 0;
c0111042:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111047:	c9                   	leave  
c0111048:	c3                   	ret    

c0111049 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c0111049:	55                   	push   %ebp
c011104a:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011104c:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0111051:	5d                   	pop    %ebp
c0111052:	c3                   	ret    

c0111053 <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c0111053:	55                   	push   %ebp
c0111054:	89 e5                	mov    %esp,%ebp
c0111056:	83 ec 18             	sub    $0x18,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c0111059:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0111060:	e8 6e 0c ff ff       	call   c0101cd3 <ide_device_valid>
c0111065:	85 c0                	test   %eax,%eax
c0111067:	75 1c                	jne    c0111085 <disk0_device_init+0x32>
        panic("disk0 device isn't available.\n");
c0111069:	c7 44 24 08 f4 91 11 	movl   $0xc01191f4,0x8(%esp)
c0111070:	c0 
c0111071:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0111078:	00 
c0111079:	c7 04 24 08 91 11 c0 	movl   $0xc0119108,(%esp)
c0111080:	e8 27 fe fe ff       	call   c0100eac <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c0111085:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c011108c:	e8 81 0c ff ff       	call   c0101d12 <ide_device_size>
c0111091:	89 c2                	mov    %eax,%edx
c0111093:	c1 ea 03             	shr    $0x3,%edx
c0111096:	8b 45 08             	mov    0x8(%ebp),%eax
c0111099:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c011109b:	8b 45 08             	mov    0x8(%ebp),%eax
c011109e:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c01110a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01110a8:	c7 40 08 58 0d 11 c0 	movl   $0xc0110d58,0x8(%eax)
    dev->d_close = disk0_close;
c01110af:	8b 45 08             	mov    0x8(%ebp),%eax
c01110b2:	c7 40 0c 62 0d 11 c0 	movl   $0xc0110d62,0xc(%eax)
    dev->d_io = disk0_io;
c01110b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01110bc:	c7 40 10 76 0e 11 c0 	movl   $0xc0110e76,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c01110c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01110c6:	c7 40 14 49 10 11 c0 	movl   $0xc0111049,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c01110cd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01110d4:	00 
c01110d5:	c7 04 24 e0 3f 15 c0 	movl   $0xc0153fe0,(%esp)
c01110dc:	e8 cd 8b ff ff       	call   c0109cae <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c01110e1:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
c01110e8:	e8 69 3d ff ff       	call   c0104e56 <kmalloc>
c01110ed:	a3 dc 3f 15 c0       	mov    %eax,0xc0153fdc
c01110f2:	a1 dc 3f 15 c0       	mov    0xc0153fdc,%eax
c01110f7:	85 c0                	test   %eax,%eax
c01110f9:	75 1c                	jne    c0111117 <disk0_device_init+0xc4>
        panic("disk0 alloc buffer failed.\n");
c01110fb:	c7 44 24 08 13 92 11 	movl   $0xc0119213,0x8(%esp)
c0111102:	c0 
c0111103:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
c011110a:	00 
c011110b:	c7 04 24 08 91 11 c0 	movl   $0xc0119108,(%esp)
c0111112:	e8 95 fd fe ff       	call   c0100eac <__panic>
    }
}
c0111117:	c9                   	leave  
c0111118:	c3                   	ret    

c0111119 <dev_init_disk0>:

void
dev_init_disk0(void) {
c0111119:	55                   	push   %ebp
c011111a:	89 e5                	mov    %esp,%ebp
c011111c:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011111f:	e8 d1 fb ff ff       	call   c0110cf5 <dev_create_inode>
c0111124:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111127:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011112b:	75 1c                	jne    c0111149 <dev_init_disk0+0x30>
        panic("disk0: dev_create_node.\n");
c011112d:	c7 44 24 08 2f 92 11 	movl   $0xc011922f,0x8(%esp)
c0111134:	c0 
c0111135:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
c011113c:	00 
c011113d:	c7 04 24 08 91 11 c0 	movl   $0xc0119108,(%esp)
c0111144:	e8 63 fd fe ff       	call   c0100eac <__panic>
    }
    disk0_device_init(vop_info(node, device));
c0111149:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011114c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011114f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111153:	74 0d                	je     c0111162 <dev_init_disk0+0x49>
c0111155:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111158:	8b 40 2c             	mov    0x2c(%eax),%eax
c011115b:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0111160:	74 24                	je     c0111186 <dev_init_disk0+0x6d>
c0111162:	c7 44 24 0c 48 92 11 	movl   $0xc0119248,0xc(%esp)
c0111169:	c0 
c011116a:	c7 44 24 08 ae 91 11 	movl   $0xc01191ae,0x8(%esp)
c0111171:	c0 
c0111172:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c0111179:	00 
c011117a:	c7 04 24 08 91 11 c0 	movl   $0xc0119108,(%esp)
c0111181:	e8 26 fd fe ff       	call   c0100eac <__panic>
c0111186:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111189:	89 04 24             	mov    %eax,(%esp)
c011118c:	e8 c2 fe ff ff       	call   c0111053 <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c0111191:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111198:	00 
c0111199:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011119c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01111a0:	c7 04 24 7b 92 11 c0 	movl   $0xc011927b,(%esp)
c01111a7:	e8 c9 e9 ff ff       	call   c010fb75 <vfs_add_dev>
c01111ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01111af:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01111b3:	74 23                	je     c01111d8 <dev_init_disk0+0xbf>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c01111b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01111b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01111bc:	c7 44 24 08 81 92 11 	movl   $0xc0119281,0x8(%esp)
c01111c3:	c0 
c01111c4:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c01111cb:	00 
c01111cc:	c7 04 24 08 91 11 c0 	movl   $0xc0119108,(%esp)
c01111d3:	e8 d4 fc fe ff       	call   c0100eac <__panic>
    }
}
c01111d8:	c9                   	leave  
c01111d9:	c3                   	ret    
	...

c01111dc <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01111dc:	55                   	push   %ebp
c01111dd:	89 e5                	mov    %esp,%ebp
c01111df:	53                   	push   %ebx
c01111e0:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01111e3:	9c                   	pushf  
c01111e4:	5b                   	pop    %ebx
c01111e5:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c01111e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01111eb:	25 00 02 00 00       	and    $0x200,%eax
c01111f0:	85 c0                	test   %eax,%eax
c01111f2:	74 0c                	je     c0111200 <__intr_save+0x24>
        intr_disable();
c01111f4:	e8 ed 0f ff ff       	call   c01021e6 <intr_disable>
        return 1;
c01111f9:	b8 01 00 00 00       	mov    $0x1,%eax
c01111fe:	eb 05                	jmp    c0111205 <__intr_save+0x29>
    }
    return 0;
c0111200:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111205:	83 c4 14             	add    $0x14,%esp
c0111208:	5b                   	pop    %ebx
c0111209:	5d                   	pop    %ebp
c011120a:	c3                   	ret    

c011120b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c011120b:	55                   	push   %ebp
c011120c:	89 e5                	mov    %esp,%ebp
c011120e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0111211:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0111215:	74 05                	je     c011121c <__intr_restore+0x11>
        intr_enable();
c0111217:	e8 c4 0f ff ff       	call   c01021e0 <intr_enable>
    }
}
c011121c:	c9                   	leave  
c011121d:	c3                   	ret    

c011121e <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c011121e:	55                   	push   %ebp
c011121f:	89 e5                	mov    %esp,%ebp
c0111221:	83 ec 38             	sub    $0x38,%esp
c0111224:	8b 45 08             	mov    0x8(%ebp),%eax
c0111227:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c011122a:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c011122e:	0f 84 86 00 00 00    	je     c01112ba <dev_stdin_write+0x9c>
        local_intr_save(intr_flag);
c0111234:	e8 a3 ff ff ff       	call   c01111dc <__intr_save>
c0111239:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c011123c:	a1 04 50 15 c0       	mov    0xc0155004,%eax
c0111241:	89 c2                	mov    %eax,%edx
c0111243:	c1 fa 1f             	sar    $0x1f,%edx
c0111246:	c1 ea 14             	shr    $0x14,%edx
c0111249:	01 d0                	add    %edx,%eax
c011124b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0111250:	29 d0                	sub    %edx,%eax
c0111252:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0111256:	88 90 00 40 15 c0    	mov    %dl,-0x3feac000(%eax)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c011125c:	8b 15 04 50 15 c0    	mov    0xc0155004,%edx
c0111262:	a1 00 50 15 c0       	mov    0xc0155000,%eax
c0111267:	89 d1                	mov    %edx,%ecx
c0111269:	29 c1                	sub    %eax,%ecx
c011126b:	89 c8                	mov    %ecx,%eax
c011126d:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0111272:	7f 0d                	jg     c0111281 <dev_stdin_write+0x63>
                p_wpos ++;
c0111274:	a1 04 50 15 c0       	mov    0xc0155004,%eax
c0111279:	83 c0 01             	add    $0x1,%eax
c011127c:	a3 04 50 15 c0       	mov    %eax,0xc0155004
            }
            if (!wait_queue_empty(wait_queue)) {
c0111281:	a1 c0 0e 15 c0       	mov    0xc0150ec0,%eax
c0111286:	89 04 24             	mov    %eax,(%esp)
c0111289:	e8 1c 8f ff ff       	call   c010a1aa <wait_queue_empty>
c011128e:	85 c0                	test   %eax,%eax
c0111290:	75 1d                	jne    c01112af <dev_stdin_write+0x91>
                wakeup_queue(wait_queue, WT_KBD, 1);
c0111292:	a1 c0 0e 15 c0       	mov    0xc0150ec0,%eax
c0111297:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011129e:	00 
c011129f:	c7 44 24 04 04 00 00 	movl   $0x80000004,0x4(%esp)
c01112a6:	80 
c01112a7:	89 04 24             	mov    %eax,(%esp)
c01112aa:	e8 b2 8f ff ff       	call   c010a261 <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
c01112af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01112b2:	89 04 24             	mov    %eax,(%esp)
c01112b5:	e8 51 ff ff ff       	call   c011120b <__intr_restore>
    }
}
c01112ba:	c9                   	leave  
c01112bb:	c3                   	ret    

c01112bc <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c01112bc:	55                   	push   %ebp
c01112bd:	89 e5                	mov    %esp,%ebp
c01112bf:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c01112c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c01112c9:	e8 0e ff ff ff       	call   c01111dc <__intr_save>
c01112ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c01112d1:	e9 b7 00 00 00       	jmp    c011138d <dev_stdin_read+0xd1>
        try_again:
            if (p_rpos < p_wpos) {
c01112d6:	8b 15 00 50 15 c0    	mov    0xc0155000,%edx
c01112dc:	a1 04 50 15 c0       	mov    0xc0155004,%eax
c01112e1:	39 c2                	cmp    %eax,%edx
c01112e3:	7d 39                	jge    c011131e <dev_stdin_read+0x62>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c01112e5:	a1 00 50 15 c0       	mov    0xc0155000,%eax
c01112ea:	89 c2                	mov    %eax,%edx
c01112ec:	c1 fa 1f             	sar    $0x1f,%edx
c01112ef:	c1 ea 14             	shr    $0x14,%edx
c01112f2:	01 d0                	add    %edx,%eax
c01112f4:	25 ff 0f 00 00       	and    $0xfff,%eax
c01112f9:	29 d0                	sub    %edx,%eax
c01112fb:	0f b6 90 00 40 15 c0 	movzbl -0x3feac000(%eax),%edx
c0111302:	8b 45 08             	mov    0x8(%ebp),%eax
c0111305:	88 10                	mov    %dl,(%eax)
c0111307:	83 45 08 01          	addl   $0x1,0x8(%ebp)
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c011130b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011130f:	a1 00 50 15 c0       	mov    0xc0155000,%eax
c0111314:	83 c0 01             	add    $0x1,%eax
c0111317:	a3 00 50 15 c0       	mov    %eax,0xc0155000
c011131c:	eb 6f                	jmp    c011138d <dev_stdin_read+0xd1>
        try_again:
            if (p_rpos < p_wpos) {
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
            }
            else {
                wait_t __wait, *wait = &__wait;
c011131e:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0111321:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c0111324:	a1 c0 0e 15 c0       	mov    0xc0150ec0,%eax
c0111329:	c7 44 24 08 04 00 00 	movl   $0x80000004,0x8(%esp)
c0111330:	80 
c0111331:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0111334:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111338:	89 04 24             	mov    %eax,(%esp)
c011133b:	e8 b6 8f ff ff       	call   c010a2f6 <wait_current_set>
                local_intr_restore(intr_flag);
c0111340:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111343:	89 04 24             	mov    %eax,(%esp)
c0111346:	e8 c0 fe ff ff       	call   c011120b <__intr_restore>

                schedule();
c011134b:	e8 bb d4 ff ff       	call   c010e80b <schedule>

                local_intr_save(intr_flag);
c0111350:	e8 87 fe ff ff       	call   c01111dc <__intr_save>
c0111355:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c0111358:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011135b:	89 04 24             	mov    %eax,(%esp)
c011135e:	e8 64 8e ff ff       	call   c010a1c7 <wait_in_queue>
c0111363:	85 c0                	test   %eax,%eax
c0111365:	74 14                	je     c011137b <dev_stdin_read+0xbf>
c0111367:	a1 c0 0e 15 c0       	mov    0xc0150ec0,%eax
c011136c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011136f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111373:	89 04 24             	mov    %eax,(%esp)
c0111376:	e8 47 8c ff ff       	call   c0109fc2 <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
c011137b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011137e:	8b 40 04             	mov    0x4(%eax),%eax
c0111381:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c0111386:	75 13                	jne    c011139b <dev_stdin_read+0xdf>
                    goto try_again;
c0111388:	e9 49 ff ff ff       	jmp    c01112d6 <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c011138d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111390:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0111393:	0f 82 3d ff ff ff    	jb     c01112d6 <dev_stdin_read+0x1a>
c0111399:	eb 01                	jmp    c011139c <dev_stdin_read+0xe0>
                local_intr_save(intr_flag);
                wait_current_del(wait_queue, wait);
                if (wait->wakeup_flags == WT_KBD) {
                    goto try_again;
                }
                break;
c011139b:	90                   	nop
            }
        }
    }
    local_intr_restore(intr_flag);
c011139c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011139f:	89 04 24             	mov    %eax,(%esp)
c01113a2:	e8 64 fe ff ff       	call   c011120b <__intr_restore>
    return ret;
c01113a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01113aa:	c9                   	leave  
c01113ab:	c3                   	ret    

c01113ac <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c01113ac:	55                   	push   %ebp
c01113ad:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c01113af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01113b3:	74 07                	je     c01113bc <stdin_open+0x10>
        return -E_INVAL;
c01113b5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01113ba:	eb 05                	jmp    c01113c1 <stdin_open+0x15>
    }
    return 0;
c01113bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01113c1:	5d                   	pop    %ebp
c01113c2:	c3                   	ret    

c01113c3 <stdin_close>:

static int
stdin_close(struct device *dev) {
c01113c3:	55                   	push   %ebp
c01113c4:	89 e5                	mov    %esp,%ebp
    return 0;
c01113c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01113cb:	5d                   	pop    %ebp
c01113cc:	c3                   	ret    

c01113cd <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c01113cd:	55                   	push   %ebp
c01113ce:	89 e5                	mov    %esp,%ebp
c01113d0:	83 ec 28             	sub    $0x28,%esp
    if (!write) {
c01113d3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01113d7:	75 36                	jne    c011140f <stdin_io+0x42>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c01113d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01113dc:	8b 50 0c             	mov    0xc(%eax),%edx
c01113df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01113e2:	8b 00                	mov    (%eax),%eax
c01113e4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01113e8:	89 04 24             	mov    %eax,(%esp)
c01113eb:	e8 cc fe ff ff       	call   c01112bc <dev_stdin_read>
c01113f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01113f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01113f7:	7e 11                	jle    c011140a <stdin_io+0x3d>
            iob->io_resid -= ret;
c01113f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01113fc:	8b 50 0c             	mov    0xc(%eax),%edx
c01113ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111402:	29 c2                	sub    %eax,%edx
c0111404:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111407:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c011140a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011140d:	eb 05                	jmp    c0111414 <stdin_io+0x47>
    }
    return -E_INVAL;
c011140f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111414:	c9                   	leave  
c0111415:	c3                   	ret    

c0111416 <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c0111416:	55                   	push   %ebp
c0111417:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c0111419:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011141e:	5d                   	pop    %ebp
c011141f:	c3                   	ret    

c0111420 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c0111420:	55                   	push   %ebp
c0111421:	89 e5                	mov    %esp,%ebp
c0111423:	83 ec 18             	sub    $0x18,%esp
    dev->d_blocks = 0;
c0111426:	8b 45 08             	mov    0x8(%ebp),%eax
c0111429:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c011142f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111432:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c0111439:	8b 45 08             	mov    0x8(%ebp),%eax
c011143c:	c7 40 08 ac 13 11 c0 	movl   $0xc01113ac,0x8(%eax)
    dev->d_close = stdin_close;
c0111443:	8b 45 08             	mov    0x8(%ebp),%eax
c0111446:	c7 40 0c c3 13 11 c0 	movl   $0xc01113c3,0xc(%eax)
    dev->d_io = stdin_io;
c011144d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111450:	c7 40 10 cd 13 11 c0 	movl   $0xc01113cd,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c0111457:	8b 45 08             	mov    0x8(%ebp),%eax
c011145a:	c7 40 14 16 14 11 c0 	movl   $0xc0111416,0x14(%eax)

    p_rpos = p_wpos = 0;
c0111461:	c7 05 04 50 15 c0 00 	movl   $0x0,0xc0155004
c0111468:	00 00 00 
c011146b:	a1 04 50 15 c0       	mov    0xc0155004,%eax
c0111470:	a3 00 50 15 c0       	mov    %eax,0xc0155000
    wait_queue_init(wait_queue);
c0111475:	a1 c0 0e 15 c0       	mov    0xc0150ec0,%eax
c011147a:	89 04 24             	mov    %eax,(%esp)
c011147d:	e8 7d 8a ff ff       	call   c0109eff <wait_queue_init>
}
c0111482:	c9                   	leave  
c0111483:	c3                   	ret    

c0111484 <dev_init_stdin>:

void
dev_init_stdin(void) {
c0111484:	55                   	push   %ebp
c0111485:	89 e5                	mov    %esp,%ebp
c0111487:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011148a:	e8 66 f8 ff ff       	call   c0110cf5 <dev_create_inode>
c011148f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111492:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111496:	75 1c                	jne    c01114b4 <dev_init_stdin+0x30>
        panic("stdin: dev_create_node.\n");
c0111498:	c7 44 24 08 9c 92 11 	movl   $0xc011929c,0x8(%esp)
c011149f:	c0 
c01114a0:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c01114a7:	00 
c01114a8:	c7 04 24 b5 92 11 c0 	movl   $0xc01192b5,(%esp)
c01114af:	e8 f8 f9 fe ff       	call   c0100eac <__panic>
    }
    stdin_device_init(vop_info(node, device));
c01114b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01114b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01114ba:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01114be:	74 0d                	je     c01114cd <dev_init_stdin+0x49>
c01114c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01114c3:	8b 40 2c             	mov    0x2c(%eax),%eax
c01114c6:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01114cb:	74 24                	je     c01114f1 <dev_init_stdin+0x6d>
c01114cd:	c7 44 24 0c d0 92 11 	movl   $0xc01192d0,0xc(%esp)
c01114d4:	c0 
c01114d5:	c7 44 24 08 03 93 11 	movl   $0xc0119303,0x8(%esp)
c01114dc:	c0 
c01114dd:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c01114e4:	00 
c01114e5:	c7 04 24 b5 92 11 c0 	movl   $0xc01192b5,(%esp)
c01114ec:	e8 bb f9 fe ff       	call   c0100eac <__panic>
c01114f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01114f4:	89 04 24             	mov    %eax,(%esp)
c01114f7:	e8 24 ff ff ff       	call   c0111420 <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c01114fc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111503:	00 
c0111504:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111507:	89 44 24 04          	mov    %eax,0x4(%esp)
c011150b:	c7 04 24 18 93 11 c0 	movl   $0xc0119318,(%esp)
c0111512:	e8 5e e6 ff ff       	call   c010fb75 <vfs_add_dev>
c0111517:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011151a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011151e:	74 23                	je     c0111543 <dev_init_stdin+0xbf>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c0111520:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111523:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111527:	c7 44 24 08 1e 93 11 	movl   $0xc011931e,0x8(%esp)
c011152e:	c0 
c011152f:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
c0111536:	00 
c0111537:	c7 04 24 b5 92 11 c0 	movl   $0xc01192b5,(%esp)
c011153e:	e8 69 f9 fe ff       	call   c0100eac <__panic>
    }
}
c0111543:	c9                   	leave  
c0111544:	c3                   	ret    
c0111545:	00 00                	add    %al,(%eax)
	...

c0111548 <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c0111548:	55                   	push   %ebp
c0111549:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c011154b:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c011154f:	74 07                	je     c0111558 <stdout_open+0x10>
        return -E_INVAL;
c0111551:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0111556:	eb 05                	jmp    c011155d <stdout_open+0x15>
    }
    return 0;
c0111558:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011155d:	5d                   	pop    %ebp
c011155e:	c3                   	ret    

c011155f <stdout_close>:

static int
stdout_close(struct device *dev) {
c011155f:	55                   	push   %ebp
c0111560:	89 e5                	mov    %esp,%ebp
    return 0;
c0111562:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111567:	5d                   	pop    %ebp
c0111568:	c3                   	ret    

c0111569 <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c0111569:	55                   	push   %ebp
c011156a:	89 e5                	mov    %esp,%ebp
c011156c:	83 ec 28             	sub    $0x28,%esp
    if (write) {
c011156f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111573:	74 3f                	je     c01115b4 <stdout_io+0x4b>
        char *data = iob->io_base;
c0111575:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111578:	8b 00                	mov    (%eax),%eax
c011157a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c011157d:	eb 24                	jmp    c01115a3 <stdout_io+0x3a>
            cputchar(*data ++);
c011157f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111582:	0f b6 00             	movzbl (%eax),%eax
c0111585:	0f be c0             	movsbl %al,%eax
c0111588:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011158c:	89 04 24             	mov    %eax,(%esp)
c011158f:	e8 04 ee fe ff       	call   c0100398 <cputchar>

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c0111594:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111597:	8b 40 0c             	mov    0xc(%eax),%eax
c011159a:	8d 50 ff             	lea    -0x1(%eax),%edx
c011159d:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115a0:	89 50 0c             	mov    %edx,0xc(%eax)
c01115a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115a6:	8b 40 0c             	mov    0xc(%eax),%eax
c01115a9:	85 c0                	test   %eax,%eax
c01115ab:	75 d2                	jne    c011157f <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c01115ad:	b8 00 00 00 00       	mov    $0x0,%eax
c01115b2:	eb 05                	jmp    c01115b9 <stdout_io+0x50>
    }
    return -E_INVAL;
c01115b4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01115b9:	c9                   	leave  
c01115ba:	c3                   	ret    

c01115bb <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c01115bb:	55                   	push   %ebp
c01115bc:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c01115be:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01115c3:	5d                   	pop    %ebp
c01115c4:	c3                   	ret    

c01115c5 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c01115c5:	55                   	push   %ebp
c01115c6:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c01115c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01115cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c01115d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01115d4:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c01115db:	8b 45 08             	mov    0x8(%ebp),%eax
c01115de:	c7 40 08 48 15 11 c0 	movl   $0xc0111548,0x8(%eax)
    dev->d_close = stdout_close;
c01115e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01115e8:	c7 40 0c 5f 15 11 c0 	movl   $0xc011155f,0xc(%eax)
    dev->d_io = stdout_io;
c01115ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01115f2:	c7 40 10 69 15 11 c0 	movl   $0xc0111569,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c01115f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01115fc:	c7 40 14 bb 15 11 c0 	movl   $0xc01115bb,0x14(%eax)
}
c0111603:	5d                   	pop    %ebp
c0111604:	c3                   	ret    

c0111605 <dev_init_stdout>:

void
dev_init_stdout(void) {
c0111605:	55                   	push   %ebp
c0111606:	89 e5                	mov    %esp,%ebp
c0111608:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011160b:	e8 e5 f6 ff ff       	call   c0110cf5 <dev_create_inode>
c0111610:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111613:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111617:	75 1c                	jne    c0111635 <dev_init_stdout+0x30>
        panic("stdout: dev_create_node.\n");
c0111619:	c7 44 24 08 38 93 11 	movl   $0xc0119338,0x8(%esp)
c0111620:	c0 
c0111621:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111628:	00 
c0111629:	c7 04 24 52 93 11 c0 	movl   $0xc0119352,(%esp)
c0111630:	e8 77 f8 fe ff       	call   c0100eac <__panic>
    }
    stdout_device_init(vop_info(node, device));
c0111635:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111638:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011163b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011163f:	74 0d                	je     c011164e <dev_init_stdout+0x49>
c0111641:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111644:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111647:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011164c:	74 24                	je     c0111672 <dev_init_stdout+0x6d>
c011164e:	c7 44 24 0c 6c 93 11 	movl   $0xc011936c,0xc(%esp)
c0111655:	c0 
c0111656:	c7 44 24 08 9f 93 11 	movl   $0xc011939f,0x8(%esp)
c011165d:	c0 
c011165e:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c0111665:	00 
c0111666:	c7 04 24 52 93 11 c0 	movl   $0xc0119352,(%esp)
c011166d:	e8 3a f8 fe ff       	call   c0100eac <__panic>
c0111672:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111675:	89 04 24             	mov    %eax,(%esp)
c0111678:	e8 48 ff ff ff       	call   c01115c5 <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c011167d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111684:	00 
c0111685:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111688:	89 44 24 04          	mov    %eax,0x4(%esp)
c011168c:	c7 04 24 b4 93 11 c0 	movl   $0xc01193b4,(%esp)
c0111693:	e8 dd e4 ff ff       	call   c010fb75 <vfs_add_dev>
c0111698:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011169b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011169f:	74 23                	je     c01116c4 <dev_init_stdout+0xbf>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c01116a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01116a4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01116a8:	c7 44 24 08 bb 93 11 	movl   $0xc01193bb,0x8(%esp)
c01116af:	c0 
c01116b0:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c01116b7:	00 
c01116b8:	c7 04 24 52 93 11 c0 	movl   $0xc0119352,(%esp)
c01116bf:	e8 e8 f7 fe ff       	call   c0100eac <__panic>
    }
}
c01116c4:	c9                   	leave  
c01116c5:	c3                   	ret    
	...

c01116c8 <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c01116c8:	55                   	push   %ebp
c01116c9:	89 e5                	mov    %esp,%ebp
c01116cb:	57                   	push   %edi
c01116cc:	56                   	push   %esi
c01116cd:	53                   	push   %ebx
c01116ce:	83 ec 3c             	sub    $0x3c,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c01116d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01116d5:	74 0b                	je     c01116e2 <bitmap_create+0x1a>
c01116d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01116da:	83 c0 20             	add    $0x20,%eax
c01116dd:	3b 45 08             	cmp    0x8(%ebp),%eax
c01116e0:	77 24                	ja     c0111706 <bitmap_create+0x3e>
c01116e2:	c7 44 24 0c d8 93 11 	movl   $0xc01193d8,0xc(%esp)
c01116e9:	c0 
c01116ea:	c7 44 24 08 00 94 11 	movl   $0xc0119400,0x8(%esp)
c01116f1:	c0 
c01116f2:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c01116f9:	00 
c01116fa:	c7 04 24 15 94 11 c0 	movl   $0xc0119415,(%esp)
c0111701:	e8 a6 f7 fe ff       	call   c0100eac <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c0111706:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c011170d:	e8 44 37 ff ff       	call   c0104e56 <kmalloc>
c0111712:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111715:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0111719:	75 0a                	jne    c0111725 <bitmap_create+0x5d>
        return NULL;
c011171b:	b8 00 00 00 00       	mov    $0x0,%eax
c0111720:	e9 43 01 00 00       	jmp    c0111868 <bitmap_create+0x1a0>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c0111725:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%ebp)
c011172c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011172f:	8b 55 08             	mov    0x8(%ebp),%edx
c0111732:	01 d0                	add    %edx,%eax
c0111734:	83 e8 01             	sub    $0x1,%eax
c0111737:	ba 00 00 00 00       	mov    $0x0,%edx
c011173c:	f7 75 dc             	divl   -0x24(%ebp)
c011173f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c0111742:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111745:	c1 e0 02             	shl    $0x2,%eax
c0111748:	89 04 24             	mov    %eax,(%esp)
c011174b:	e8 06 37 ff ff       	call   c0104e56 <kmalloc>
c0111750:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0111753:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0111757:	75 15                	jne    c011176e <bitmap_create+0xa6>
        kfree(bitmap);
c0111759:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011175c:	89 04 24             	mov    %eax,(%esp)
c011175f:	e8 0d 37 ff ff       	call   c0104e71 <kfree>
        return NULL;
c0111764:	b8 00 00 00 00       	mov    $0x0,%eax
c0111769:	e9 fa 00 00 00       	jmp    c0111868 <bitmap_create+0x1a0>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c011176e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111771:	8b 55 08             	mov    0x8(%ebp),%edx
c0111774:	89 10                	mov    %edx,(%eax)
c0111776:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111779:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011177c:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c011177f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111782:	c1 e0 02             	shl    $0x2,%eax
c0111785:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111789:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
c0111790:	ff 
c0111791:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0111794:	89 04 24             	mov    %eax,(%esp)
c0111797:	e8 d8 3f 00 00       	call   c0115774 <memset>
c011179c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011179f:	89 42 08             	mov    %eax,0x8(%edx)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c01117a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01117a5:	c1 e0 05             	shl    $0x5,%eax
c01117a8:	3b 45 08             	cmp    0x8(%ebp),%eax
c01117ab:	0f 84 b4 00 00 00    	je     c0111865 <bitmap_create+0x19d>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c01117b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01117b4:	83 e8 01             	sub    $0x1,%eax
c01117b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01117ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01117bd:	89 c2                	mov    %eax,%edx
c01117bf:	c1 e2 05             	shl    $0x5,%edx
c01117c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01117c5:	29 d0                	sub    %edx,%eax
c01117c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        assert(nbits / WORD_BITS == ix);
c01117ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01117cd:	c1 e8 05             	shr    $0x5,%eax
c01117d0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01117d3:	74 24                	je     c01117f9 <bitmap_create+0x131>
c01117d5:	c7 44 24 0c 2a 94 11 	movl   $0xc011942a,0xc(%esp)
c01117dc:	c0 
c01117dd:	c7 44 24 08 00 94 11 	movl   $0xc0119400,0x8(%esp)
c01117e4:	c0 
c01117e5:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c01117ec:	00 
c01117ed:	c7 04 24 15 94 11 c0 	movl   $0xc0119415,(%esp)
c01117f4:	e8 b3 f6 fe ff       	call   c0100eac <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c01117f9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01117fd:	74 06                	je     c0111805 <bitmap_create+0x13d>
c01117ff:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%ebp)
c0111803:	76 5a                	jbe    c011185f <bitmap_create+0x197>
c0111805:	c7 44 24 0c 44 94 11 	movl   $0xc0119444,0xc(%esp)
c011180c:	c0 
c011180d:	c7 44 24 08 00 94 11 	movl   $0xc0119400,0x8(%esp)
c0111814:	c0 
c0111815:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c011181c:	00 
c011181d:	c7 04 24 15 94 11 c0 	movl   $0xc0119415,(%esp)
c0111824:	e8 83 f6 fe ff       	call   c0100eac <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
            bitmap->map[ix] ^= (1 << overbits);
c0111829:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011182c:	8b 40 08             	mov    0x8(%eax),%eax
c011182f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0111832:	c1 e2 02             	shl    $0x2,%edx
c0111835:	01 c2                	add    %eax,%edx
c0111837:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011183a:	8b 40 08             	mov    0x8(%eax),%eax
c011183d:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0111840:	c1 e1 02             	shl    $0x2,%ecx
c0111843:	01 c8                	add    %ecx,%eax
c0111845:	8b 18                	mov    (%eax),%ebx
c0111847:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011184a:	be 01 00 00 00       	mov    $0x1,%esi
c011184f:	89 f7                	mov    %esi,%edi
c0111851:	89 c1                	mov    %eax,%ecx
c0111853:	d3 e7                	shl    %cl,%edi
c0111855:	89 f8                	mov    %edi,%eax
c0111857:	31 d8                	xor    %ebx,%eax
c0111859:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c011185b:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c011185f:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%ebp)
c0111863:	76 c4                	jbe    c0111829 <bitmap_create+0x161>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c0111865:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c0111868:	83 c4 3c             	add    $0x3c,%esp
c011186b:	5b                   	pop    %ebx
c011186c:	5e                   	pop    %esi
c011186d:	5f                   	pop    %edi
c011186e:	5d                   	pop    %ebp
c011186f:	c3                   	ret    

c0111870 <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c0111870:	55                   	push   %ebp
c0111871:	89 e5                	mov    %esp,%ebp
c0111873:	53                   	push   %ebx
c0111874:	83 ec 34             	sub    $0x34,%esp
    WORD_TYPE *map = bitmap->map;
c0111877:	8b 45 08             	mov    0x8(%ebp),%eax
c011187a:	8b 40 08             	mov    0x8(%eax),%eax
c011187d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c0111880:	8b 45 08             	mov    0x8(%ebp),%eax
c0111883:	8b 40 04             	mov    0x4(%eax),%eax
c0111886:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c0111889:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111890:	e9 a3 00 00 00       	jmp    c0111938 <bitmap_alloc+0xc8>
        if (map[ix] != 0) {
c0111895:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111898:	c1 e0 02             	shl    $0x2,%eax
c011189b:	03 45 ec             	add    -0x14(%ebp),%eax
c011189e:	8b 00                	mov    (%eax),%eax
c01118a0:	85 c0                	test   %eax,%eax
c01118a2:	0f 84 8c 00 00 00    	je     c0111934 <bitmap_alloc+0xc4>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c01118a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01118af:	eb 59                	jmp    c011190a <bitmap_alloc+0x9a>
                WORD_TYPE mask = (1 << offset);
c01118b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01118b4:	ba 01 00 00 00       	mov    $0x1,%edx
c01118b9:	89 d3                	mov    %edx,%ebx
c01118bb:	89 c1                	mov    %eax,%ecx
c01118bd:	d3 e3                	shl    %cl,%ebx
c01118bf:	89 d8                	mov    %ebx,%eax
c01118c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c01118c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118c7:	c1 e0 02             	shl    $0x2,%eax
c01118ca:	03 45 ec             	add    -0x14(%ebp),%eax
c01118cd:	8b 00                	mov    (%eax),%eax
c01118cf:	23 45 e4             	and    -0x1c(%ebp),%eax
c01118d2:	85 c0                	test   %eax,%eax
c01118d4:	74 30                	je     c0111906 <bitmap_alloc+0x96>
                    map[ix] ^= mask;
c01118d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118d9:	c1 e0 02             	shl    $0x2,%eax
c01118dc:	03 45 ec             	add    -0x14(%ebp),%eax
c01118df:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01118e2:	c1 e2 02             	shl    $0x2,%edx
c01118e5:	03 55 ec             	add    -0x14(%ebp),%edx
c01118e8:	8b 12                	mov    (%edx),%edx
c01118ea:	33 55 e4             	xor    -0x1c(%ebp),%edx
c01118ed:	89 10                	mov    %edx,(%eax)
                    *index_store = ix * WORD_BITS + offset;
c01118ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118f2:	c1 e0 05             	shl    $0x5,%eax
c01118f5:	89 c2                	mov    %eax,%edx
c01118f7:	03 55 f0             	add    -0x10(%ebp),%edx
c01118fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01118fd:	89 10                	mov    %edx,(%eax)
                    return 0;
c01118ff:	b8 00 00 00 00       	mov    $0x0,%eax
c0111904:	eb 43                	jmp    c0111949 <bitmap_alloc+0xd9>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0111906:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011190a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c011190e:	76 a1                	jbe    c01118b1 <bitmap_alloc+0x41>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c0111910:	c7 44 24 0c 69 94 11 	movl   $0xc0119469,0xc(%esp)
c0111917:	c0 
c0111918:	c7 44 24 08 00 94 11 	movl   $0xc0119400,0x8(%esp)
c011191f:	c0 
c0111920:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c0111927:	00 
c0111928:	c7 04 24 15 94 11 c0 	movl   $0xc0119415,(%esp)
c011192f:	e8 78 f5 fe ff       	call   c0100eac <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c0111934:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111938:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011193b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011193e:	0f 82 51 ff ff ff    	jb     c0111895 <bitmap_alloc+0x25>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c0111944:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0111949:	83 c4 34             	add    $0x34,%esp
c011194c:	5b                   	pop    %ebx
c011194d:	5d                   	pop    %ebp
c011194e:	c3                   	ret    

c011194f <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c011194f:	55                   	push   %ebp
c0111950:	89 e5                	mov    %esp,%ebp
c0111952:	53                   	push   %ebx
c0111953:	83 ec 24             	sub    $0x24,%esp
    assert(index < bitmap->nbits);
c0111956:	8b 45 08             	mov    0x8(%ebp),%eax
c0111959:	8b 00                	mov    (%eax),%eax
c011195b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011195e:	77 24                	ja     c0111984 <bitmap_translate+0x35>
c0111960:	c7 44 24 0c 6b 94 11 	movl   $0xc011946b,0xc(%esp)
c0111967:	c0 
c0111968:	c7 44 24 08 00 94 11 	movl   $0xc0119400,0x8(%esp)
c011196f:	c0 
c0111970:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0111977:	00 
c0111978:	c7 04 24 15 94 11 c0 	movl   $0xc0119415,(%esp)
c011197f:	e8 28 f5 fe ff       	call   c0100eac <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c0111984:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111987:	c1 e8 05             	shr    $0x5,%eax
c011198a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011198d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111990:	83 e0 1f             	and    $0x1f,%eax
c0111993:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c0111996:	8b 45 08             	mov    0x8(%ebp),%eax
c0111999:	8b 40 08             	mov    0x8(%eax),%eax
c011199c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011199f:	c1 e2 02             	shl    $0x2,%edx
c01119a2:	01 c2                	add    %eax,%edx
c01119a4:	8b 45 10             	mov    0x10(%ebp),%eax
c01119a7:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c01119a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01119ac:	ba 01 00 00 00       	mov    $0x1,%edx
c01119b1:	89 d3                	mov    %edx,%ebx
c01119b3:	89 c1                	mov    %eax,%ecx
c01119b5:	d3 e3                	shl    %cl,%ebx
c01119b7:	89 d8                	mov    %ebx,%eax
c01119b9:	89 c2                	mov    %eax,%edx
c01119bb:	8b 45 14             	mov    0x14(%ebp),%eax
c01119be:	89 10                	mov    %edx,(%eax)
}
c01119c0:	83 c4 24             	add    $0x24,%esp
c01119c3:	5b                   	pop    %ebx
c01119c4:	5d                   	pop    %ebp
c01119c5:	c3                   	ret    

c01119c6 <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c01119c6:	55                   	push   %ebp
c01119c7:	89 e5                	mov    %esp,%ebp
c01119c9:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c01119cc:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01119cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01119d3:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01119d6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01119da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01119dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01119e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01119e4:	89 04 24             	mov    %eax,(%esp)
c01119e7:	e8 63 ff ff ff       	call   c011194f <bitmap_translate>
    return (*word & mask);
c01119ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119ef:	8b 10                	mov    (%eax),%edx
c01119f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01119f4:	21 d0                	and    %edx,%eax
}
c01119f6:	c9                   	leave  
c01119f7:	c3                   	ret    

c01119f8 <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c01119f8:	55                   	push   %ebp
c01119f9:	89 e5                	mov    %esp,%ebp
c01119fb:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c01119fe:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111a01:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111a05:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111a08:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111a0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111a0f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111a13:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a16:	89 04 24             	mov    %eax,(%esp)
c0111a19:	e8 31 ff ff ff       	call   c011194f <bitmap_translate>
    assert(!(*word & mask));
c0111a1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a21:	8b 10                	mov    (%eax),%edx
c0111a23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a26:	21 d0                	and    %edx,%eax
c0111a28:	85 c0                	test   %eax,%eax
c0111a2a:	74 24                	je     c0111a50 <bitmap_free+0x58>
c0111a2c:	c7 44 24 0c 81 94 11 	movl   $0xc0119481,0xc(%esp)
c0111a33:	c0 
c0111a34:	c7 44 24 08 00 94 11 	movl   $0xc0119400,0x8(%esp)
c0111a3b:	c0 
c0111a3c:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111a43:	00 
c0111a44:	c7 04 24 15 94 11 c0 	movl   $0xc0119415,(%esp)
c0111a4b:	e8 5c f4 fe ff       	call   c0100eac <__panic>
    *word |= mask;
c0111a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a53:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111a56:	8b 0a                	mov    (%edx),%ecx
c0111a58:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111a5b:	09 ca                	or     %ecx,%edx
c0111a5d:	89 10                	mov    %edx,(%eax)
}
c0111a5f:	c9                   	leave  
c0111a60:	c3                   	ret    

c0111a61 <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c0111a61:	55                   	push   %ebp
c0111a62:	89 e5                	mov    %esp,%ebp
c0111a64:	83 ec 18             	sub    $0x18,%esp
    kfree(bitmap->map);
c0111a67:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a6a:	8b 40 08             	mov    0x8(%eax),%eax
c0111a6d:	89 04 24             	mov    %eax,(%esp)
c0111a70:	e8 fc 33 ff ff       	call   c0104e71 <kfree>
    kfree(bitmap);
c0111a75:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a78:	89 04 24             	mov    %eax,(%esp)
c0111a7b:	e8 f1 33 ff ff       	call   c0104e71 <kfree>
}
c0111a80:	c9                   	leave  
c0111a81:	c3                   	ret    

c0111a82 <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c0111a82:	55                   	push   %ebp
c0111a83:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c0111a85:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111a89:	74 12                	je     c0111a9d <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c0111a8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a8e:	8b 40 04             	mov    0x4(%eax),%eax
c0111a91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111a98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111a9b:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c0111a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111aa0:	8b 40 08             	mov    0x8(%eax),%eax
}
c0111aa3:	5d                   	pop    %ebp
c0111aa4:	c3                   	ret    
c0111aa5:	00 00                	add    %al,(%eax)
	...

c0111aa8 <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c0111aa8:	55                   	push   %ebp
c0111aa9:	89 e5                	mov    %esp,%ebp
c0111aab:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c0111aae:	c7 04 24 91 94 11 c0 	movl   $0xc0119491,(%esp)
c0111ab5:	e8 d4 08 00 00       	call   c011238e <sfs_mount>
c0111aba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111abd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111ac1:	74 23                	je     c0111ae6 <sfs_init+0x3e>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c0111ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111ac6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111aca:	c7 44 24 08 97 94 11 	movl   $0xc0119497,0x8(%esp)
c0111ad1:	c0 
c0111ad2:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0111ad9:	00 
c0111ada:	c7 04 24 b4 94 11 c0 	movl   $0xc01194b4,(%esp)
c0111ae1:	e8 c6 f3 fe ff       	call   c0100eac <__panic>
    }
}
c0111ae6:	c9                   	leave  
c0111ae7:	c3                   	ret    

c0111ae8 <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c0111ae8:	55                   	push   %ebp
c0111ae9:	89 e5                	mov    %esp,%ebp
c0111aeb:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111aee:	8b 45 08             	mov    0x8(%ebp),%eax
c0111af1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111af4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111af8:	74 0a                	je     c0111b04 <sfs_sync+0x1c>
c0111afa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111afd:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111b00:	85 c0                	test   %eax,%eax
c0111b02:	74 24                	je     c0111b28 <sfs_sync+0x40>
c0111b04:	c7 44 24 0c c8 94 11 	movl   $0xc01194c8,0xc(%esp)
c0111b0b:	c0 
c0111b0c:	c7 44 24 08 f1 94 11 	movl   $0xc01194f1,0x8(%esp)
c0111b13:	c0 
c0111b14:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111b1b:	00 
c0111b1c:	c7 04 24 06 95 11 c0 	movl   $0xc0119506,(%esp)
c0111b23:	e8 84 f3 fe ff       	call   c0100eac <__panic>
c0111b28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c0111b2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b31:	89 04 24             	mov    %eax,(%esp)
c0111b34:	e8 fb 2f 00 00       	call   c0114b34 <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c0111b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b3c:	83 c0 60             	add    $0x60,%eax
c0111b3f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111b42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b45:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0111b48:	eb 74                	jmp    c0111bbe <sfs_sync+0xd6>
            struct sfs_inode *sin = le2sin(le, inode_link);
c0111b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b4d:	83 e8 1c             	sub    $0x1c,%eax
c0111b50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c0111b53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111b56:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111b59:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0111b5d:	74 17                	je     c0111b76 <sfs_sync+0x8e>
c0111b5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b62:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111b65:	85 c0                	test   %eax,%eax
c0111b67:	74 0d                	je     c0111b76 <sfs_sync+0x8e>
c0111b69:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b6c:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111b6f:	8b 40 18             	mov    0x18(%eax),%eax
c0111b72:	85 c0                	test   %eax,%eax
c0111b74:	75 24                	jne    c0111b9a <sfs_sync+0xb2>
c0111b76:	c7 44 24 0c 1c 95 11 	movl   $0xc011951c,0xc(%esp)
c0111b7d:	c0 
c0111b7e:	c7 44 24 08 f1 94 11 	movl   $0xc01194f1,0x8(%esp)
c0111b85:	c0 
c0111b86:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c0111b8d:	00 
c0111b8e:	c7 04 24 06 95 11 c0 	movl   $0xc0119506,(%esp)
c0111b95:	e8 12 f3 fe ff       	call   c0100eac <__panic>
c0111b9a:	c7 44 24 04 6a 95 11 	movl   $0xc011956a,0x4(%esp)
c0111ba1:	c0 
c0111ba2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ba5:	89 04 24             	mov    %eax,(%esp)
c0111ba8:	e8 d0 d8 ff ff       	call   c010f47d <inode_check>
c0111bad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111bb0:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111bb3:	8b 50 18             	mov    0x18(%eax),%edx
c0111bb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111bb9:	89 04 24             	mov    %eax,(%esp)
c0111bbc:	ff d2                	call   *%edx
c0111bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111bc1:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111bc4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111bc7:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c0111bca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111bcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111bd0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111bd3:	0f 85 71 ff ff ff    	jne    c0111b4a <sfs_sync+0x62>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c0111bd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111bdc:	89 04 24             	mov    %eax,(%esp)
c0111bdf:	e8 7c 2f 00 00       	call   c0114b60 <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
c0111be4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111be7:	8b 40 34             	mov    0x34(%eax),%eax
c0111bea:	85 c0                	test   %eax,%eax
c0111bec:	74 50                	je     c0111c3e <sfs_sync+0x156>
        sfs->super_dirty = 0;
c0111bee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111bf1:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c0111bf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111bfb:	89 04 24             	mov    %eax,(%esp)
c0111bfe:	e8 c1 2d 00 00       	call   c01149c4 <sfs_sync_super>
c0111c03:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111c06:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111c0a:	74 0f                	je     c0111c1b <sfs_sync+0x133>
            sfs->super_dirty = 1;
c0111c0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c0f:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111c16:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111c19:	eb 28                	jmp    c0111c43 <sfs_sync+0x15b>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c0111c1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c1e:	89 04 24             	mov    %eax,(%esp)
c0111c21:	e8 2a 2e 00 00       	call   c0114a50 <sfs_sync_freemap>
c0111c26:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111c29:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111c2d:	74 0f                	je     c0111c3e <sfs_sync+0x156>
            sfs->super_dirty = 1;
c0111c2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c32:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111c39:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111c3c:	eb 05                	jmp    c0111c43 <sfs_sync+0x15b>
        }
    }
    return 0;
c0111c3e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111c43:	c9                   	leave  
c0111c44:	c3                   	ret    

c0111c45 <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c0111c45:	55                   	push   %ebp
c0111c46:	89 e5                	mov    %esp,%ebp
c0111c48:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c0111c4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111c51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111c55:	74 0a                	je     c0111c61 <sfs_get_root+0x1c>
c0111c57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c5a:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111c5d:	85 c0                	test   %eax,%eax
c0111c5f:	74 24                	je     c0111c85 <sfs_get_root+0x40>
c0111c61:	c7 44 24 0c c8 94 11 	movl   $0xc01194c8,0xc(%esp)
c0111c68:	c0 
c0111c69:	c7 44 24 08 f1 94 11 	movl   $0xc01194f1,0x8(%esp)
c0111c70:	c0 
c0111c71:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
c0111c78:	00 
c0111c79:	c7 04 24 06 95 11 c0 	movl   $0xc0119506,(%esp)
c0111c80:	e8 27 f2 fe ff       	call   c0100eac <__panic>
c0111c85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c88:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111c8f:	00 
c0111c90:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0111c93:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111c97:	89 04 24             	mov    %eax,(%esp)
c0111c9a:	e8 e0 0b 00 00       	call   c011287f <sfs_load_inode>
c0111c9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111ca2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111ca6:	74 23                	je     c0111ccb <sfs_get_root+0x86>
        panic("load sfs root failed: %e", ret);
c0111ca8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111cab:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111caf:	c7 44 24 08 70 95 11 	movl   $0xc0119570,0x8(%esp)
c0111cb6:	c0 
c0111cb7:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111cbe:	00 
c0111cbf:	c7 04 24 06 95 11 c0 	movl   $0xc0119506,(%esp)
c0111cc6:	e8 e1 f1 fe ff       	call   c0100eac <__panic>
    }
    return node;
c0111ccb:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c0111cce:	c9                   	leave  
c0111ccf:	c3                   	ret    

c0111cd0 <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c0111cd0:	55                   	push   %ebp
c0111cd1:	89 e5                	mov    %esp,%ebp
c0111cd3:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111cd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0111cd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111cdc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111ce0:	74 0a                	je     c0111cec <sfs_unmount+0x1c>
c0111ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111ce5:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111ce8:	85 c0                	test   %eax,%eax
c0111cea:	74 24                	je     c0111d10 <sfs_unmount+0x40>
c0111cec:	c7 44 24 0c c8 94 11 	movl   $0xc01194c8,0xc(%esp)
c0111cf3:	c0 
c0111cf4:	c7 44 24 08 f1 94 11 	movl   $0xc01194f1,0x8(%esp)
c0111cfb:	c0 
c0111cfc:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0111d03:	00 
c0111d04:	c7 04 24 06 95 11 c0 	movl   $0xc0119506,(%esp)
c0111d0b:	e8 9c f1 fe ff       	call   c0100eac <__panic>
c0111d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111d13:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c0111d16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d19:	83 c0 60             	add    $0x60,%eax
c0111d1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0111d1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d22:	8b 40 04             	mov    0x4(%eax),%eax
c0111d25:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0111d28:	0f 94 c0             	sete   %al
c0111d2b:	0f b6 c0             	movzbl %al,%eax
c0111d2e:	85 c0                	test   %eax,%eax
c0111d30:	75 07                	jne    c0111d39 <sfs_unmount+0x69>
        return -E_BUSY;
c0111d32:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0111d37:	eb 68                	jmp    c0111da1 <sfs_unmount+0xd1>
    }
    assert(!sfs->super_dirty);
c0111d39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d3c:	8b 40 34             	mov    0x34(%eax),%eax
c0111d3f:	85 c0                	test   %eax,%eax
c0111d41:	74 24                	je     c0111d67 <sfs_unmount+0x97>
c0111d43:	c7 44 24 0c 89 95 11 	movl   $0xc0119589,0xc(%esp)
c0111d4a:	c0 
c0111d4b:	c7 44 24 08 f1 94 11 	movl   $0xc01194f1,0x8(%esp)
c0111d52:	c0 
c0111d53:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0111d5a:	00 
c0111d5b:	c7 04 24 06 95 11 c0 	movl   $0xc0119506,(%esp)
c0111d62:	e8 45 f1 fe ff       	call   c0100eac <__panic>
    bitmap_destroy(sfs->freemap);
c0111d67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d6a:	8b 40 30             	mov    0x30(%eax),%eax
c0111d6d:	89 04 24             	mov    %eax,(%esp)
c0111d70:	e8 ec fc ff ff       	call   c0111a61 <bitmap_destroy>
    kfree(sfs->sfs_buffer);
c0111d75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d78:	8b 40 38             	mov    0x38(%eax),%eax
c0111d7b:	89 04 24             	mov    %eax,(%esp)
c0111d7e:	e8 ee 30 ff ff       	call   c0104e71 <kfree>
    kfree(sfs->hash_list);
c0111d83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d86:	8b 40 68             	mov    0x68(%eax),%eax
c0111d89:	89 04 24             	mov    %eax,(%esp)
c0111d8c:	e8 e0 30 ff ff       	call   c0104e71 <kfree>
    kfree(sfs);
c0111d91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d94:	89 04 24             	mov    %eax,(%esp)
c0111d97:	e8 d5 30 ff ff       	call   c0104e71 <kfree>
    return 0;
c0111d9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111da1:	c9                   	leave  
c0111da2:	c3                   	ret    

c0111da3 <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c0111da3:	55                   	push   %ebp
c0111da4:	89 e5                	mov    %esp,%ebp
c0111da6:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111da9:	8b 45 08             	mov    0x8(%ebp),%eax
c0111dac:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111daf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111db3:	74 0a                	je     c0111dbf <sfs_cleanup+0x1c>
c0111db5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111db8:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111dbb:	85 c0                	test   %eax,%eax
c0111dbd:	74 24                	je     c0111de3 <sfs_cleanup+0x40>
c0111dbf:	c7 44 24 0c c8 94 11 	movl   $0xc01194c8,0xc(%esp)
c0111dc6:	c0 
c0111dc7:	c7 44 24 08 f1 94 11 	movl   $0xc01194f1,0x8(%esp)
c0111dce:	c0 
c0111dcf:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0111dd6:	00 
c0111dd7:	c7 04 24 06 95 11 c0 	movl   $0xc0119506,(%esp)
c0111dde:	e8 c9 f0 fe ff       	call   c0100eac <__panic>
c0111de3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111de6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c0111de9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111dec:	8b 40 04             	mov    0x4(%eax),%eax
c0111def:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111df2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111df5:	8b 40 08             	mov    0x8(%eax),%eax
c0111df8:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0111dfb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111dfe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111e01:	89 d1                	mov    %edx,%ecx
c0111e03:	29 c1                	sub    %eax,%ecx
c0111e05:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111e08:	8d 50 0c             	lea    0xc(%eax),%edx
c0111e0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111e0e:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111e12:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e15:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111e19:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0111e1d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111e21:	c7 04 24 9c 95 11 c0 	movl   $0xc011959c,(%esp)
c0111e28:	e8 43 e5 fe ff       	call   c0100370 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111e2d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111e34:	eb 1b                	jmp    c0111e51 <sfs_cleanup+0xae>
        if ((ret = fsop_sync(fs)) == 0) {
c0111e36:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e39:	8b 50 70             	mov    0x70(%eax),%edx
c0111e3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e3f:	89 04 24             	mov    %eax,(%esp)
c0111e42:	ff d2                	call   *%edx
c0111e44:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111e47:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111e4b:	74 0c                	je     c0111e59 <sfs_cleanup+0xb6>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111e4d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111e51:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111e55:	7e df                	jle    c0111e36 <sfs_cleanup+0x93>
c0111e57:	eb 01                	jmp    c0111e5a <sfs_cleanup+0xb7>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
c0111e59:	90                   	nop
        }
    }
    if (ret != 0) {
c0111e5a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111e5e:	74 2d                	je     c0111e8d <sfs_cleanup+0xea>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c0111e60:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111e63:	8d 50 0c             	lea    0xc(%eax),%edx
c0111e66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111e69:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111e6d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0111e71:	c7 44 24 08 bb 95 11 	movl   $0xc01195bb,0x8(%esp)
c0111e78:	c0 
c0111e79:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111e80:	00 
c0111e81:	c7 04 24 06 95 11 c0 	movl   $0xc0119506,(%esp)
c0111e88:	e8 8e f0 fe ff       	call   c0100f1b <__warn>
    }
}
c0111e8d:	c9                   	leave  
c0111e8e:	c3                   	ret    

c0111e8f <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c0111e8f:	55                   	push   %ebp
c0111e90:	89 e5                	mov    %esp,%ebp
c0111e92:	83 ec 38             	sub    $0x38,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0111e95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111e98:	c1 e0 0c             	shl    $0xc,%eax
c0111e9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111e9f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0111ea6:	00 
c0111ea7:	8b 45 10             	mov    0x10(%ebp),%eax
c0111eaa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111eae:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0111eb1:	89 04 24             	mov    %eax,(%esp)
c0111eb4:	e8 df 95 ff ff       	call   c010b498 <iobuf_init>
c0111eb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c0111ebc:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ebf:	8b 50 10             	mov    0x10(%eax),%edx
c0111ec2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111ec9:	00 
c0111eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111ecd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111ed1:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ed4:	89 04 24             	mov    %eax,(%esp)
c0111ed7:	ff d2                	call   *%edx
}
c0111ed9:	c9                   	leave  
c0111eda:	c3                   	ret    

c0111edb <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c0111edb:	55                   	push   %ebp
c0111edc:	89 e5                	mov    %esp,%ebp
c0111ede:	83 ec 28             	sub    $0x28,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c0111ee1:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0111ee4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111eeb:	89 04 24             	mov    %eax,(%esp)
c0111eee:	e8 8f fb ff ff       	call   c0111a82 <bitmap_getdata>
c0111ef3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c0111ef6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111efa:	74 0f                	je     c0111f0b <sfs_init_freemap+0x30>
c0111efc:	8b 45 14             	mov    0x14(%ebp),%eax
c0111eff:	89 c2                	mov    %eax,%edx
c0111f01:	c1 e2 0c             	shl    $0xc,%edx
c0111f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111f07:	39 c2                	cmp    %eax,%edx
c0111f09:	74 5a                	je     c0111f65 <sfs_init_freemap+0x8a>
c0111f0b:	c7 44 24 0c d8 95 11 	movl   $0xc01195d8,0xc(%esp)
c0111f12:	c0 
c0111f13:	c7 44 24 08 f1 94 11 	movl   $0xc01194f1,0x8(%esp)
c0111f1a:	c0 
c0111f1b:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c0111f22:	00 
c0111f23:	c7 04 24 06 95 11 c0 	movl   $0xc0119506,(%esp)
c0111f2a:	e8 7d ef fe ff       	call   c0100eac <__panic>
    while (nblks != 0) {
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c0111f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111f32:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111f36:	8b 45 10             	mov    0x10(%ebp),%eax
c0111f39:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f40:	89 04 24             	mov    %eax,(%esp)
c0111f43:	e8 47 ff ff ff       	call   c0111e8f <sfs_init_read>
c0111f48:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111f4b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111f4f:	74 05                	je     c0111f56 <sfs_init_freemap+0x7b>
            return ret;
c0111f51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111f54:	eb 1a                	jmp    c0111f70 <sfs_init_freemap+0x95>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0111f56:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111f5a:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0111f5e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0111f65:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111f69:	75 c4                	jne    c0111f2f <sfs_init_freemap+0x54>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c0111f6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111f70:	c9                   	leave  
c0111f71:	c3                   	ret    

c0111f72 <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0111f72:	55                   	push   %ebp
c0111f73:	89 e5                	mov    %esp,%ebp
c0111f75:	83 ec 78             	sub    $0x78,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0111f78:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f7b:	8b 40 04             	mov    0x4(%eax),%eax
c0111f7e:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111f83:	74 0a                	je     c0111f8f <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0111f85:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0111f8a:	e9 fd 03 00 00       	jmp    c011238c <sfs_do_mount+0x41a>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c0111f8f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0111f96:	e8 d5 d5 ff ff       	call   c010f570 <__alloc_fs>
c0111f9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111f9e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111fa2:	75 0a                	jne    c0111fae <sfs_do_mount+0x3c>
        return -E_NO_MEM;
c0111fa4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111fa9:	e9 de 03 00 00       	jmp    c011238c <sfs_do_mount+0x41a>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111fae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111fb1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111fb4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111fb8:	74 0a                	je     c0111fc4 <sfs_do_mount+0x52>
c0111fba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111fbd:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111fc0:	85 c0                	test   %eax,%eax
c0111fc2:	74 24                	je     c0111fe8 <sfs_do_mount+0x76>
c0111fc4:	c7 44 24 0c c8 94 11 	movl   $0xc01194c8,0xc(%esp)
c0111fcb:	c0 
c0111fcc:	c7 44 24 08 f1 94 11 	movl   $0xc01194f1,0x8(%esp)
c0111fd3:	c0 
c0111fd4:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c0111fdb:	00 
c0111fdc:	c7 04 24 06 95 11 c0 	movl   $0xc0119506,(%esp)
c0111fe3:	e8 c4 ee fe ff       	call   c0100eac <__panic>
c0111fe8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111feb:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c0111fee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ff1:	8b 55 08             	mov    0x8(%ebp),%edx
c0111ff4:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c0111ff7:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c0111ffe:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0112005:	e8 4c 2e ff ff       	call   c0104e56 <kmalloc>
c011200a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011200d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112010:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0112013:	89 50 38             	mov    %edx,0x38(%eax)
c0112016:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112019:	8b 40 38             	mov    0x38(%eax),%eax
c011201c:	85 c0                	test   %eax,%eax
c011201e:	0f 84 59 03 00 00    	je     c011237d <sfs_do_mount+0x40b>
        goto failed_cleanup_fs;
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c0112024:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112027:	89 44 24 08          	mov    %eax,0x8(%esp)
c011202b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0112032:	00 
c0112033:	8b 45 08             	mov    0x8(%ebp),%eax
c0112036:	89 04 24             	mov    %eax,(%esp)
c0112039:	e8 51 fe ff ff       	call   c0111e8f <sfs_init_read>
c011203e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112041:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112045:	0f 85 21 03 00 00    	jne    c011236c <sfs_do_mount+0x3fa>
        goto failed_cleanup_sfs_buffer;
    }

    ret = -E_INVAL;
c011204b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c0112052:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112055:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c0112058:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011205b:	8b 00                	mov    (%eax),%eax
c011205d:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c0112062:	74 22                	je     c0112086 <sfs_do_mount+0x114>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
                super->magic, SFS_MAGIC);
c0112064:	8b 45 d8             	mov    -0x28(%ebp),%eax

    ret = -E_INVAL;

    struct sfs_super *super = sfs_buffer;
    if (super->magic != SFS_MAGIC) {
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c0112067:	8b 00                	mov    (%eax),%eax
c0112069:	c7 44 24 08 2a be 8d 	movl   $0x2f8dbe2a,0x8(%esp)
c0112070:	2f 
c0112071:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112075:	c7 04 24 04 96 11 c0 	movl   $0xc0119604,(%esp)
c011207c:	e8 ef e2 fe ff       	call   c0100370 <cprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c0112081:	e9 ea 02 00 00       	jmp    c0112370 <sfs_do_mount+0x3fe>
    }
    if (super->blocks > dev->d_blocks) {
c0112086:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112089:	8b 50 04             	mov    0x4(%eax),%edx
c011208c:	8b 45 08             	mov    0x8(%ebp),%eax
c011208f:	8b 00                	mov    (%eax),%eax
c0112091:	39 c2                	cmp    %eax,%edx
c0112093:	76 24                	jbe    c01120b9 <sfs_do_mount+0x147>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
                super->blocks, dev->d_blocks);
c0112095:	8b 45 08             	mov    0x8(%ebp),%eax
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
    }
    if (super->blocks > dev->d_blocks) {
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c0112098:	8b 10                	mov    (%eax),%edx
                super->blocks, dev->d_blocks);
c011209a:	8b 45 d8             	mov    -0x28(%ebp),%eax
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
    }
    if (super->blocks > dev->d_blocks) {
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c011209d:	8b 40 04             	mov    0x4(%eax),%eax
c01120a0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01120a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01120a8:	c7 04 24 3c 96 11 c0 	movl   $0xc011963c,(%esp)
c01120af:	e8 bc e2 fe ff       	call   c0100370 <cprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c01120b4:	e9 b7 02 00 00       	jmp    c0112370 <sfs_do_mount+0x3fe>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c01120b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01120bc:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c01120c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01120c3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01120c6:	8b 0a                	mov    (%edx),%ecx
c01120c8:	89 08                	mov    %ecx,(%eax)
c01120ca:	8b 4a 04             	mov    0x4(%edx),%ecx
c01120cd:	89 48 04             	mov    %ecx,0x4(%eax)
c01120d0:	8b 4a 08             	mov    0x8(%edx),%ecx
c01120d3:	89 48 08             	mov    %ecx,0x8(%eax)
c01120d6:	8b 4a 0c             	mov    0xc(%edx),%ecx
c01120d9:	89 48 0c             	mov    %ecx,0xc(%eax)
c01120dc:	8b 4a 10             	mov    0x10(%edx),%ecx
c01120df:	89 48 10             	mov    %ecx,0x10(%eax)
c01120e2:	8b 4a 14             	mov    0x14(%edx),%ecx
c01120e5:	89 48 14             	mov    %ecx,0x14(%eax)
c01120e8:	8b 4a 18             	mov    0x18(%edx),%ecx
c01120eb:	89 48 18             	mov    %ecx,0x18(%eax)
c01120ee:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c01120f1:	89 48 1c             	mov    %ecx,0x1c(%eax)
c01120f4:	8b 4a 20             	mov    0x20(%edx),%ecx
c01120f7:	89 48 20             	mov    %ecx,0x20(%eax)
c01120fa:	8b 4a 24             	mov    0x24(%edx),%ecx
c01120fd:	89 48 24             	mov    %ecx,0x24(%eax)
c0112100:	8b 52 28             	mov    0x28(%edx),%edx
c0112103:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c0112106:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c011210d:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
c0112114:	e8 3d 2d ff ff       	call   c0104e56 <kmalloc>
c0112119:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c011211c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011211f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0112122:	89 50 68             	mov    %edx,0x68(%eax)
c0112125:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112128:	8b 40 68             	mov    0x68(%eax),%eax
c011212b:	85 c0                	test   %eax,%eax
c011212d:	0f 84 3c 02 00 00    	je     c011236f <sfs_do_mount+0x3fd>
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0112133:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011213a:	eb 24                	jmp    c0112160 <sfs_do_mount+0x1ee>
        list_init(hash_list + i);
c011213c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011213f:	c1 e0 03             	shl    $0x3,%eax
c0112142:	03 45 d4             	add    -0x2c(%ebp),%eax
c0112145:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0112148:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c011214b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c011214e:	89 50 04             	mov    %edx,0x4(%eax)
c0112151:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0112154:	8b 50 04             	mov    0x4(%eax),%edx
c0112157:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c011215a:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c011215c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0112160:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0112167:	76 d3                	jbe    c011213c <sfs_do_mount+0x1ca>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c0112169:	c7 45 d0 00 80 00 00 	movl   $0x8000,-0x30(%ebp)
c0112170:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112173:	8b 40 04             	mov    0x4(%eax),%eax
c0112176:	03 45 d0             	add    -0x30(%ebp),%eax
c0112179:	83 e8 01             	sub    $0x1,%eax
c011217c:	89 45 cc             	mov    %eax,-0x34(%ebp)
c011217f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0112182:	ba 00 00 00 00       	mov    $0x0,%edx
c0112187:	f7 75 d0             	divl   -0x30(%ebp)
c011218a:	89 d0                	mov    %edx,%eax
c011218c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c011218f:	89 d1                	mov    %edx,%ecx
c0112191:	29 c1                	sub    %eax,%ecx
c0112193:	89 c8                	mov    %ecx,%eax
c0112195:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c0112198:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011219b:	89 04 24             	mov    %eax,(%esp)
c011219e:	e8 25 f5 ff ff       	call   c01116c8 <bitmap_create>
c01121a3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01121a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01121a9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01121ac:	89 50 30             	mov    %edx,0x30(%eax)
c01121af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01121b2:	8b 40 30             	mov    0x30(%eax),%eax
c01121b5:	85 c0                	test   %eax,%eax
c01121b7:	0f 84 a1 01 00 00    	je     c011235e <sfs_do_mount+0x3ec>
        goto failed_cleanup_hash_list;
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c01121bd:	c7 45 c0 00 80 00 00 	movl   $0x8000,-0x40(%ebp)
c01121c4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01121c7:	8b 40 04             	mov    0x4(%eax),%eax
c01121ca:	03 45 c0             	add    -0x40(%ebp),%eax
c01121cd:	83 e8 01             	sub    $0x1,%eax
c01121d0:	ba 00 00 00 00       	mov    $0x0,%edx
c01121d5:	f7 75 c0             	divl   -0x40(%ebp)
c01121d8:	89 45 bc             	mov    %eax,-0x44(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c01121db:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01121de:	89 44 24 10          	mov    %eax,0x10(%esp)
c01121e2:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01121e5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01121e9:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c01121f0:	00 
c01121f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01121f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01121f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01121fb:	89 04 24             	mov    %eax,(%esp)
c01121fe:	e8 d8 fc ff ff       	call   c0111edb <sfs_init_freemap>
c0112203:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112206:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011220a:	0f 85 40 01 00 00    	jne    c0112350 <sfs_do_mount+0x3de>
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c0112210:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112213:	8b 40 04             	mov    0x4(%eax),%eax
c0112216:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0112219:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c0112220:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0112227:	eb 1e                	jmp    c0112247 <sfs_do_mount+0x2d5>
        if (bitmap_test(freemap, i)) {
c0112229:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011222c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112230:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112233:	89 04 24             	mov    %eax,(%esp)
c0112236:	e8 8b f7 ff ff       	call   c01119c6 <bitmap_test>
c011223b:	85 c0                	test   %eax,%eax
c011223d:	74 04                	je     c0112243 <sfs_do_mount+0x2d1>
            unused_blocks ++;
c011223f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c0112243:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0112247:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011224a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c011224d:	72 da                	jb     c0112229 <sfs_do_mount+0x2b7>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c011224f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112252:	8b 40 08             	mov    0x8(%eax),%eax
c0112255:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0112258:	74 24                	je     c011227e <sfs_do_mount+0x30c>
c011225a:	c7 44 24 0c 6c 96 11 	movl   $0xc011966c,0xc(%esp)
c0112261:	c0 
c0112262:	c7 44 24 08 f1 94 11 	movl   $0xc01194f1,0x8(%esp)
c0112269:	c0 
c011226a:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0112271:	00 
c0112272:	c7 04 24 06 95 11 c0 	movl   $0xc0119506,(%esp)
c0112279:	e8 2e ec fe ff       	call   c0100eac <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c011227e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112281:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c0112288:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011228b:	83 c0 3c             	add    $0x3c,%eax
c011228e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112295:	00 
c0112296:	89 04 24             	mov    %eax,(%esp)
c0112299:	e8 10 7a ff ff       	call   c0109cae <sem_init>
    sem_init(&(sfs->io_sem), 1);
c011229e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01122a1:	83 c0 48             	add    $0x48,%eax
c01122a4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01122ab:	00 
c01122ac:	89 04 24             	mov    %eax,(%esp)
c01122af:	e8 fa 79 ff ff       	call   c0109cae <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
c01122b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01122b7:	83 c0 54             	add    $0x54,%eax
c01122ba:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01122c1:	00 
c01122c2:	89 04 24             	mov    %eax,(%esp)
c01122c5:	e8 e4 79 ff ff       	call   c0109cae <sem_init>
    list_init(&(sfs->inode_list));
c01122ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01122cd:	83 c0 60             	add    $0x60,%eax
c01122d0:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01122d3:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01122d6:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01122d9:	89 50 04             	mov    %edx,0x4(%eax)
c01122dc:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01122df:	8b 50 04             	mov    0x4(%eax),%edx
c01122e2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01122e5:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c01122e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01122ea:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01122ed:	89 d1                	mov    %edx,%ecx
c01122ef:	29 c1                	sub    %eax,%ecx
c01122f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01122f4:	8d 50 0c             	lea    0xc(%eax),%edx
c01122f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01122fa:	89 44 24 10          	mov    %eax,0x10(%esp)
c01122fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112301:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112305:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0112309:	89 54 24 04          	mov    %edx,0x4(%esp)
c011230d:	c7 04 24 96 96 11 c0 	movl   $0xc0119696,(%esp)
c0112314:	e8 57 e0 fe ff       	call   c0100370 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c0112319:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011231c:	c7 40 70 e8 1a 11 c0 	movl   $0xc0111ae8,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c0112323:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112326:	c7 40 74 45 1c 11 c0 	movl   $0xc0111c45,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c011232d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112330:	c7 40 78 d0 1c 11 c0 	movl   $0xc0111cd0,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c0112337:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011233a:	c7 40 7c a3 1d 11 c0 	movl   $0xc0111da3,0x7c(%eax)
    *fs_store = fs;
c0112341:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112344:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112347:	89 10                	mov    %edx,(%eax)
    return 0;
c0112349:	b8 00 00 00 00       	mov    $0x0,%eax
c011234e:	eb 3c                	jmp    c011238c <sfs_do_mount+0x41a>
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
        goto failed_cleanup_hash_list;
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
c0112350:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c0112351:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112354:	89 04 24             	mov    %eax,(%esp)
c0112357:	e8 05 f7 ff ff       	call   c0111a61 <bitmap_destroy>
c011235c:	eb 01                	jmp    c011235f <sfs_do_mount+0x3ed>

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
        goto failed_cleanup_hash_list;
c011235e:	90                   	nop
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c011235f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0112362:	89 04 24             	mov    %eax,(%esp)
c0112365:	e8 07 2b ff ff       	call   c0104e71 <kfree>
c011236a:	eb 04                	jmp    c0112370 <sfs_do_mount+0x3fe>
        goto failed_cleanup_fs;
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
        goto failed_cleanup_sfs_buffer;
c011236c:	90                   	nop
c011236d:	eb 01                	jmp    c0112370 <sfs_do_mount+0x3fe>
    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
c011236f:	90                   	nop
failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c0112370:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112373:	89 04 24             	mov    %eax,(%esp)
c0112376:	e8 f6 2a ff ff       	call   c0104e71 <kfree>
c011237b:	eb 01                	jmp    c011237e <sfs_do_mount+0x40c>

    int ret = -E_NO_MEM;

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
        goto failed_cleanup_fs;
c011237d:	90                   	nop
failed_cleanup_hash_list:
    kfree(hash_list);
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
failed_cleanup_fs:
    kfree(fs);
c011237e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112381:	89 04 24             	mov    %eax,(%esp)
c0112384:	e8 e8 2a ff ff       	call   c0104e71 <kfree>
    return ret;
c0112389:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011238c:	c9                   	leave  
c011238d:	c3                   	ret    

c011238e <sfs_mount>:

int
sfs_mount(const char *devname) {
c011238e:	55                   	push   %ebp
c011238f:	89 e5                	mov    %esp,%ebp
c0112391:	83 ec 18             	sub    $0x18,%esp
    return vfs_mount(devname, sfs_do_mount);
c0112394:	c7 44 24 04 72 1f 11 	movl   $0xc0111f72,0x4(%esp)
c011239b:	c0 
c011239c:	8b 45 08             	mov    0x8(%ebp),%eax
c011239f:	89 04 24             	mov    %eax,(%esp)
c01123a2:	e8 8e d8 ff ff       	call   c010fc35 <vfs_mount>
}
c01123a7:	c9                   	leave  
c01123a8:	c3                   	ret    
c01123a9:	00 00                	add    %al,(%eax)
	...

c01123ac <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c01123ac:	55                   	push   %ebp
c01123ad:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c01123af:	8b 45 08             	mov    0x8(%ebp),%eax
c01123b2:	8b 40 30             	mov    0x30(%eax),%eax
}
c01123b5:	5d                   	pop    %ebp
c01123b6:	c3                   	ret    

c01123b7 <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c01123b7:	55                   	push   %ebp
c01123b8:	89 e5                	mov    %esp,%ebp
c01123ba:	83 ec 18             	sub    $0x18,%esp
    down(&(sin->sem));
c01123bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01123c0:	83 c0 10             	add    $0x10,%eax
c01123c3:	89 04 24             	mov    %eax,(%esp)
c01123c6:	e8 71 7a ff ff       	call   c0109e3c <down>
}
c01123cb:	c9                   	leave  
c01123cc:	c3                   	ret    

c01123cd <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c01123cd:	55                   	push   %ebp
c01123ce:	89 e5                	mov    %esp,%ebp
c01123d0:	83 ec 18             	sub    $0x18,%esp
    up(&(sin->sem));
c01123d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01123d6:	83 c0 10             	add    $0x10,%eax
c01123d9:	89 04 24             	mov    %eax,(%esp)
c01123dc:	e8 40 7a ff ff       	call   c0109e21 <up>
}
c01123e1:	c9                   	leave  
c01123e2:	c3                   	ret    

c01123e3 <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c01123e3:	55                   	push   %ebp
c01123e4:	89 e5                	mov    %esp,%ebp
c01123e6:	83 ec 28             	sub    $0x28,%esp
c01123e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01123ec:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c01123f0:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01123f4:	83 f8 01             	cmp    $0x1,%eax
c01123f7:	74 0c                	je     c0112405 <sfs_get_ops+0x22>
c01123f9:	83 f8 02             	cmp    $0x2,%eax
c01123fc:	75 0e                	jne    c011240c <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c01123fe:	b8 c0 96 11 c0       	mov    $0xc01196c0,%eax
c0112403:	eb 2b                	jmp    c0112430 <sfs_get_ops+0x4d>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c0112405:	b8 00 97 11 c0       	mov    $0xc0119700,%eax
c011240a:	eb 24                	jmp    c0112430 <sfs_get_ops+0x4d>
    }
    panic("invalid file type %d.\n", type);
c011240c:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112410:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112414:	c7 44 24 08 40 97 11 	movl   $0xc0119740,0x8(%esp)
c011241b:	c0 
c011241c:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0112423:	00 
c0112424:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011242b:	e8 7c ea fe ff       	call   c0100eac <__panic>
}
c0112430:	c9                   	leave  
c0112431:	c3                   	ret    

c0112432 <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c0112432:	55                   	push   %ebp
c0112433:	89 e5                	mov    %esp,%ebp
c0112435:	53                   	push   %ebx
c0112436:	83 ec 14             	sub    $0x14,%esp
    return sfs->hash_list + sin_hashfn(ino);
c0112439:	8b 45 08             	mov    0x8(%ebp),%eax
c011243c:	8b 58 68             	mov    0x68(%eax),%ebx
c011243f:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c0112446:	00 
c0112447:	8b 45 0c             	mov    0xc(%ebp),%eax
c011244a:	89 04 24             	mov    %eax,(%esp)
c011244d:	e8 3a 27 00 00       	call   c0114b8c <hash32>
c0112452:	c1 e0 03             	shl    $0x3,%eax
c0112455:	01 d8                	add    %ebx,%eax
}
c0112457:	83 c4 14             	add    $0x14,%esp
c011245a:	5b                   	pop    %ebx
c011245b:	5d                   	pop    %ebp
c011245c:	c3                   	ret    

c011245d <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c011245d:	55                   	push   %ebp
c011245e:	89 e5                	mov    %esp,%ebp
c0112460:	53                   	push   %ebx
c0112461:	83 ec 54             	sub    $0x54,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c0112464:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112467:	83 c0 1c             	add    $0x1c,%eax
c011246a:	8b 55 08             	mov    0x8(%ebp),%edx
c011246d:	83 c2 60             	add    $0x60,%edx
c0112470:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0112473:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112476:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112479:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011247c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011247f:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0112482:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112485:	8b 40 04             	mov    0x4(%eax),%eax
c0112488:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011248b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c011248e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112491:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0112494:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0112497:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011249a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011249d:	89 10                	mov    %edx,(%eax)
c011249f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01124a2:	8b 10                	mov    (%eax),%edx
c01124a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01124a7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01124aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01124ad:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01124b0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01124b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01124b6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01124b9:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c01124bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124be:	8d 58 24             	lea    0x24(%eax),%ebx
c01124c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124c4:	8b 40 04             	mov    0x4(%eax),%eax
c01124c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01124cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01124ce:	89 04 24             	mov    %eax,(%esp)
c01124d1:	e8 5c ff ff ff       	call   c0112432 <sfs_hash_list>
c01124d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01124d9:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c01124dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01124df:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01124e2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01124e5:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01124e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01124eb:	8b 40 04             	mov    0x4(%eax),%eax
c01124ee:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01124f1:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01124f4:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01124f7:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c01124fa:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01124fd:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0112500:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0112503:	89 10                	mov    %edx,(%eax)
c0112505:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0112508:	8b 10                	mov    (%eax),%edx
c011250a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011250d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0112510:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112513:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0112516:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0112519:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011251c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c011251f:	89 10                	mov    %edx,(%eax)
}
c0112521:	83 c4 54             	add    $0x54,%esp
c0112524:	5b                   	pop    %ebx
c0112525:	5d                   	pop    %ebp
c0112526:	c3                   	ret    

c0112527 <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c0112527:	55                   	push   %ebp
c0112528:	89 e5                	mov    %esp,%ebp
c011252a:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c011252d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112530:	83 c0 1c             	add    $0x1c,%eax
c0112533:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0112536:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112539:	8b 40 04             	mov    0x4(%eax),%eax
c011253c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c011253f:	8b 12                	mov    (%edx),%edx
c0112541:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0112544:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0112547:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011254a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011254d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0112550:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112553:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0112556:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c0112558:	8b 45 08             	mov    0x8(%ebp),%eax
c011255b:	83 c0 24             	add    $0x24,%eax
c011255e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0112561:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112564:	8b 40 04             	mov    0x4(%eax),%eax
c0112567:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011256a:	8b 12                	mov    (%edx),%edx
c011256c:	89 55 ec             	mov    %edx,-0x14(%ebp)
c011256f:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0112572:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112575:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112578:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c011257b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011257e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112581:	89 10                	mov    %edx,(%eax)
}
c0112583:	c9                   	leave  
c0112584:	c3                   	ret    

c0112585 <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c0112585:	55                   	push   %ebp
c0112586:	89 e5                	mov    %esp,%ebp
c0112588:	83 ec 28             	sub    $0x28,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c011258b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011258f:	74 2a                	je     c01125bb <sfs_block_inuse+0x36>
c0112591:	8b 45 08             	mov    0x8(%ebp),%eax
c0112594:	8b 40 04             	mov    0x4(%eax),%eax
c0112597:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011259a:	76 1f                	jbe    c01125bb <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c011259c:	8b 45 08             	mov    0x8(%ebp),%eax
c011259f:	8b 40 30             	mov    0x30(%eax),%eax
c01125a2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01125a5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01125a9:	89 04 24             	mov    %eax,(%esp)
c01125ac:	e8 15 f4 ff ff       	call   c01119c6 <bitmap_test>
c01125b1:	85 c0                	test   %eax,%eax
c01125b3:	0f 94 c0             	sete   %al
c01125b6:	0f b6 c0             	movzbl %al,%eax
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
}
c01125b9:	c9                   	leave  
c01125ba:	c3                   	ret    
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
    if (ino != 0 && ino < sfs->super.blocks) {
        return !bitmap_test(sfs->freemap, ino);
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c01125bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01125be:	8b 40 04             	mov    0x4(%eax),%eax
c01125c1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01125c4:	89 54 24 10          	mov    %edx,0x10(%esp)
c01125c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01125cc:	c7 44 24 08 70 97 11 	movl   $0xc0119770,0x8(%esp)
c01125d3:	c0 
c01125d4:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c01125db:	00 
c01125dc:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c01125e3:	e8 c4 e8 fe ff       	call   c0100eac <__panic>

c01125e8 <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c01125e8:	55                   	push   %ebp
c01125e9:	89 e5                	mov    %esp,%ebp
c01125eb:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c01125ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01125f1:	8b 40 30             	mov    0x30(%eax),%eax
c01125f4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01125f7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01125fb:	89 04 24             	mov    %eax,(%esp)
c01125fe:	e8 6d f2 ff ff       	call   c0111870 <bitmap_alloc>
c0112603:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112606:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011260a:	74 08                	je     c0112614 <sfs_block_alloc+0x2c>
        return ret;
c011260c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011260f:	e9 9f 00 00 00       	jmp    c01126b3 <sfs_block_alloc+0xcb>
    }
    assert(sfs->super.unused_blocks > 0);
c0112614:	8b 45 08             	mov    0x8(%ebp),%eax
c0112617:	8b 40 08             	mov    0x8(%eax),%eax
c011261a:	85 c0                	test   %eax,%eax
c011261c:	75 24                	jne    c0112642 <sfs_block_alloc+0x5a>
c011261e:	c7 44 24 0c a2 97 11 	movl   $0xc01197a2,0xc(%esp)
c0112625:	c0 
c0112626:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c011262d:	c0 
c011262e:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0112635:	00 
c0112636:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011263d:	e8 6a e8 fe ff       	call   c0100eac <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c0112642:	8b 45 08             	mov    0x8(%ebp),%eax
c0112645:	8b 40 08             	mov    0x8(%eax),%eax
c0112648:	8d 50 ff             	lea    -0x1(%eax),%edx
c011264b:	8b 45 08             	mov    0x8(%ebp),%eax
c011264e:	89 50 08             	mov    %edx,0x8(%eax)
c0112651:	8b 45 08             	mov    0x8(%ebp),%eax
c0112654:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c011265b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011265e:	8b 00                	mov    (%eax),%eax
c0112660:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112664:	8b 45 08             	mov    0x8(%ebp),%eax
c0112667:	89 04 24             	mov    %eax,(%esp)
c011266a:	e8 16 ff ff ff       	call   c0112585 <sfs_block_inuse>
c011266f:	85 c0                	test   %eax,%eax
c0112671:	75 24                	jne    c0112697 <sfs_block_alloc+0xaf>
c0112673:	c7 44 24 0c d4 97 11 	movl   $0xc01197d4,0xc(%esp)
c011267a:	c0 
c011267b:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0112682:	c0 
c0112683:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c011268a:	00 
c011268b:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0112692:	e8 15 e8 fe ff       	call   c0100eac <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c0112697:	8b 45 0c             	mov    0xc(%ebp),%eax
c011269a:	8b 00                	mov    (%eax),%eax
c011269c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01126a3:	00 
c01126a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01126ab:	89 04 24             	mov    %eax,(%esp)
c01126ae:	e8 f7 23 00 00       	call   c0114aaa <sfs_clear_block>
}
c01126b3:	c9                   	leave  
c01126b4:	c3                   	ret    

c01126b5 <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c01126b5:	55                   	push   %ebp
c01126b6:	89 e5                	mov    %esp,%ebp
c01126b8:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ino));
c01126bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01126be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01126c5:	89 04 24             	mov    %eax,(%esp)
c01126c8:	e8 b8 fe ff ff       	call   c0112585 <sfs_block_inuse>
c01126cd:	85 c0                	test   %eax,%eax
c01126cf:	75 24                	jne    c01126f5 <sfs_block_free+0x40>
c01126d1:	c7 44 24 0c f5 97 11 	movl   $0xc01197f5,0xc(%esp)
c01126d8:	c0 
c01126d9:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c01126e0:	c0 
c01126e1:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01126e8:	00 
c01126e9:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c01126f0:	e8 b7 e7 fe ff       	call   c0100eac <__panic>
    bitmap_free(sfs->freemap, ino);
c01126f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01126f8:	8b 40 30             	mov    0x30(%eax),%eax
c01126fb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01126fe:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112702:	89 04 24             	mov    %eax,(%esp)
c0112705:	e8 ee f2 ff ff       	call   c01119f8 <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c011270a:	8b 45 08             	mov    0x8(%ebp),%eax
c011270d:	8b 40 08             	mov    0x8(%eax),%eax
c0112710:	8d 50 01             	lea    0x1(%eax),%edx
c0112713:	8b 45 08             	mov    0x8(%ebp),%eax
c0112716:	89 50 08             	mov    %edx,0x8(%eax)
c0112719:	8b 45 08             	mov    0x8(%ebp),%eax
c011271c:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c0112723:	c9                   	leave  
c0112724:	c3                   	ret    

c0112725 <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c0112725:	55                   	push   %ebp
c0112726:	89 e5                	mov    %esp,%ebp
c0112728:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c011272b:	c7 04 24 35 12 00 00 	movl   $0x1235,(%esp)
c0112732:	e8 63 ca ff ff       	call   c010f19a <__alloc_inode>
c0112737:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011273a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011273e:	0f 84 b5 00 00 00    	je     c01127f9 <sfs_create_inode+0xd4>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c0112744:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112747:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011274b:	0f b7 c0             	movzwl %ax,%eax
c011274e:	89 04 24             	mov    %eax,(%esp)
c0112751:	e8 8d fc ff ff       	call   c01123e3 <sfs_get_ops>
c0112756:	8b 55 08             	mov    0x8(%ebp),%edx
c0112759:	89 54 24 08          	mov    %edx,0x8(%esp)
c011275d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112761:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112764:	89 04 24             	mov    %eax,(%esp)
c0112767:	e8 57 ca ff ff       	call   c010f1c3 <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c011276c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011276f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112772:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112776:	74 0d                	je     c0112785 <sfs_create_inode+0x60>
c0112778:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011277b:	8b 40 2c             	mov    0x2c(%eax),%eax
c011277e:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112783:	74 24                	je     c01127a9 <sfs_create_inode+0x84>
c0112785:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c011278c:	c0 
c011278d:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0112794:	c0 
c0112795:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c011279c:	00 
c011279d:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c01127a4:	e8 03 e7 fe ff       	call   c0100eac <__panic>
c01127a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01127ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c01127af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127b2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01127b5:	89 10                	mov    %edx,(%eax)
c01127b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127ba:	8b 55 10             	mov    0x10(%ebp),%edx
c01127bd:	89 50 04             	mov    %edx,0x4(%eax)
c01127c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127c3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01127ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127cd:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c01127d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127d7:	83 c0 10             	add    $0x10,%eax
c01127da:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01127e1:	00 
c01127e2:	89 04 24             	mov    %eax,(%esp)
c01127e5:	e8 c4 74 ff ff       	call   c0109cae <sem_init>
        *node_store = node;
c01127ea:	8b 45 14             	mov    0x14(%ebp),%eax
c01127ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01127f0:	89 10                	mov    %edx,(%eax)
        return 0;
c01127f2:	b8 00 00 00 00       	mov    $0x0,%eax
c01127f7:	eb 05                	jmp    c01127fe <sfs_create_inode+0xd9>
    }
    return -E_NO_MEM;
c01127f9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c01127fe:	c9                   	leave  
c01127ff:	c3                   	ret    

c0112800 <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c0112800:	55                   	push   %ebp
c0112801:	89 e5                	mov    %esp,%ebp
c0112803:	83 ec 38             	sub    $0x38,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c0112806:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112809:	89 44 24 04          	mov    %eax,0x4(%esp)
c011280d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112810:	89 04 24             	mov    %eax,(%esp)
c0112813:	e8 1a fc ff ff       	call   c0112432 <sfs_hash_list>
c0112818:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011281b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011281e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0112821:	eb 3e                	jmp    c0112861 <lookup_sfs_nolock+0x61>
        struct sfs_inode *sin = le2sin(le, hash_link);
c0112823:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112826:	83 e8 24             	sub    $0x24,%eax
c0112829:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c011282c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011282f:	8b 40 04             	mov    0x4(%eax),%eax
c0112832:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0112835:	75 2a                	jne    c0112861 <lookup_sfs_nolock+0x61>
            node = info2node(sin, sfs_inode);
c0112837:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011283a:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c011283d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112840:	89 04 24             	mov    %eax,(%esp)
c0112843:	e8 2d ca ff ff       	call   c010f275 <inode_ref_inc>
c0112848:	83 f8 01             	cmp    $0x1,%eax
c011284b:	75 0f                	jne    c011285c <lookup_sfs_nolock+0x5c>
                sin->reclaim_count ++;
c011284d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112850:	8b 40 0c             	mov    0xc(%eax),%eax
c0112853:	8d 50 01             	lea    0x1(%eax),%edx
c0112856:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112859:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c011285c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011285f:	eb 1c                	jmp    c011287d <lookup_sfs_nolock+0x7d>
c0112861:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112864:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0112867:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011286a:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c011286d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112870:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112873:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0112876:	75 ab                	jne    c0112823 <lookup_sfs_nolock+0x23>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c0112878:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011287d:	c9                   	leave  
c011287e:	c3                   	ret    

c011287f <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c011287f:	55                   	push   %ebp
c0112880:	89 e5                	mov    %esp,%ebp
c0112882:	83 ec 38             	sub    $0x38,%esp
    lock_sfs_fs(sfs);
c0112885:	8b 45 08             	mov    0x8(%ebp),%eax
c0112888:	89 04 24             	mov    %eax,(%esp)
c011288b:	e8 a4 22 00 00       	call   c0114b34 <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c0112890:	8b 45 10             	mov    0x10(%ebp),%eax
c0112893:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112897:	8b 45 08             	mov    0x8(%ebp),%eax
c011289a:	89 04 24             	mov    %eax,(%esp)
c011289d:	e8 5e ff ff ff       	call   c0112800 <lookup_sfs_nolock>
c01128a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01128a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01128a8:	85 c0                	test   %eax,%eax
c01128aa:	0f 85 3a 01 00 00    	jne    c01129ea <sfs_load_inode+0x16b>
        goto out_unlock;
    }

    int ret = -E_NO_MEM;
c01128b0:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c01128b7:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c01128be:	e8 93 25 ff ff       	call   c0104e56 <kmalloc>
c01128c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01128c6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01128ca:	0f 84 46 01 00 00    	je     c0112a16 <sfs_load_inode+0x197>
        goto failed_unlock;
    }

    assert(sfs_block_inuse(sfs, ino));
c01128d0:	8b 45 10             	mov    0x10(%ebp),%eax
c01128d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01128da:	89 04 24             	mov    %eax,(%esp)
c01128dd:	e8 a3 fc ff ff       	call   c0112585 <sfs_block_inuse>
c01128e2:	85 c0                	test   %eax,%eax
c01128e4:	75 24                	jne    c011290a <sfs_load_inode+0x8b>
c01128e6:	c7 44 24 0c f5 97 11 	movl   $0xc01197f5,0xc(%esp)
c01128ed:	c0 
c01128ee:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c01128f5:	c0 
c01128f6:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c01128fd:	00 
c01128fe:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0112905:	e8 a2 e5 fe ff       	call   c0100eac <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c011290a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0112911:	00 
c0112912:	8b 45 10             	mov    0x10(%ebp),%eax
c0112915:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112919:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c0112920:	00 
c0112921:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112924:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112928:	8b 45 08             	mov    0x8(%ebp),%eax
c011292b:	89 04 24             	mov    %eax,(%esp)
c011292e:	e8 f4 1e 00 00       	call   c0114827 <sfs_rbuf>
c0112933:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112936:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011293a:	0f 85 c5 00 00 00    	jne    c0112a05 <sfs_load_inode+0x186>
        goto failed_cleanup_din;
    }

    assert(din->nlinks != 0);
c0112940:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112943:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0112947:	66 85 c0             	test   %ax,%ax
c011294a:	75 24                	jne    c0112970 <sfs_load_inode+0xf1>
c011294c:	c7 44 24 0c 46 98 11 	movl   $0xc0119846,0xc(%esp)
c0112953:	c0 
c0112954:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c011295b:	c0 
c011295c:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0112963:	00 
c0112964:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011296b:	e8 3c e5 fe ff       	call   c0100eac <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c0112970:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112973:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112977:	8b 45 10             	mov    0x10(%ebp),%eax
c011297a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011297e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112981:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112985:	8b 45 08             	mov    0x8(%ebp),%eax
c0112988:	89 04 24             	mov    %eax,(%esp)
c011298b:	e8 95 fd ff ff       	call   c0112725 <sfs_create_inode>
c0112990:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112993:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112997:	75 6f                	jne    c0112a08 <sfs_load_inode+0x189>
        goto failed_cleanup_din;
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c0112999:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011299c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011299f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01129a3:	74 0d                	je     c01129b2 <sfs_load_inode+0x133>
c01129a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129a8:	8b 40 2c             	mov    0x2c(%eax),%eax
c01129ab:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01129b0:	74 24                	je     c01129d6 <sfs_load_inode+0x157>
c01129b2:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c01129b9:	c0 
c01129ba:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c01129c1:	c0 
c01129c2:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c01129c9:	00 
c01129ca:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c01129d1:	e8 d6 e4 fe ff       	call   c0100eac <__panic>
c01129d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01129dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01129e0:	89 04 24             	mov    %eax,(%esp)
c01129e3:	e8 75 fa ff ff       	call   c011245d <sfs_set_links>
c01129e8:	eb 01                	jmp    c01129eb <sfs_load_inode+0x16c>
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
    lock_sfs_fs(sfs);
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
        goto out_unlock;
c01129ea:	90                   	nop
        goto failed_cleanup_din;
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));

out_unlock:
    unlock_sfs_fs(sfs);
c01129eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01129ee:	89 04 24             	mov    %eax,(%esp)
c01129f1:	e8 6a 21 00 00       	call   c0114b60 <unlock_sfs_fs>
    *node_store = node;
c01129f6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01129f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01129fc:	89 10                	mov    %edx,(%eax)
    return 0;
c01129fe:	b8 00 00 00 00       	mov    $0x0,%eax
c0112a03:	eb 20                	jmp    c0112a25 <sfs_load_inode+0x1a6>
        goto failed_unlock;
    }

    assert(sfs_block_inuse(sfs, ino));
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
        goto failed_cleanup_din;
c0112a05:	90                   	nop
c0112a06:	eb 01                	jmp    c0112a09 <sfs_load_inode+0x18a>
    }

    assert(din->nlinks != 0);
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
        goto failed_cleanup_din;
c0112a08:	90                   	nop
    unlock_sfs_fs(sfs);
    *node_store = node;
    return 0;

failed_cleanup_din:
    kfree(din);
c0112a09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112a0c:	89 04 24             	mov    %eax,(%esp)
c0112a0f:	e8 5d 24 ff ff       	call   c0104e71 <kfree>
c0112a14:	eb 01                	jmp    c0112a17 <sfs_load_inode+0x198>
    }

    int ret = -E_NO_MEM;
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
        goto failed_unlock;
c0112a16:	90                   	nop
    return 0;

failed_cleanup_din:
    kfree(din);
failed_unlock:
    unlock_sfs_fs(sfs);
c0112a17:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a1a:	89 04 24             	mov    %eax,(%esp)
c0112a1d:	e8 3e 21 00 00       	call   c0114b60 <unlock_sfs_fs>
    return ret;
c0112a22:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112a25:	c9                   	leave  
c0112a26:	c3                   	ret    

c0112a27 <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c0112a27:	55                   	push   %ebp
c0112a28:	89 e5                	mov    %esp,%ebp
c0112a2a:	83 ec 38             	sub    $0x38,%esp
    assert(index < SFS_BLK_NENTRY);
c0112a2d:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112a34:	76 24                	jbe    c0112a5a <sfs_bmap_get_sub_nolock+0x33>
c0112a36:	c7 44 24 0c 57 98 11 	movl   $0xc0119857,0xc(%esp)
c0112a3d:	c0 
c0112a3e:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0112a45:	c0 
c0112a46:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0112a4d:	00 
c0112a4e:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0112a55:	e8 52 e4 fe ff       	call   c0100eac <__panic>
    int ret;
    uint32_t ent, ino = 0;
c0112a5a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c0112a61:	8b 45 10             	mov    0x10(%ebp),%eax
c0112a64:	c1 e0 02             	shl    $0x2,%eax
c0112a67:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c0112a6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a6d:	8b 00                	mov    (%eax),%eax
c0112a6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112a72:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112a75:	85 c0                	test   %eax,%eax
c0112a77:	74 50                	je     c0112ac9 <sfs_bmap_get_sub_nolock+0xa2>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112a79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112a7c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112a7f:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112a83:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112a87:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112a8e:	00 
c0112a8f:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112a92:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a96:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a99:	89 04 24             	mov    %eax,(%esp)
c0112a9c:	e8 86 1d 00 00       	call   c0114827 <sfs_rbuf>
c0112aa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112aa4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112aa8:	74 08                	je     c0112ab2 <sfs_bmap_get_sub_nolock+0x8b>
            return ret;
c0112aaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112aad:	e9 ea 00 00 00       	jmp    c0112b9c <sfs_bmap_get_sub_nolock+0x175>
        }
        if (ino != 0 || !create) {
c0112ab2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112ab5:	85 c0                	test   %eax,%eax
c0112ab7:	0f 85 9a 00 00 00    	jne    c0112b57 <sfs_bmap_get_sub_nolock+0x130>
c0112abd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112ac1:	0f 84 90 00 00 00    	je     c0112b57 <sfs_bmap_get_sub_nolock+0x130>
c0112ac7:	eb 2d                	jmp    c0112af6 <sfs_bmap_get_sub_nolock+0xcf>
            goto out;
        }
    }
    else {
        if (!create) {
c0112ac9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112acd:	0f 84 83 00 00 00    	je     c0112b56 <sfs_bmap_get_sub_nolock+0x12f>
            goto out;
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c0112ad3:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112ad6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ada:	8b 45 08             	mov    0x8(%ebp),%eax
c0112add:	89 04 24             	mov    %eax,(%esp)
c0112ae0:	e8 03 fb ff ff       	call   c01125e8 <sfs_block_alloc>
c0112ae5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112ae8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112aec:	74 08                	je     c0112af6 <sfs_bmap_get_sub_nolock+0xcf>
            return ret;
c0112aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112af1:	e9 a6 00 00 00       	jmp    c0112b9c <sfs_bmap_get_sub_nolock+0x175>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112af6:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112af9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112afd:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b00:	89 04 24             	mov    %eax,(%esp)
c0112b03:	e8 e0 fa ff ff       	call   c01125e8 <sfs_block_alloc>
c0112b08:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112b0b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112b0f:	75 69                	jne    c0112b7a <sfs_bmap_get_sub_nolock+0x153>
        goto failed_cleanup;
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112b11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b14:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112b17:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112b1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112b1f:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112b26:	00 
c0112b27:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112b2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b31:	89 04 24             	mov    %eax,(%esp)
c0112b34:	e8 a5 1d 00 00       	call   c01148de <sfs_wbuf>
c0112b39:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112b3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112b40:	74 15                	je     c0112b57 <sfs_bmap_get_sub_nolock+0x130>
        sfs_block_free(sfs, ino);
c0112b42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112b45:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b49:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b4c:	89 04 24             	mov    %eax,(%esp)
c0112b4f:	e8 61 fb ff ff       	call   c01126b5 <sfs_block_free>
        goto failed_cleanup;
c0112b54:	eb 25                	jmp    c0112b7b <sfs_bmap_get_sub_nolock+0x154>
            goto out;
        }
    }
    else {
        if (!create) {
            goto out;
c0112b56:	90                   	nop
        sfs_block_free(sfs, ino);
        goto failed_cleanup;
    }

out:
    if (ent != *entp) {
c0112b57:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b5a:	8b 10                	mov    (%eax),%edx
c0112b5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b5f:	39 c2                	cmp    %eax,%edx
c0112b61:	74 08                	je     c0112b6b <sfs_bmap_get_sub_nolock+0x144>
        *entp = ent;
c0112b63:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112b66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b69:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c0112b6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112b6e:	8b 45 18             	mov    0x18(%ebp),%eax
c0112b71:	89 10                	mov    %edx,(%eax)
    return 0;
c0112b73:	b8 00 00 00 00       	mov    $0x0,%eax
c0112b78:	eb 22                	jmp    c0112b9c <sfs_bmap_get_sub_nolock+0x175>
            return ret;
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
        goto failed_cleanup;
c0112b7a:	90                   	nop
    }
    *ino_store = ino;
    return 0;

failed_cleanup:
    if (ent != *entp) {
c0112b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b7e:	8b 10                	mov    (%eax),%edx
c0112b80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b83:	39 c2                	cmp    %eax,%edx
c0112b85:	74 12                	je     c0112b99 <sfs_bmap_get_sub_nolock+0x172>
        sfs_block_free(sfs, ent);
c0112b87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b91:	89 04 24             	mov    %eax,(%esp)
c0112b94:	e8 1c fb ff ff       	call   c01126b5 <sfs_block_free>
    }
    return ret;
c0112b99:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112b9c:	c9                   	leave  
c0112b9d:	c3                   	ret    

c0112b9e <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c0112b9e:	55                   	push   %ebp
c0112b9f:	89 e5                	mov    %esp,%ebp
c0112ba1:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112ba4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ba7:	8b 00                	mov    (%eax),%eax
c0112ba9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c0112bac:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112bb0:	77 61                	ja     c0112c13 <sfs_bmap_get_nolock+0x75>
        if ((ino = din->direct[index]) == 0 && create) {
c0112bb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112bb5:	8b 55 10             	mov    0x10(%ebp),%edx
c0112bb8:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112bbc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112bbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112bc2:	85 c0                	test   %eax,%eax
c0112bc4:	0f 85 07 01 00 00    	jne    c0112cd1 <sfs_bmap_get_nolock+0x133>
c0112bca:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112bce:	0f 84 fd 00 00 00    	je     c0112cd1 <sfs_bmap_get_nolock+0x133>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112bd4:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112bd7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112bdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0112bde:	89 04 24             	mov    %eax,(%esp)
c0112be1:	e8 02 fa ff ff       	call   c01125e8 <sfs_block_alloc>
c0112be6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112be9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112bed:	74 08                	je     c0112bf7 <sfs_bmap_get_nolock+0x59>
                return ret;
c0112bef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112bf2:	e9 2c 01 00 00       	jmp    c0112d23 <sfs_bmap_get_nolock+0x185>
            }
            din->direct[index] = ino;
c0112bf7:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0112bfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112bfd:	8b 55 10             	mov    0x10(%ebp),%edx
c0112c00:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c0112c04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c07:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112c0e:	e9 be 00 00 00       	jmp    c0112cd1 <sfs_bmap_get_nolock+0x133>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c0112c13:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112c17:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112c1e:	0f 87 91 00 00 00    	ja     c0112cb5 <sfs_bmap_get_nolock+0x117>
        ent = din->indirect;
c0112c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c27:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112c2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c0112c2d:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112c30:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112c34:	8b 45 14             	mov    0x14(%ebp),%eax
c0112c37:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112c3b:	8b 45 10             	mov    0x10(%ebp),%eax
c0112c3e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112c42:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112c45:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c49:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c4c:	89 04 24             	mov    %eax,(%esp)
c0112c4f:	e8 d3 fd ff ff       	call   c0112a27 <sfs_bmap_get_sub_nolock>
c0112c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112c57:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112c5b:	74 08                	je     c0112c65 <sfs_bmap_get_nolock+0xc7>
            return ret;
c0112c5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c60:	e9 be 00 00 00       	jmp    c0112d23 <sfs_bmap_get_nolock+0x185>
        }
        if (ent != din->indirect) {
c0112c65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c68:	8b 50 3c             	mov    0x3c(%eax),%edx
c0112c6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112c6e:	39 c2                	cmp    %eax,%edx
c0112c70:	74 62                	je     c0112cd4 <sfs_bmap_get_nolock+0x136>
            assert(din->indirect == 0);
c0112c72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c75:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112c78:	85 c0                	test   %eax,%eax
c0112c7a:	74 24                	je     c0112ca0 <sfs_bmap_get_nolock+0x102>
c0112c7c:	c7 44 24 0c 6e 98 11 	movl   $0xc011986e,0xc(%esp)
c0112c83:	c0 
c0112c84:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0112c8b:	c0 
c0112c8c:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0112c93:	00 
c0112c94:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0112c9b:	e8 0c e2 fe ff       	call   c0100eac <__panic>
            din->indirect = ent;
c0112ca0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112ca3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ca6:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c0112ca9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112cac:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112cb3:	eb 1f                	jmp    c0112cd4 <sfs_bmap_get_nolock+0x136>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c0112cb5:	c7 44 24 08 84 98 11 	movl   $0xc0119884,0x8(%esp)
c0112cbc:	c0 
c0112cbd:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c0112cc4:	00 
c0112cc5:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0112ccc:	e8 db e1 fe ff       	call   c0100eac <__panic>
                return ret;
            }
            din->direct[index] = ino;
            sin->dirty = 1;
        }
        goto out;
c0112cd1:	90                   	nop
c0112cd2:	eb 01                	jmp    c0112cd5 <sfs_bmap_get_nolock+0x137>
        if (ent != din->indirect) {
            assert(din->indirect == 0);
            din->indirect = ent;
            sin->dirty = 1;
        }
        goto out;
c0112cd4:	90                   	nop
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c0112cd5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112cd8:	85 c0                	test   %eax,%eax
c0112cda:	74 3a                	je     c0112d16 <sfs_bmap_get_nolock+0x178>
c0112cdc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112cdf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ce3:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ce6:	89 04 24             	mov    %eax,(%esp)
c0112ce9:	e8 97 f8 ff ff       	call   c0112585 <sfs_block_inuse>
c0112cee:	85 c0                	test   %eax,%eax
c0112cf0:	75 24                	jne    c0112d16 <sfs_bmap_get_nolock+0x178>
c0112cf2:	c7 44 24 0c b0 98 11 	movl   $0xc01198b0,0xc(%esp)
c0112cf9:	c0 
c0112cfa:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0112d01:	c0 
c0112d02:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c0112d09:	00 
c0112d0a:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0112d11:	e8 96 e1 fe ff       	call   c0100eac <__panic>
    *ino_store = ino;
c0112d16:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112d19:	8b 45 18             	mov    0x18(%ebp),%eax
c0112d1c:	89 10                	mov    %edx,(%eax)
    return 0;
c0112d1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112d23:	c9                   	leave  
c0112d24:	c3                   	ret    

c0112d25 <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c0112d25:	55                   	push   %ebp
c0112d26:	89 e5                	mov    %esp,%ebp
c0112d28:	83 ec 38             	sub    $0x38,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c0112d2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d32:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d35:	89 04 24             	mov    %eax,(%esp)
c0112d38:	e8 48 f8 ff ff       	call   c0112585 <sfs_block_inuse>
c0112d3d:	85 c0                	test   %eax,%eax
c0112d3f:	74 09                	je     c0112d4a <sfs_bmap_free_sub_nolock+0x25>
c0112d41:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112d48:	76 24                	jbe    c0112d6e <sfs_bmap_free_sub_nolock+0x49>
c0112d4a:	c7 44 24 0c d8 98 11 	movl   $0xc01198d8,0xc(%esp)
c0112d51:	c0 
c0112d52:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0112d59:	c0 
c0112d5a:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c0112d61:	00 
c0112d62:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0112d69:	e8 3e e1 fe ff       	call   c0100eac <__panic>
    int ret;
    uint32_t ino, zero = 0;
c0112d6e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c0112d75:	8b 45 10             	mov    0x10(%ebp),%eax
c0112d78:	c1 e0 02             	shl    $0x2,%eax
c0112d7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112d7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d81:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112d85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d88:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112d8c:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112d93:	00 
c0112d94:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112d97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d9e:	89 04 24             	mov    %eax,(%esp)
c0112da1:	e8 81 1a 00 00       	call   c0114827 <sfs_rbuf>
c0112da6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112da9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112dad:	74 05                	je     c0112db4 <sfs_bmap_free_sub_nolock+0x8f>
        return ret;
c0112daf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112db2:	eb 54                	jmp    c0112e08 <sfs_bmap_free_sub_nolock+0xe3>
    }
    if (ino != 0) {
c0112db4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112db7:	85 c0                	test   %eax,%eax
c0112db9:	74 48                	je     c0112e03 <sfs_bmap_free_sub_nolock+0xde>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c0112dbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112dbe:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112dc2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112dc5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112dc9:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112dd0:	00 
c0112dd1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112dd4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112dd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ddb:	89 04 24             	mov    %eax,(%esp)
c0112dde:	e8 fb 1a 00 00       	call   c01148de <sfs_wbuf>
c0112de3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112de6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112dea:	74 05                	je     c0112df1 <sfs_bmap_free_sub_nolock+0xcc>
            return ret;
c0112dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112def:	eb 17                	jmp    c0112e08 <sfs_bmap_free_sub_nolock+0xe3>
        }
        sfs_block_free(sfs, ino);
c0112df1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112df4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112df8:	8b 45 08             	mov    0x8(%ebp),%eax
c0112dfb:	89 04 24             	mov    %eax,(%esp)
c0112dfe:	e8 b2 f8 ff ff       	call   c01126b5 <sfs_block_free>
    }
    return 0;
c0112e03:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112e08:	c9                   	leave  
c0112e09:	c3                   	ret    

c0112e0a <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c0112e0a:	55                   	push   %ebp
c0112e0b:	89 e5                	mov    %esp,%ebp
c0112e0d:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112e10:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e13:	8b 00                	mov    (%eax),%eax
c0112e15:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c0112e18:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112e1c:	77 44                	ja     c0112e62 <sfs_bmap_free_nolock+0x58>
        if ((ino = din->direct[index]) != 0) {
c0112e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e21:	8b 55 10             	mov    0x10(%ebp),%edx
c0112e24:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112e28:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112e2b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112e2f:	74 2a                	je     c0112e5b <sfs_bmap_free_nolock+0x51>
			// free the block
            sfs_block_free(sfs, ino);
c0112e31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e34:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e38:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e3b:	89 04 24             	mov    %eax,(%esp)
c0112e3e:	e8 72 f8 ff ff       	call   c01126b5 <sfs_block_free>
            din->direct[index] = 0;
c0112e43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e46:	8b 55 10             	mov    0x10(%ebp),%edx
c0112e49:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c0112e50:	00 
            sin->dirty = 1;
c0112e51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e54:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c0112e5b:	b8 00 00 00 00       	mov    $0x0,%eax
c0112e60:	eb 4f                	jmp    c0112eb1 <sfs_bmap_free_nolock+0xa7>
    }

    index -= SFS_NDIRECT;
c0112e62:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112e66:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112e6d:	77 3d                	ja     c0112eac <sfs_bmap_free_nolock+0xa2>
        if ((ent = din->indirect) != 0) {
c0112e6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e72:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112e75:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112e78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112e7c:	74 27                	je     c0112ea5 <sfs_bmap_free_nolock+0x9b>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c0112e7e:	8b 45 10             	mov    0x10(%ebp),%eax
c0112e81:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112e85:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112e88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e8f:	89 04 24             	mov    %eax,(%esp)
c0112e92:	e8 8e fe ff ff       	call   c0112d25 <sfs_bmap_free_sub_nolock>
c0112e97:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112e9a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112e9e:	74 05                	je     c0112ea5 <sfs_bmap_free_nolock+0x9b>
                return ret;
c0112ea0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112ea3:	eb 0c                	jmp    c0112eb1 <sfs_bmap_free_nolock+0xa7>
            }
        }
        return 0;
c0112ea5:	b8 00 00 00 00       	mov    $0x0,%eax
c0112eaa:	eb 05                	jmp    c0112eb1 <sfs_bmap_free_nolock+0xa7>
    }
    return 0;
c0112eac:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112eb1:	c9                   	leave  
c0112eb2:	c3                   	ret    

c0112eb3 <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c0112eb3:	55                   	push   %ebp
c0112eb4:	89 e5                	mov    %esp,%ebp
c0112eb6:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112eb9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ebc:	8b 00                	mov    (%eax),%eax
c0112ebe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c0112ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ec4:	8b 40 08             	mov    0x8(%eax),%eax
c0112ec7:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112eca:	73 24                	jae    c0112ef0 <sfs_bmap_load_nolock+0x3d>
c0112ecc:	c7 44 24 0c 0c 99 11 	movl   $0xc011990c,0xc(%esp)
c0112ed3:	c0 
c0112ed4:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0112edb:	c0 
c0112edc:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c0112ee3:	00 
c0112ee4:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0112eeb:	e8 bc df fe ff       	call   c0100eac <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c0112ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ef3:	8b 40 08             	mov    0x8(%eax),%eax
c0112ef6:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112ef9:	0f 94 c0             	sete   %al
c0112efc:	0f b6 c0             	movzbl %al,%eax
c0112eff:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c0112f02:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112f05:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112f09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112f0c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112f10:	8b 45 10             	mov    0x10(%ebp),%eax
c0112f13:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112f17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f1a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f21:	89 04 24             	mov    %eax,(%esp)
c0112f24:	e8 75 fc ff ff       	call   c0112b9e <sfs_bmap_get_nolock>
c0112f29:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112f2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112f30:	74 05                	je     c0112f37 <sfs_bmap_load_nolock+0x84>
        return ret;
c0112f32:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f35:	eb 62                	jmp    c0112f99 <sfs_bmap_load_nolock+0xe6>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112f37:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112f3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f41:	89 04 24             	mov    %eax,(%esp)
c0112f44:	e8 3c f6 ff ff       	call   c0112585 <sfs_block_inuse>
c0112f49:	85 c0                	test   %eax,%eax
c0112f4b:	75 24                	jne    c0112f71 <sfs_bmap_load_nolock+0xbe>
c0112f4d:	c7 44 24 0c f5 97 11 	movl   $0xc01197f5,0xc(%esp)
c0112f54:	c0 
c0112f55:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0112f5c:	c0 
c0112f5d:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0112f64:	00 
c0112f65:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0112f6c:	e8 3b df fe ff       	call   c0100eac <__panic>
    if (create) {
c0112f71:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112f75:	74 0f                	je     c0112f86 <sfs_bmap_load_nolock+0xd3>
        din->blocks ++;
c0112f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f7a:	8b 40 08             	mov    0x8(%eax),%eax
c0112f7d:	8d 50 01             	lea    0x1(%eax),%edx
c0112f80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f83:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c0112f86:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112f8a:	74 08                	je     c0112f94 <sfs_bmap_load_nolock+0xe1>
        *ino_store = ino;
c0112f8c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112f8f:	8b 45 14             	mov    0x14(%ebp),%eax
c0112f92:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c0112f94:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112f99:	c9                   	leave  
c0112f9a:	c3                   	ret    

c0112f9b <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0112f9b:	55                   	push   %ebp
c0112f9c:	89 e5                	mov    %esp,%ebp
c0112f9e:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112fa1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fa4:	8b 00                	mov    (%eax),%eax
c0112fa6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c0112fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112fac:	8b 40 08             	mov    0x8(%eax),%eax
c0112faf:	85 c0                	test   %eax,%eax
c0112fb1:	75 24                	jne    c0112fd7 <sfs_bmap_truncate_nolock+0x3c>
c0112fb3:	c7 44 24 0c 21 99 11 	movl   $0xc0119921,0xc(%esp)
c0112fba:	c0 
c0112fbb:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0112fc2:	c0 
c0112fc3:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
c0112fca:	00 
c0112fcb:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0112fd2:	e8 d5 de fe ff       	call   c0100eac <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c0112fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112fda:	8b 40 08             	mov    0x8(%eax),%eax
c0112fdd:	83 e8 01             	sub    $0x1,%eax
c0112fe0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fe7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112feb:	8b 45 08             	mov    0x8(%ebp),%eax
c0112fee:	89 04 24             	mov    %eax,(%esp)
c0112ff1:	e8 14 fe ff ff       	call   c0112e0a <sfs_bmap_free_nolock>
c0112ff6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112ff9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112ffd:	74 05                	je     c0113004 <sfs_bmap_truncate_nolock+0x69>
        return ret;
c0112fff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113002:	eb 1e                	jmp    c0113022 <sfs_bmap_truncate_nolock+0x87>
    }
    din->blocks --;
c0113004:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113007:	8b 40 08             	mov    0x8(%eax),%eax
c011300a:	8d 50 ff             	lea    -0x1(%eax),%edx
c011300d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113010:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c0113013:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113016:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c011301d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113022:	c9                   	leave  
c0113023:	c3                   	ret    

c0113024 <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0113024:	55                   	push   %ebp
c0113025:	89 e5                	mov    %esp,%ebp
c0113027:	83 ec 38             	sub    $0x38,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c011302a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011302d:	8b 00                	mov    (%eax),%eax
c011302f:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113033:	66 83 f8 02          	cmp    $0x2,%ax
c0113037:	75 15                	jne    c011304e <sfs_dirent_read_nolock+0x2a>
c0113039:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011303d:	78 0f                	js     c011304e <sfs_dirent_read_nolock+0x2a>
c011303f:	8b 55 10             	mov    0x10(%ebp),%edx
c0113042:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113045:	8b 00                	mov    (%eax),%eax
c0113047:	8b 40 08             	mov    0x8(%eax),%eax
c011304a:	39 c2                	cmp    %eax,%edx
c011304c:	72 24                	jb     c0113072 <sfs_dirent_read_nolock+0x4e>
c011304e:	c7 44 24 0c 34 99 11 	movl   $0xc0119934,0xc(%esp)
c0113055:	c0 
c0113056:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c011305d:	c0 
c011305e:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c0113065:	00 
c0113066:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011306d:	e8 3a de fe ff       	call   c0100eac <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c0113072:	8b 45 10             	mov    0x10(%ebp),%eax
c0113075:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0113078:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011307c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113080:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113083:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113087:	8b 45 08             	mov    0x8(%ebp),%eax
c011308a:	89 04 24             	mov    %eax,(%esp)
c011308d:	e8 21 fe ff ff       	call   c0112eb3 <sfs_bmap_load_nolock>
c0113092:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113095:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113099:	74 08                	je     c01130a3 <sfs_dirent_read_nolock+0x7f>
        return ret;
c011309b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011309e:	e9 80 00 00 00       	jmp    c0113123 <sfs_dirent_read_nolock+0xff>
    }
    assert(sfs_block_inuse(sfs, ino));
c01130a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01130a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01130aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01130ad:	89 04 24             	mov    %eax,(%esp)
c01130b0:	e8 d0 f4 ff ff       	call   c0112585 <sfs_block_inuse>
c01130b5:	85 c0                	test   %eax,%eax
c01130b7:	75 24                	jne    c01130dd <sfs_dirent_read_nolock+0xb9>
c01130b9:	c7 44 24 0c f5 97 11 	movl   $0xc01197f5,0xc(%esp)
c01130c0:	c0 
c01130c1:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c01130c8:	c0 
c01130c9:	c7 44 24 04 95 01 00 	movl   $0x195,0x4(%esp)
c01130d0:	00 
c01130d1:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c01130d8:	e8 cf dd fe ff       	call   c0100eac <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c01130dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01130e0:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01130e7:	00 
c01130e8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01130ec:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
c01130f3:	00 
c01130f4:	8b 45 14             	mov    0x14(%ebp),%eax
c01130f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01130fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01130fe:	89 04 24             	mov    %eax,(%esp)
c0113101:	e8 21 17 00 00       	call   c0114827 <sfs_rbuf>
c0113106:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113109:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011310d:	74 05                	je     c0113114 <sfs_dirent_read_nolock+0xf0>
        return ret;
c011310f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113112:	eb 0f                	jmp    c0113123 <sfs_dirent_read_nolock+0xff>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c0113114:	8b 45 14             	mov    0x14(%ebp),%eax
c0113117:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c011311e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113123:	c9                   	leave  
c0113124:	c3                   	ret    

c0113125 <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c0113125:	55                   	push   %ebp
c0113126:	89 e5                	mov    %esp,%ebp
c0113128:	83 ec 28             	sub    $0x28,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c011312b:	8b 45 10             	mov    0x10(%ebp),%eax
c011312e:	89 04 24             	mov    %eax,(%esp)
c0113131:	e8 de 22 00 00       	call   c0115414 <strlen>
c0113136:	3d ff 00 00 00       	cmp    $0xff,%eax
c011313b:	76 24                	jbe    c0113161 <sfs_dirent_search_nolock+0x3c>
c011313d:	c7 44 24 0c 80 99 11 	movl   $0xc0119980,0xc(%esp)
c0113144:	c0 
c0113145:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c011314c:	c0 
c011314d:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c0113154:	00 
c0113155:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011315c:	e8 4b dd fe ff       	call   c0100eac <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113161:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113168:	e8 e9 1c ff ff       	call   c0104e56 <kmalloc>
c011316d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113170:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113174:	75 0a                	jne    c0113180 <sfs_dirent_search_nolock+0x5b>
        return -E_NO_MEM;
c0113176:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c011317b:	e9 cc 00 00 00       	jmp    c011324c <sfs_dirent_search_nolock+0x127>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c0113180:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113183:	8b 00                	mov    (%eax),%eax
c0113185:	8b 40 08             	mov    0x8(%eax),%eax
c0113188:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c011318b:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011318f:	74 08                	je     c0113199 <sfs_dirent_search_nolock+0x74>
c0113191:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0113194:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0113197:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c0113199:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01131a0:	e9 80 00 00 00       	jmp    c0113225 <sfs_dirent_search_nolock+0x100>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c01131a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01131a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01131ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01131af:	89 44 24 08          	mov    %eax,0x8(%esp)
c01131b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01131b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01131ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01131bd:	89 04 24             	mov    %eax,(%esp)
c01131c0:	e8 5f fe ff ff       	call   c0113024 <sfs_dirent_read_nolock>
c01131c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01131c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01131cc:	75 6c                	jne    c011323a <sfs_dirent_search_nolock+0x115>
            goto out;
        }
        if (entry->ino == 0) {
c01131ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01131d1:	8b 00                	mov    (%eax),%eax
c01131d3:	85 c0                	test   %eax,%eax
c01131d5:	75 10                	jne    c01131e7 <sfs_dirent_search_nolock+0xc2>
            set_pvalue(empty_slot, i);
c01131d7:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01131db:	74 43                	je     c0113220 <sfs_dirent_search_nolock+0xfb>
c01131dd:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01131e0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01131e3:	89 10                	mov    %edx,(%eax)
            continue ;
c01131e5:	eb 39                	jmp    c0113220 <sfs_dirent_search_nolock+0xfb>
        }
        if (strcmp(name, entry->name) == 0) {
c01131e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01131ea:	83 c0 04             	add    $0x4,%eax
c01131ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01131f1:	8b 45 10             	mov    0x10(%ebp),%eax
c01131f4:	89 04 24             	mov    %eax,(%esp)
c01131f7:	e8 18 23 00 00       	call   c0115514 <strcmp>
c01131fc:	85 c0                	test   %eax,%eax
c01131fe:	75 21                	jne    c0113221 <sfs_dirent_search_nolock+0xfc>
            set_pvalue(slot, i);
c0113200:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0113204:	74 08                	je     c011320e <sfs_dirent_search_nolock+0xe9>
c0113206:	8b 45 18             	mov    0x18(%ebp),%eax
c0113209:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011320c:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c011320e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0113212:	74 29                	je     c011323d <sfs_dirent_search_nolock+0x118>
c0113214:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113217:	8b 10                	mov    (%eax),%edx
c0113219:	8b 45 14             	mov    0x14(%ebp),%eax
c011321c:	89 10                	mov    %edx,(%eax)
            goto out;
c011321e:	eb 1d                	jmp    c011323d <sfs_dirent_search_nolock+0x118>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
            goto out;
        }
        if (entry->ino == 0) {
            set_pvalue(empty_slot, i);
            continue ;
c0113220:	90                   	nop
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c0113221:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0113225:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113228:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011322b:	0f 8c 74 ff ff ff    	jl     c01131a5 <sfs_dirent_search_nolock+0x80>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c0113231:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
c0113238:	eb 04                	jmp    c011323e <sfs_dirent_search_nolock+0x119>
#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
            goto out;
c011323a:	90                   	nop
c011323b:	eb 01                	jmp    c011323e <sfs_dirent_search_nolock+0x119>
            continue ;
        }
        if (strcmp(name, entry->name) == 0) {
            set_pvalue(slot, i);
            set_pvalue(ino_store, entry->ino);
            goto out;
c011323d:	90                   	nop
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
out:
    kfree(entry);
c011323e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113241:	89 04 24             	mov    %eax,(%esp)
c0113244:	e8 28 1c ff ff       	call   c0104e71 <kfree>
    return ret;
c0113249:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011324c:	c9                   	leave  
c011324d:	c3                   	ret    

c011324e <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c011324e:	55                   	push   %ebp
c011324f:	89 e5                	mov    %esp,%ebp
c0113251:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113254:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113257:	8b 00                	mov    (%eax),%eax
c0113259:	8b 40 08             	mov    0x8(%eax),%eax
c011325c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c011325f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113266:	eb 43                	jmp    c01132ab <sfs_dirent_findino_nolock+0x5d>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0113268:	8b 45 14             	mov    0x14(%ebp),%eax
c011326b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011326f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113272:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113276:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113279:	89 44 24 04          	mov    %eax,0x4(%esp)
c011327d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113280:	89 04 24             	mov    %eax,(%esp)
c0113283:	e8 9c fd ff ff       	call   c0113024 <sfs_dirent_read_nolock>
c0113288:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011328b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011328f:	74 05                	je     c0113296 <sfs_dirent_findino_nolock+0x48>
            return ret;
c0113291:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113294:	eb 22                	jmp    c01132b8 <sfs_dirent_findino_nolock+0x6a>
        }
        if (entry->ino == ino) {
c0113296:	8b 45 14             	mov    0x14(%ebp),%eax
c0113299:	8b 00                	mov    (%eax),%eax
c011329b:	3b 45 10             	cmp    0x10(%ebp),%eax
c011329e:	75 07                	jne    c01132a7 <sfs_dirent_findino_nolock+0x59>
            return 0;
c01132a0:	b8 00 00 00 00       	mov    $0x0,%eax
c01132a5:	eb 11                	jmp    c01132b8 <sfs_dirent_findino_nolock+0x6a>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c01132a7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01132ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132ae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01132b1:	7c b5                	jl     c0113268 <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c01132b3:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c01132b8:	c9                   	leave  
c01132b9:	c3                   	ret    

c01132ba <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c01132ba:	55                   	push   %ebp
c01132bb:	89 e5                	mov    %esp,%ebp
c01132bd:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c01132c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132c3:	89 04 24             	mov    %eax,(%esp)
c01132c6:	e8 ec f0 ff ff       	call   c01123b7 <lock_sin>
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c01132cb:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c01132d2:	00 
c01132d3:	8b 45 18             	mov    0x18(%ebp),%eax
c01132d6:	89 44 24 10          	mov    %eax,0x10(%esp)
c01132da:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01132dd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01132e1:	8b 45 10             	mov    0x10(%ebp),%eax
c01132e4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01132e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01132ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01132f2:	89 04 24             	mov    %eax,(%esp)
c01132f5:	e8 2b fe ff ff       	call   c0113125 <sfs_dirent_search_nolock>
c01132fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c01132fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113300:	89 04 24             	mov    %eax,(%esp)
c0113303:	e8 c5 f0 ff ff       	call   c01123cd <unlock_sin>
    if (ret == 0) {
c0113308:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011330c:	75 1c                	jne    c011332a <sfs_lookup_once+0x70>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c011330e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113311:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113315:	8b 45 14             	mov    0x14(%ebp),%eax
c0113318:	89 44 24 04          	mov    %eax,0x4(%esp)
c011331c:	8b 45 08             	mov    0x8(%ebp),%eax
c011331f:	89 04 24             	mov    %eax,(%esp)
c0113322:	e8 58 f5 ff ff       	call   c011287f <sfs_load_inode>
c0113327:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c011332a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011332d:	c9                   	leave  
c011332e:	c3                   	ret    

c011332f <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c011332f:	55                   	push   %ebp
c0113330:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c0113332:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113335:	83 e0 03             	and    $0x3,%eax
c0113338:	85 c0                	test   %eax,%eax
c011333a:	74 07                	je     c0113343 <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c011333c:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0113341:	eb 17                	jmp    c011335a <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c0113343:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c0113344:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113347:	83 e0 20             	and    $0x20,%eax
c011334a:	85 c0                	test   %eax,%eax
c011334c:	74 07                	je     c0113355 <sfs_opendir+0x26>
        return -E_ISDIR;
c011334e:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0113353:	eb 05                	jmp    c011335a <sfs_opendir+0x2b>
    }
    return 0;
c0113355:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011335a:	5d                   	pop    %ebp
c011335b:	c3                   	ret    

c011335c <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c011335c:	55                   	push   %ebp
c011335d:	89 e5                	mov    %esp,%ebp
    return 0;
c011335f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113364:	5d                   	pop    %ebp
c0113365:	c3                   	ret    

c0113366 <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c0113366:	55                   	push   %ebp
c0113367:	89 e5                	mov    %esp,%ebp
c0113369:	83 ec 28             	sub    $0x28,%esp
    return vop_fsync(node);
c011336c:	8b 45 08             	mov    0x8(%ebp),%eax
c011336f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113372:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113376:	74 17                	je     c011338f <sfs_close+0x29>
c0113378:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011337b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011337e:	85 c0                	test   %eax,%eax
c0113380:	74 0d                	je     c011338f <sfs_close+0x29>
c0113382:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113385:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113388:	8b 40 18             	mov    0x18(%eax),%eax
c011338b:	85 c0                	test   %eax,%eax
c011338d:	75 24                	jne    c01133b3 <sfs_close+0x4d>
c011338f:	c7 44 24 0c a4 99 11 	movl   $0xc01199a4,0xc(%esp)
c0113396:	c0 
c0113397:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c011339e:	c0 
c011339f:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c01133a6:	00 
c01133a7:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c01133ae:	e8 f9 da fe ff       	call   c0100eac <__panic>
c01133b3:	c7 44 24 04 f2 99 11 	movl   $0xc01199f2,0x4(%esp)
c01133ba:	c0 
c01133bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01133be:	89 04 24             	mov    %eax,(%esp)
c01133c1:	e8 b7 c0 ff ff       	call   c010f47d <inode_check>
c01133c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01133c9:	8b 40 3c             	mov    0x3c(%eax),%eax
c01133cc:	8b 50 18             	mov    0x18(%eax),%edx
c01133cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01133d2:	89 04 24             	mov    %eax,(%esp)
c01133d5:	ff d2                	call   *%edx
}
c01133d7:	c9                   	leave  
c01133d8:	c3                   	ret    

c01133d9 <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c01133d9:	55                   	push   %ebp
c01133da:	89 e5                	mov    %esp,%ebp
c01133dc:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_inode *din = sin->din;
c01133df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01133e2:	8b 00                	mov    (%eax),%eax
c01133e4:	89 45 d8             	mov    %eax,-0x28(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c01133e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01133ea:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01133ee:	66 83 f8 02          	cmp    $0x2,%ax
c01133f2:	75 24                	jne    c0113418 <sfs_io_nolock+0x3f>
c01133f4:	c7 44 24 0c f8 99 11 	movl   $0xc01199f8,0xc(%esp)
c01133fb:	c0 
c01133fc:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113403:	c0 
c0113404:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c011340b:	00 
c011340c:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113413:	e8 94 da fe ff       	call   c0100eac <__panic>
    off_t endpos = offset + *alenp, blkoff;
c0113418:	8b 45 18             	mov    0x18(%ebp),%eax
c011341b:	8b 10                	mov    (%eax),%edx
c011341d:	8b 45 14             	mov    0x14(%ebp),%eax
c0113420:	01 d0                	add    %edx,%eax
c0113422:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c0113425:	8b 45 18             	mov    0x18(%ebp),%eax
c0113428:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c011342e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0113432:	78 12                	js     c0113446 <sfs_io_nolock+0x6d>
c0113434:	8b 45 14             	mov    0x14(%ebp),%eax
c0113437:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c011343c:	77 08                	ja     c0113446 <sfs_io_nolock+0x6d>
c011343e:	8b 45 14             	mov    0x14(%ebp),%eax
c0113441:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0113444:	7e 0a                	jle    c0113450 <sfs_io_nolock+0x77>
        return -E_INVAL;
c0113446:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011344b:	e9 98 02 00 00       	jmp    c01136e8 <sfs_io_nolock+0x30f>
    }
    if (offset == endpos) {
c0113450:	8b 45 14             	mov    0x14(%ebp),%eax
c0113453:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0113456:	75 0a                	jne    c0113462 <sfs_io_nolock+0x89>
        return 0;
c0113458:	b8 00 00 00 00       	mov    $0x0,%eax
c011345d:	e9 86 02 00 00       	jmp    c01136e8 <sfs_io_nolock+0x30f>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c0113462:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113465:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c011346a:	76 07                	jbe    c0113473 <sfs_io_nolock+0x9a>
        endpos = SFS_MAX_FILE_SIZE;
c011346c:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c0113473:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0113477:	75 2a                	jne    c01134a3 <sfs_io_nolock+0xca>
        if (offset >= din->size) {
c0113479:	8b 55 14             	mov    0x14(%ebp),%edx
c011347c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011347f:	8b 00                	mov    (%eax),%eax
c0113481:	39 c2                	cmp    %eax,%edx
c0113483:	72 0a                	jb     c011348f <sfs_io_nolock+0xb6>
            return 0;
c0113485:	b8 00 00 00 00       	mov    $0x0,%eax
c011348a:	e9 59 02 00 00       	jmp    c01136e8 <sfs_io_nolock+0x30f>
        }
        if (endpos > din->size) {
c011348f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113492:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113495:	8b 00                	mov    (%eax),%eax
c0113497:	39 c2                	cmp    %eax,%edx
c0113499:	76 08                	jbe    c01134a3 <sfs_io_nolock+0xca>
            endpos = din->size;
c011349b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011349e:	8b 00                	mov    (%eax),%eax
c01134a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c01134a3:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01134a7:	74 10                	je     c01134b9 <sfs_io_nolock+0xe0>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c01134a9:	c7 45 f0 de 48 11 c0 	movl   $0xc01148de,-0x10(%ebp)
c01134b0:	c7 45 ec f7 47 11 c0 	movl   $0xc01147f7,-0x14(%ebp)
c01134b7:	eb 0e                	jmp    c01134c7 <sfs_io_nolock+0xee>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c01134b9:	c7 45 f0 27 48 11 c0 	movl   $0xc0114827,-0x10(%ebp)
c01134c0:	c7 45 ec c7 47 11 c0 	movl   $0xc01147c7,-0x14(%ebp)
    }

    int ret = 0;
c01134c7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    size_t size, alen = 0;
c01134ce:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c01134d5:	8b 45 14             	mov    0x14(%ebp),%eax
c01134d8:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c01134de:	85 c0                	test   %eax,%eax
c01134e0:	0f 48 c2             	cmovs  %edx,%eax
c01134e3:	c1 f8 0c             	sar    $0xc,%eax
c01134e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c01134e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01134ec:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c01134f2:	85 c0                	test   %eax,%eax
c01134f4:	0f 48 c2             	cmovs  %edx,%eax
c01134f7:	c1 f8 0c             	sar    $0xc,%eax
c01134fa:	2b 45 e4             	sub    -0x1c(%ebp),%eax
c01134fd:	89 45 e0             	mov    %eax,-0x20(%ebp)
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
	//cprintf("Reading from %d to %d, %d blocks\n", offset, endpos, nblks);
	// Read the first block, if offset is in the middle of the block
	blkoff = offset % SFS_BLKSIZE;			
c0113500:	8b 45 14             	mov    0x14(%ebp),%eax
c0113503:	89 c2                	mov    %eax,%edx
c0113505:	c1 fa 1f             	sar    $0x1f,%edx
c0113508:	c1 ea 14             	shr    $0x14,%edx
c011350b:	01 d0                	add    %edx,%eax
c011350d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0113512:	29 d0                	sub    %edx,%eax
c0113514:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (blkoff != 0) {			
c0113517:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c011351b:	0f 84 88 00 00 00    	je     c01135a9 <sfs_io_nolock+0x1d0>
		size = nblks > 0 ? SFS_BLKSIZE - blkoff : endpos - offset;
c0113521:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113525:	74 0a                	je     c0113531 <sfs_io_nolock+0x158>
c0113527:	b8 00 10 00 00       	mov    $0x1000,%eax
c011352c:	2b 45 d0             	sub    -0x30(%ebp),%eax
c011352f:	eb 0c                	jmp    c011353d <sfs_io_nolock+0x164>
c0113531:	8b 45 14             	mov    0x14(%ebp),%eax
c0113534:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113537:	89 d1                	mov    %edx,%ecx
c0113539:	29 c1                	sub    %eax,%ecx
c011353b:	89 c8                	mov    %ecx,%eax
c011353d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if (sfs_bmap_load_nolock(sfs, sin, blkno, &ino))
c0113540:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0113543:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113547:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011354a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011354e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113551:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113555:	8b 45 08             	mov    0x8(%ebp),%eax
c0113558:	89 04 24             	mov    %eax,(%esp)
c011355b:	e8 53 f9 ff ff       	call   c0112eb3 <sfs_bmap_load_nolock>
c0113560:	85 c0                	test   %eax,%eax
c0113562:	0f 85 3b 01 00 00    	jne    c01136a3 <sfs_io_nolock+0x2ca>
			goto out;
		if (sfs_buf_op(sfs, buf, size, ino, blkoff))
c0113568:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011356b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011356e:	89 54 24 10          	mov    %edx,0x10(%esp)
c0113572:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113576:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113579:	89 44 24 08          	mov    %eax,0x8(%esp)
c011357d:	8b 45 10             	mov    0x10(%ebp),%eax
c0113580:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113584:	8b 45 08             	mov    0x8(%ebp),%eax
c0113587:	89 04 24             	mov    %eax,(%esp)
c011358a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011358d:	ff d0                	call   *%eax
c011358f:	85 c0                	test   %eax,%eax
c0113591:	0f 85 0f 01 00 00    	jne    c01136a6 <sfs_io_nolock+0x2cd>
			goto out;
		alen += size;
c0113597:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011359a:	01 45 e8             	add    %eax,-0x18(%ebp)
		buf = (char *)buf + size;
c011359d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01135a0:	01 45 10             	add    %eax,0x10(%ebp)
		blkno++;
c01135a3:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c01135a7:	eb 04                	jmp    c01135ad <sfs_io_nolock+0x1d4>
	} else {					// Otherwise read this block either as a full block, or the last block
		nblks++;
c01135a9:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
	}
	
	// Read the full blocks 
	int read_count;
	for (read_count = 0; read_count < (int)nblks - 1; read_count++) {
c01135ad:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01135b4:	eb 67                	jmp    c011361d <sfs_io_nolock+0x244>
		if (sfs_bmap_load_nolock(sfs, sin, blkno, &ino))
c01135b6:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01135b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01135bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01135c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01135c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01135c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01135cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01135ce:	89 04 24             	mov    %eax,(%esp)
c01135d1:	e8 dd f8 ff ff       	call   c0112eb3 <sfs_bmap_load_nolock>
c01135d6:	85 c0                	test   %eax,%eax
c01135d8:	0f 85 cb 00 00 00    	jne    c01136a9 <sfs_io_nolock+0x2d0>
			goto out;
		if (sfs_block_op(sfs, buf, ino, 1))
c01135de:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01135e1:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01135e8:	00 
c01135e9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01135ed:	8b 45 10             	mov    0x10(%ebp),%eax
c01135f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01135f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01135f7:	89 04 24             	mov    %eax,(%esp)
c01135fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01135fd:	ff d0                	call   *%eax
c01135ff:	85 c0                	test   %eax,%eax
c0113601:	0f 85 a5 00 00 00    	jne    c01136ac <sfs_io_nolock+0x2d3>
			goto out;
		blkno++;
c0113607:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
		alen += SFS_BLKSIZE;
c011360b:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
		buf = (char *)buf + SFS_BLKSIZE;
c0113612:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
		nblks++;
	}
	
	// Read the full blocks 
	int read_count;
	for (read_count = 0; read_count < (int)nblks - 1; read_count++) {
c0113619:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c011361d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113620:	83 e8 01             	sub    $0x1,%eax
c0113623:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0113626:	7f 8e                	jg     c01135b6 <sfs_io_nolock+0x1dd>
		alen += SFS_BLKSIZE;
		buf = (char *)buf + SFS_BLKSIZE;
	}

	// Read the final incomplete block, if it exists
	size = endpos % SFS_BLKSIZE;
c0113628:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011362b:	89 c2                	mov    %eax,%edx
c011362d:	c1 fa 1f             	sar    $0x1f,%edx
c0113630:	c1 ea 14             	shr    $0x14,%edx
c0113633:	01 d0                	add    %edx,%eax
c0113635:	25 ff 0f 00 00       	and    $0xfff,%eax
c011363a:	29 d0                	sub    %edx,%eax
c011363c:	89 45 cc             	mov    %eax,-0x34(%ebp)
    if(size != 0  &&  nblks > 0) {
c011363f:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0113643:	74 6e                	je     c01136b3 <sfs_io_nolock+0x2da>
c0113645:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113649:	74 68                	je     c01136b3 <sfs_io_nolock+0x2da>
        if(sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) 
c011364b:	8d 45 c8             	lea    -0x38(%ebp),%eax
c011364e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113652:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113655:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113659:	8b 45 0c             	mov    0xc(%ebp),%eax
c011365c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113660:	8b 45 08             	mov    0x8(%ebp),%eax
c0113663:	89 04 24             	mov    %eax,(%esp)
c0113666:	e8 48 f8 ff ff       	call   c0112eb3 <sfs_bmap_load_nolock>
c011366b:	85 c0                	test   %eax,%eax
c011366d:	75 40                	jne    c01136af <sfs_io_nolock+0x2d6>
			goto out;
        if(sfs_buf_op(sfs, buf, size, ino, 0))   
c011366f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113672:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113679:	00 
c011367a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011367e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113681:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113685:	8b 45 10             	mov    0x10(%ebp),%eax
c0113688:	89 44 24 04          	mov    %eax,0x4(%esp)
c011368c:	8b 45 08             	mov    0x8(%ebp),%eax
c011368f:	89 04 24             	mov    %eax,(%esp)
c0113692:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113695:	ff d0                	call   *%eax
c0113697:	85 c0                	test   %eax,%eax
c0113699:	75 17                	jne    c01136b2 <sfs_io_nolock+0x2d9>
			goto out;
        alen += size;
c011369b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011369e:	01 45 e8             	add    %eax,-0x18(%ebp)
c01136a1:	eb 10                	jmp    c01136b3 <sfs_io_nolock+0x2da>
	// Read the first block, if offset is in the middle of the block
	blkoff = offset % SFS_BLKSIZE;			
	if (blkoff != 0) {			
		size = nblks > 0 ? SFS_BLKSIZE - blkoff : endpos - offset;
		if (sfs_bmap_load_nolock(sfs, sin, blkno, &ino))
			goto out;
c01136a3:	90                   	nop
c01136a4:	eb 0d                	jmp    c01136b3 <sfs_io_nolock+0x2da>
		if (sfs_buf_op(sfs, buf, size, ino, blkoff))
			goto out;
c01136a6:	90                   	nop
c01136a7:	eb 0a                	jmp    c01136b3 <sfs_io_nolock+0x2da>
	
	// Read the full blocks 
	int read_count;
	for (read_count = 0; read_count < (int)nblks - 1; read_count++) {
		if (sfs_bmap_load_nolock(sfs, sin, blkno, &ino))
			goto out;
c01136a9:	90                   	nop
c01136aa:	eb 07                	jmp    c01136b3 <sfs_io_nolock+0x2da>
		if (sfs_block_op(sfs, buf, ino, 1))
			goto out;
c01136ac:	90                   	nop
c01136ad:	eb 04                	jmp    c01136b3 <sfs_io_nolock+0x2da>

	// Read the final incomplete block, if it exists
	size = endpos % SFS_BLKSIZE;
    if(size != 0  &&  nblks > 0) {
        if(sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) 
			goto out;
c01136af:	90                   	nop
c01136b0:	eb 01                	jmp    c01136b3 <sfs_io_nolock+0x2da>
        if(sfs_buf_op(sfs, buf, size, ino, 0))   
			goto out;
c01136b2:	90                   	nop
        alen += size;
    }

out:
    *alenp = alen;
c01136b3:	8b 45 18             	mov    0x18(%ebp),%eax
c01136b6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01136b9:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c01136bb:	8b 45 14             	mov    0x14(%ebp),%eax
c01136be:	89 c2                	mov    %eax,%edx
c01136c0:	03 55 e8             	add    -0x18(%ebp),%edx
c01136c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136c6:	8b 00                	mov    (%eax),%eax
c01136c8:	8b 00                	mov    (%eax),%eax
c01136ca:	39 c2                	cmp    %eax,%edx
c01136cc:	76 17                	jbe    c01136e5 <sfs_io_nolock+0x30c>
        sin->din->size = offset + alen;
c01136ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136d1:	8b 00                	mov    (%eax),%eax
c01136d3:	8b 55 14             	mov    0x14(%ebp),%edx
c01136d6:	03 55 e8             	add    -0x18(%ebp),%edx
c01136d9:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c01136db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136de:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c01136e5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c01136e8:	c9                   	leave  
c01136e9:	c3                   	ret    

c01136ea <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c01136ea:	55                   	push   %ebp
c01136eb:	89 e5                	mov    %esp,%ebp
c01136ed:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01136f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01136f3:	8b 40 38             	mov    0x38(%eax),%eax
c01136f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01136f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01136fd:	74 0a                	je     c0113709 <sfs_io+0x1f>
c01136ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113702:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113705:	85 c0                	test   %eax,%eax
c0113707:	74 24                	je     c011372d <sfs_io+0x43>
c0113709:	c7 44 24 0c 14 9a 11 	movl   $0xc0119a14,0xc(%esp)
c0113710:	c0 
c0113711:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113718:	c0 
c0113719:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c0113720:	00 
c0113721:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113728:	e8 7f d7 fe ff       	call   c0100eac <__panic>
c011372d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113730:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113733:	8b 45 08             	mov    0x8(%ebp),%eax
c0113736:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113739:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011373d:	74 0d                	je     c011374c <sfs_io+0x62>
c011373f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113742:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113745:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011374a:	74 24                	je     c0113770 <sfs_io+0x86>
c011374c:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c0113753:	c0 
c0113754:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c011375b:	c0 
c011375c:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c0113763:	00 
c0113764:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011376b:	e8 3c d7 fe ff       	call   c0100eac <__panic>
c0113770:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113773:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c0113776:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113779:	89 04 24             	mov    %eax,(%esp)
c011377c:	e8 36 ec ff ff       	call   c01123b7 <lock_sin>
    {
        size_t alen = iob->io_resid;
c0113781:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113784:	8b 40 0c             	mov    0xc(%eax),%eax
c0113787:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c011378a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011378d:	8b 50 04             	mov    0x4(%eax),%edx
c0113790:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113793:	8b 00                	mov    (%eax),%eax
c0113795:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0113798:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c011379c:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c011379f:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01137a3:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01137a7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01137ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01137ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01137b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01137b5:	89 04 24             	mov    %eax,(%esp)
c01137b8:	e8 1c fc ff ff       	call   c01133d9 <sfs_io_nolock>
c01137bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c01137c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01137c3:	85 c0                	test   %eax,%eax
c01137c5:	74 12                	je     c01137d9 <sfs_io+0xef>
            iobuf_skip(iob, alen);
c01137c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01137ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01137ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137d1:	89 04 24             	mov    %eax,(%esp)
c01137d4:	e8 02 7e ff ff       	call   c010b5db <iobuf_skip>
        }
    }
    unlock_sin(sin);
c01137d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01137dc:	89 04 24             	mov    %eax,(%esp)
c01137df:	e8 e9 eb ff ff       	call   c01123cd <unlock_sin>
    return ret;
c01137e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c01137e7:	c9                   	leave  
c01137e8:	c3                   	ret    

c01137e9 <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c01137e9:	55                   	push   %ebp
c01137ea:	89 e5                	mov    %esp,%ebp
c01137ec:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 0);
c01137ef:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01137f6:	00 
c01137f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01137fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0113801:	89 04 24             	mov    %eax,(%esp)
c0113804:	e8 e1 fe ff ff       	call   c01136ea <sfs_io>
}
c0113809:	c9                   	leave  
c011380a:	c3                   	ret    

c011380b <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c011380b:	55                   	push   %ebp
c011380c:	89 e5                	mov    %esp,%ebp
c011380e:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 1);
c0113811:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0113818:	00 
c0113819:	8b 45 0c             	mov    0xc(%ebp),%eax
c011381c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113820:	8b 45 08             	mov    0x8(%ebp),%eax
c0113823:	89 04 24             	mov    %eax,(%esp)
c0113826:	e8 bf fe ff ff       	call   c01136ea <sfs_io>
}
c011382b:	c9                   	leave  
c011382c:	c3                   	ret    

c011382d <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c011382d:	55                   	push   %ebp
c011382e:	89 e5                	mov    %esp,%ebp
c0113830:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0113833:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c011383a:	00 
c011383b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0113842:	00 
c0113843:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113846:	89 04 24             	mov    %eax,(%esp)
c0113849:	e8 26 1f 00 00       	call   c0115774 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c011384e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113851:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113854:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113858:	74 17                	je     c0113871 <sfs_fstat+0x44>
c011385a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011385d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113860:	85 c0                	test   %eax,%eax
c0113862:	74 0d                	je     c0113871 <sfs_fstat+0x44>
c0113864:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113867:	8b 40 3c             	mov    0x3c(%eax),%eax
c011386a:	8b 40 28             	mov    0x28(%eax),%eax
c011386d:	85 c0                	test   %eax,%eax
c011386f:	75 24                	jne    c0113895 <sfs_fstat+0x68>
c0113871:	c7 44 24 0c 40 9a 11 	movl   $0xc0119a40,0xc(%esp)
c0113878:	c0 
c0113879:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113880:	c0 
c0113881:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
c0113888:	00 
c0113889:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113890:	e8 17 d6 fe ff       	call   c0100eac <__panic>
c0113895:	c7 44 24 04 90 9a 11 	movl   $0xc0119a90,0x4(%esp)
c011389c:	c0 
c011389d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138a0:	89 04 24             	mov    %eax,(%esp)
c01138a3:	e8 d5 bb ff ff       	call   c010f47d <inode_check>
c01138a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138ab:	8b 40 3c             	mov    0x3c(%eax),%eax
c01138ae:	8b 50 28             	mov    0x28(%eax),%edx
c01138b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01138b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01138bb:	89 04 24             	mov    %eax,(%esp)
c01138be:	ff d2                	call   *%edx
c01138c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01138c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01138c7:	74 05                	je     c01138ce <sfs_fstat+0xa1>
        return ret;
c01138c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01138cc:	eb 71                	jmp    c011393f <sfs_fstat+0x112>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c01138ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01138d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01138d4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01138d8:	74 0d                	je     c01138e7 <sfs_fstat+0xba>
c01138da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01138dd:	8b 40 2c             	mov    0x2c(%eax),%eax
c01138e0:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01138e5:	74 24                	je     c011390b <sfs_fstat+0xde>
c01138e7:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c01138ee:	c0 
c01138ef:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c01138f6:	c0 
c01138f7:	c7 44 24 04 b4 02 00 	movl   $0x2b4,0x4(%esp)
c01138fe:	00 
c01138ff:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113906:	e8 a1 d5 fe ff       	call   c0100eac <__panic>
c011390b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011390e:	8b 00                	mov    (%eax),%eax
c0113910:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c0113913:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113916:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011391a:	0f b7 d0             	movzwl %ax,%edx
c011391d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113920:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c0113923:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113926:	8b 50 08             	mov    0x8(%eax),%edx
c0113929:	8b 45 0c             	mov    0xc(%ebp),%eax
c011392c:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c011392f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113932:	8b 10                	mov    (%eax),%edx
c0113934:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113937:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c011393a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011393f:	c9                   	leave  
c0113940:	c3                   	ret    

c0113941 <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c0113941:	55                   	push   %ebp
c0113942:	89 e5                	mov    %esp,%ebp
c0113944:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113947:	8b 45 08             	mov    0x8(%ebp),%eax
c011394a:	8b 40 38             	mov    0x38(%eax),%eax
c011394d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113950:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113954:	74 0a                	je     c0113960 <sfs_fsync+0x1f>
c0113956:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113959:	8b 40 6c             	mov    0x6c(%eax),%eax
c011395c:	85 c0                	test   %eax,%eax
c011395e:	74 24                	je     c0113984 <sfs_fsync+0x43>
c0113960:	c7 44 24 0c 14 9a 11 	movl   $0xc0119a14,0xc(%esp)
c0113967:	c0 
c0113968:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c011396f:	c0 
c0113970:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c0113977:	00 
c0113978:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011397f:	e8 28 d5 fe ff       	call   c0100eac <__panic>
c0113984:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113987:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011398a:	8b 45 08             	mov    0x8(%ebp),%eax
c011398d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113990:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113994:	74 0d                	je     c01139a3 <sfs_fsync+0x62>
c0113996:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113999:	8b 40 2c             	mov    0x2c(%eax),%eax
c011399c:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01139a1:	74 24                	je     c01139c7 <sfs_fsync+0x86>
c01139a3:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c01139aa:	c0 
c01139ab:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c01139b2:	c0 
c01139b3:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c01139ba:	00 
c01139bb:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c01139c2:	e8 e5 d4 fe ff       	call   c0100eac <__panic>
c01139c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01139ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c01139cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c01139d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139d7:	8b 40 08             	mov    0x8(%eax),%eax
c01139da:	85 c0                	test   %eax,%eax
c01139dc:	74 6b                	je     c0113a49 <sfs_fsync+0x108>
        lock_sin(sin);
c01139de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139e1:	89 04 24             	mov    %eax,(%esp)
c01139e4:	e8 ce e9 ff ff       	call   c01123b7 <lock_sin>
        {
            if (sin->dirty) {
c01139e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139ec:	8b 40 08             	mov    0x8(%eax),%eax
c01139ef:	85 c0                	test   %eax,%eax
c01139f1:	74 4b                	je     c0113a3e <sfs_fsync+0xfd>
                sin->dirty = 0;
c01139f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139f6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c01139fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a00:	8b 50 04             	mov    0x4(%eax),%edx
c0113a03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a06:	8b 00                	mov    (%eax),%eax
c0113a08:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113a0f:	00 
c0113a10:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0113a14:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c0113a1b:	00 
c0113a1c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a23:	89 04 24             	mov    %eax,(%esp)
c0113a26:	e8 b3 0e 00 00       	call   c01148de <sfs_wbuf>
c0113a2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113a2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113a32:	74 0a                	je     c0113a3e <sfs_fsync+0xfd>
                    sin->dirty = 1;
c0113a34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a37:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c0113a3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a41:	89 04 24             	mov    %eax,(%esp)
c0113a44:	e8 84 e9 ff ff       	call   c01123cd <unlock_sin>
    }
    return ret;
c0113a49:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113a4c:	c9                   	leave  
c0113a4d:	c3                   	ret    

c0113a4e <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c0113a4e:	55                   	push   %ebp
c0113a4f:	89 e5                	mov    %esp,%ebp
c0113a51:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113a54:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a57:	8b 40 0c             	mov    0xc(%eax),%eax
c0113a5a:	83 f8 02             	cmp    $0x2,%eax
c0113a5d:	76 15                	jbe    c0113a74 <sfs_namefile+0x26>
c0113a5f:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113a66:	e8 eb 13 ff ff       	call   c0104e56 <kmalloc>
c0113a6b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113a6e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113a72:	75 0a                	jne    c0113a7e <sfs_namefile+0x30>
        return -E_NO_MEM;
c0113a74:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113a79:	e9 bd 02 00 00       	jmp    c0113d3b <sfs_namefile+0x2ed>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113a7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a81:	8b 40 38             	mov    0x38(%eax),%eax
c0113a84:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113a87:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113a8b:	74 0a                	je     c0113a97 <sfs_namefile+0x49>
c0113a8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113a90:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113a93:	85 c0                	test   %eax,%eax
c0113a95:	74 24                	je     c0113abb <sfs_namefile+0x6d>
c0113a97:	c7 44 24 0c 14 9a 11 	movl   $0xc0119a14,0xc(%esp)
c0113a9e:	c0 
c0113a9f:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113aa6:	c0 
c0113aa7:	c7 44 24 04 dd 02 00 	movl   $0x2dd,0x4(%esp)
c0113aae:	00 
c0113aaf:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113ab6:	e8 f1 d3 fe ff       	call   c0100eac <__panic>
c0113abb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113abe:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113ac1:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ac4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113ac7:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0113acb:	74 0d                	je     c0113ada <sfs_namefile+0x8c>
c0113acd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113ad0:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113ad3:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113ad8:	74 24                	je     c0113afe <sfs_namefile+0xb0>
c0113ada:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c0113ae1:	c0 
c0113ae2:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113ae9:	c0 
c0113aea:	c7 44 24 04 de 02 00 	movl   $0x2de,0x4(%esp)
c0113af1:	00 
c0113af2:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113af9:	e8 ae d3 fe ff       	call   c0100eac <__panic>
c0113afe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113b01:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c0113b04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b07:	8b 10                	mov    (%eax),%edx
c0113b09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b0c:	8b 40 0c             	mov    0xc(%eax),%eax
c0113b0f:	01 d0                	add    %edx,%eax
c0113b11:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c0113b14:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b17:	8b 40 0c             	mov    0xc(%eax),%eax
c0113b1a:	83 e8 02             	sub    $0x2,%eax
c0113b1d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c0113b20:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b23:	89 04 24             	mov    %eax,(%esp)
c0113b26:	e8 4a b7 ff ff       	call   c010f275 <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c0113b2b:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113b32:	00 
c0113b33:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0113b36:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113b3a:	c7 44 24 08 98 9a 11 	movl   $0xc0119a98,0x8(%esp)
c0113b41:	c0 
c0113b42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113b45:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113b49:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113b4c:	89 04 24             	mov    %eax,(%esp)
c0113b4f:	e8 66 f7 ff ff       	call   c01132ba <sfs_lookup_once>
c0113b54:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113b57:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113b5b:	0f 85 bd 01 00 00    	jne    c0113d1e <sfs_namefile+0x2d0>
            goto failed;
        }

        uint32_t ino = sin->ino;
c0113b61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113b64:	8b 40 04             	mov    0x4(%eax),%eax
c0113b67:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c0113b6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b6d:	89 04 24             	mov    %eax,(%esp)
c0113b70:	e8 1a b7 ff ff       	call   c010f28f <inode_ref_dec>
        if (node == parent) {
c0113b75:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113b78:	39 45 08             	cmp    %eax,0x8(%ebp)
c0113b7b:	75 77                	jne    c0113bf4 <sfs_namefile+0x1a6>
            vop_ref_dec(node);
c0113b7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b80:	89 04 24             	mov    %eax,(%esp)
c0113b83:	e8 07 b7 ff ff       	call   c010f28f <inode_ref_dec>
            break;
c0113b88:	90                   	nop
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c0113b89:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b8c:	8b 40 0c             	mov    0xc(%eax),%eax
c0113b8f:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0113b92:	83 e8 02             	sub    $0x2,%eax
c0113b95:	89 45 d0             	mov    %eax,-0x30(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c0113b98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b9b:	8b 00                	mov    (%eax),%eax
c0113b9d:	8d 50 01             	lea    0x1(%eax),%edx
c0113ba0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113ba3:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113ba7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113baa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113bae:	89 14 24             	mov    %edx,(%esp)
c0113bb1:	e8 09 1c 00 00       	call   c01157bf <memmove>
c0113bb6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c0113bb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113bbc:	83 e8 01             	sub    $0x1,%eax
c0113bbf:	c6 00 2f             	movb   $0x2f,(%eax)
c0113bc2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113bc5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113bc8:	01 d0                	add    %edx,%eax
c0113bca:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c0113bcd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113bd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113bd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113bd7:	89 04 24             	mov    %eax,(%esp)
c0113bda:	e8 fc 79 ff ff       	call   c010b5db <iobuf_skip>
    kfree(entry);
c0113bdf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113be2:	89 04 24             	mov    %eax,(%esp)
c0113be5:	e8 87 12 ff ff       	call   c0104e71 <kfree>
    return 0;
c0113bea:	b8 00 00 00 00       	mov    $0x0,%eax
c0113bef:	e9 47 01 00 00       	jmp    c0113d3b <sfs_namefile+0x2ed>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c0113bf4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113bf7:	89 45 08             	mov    %eax,0x8(%ebp)
c0113bfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0113bfd:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0113c00:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0113c04:	74 0d                	je     c0113c13 <sfs_namefile+0x1c5>
c0113c06:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113c09:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113c0c:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113c11:	74 24                	je     c0113c37 <sfs_namefile+0x1e9>
c0113c13:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c0113c1a:	c0 
c0113c1b:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113c22:	c0 
c0113c23:	c7 44 24 04 f1 02 00 	movl   $0x2f1,0x4(%esp)
c0113c2a:	00 
c0113c2b:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113c32:	e8 75 d2 fe ff       	call   c0100eac <__panic>
c0113c37:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113c3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c0113c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113c40:	8b 40 04             	mov    0x4(%eax),%eax
c0113c43:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113c46:	74 0f                	je     c0113c57 <sfs_namefile+0x209>
c0113c48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113c4b:	8b 00                	mov    (%eax),%eax
c0113c4d:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113c51:	66 83 f8 02          	cmp    $0x2,%ax
c0113c55:	74 24                	je     c0113c7b <sfs_namefile+0x22d>
c0113c57:	c7 44 24 0c 9c 9a 11 	movl   $0xc0119a9c,0xc(%esp)
c0113c5e:	c0 
c0113c5f:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113c66:	c0 
c0113c67:	c7 44 24 04 f2 02 00 	movl   $0x2f2,0x4(%esp)
c0113c6e:	00 
c0113c6f:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113c76:	e8 31 d2 fe ff       	call   c0100eac <__panic>

        lock_sin(sin);
c0113c7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113c7e:	89 04 24             	mov    %eax,(%esp)
c0113c81:	e8 31 e7 ff ff       	call   c01123b7 <lock_sin>
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c0113c86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113c89:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113c8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113c90:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113c94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113c97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113c9b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113c9e:	89 04 24             	mov    %eax,(%esp)
c0113ca1:	e8 a8 f5 ff ff       	call   c011324e <sfs_dirent_findino_nolock>
c0113ca6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c0113ca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113cac:	89 04 24             	mov    %eax,(%esp)
c0113caf:	e8 19 e7 ff ff       	call   c01123cd <unlock_sin>

        if (ret != 0) {
c0113cb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113cb8:	75 67                	jne    c0113d21 <sfs_namefile+0x2d3>
            goto failed;
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c0113cba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113cbd:	83 c0 04             	add    $0x4,%eax
c0113cc0:	89 04 24             	mov    %eax,(%esp)
c0113cc3:	e8 4c 17 00 00       	call   c0115414 <strlen>
c0113cc8:	83 c0 01             	add    $0x1,%eax
c0113ccb:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0113cce:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113cd1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0113cd4:	77 3e                	ja     c0113d14 <sfs_namefile+0x2c6>
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c0113cd6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113cd9:	29 45 e8             	sub    %eax,-0x18(%ebp)
c0113cdc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113cdf:	f7 d8                	neg    %eax
c0113ce1:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c0113ce4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113ce7:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113cea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ced:	83 c0 04             	add    $0x4,%eax
c0113cf0:	89 54 24 08          	mov    %edx,0x8(%esp)
c0113cf4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113cf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113cfb:	89 04 24             	mov    %eax,(%esp)
c0113cfe:	e8 70 1b 00 00       	call   c0115873 <memcpy>
        ptr[alen - 1] = '/';
c0113d03:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113d06:	83 e8 01             	sub    $0x1,%eax
c0113d09:	03 45 ec             	add    -0x14(%ebp),%eax
c0113d0c:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c0113d0f:	e9 17 fe ff ff       	jmp    c0113b2b <sfs_namefile+0xdd>
        if (ret != 0) {
            goto failed;
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
c0113d14:	90                   	nop
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c0113d15:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c0113d1c:	eb 04                	jmp    c0113d22 <sfs_namefile+0x2d4>
    size_t alen, resid = iob->io_resid - 2;
    vop_ref_inc(node);
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
            goto failed;
c0113d1e:	90                   	nop
c0113d1f:	eb 01                	jmp    c0113d22 <sfs_namefile+0x2d4>
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
        }
        unlock_sin(sin);

        if (ret != 0) {
            goto failed;
c0113d21:	90                   	nop
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c0113d22:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d25:	89 04 24             	mov    %eax,(%esp)
c0113d28:	e8 62 b5 ff ff       	call   c010f28f <inode_ref_dec>
    kfree(entry);
c0113d2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d30:	89 04 24             	mov    %eax,(%esp)
c0113d33:	e8 39 11 ff ff       	call   c0104e71 <kfree>
    return ret;
c0113d38:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0113d3b:	c9                   	leave  
c0113d3c:	c3                   	ret    

c0113d3d <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0113d3d:	55                   	push   %ebp
c0113d3e:	89 e5                	mov    %esp,%ebp
c0113d40:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113d43:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113d46:	8b 00                	mov    (%eax),%eax
c0113d48:	8b 40 08             	mov    0x8(%eax),%eax
c0113d4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0113d4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113d55:	eb 4c                	jmp    c0113da3 <sfs_getdirentry_sub_nolock+0x66>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0113d57:	8b 45 14             	mov    0x14(%ebp),%eax
c0113d5a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113d5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113d61:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113d65:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113d68:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113d6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d6f:	89 04 24             	mov    %eax,(%esp)
c0113d72:	e8 ad f2 ff ff       	call   c0113024 <sfs_dirent_read_nolock>
c0113d77:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113d7a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113d7e:	74 05                	je     c0113d85 <sfs_getdirentry_sub_nolock+0x48>
            return ret;
c0113d80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d83:	eb 2b                	jmp    c0113db0 <sfs_getdirentry_sub_nolock+0x73>
        }
        if (entry->ino != 0) {
c0113d85:	8b 45 14             	mov    0x14(%ebp),%eax
c0113d88:	8b 00                	mov    (%eax),%eax
c0113d8a:	85 c0                	test   %eax,%eax
c0113d8c:	74 11                	je     c0113d9f <sfs_getdirentry_sub_nolock+0x62>
            if (slot == 0) {
c0113d8e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113d92:	75 07                	jne    c0113d9b <sfs_getdirentry_sub_nolock+0x5e>
                return 0;
c0113d94:	b8 00 00 00 00       	mov    $0x0,%eax
c0113d99:	eb 15                	jmp    c0113db0 <sfs_getdirentry_sub_nolock+0x73>
            }
            slot --;
c0113d9b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0113d9f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113da6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113da9:	7c ac                	jl     c0113d57 <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c0113dab:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113db0:	c9                   	leave  
c0113db1:	c3                   	ret    

c0113db2 <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0113db2:	55                   	push   %ebp
c0113db3:	89 e5                	mov    %esp,%ebp
c0113db5:	83 ec 48             	sub    $0x48,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113db8:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113dbf:	e8 92 10 ff ff       	call   c0104e56 <kmalloc>
c0113dc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113dc7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113dcb:	75 0a                	jne    c0113dd7 <sfs_getdirentry+0x25>
        return -E_NO_MEM;
c0113dcd:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113dd2:	e9 6d 01 00 00       	jmp    c0113f44 <sfs_getdirentry+0x192>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113dd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0113dda:	8b 40 38             	mov    0x38(%eax),%eax
c0113ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113de0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113de4:	74 0a                	je     c0113df0 <sfs_getdirentry+0x3e>
c0113de6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113de9:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113dec:	85 c0                	test   %eax,%eax
c0113dee:	74 24                	je     c0113e14 <sfs_getdirentry+0x62>
c0113df0:	c7 44 24 0c 14 9a 11 	movl   $0xc0119a14,0xc(%esp)
c0113df7:	c0 
c0113df8:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113dff:	c0 
c0113e00:	c7 44 24 04 33 03 00 	movl   $0x333,0x4(%esp)
c0113e07:	00 
c0113e08:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113e0f:	e8 98 d0 fe ff       	call   c0100eac <__panic>
c0113e14:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e17:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113e1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113e20:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113e24:	74 0d                	je     c0113e33 <sfs_getdirentry+0x81>
c0113e26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e29:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113e2c:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113e31:	74 24                	je     c0113e57 <sfs_getdirentry+0xa5>
c0113e33:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c0113e3a:	c0 
c0113e3b:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113e42:	c0 
c0113e43:	c7 44 24 04 34 03 00 	movl   $0x334,0x4(%esp)
c0113e4a:	00 
c0113e4b:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113e52:	e8 55 d0 fe ff       	call   c0100eac <__panic>
c0113e57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e5a:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c0113e5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113e60:	8b 40 04             	mov    0x4(%eax),%eax
c0113e63:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c0113e66:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113e6a:	78 0c                	js     c0113e78 <sfs_getdirentry+0xc6>
c0113e6c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e6f:	25 ff 00 00 00       	and    $0xff,%eax
c0113e74:	85 c0                	test   %eax,%eax
c0113e76:	74 15                	je     c0113e8d <sfs_getdirentry+0xdb>
        kfree(entry);
c0113e78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113e7b:	89 04 24             	mov    %eax,(%esp)
c0113e7e:	e8 ee 0f ff ff       	call   c0104e71 <kfree>
        return -E_INVAL;
c0113e83:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113e88:	e9 b7 00 00 00       	jmp    c0113f44 <sfs_getdirentry+0x192>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c0113e8d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e90:	c1 e8 08             	shr    $0x8,%eax
c0113e93:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113e96:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0113e99:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113e9c:	8b 00                	mov    (%eax),%eax
c0113e9e:	8b 40 08             	mov    0x8(%eax),%eax
c0113ea1:	39 c2                	cmp    %eax,%edx
c0113ea3:	76 15                	jbe    c0113eba <sfs_getdirentry+0x108>
        kfree(entry);
c0113ea5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ea8:	89 04 24             	mov    %eax,(%esp)
c0113eab:	e8 c1 0f ff ff       	call   c0104e71 <kfree>
        return -E_NOENT;
c0113eb0:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0113eb5:	e9 8a 00 00 00       	jmp    c0113f44 <sfs_getdirentry+0x192>
    }
    lock_sin(sin);
c0113eba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113ebd:	89 04 24             	mov    %eax,(%esp)
c0113ec0:	e8 f2 e4 ff ff       	call   c01123b7 <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0113ec5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ec8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113ecc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113ecf:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113ed3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113ed6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113eda:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113edd:	89 04 24             	mov    %eax,(%esp)
c0113ee0:	e8 58 fe ff ff       	call   c0113d3d <sfs_getdirentry_sub_nolock>
c0113ee5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113ee8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113eec:	74 0d                	je     c0113efb <sfs_getdirentry+0x149>
        unlock_sin(sin);
c0113eee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113ef1:	89 04 24             	mov    %eax,(%esp)
c0113ef4:	e8 d4 e4 ff ff       	call   c01123cd <unlock_sin>
        goto out;
c0113ef9:	eb 3b                	jmp    c0113f36 <sfs_getdirentry+0x184>
    }
    unlock_sin(sin);
c0113efb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113efe:	89 04 24             	mov    %eax,(%esp)
c0113f01:	e8 c7 e4 ff ff       	call   c01123cd <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c0113f06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f09:	83 c0 04             	add    $0x4,%eax
c0113f0c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113f13:	00 
c0113f14:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113f1b:	00 
c0113f1c:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0113f23:	00 
c0113f24:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113f28:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113f2b:	89 04 24             	mov    %eax,(%esp)
c0113f2e:	e8 93 75 ff ff       	call   c010b4c6 <iobuf_move>
c0113f33:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c0113f36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f39:	89 04 24             	mov    %eax,(%esp)
c0113f3c:	e8 30 0f ff ff       	call   c0104e71 <kfree>
    return ret;
c0113f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113f44:	c9                   	leave  
c0113f45:	c3                   	ret    

c0113f46 <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0113f46:	55                   	push   %ebp
c0113f47:	89 e5                	mov    %esp,%ebp
c0113f49:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113f4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f4f:	8b 40 38             	mov    0x38(%eax),%eax
c0113f52:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113f55:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113f59:	74 0a                	je     c0113f65 <sfs_reclaim+0x1f>
c0113f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f5e:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113f61:	85 c0                	test   %eax,%eax
c0113f63:	74 24                	je     c0113f89 <sfs_reclaim+0x43>
c0113f65:	c7 44 24 0c 14 9a 11 	movl   $0xc0119a14,0xc(%esp)
c0113f6c:	c0 
c0113f6d:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113f74:	c0 
c0113f75:	c7 44 24 04 51 03 00 	movl   $0x351,0x4(%esp)
c0113f7c:	00 
c0113f7d:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113f84:	e8 23 cf fe ff       	call   c0100eac <__panic>
c0113f89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113f8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f92:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113f95:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113f99:	74 0d                	je     c0113fa8 <sfs_reclaim+0x62>
c0113f9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113f9e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113fa1:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113fa6:	74 24                	je     c0113fcc <sfs_reclaim+0x86>
c0113fa8:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c0113faf:	c0 
c0113fb0:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113fb7:	c0 
c0113fb8:	c7 44 24 04 52 03 00 	movl   $0x352,0x4(%esp)
c0113fbf:	00 
c0113fc0:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0113fc7:	e8 e0 ce fe ff       	call   c0100eac <__panic>
c0113fcc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113fcf:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c0113fd2:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c0113fd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113fdc:	89 04 24             	mov    %eax,(%esp)
c0113fdf:	e8 50 0b 00 00       	call   c0114b34 <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
c0113fe4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113fe7:	8b 40 0c             	mov    0xc(%eax),%eax
c0113fea:	85 c0                	test   %eax,%eax
c0113fec:	7f 24                	jg     c0114012 <sfs_reclaim+0xcc>
c0113fee:	c7 44 24 0c ce 9a 11 	movl   $0xc0119ace,0xc(%esp)
c0113ff5:	c0 
c0113ff6:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0113ffd:	c0 
c0113ffe:	c7 44 24 04 57 03 00 	movl   $0x357,0x4(%esp)
c0114005:	00 
c0114006:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011400d:	e8 9a ce fe ff       	call   c0100eac <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c0114012:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114015:	8b 40 0c             	mov    0xc(%eax),%eax
c0114018:	8d 50 ff             	lea    -0x1(%eax),%edx
c011401b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011401e:	89 50 0c             	mov    %edx,0xc(%eax)
c0114021:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114024:	8b 40 0c             	mov    0xc(%eax),%eax
c0114027:	85 c0                	test   %eax,%eax
c0114029:	0f 85 a2 01 00 00    	jne    c01141d1 <sfs_reclaim+0x28b>
c011402f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114032:	89 04 24             	mov    %eax,(%esp)
c0114035:	e8 72 e3 ff ff       	call   c01123ac <inode_ref_count>
c011403a:	85 c0                	test   %eax,%eax
c011403c:	0f 85 8f 01 00 00    	jne    c01141d1 <sfs_reclaim+0x28b>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c0114042:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114045:	8b 00                	mov    (%eax),%eax
c0114047:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011404b:	66 85 c0             	test   %ax,%ax
c011404e:	0f 85 80 00 00 00    	jne    c01140d4 <sfs_reclaim+0x18e>
        if ((ret = vop_truncate(node, 0)) != 0) {
c0114054:	8b 45 08             	mov    0x8(%ebp),%eax
c0114057:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011405a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011405e:	74 17                	je     c0114077 <sfs_reclaim+0x131>
c0114060:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114063:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114066:	85 c0                	test   %eax,%eax
c0114068:	74 0d                	je     c0114077 <sfs_reclaim+0x131>
c011406a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011406d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114070:	8b 40 30             	mov    0x30(%eax),%eax
c0114073:	85 c0                	test   %eax,%eax
c0114075:	75 24                	jne    c011409b <sfs_reclaim+0x155>
c0114077:	c7 44 24 0c e8 9a 11 	movl   $0xc0119ae8,0xc(%esp)
c011407e:	c0 
c011407f:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0114086:	c0 
c0114087:	c7 44 24 04 5c 03 00 	movl   $0x35c,0x4(%esp)
c011408e:	00 
c011408f:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0114096:	e8 11 ce fe ff       	call   c0100eac <__panic>
c011409b:	c7 44 24 04 39 9b 11 	movl   $0xc0119b39,0x4(%esp)
c01140a2:	c0 
c01140a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01140a6:	89 04 24             	mov    %eax,(%esp)
c01140a9:	e8 cf b3 ff ff       	call   c010f47d <inode_check>
c01140ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01140b1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140b4:	8b 50 30             	mov    0x30(%eax),%edx
c01140b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01140be:	00 
c01140bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01140c2:	89 04 24             	mov    %eax,(%esp)
c01140c5:	ff d2                	call   *%edx
c01140c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01140ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01140ce:	0f 85 f9 00 00 00    	jne    c01141cd <sfs_reclaim+0x287>
            goto failed_unlock;
        }
    }
    if (sin->dirty) {
c01140d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01140d7:	8b 40 08             	mov    0x8(%eax),%eax
c01140da:	85 c0                	test   %eax,%eax
c01140dc:	74 74                	je     c0114152 <sfs_reclaim+0x20c>
        if ((ret = vop_fsync(node)) != 0) {
c01140de:	8b 45 08             	mov    0x8(%ebp),%eax
c01140e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01140e4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01140e8:	74 17                	je     c0114101 <sfs_reclaim+0x1bb>
c01140ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01140ed:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140f0:	85 c0                	test   %eax,%eax
c01140f2:	74 0d                	je     c0114101 <sfs_reclaim+0x1bb>
c01140f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01140f7:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140fa:	8b 40 18             	mov    0x18(%eax),%eax
c01140fd:	85 c0                	test   %eax,%eax
c01140ff:	75 24                	jne    c0114125 <sfs_reclaim+0x1df>
c0114101:	c7 44 24 0c a4 99 11 	movl   $0xc01199a4,0xc(%esp)
c0114108:	c0 
c0114109:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0114110:	c0 
c0114111:	c7 44 24 04 61 03 00 	movl   $0x361,0x4(%esp)
c0114118:	00 
c0114119:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0114120:	e8 87 cd fe ff       	call   c0100eac <__panic>
c0114125:	c7 44 24 04 f2 99 11 	movl   $0xc01199f2,0x4(%esp)
c011412c:	c0 
c011412d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114130:	89 04 24             	mov    %eax,(%esp)
c0114133:	e8 45 b3 ff ff       	call   c010f47d <inode_check>
c0114138:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011413b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011413e:	8b 50 18             	mov    0x18(%eax),%edx
c0114141:	8b 45 08             	mov    0x8(%ebp),%eax
c0114144:	89 04 24             	mov    %eax,(%esp)
c0114147:	ff d2                	call   *%edx
c0114149:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011414c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114150:	75 7e                	jne    c01141d0 <sfs_reclaim+0x28a>
            goto failed_unlock;
        }
    }
    sfs_remove_links(sin);
c0114152:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114155:	89 04 24             	mov    %eax,(%esp)
c0114158:	e8 ca e3 ff ff       	call   c0112527 <sfs_remove_links>
    unlock_sfs_fs(sfs);
c011415d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114160:	89 04 24             	mov    %eax,(%esp)
c0114163:	e8 f8 09 00 00       	call   c0114b60 <unlock_sfs_fs>

    if (sin->din->nlinks == 0) {
c0114168:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011416b:	8b 00                	mov    (%eax),%eax
c011416d:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0114171:	66 85 c0             	test   %ax,%ax
c0114174:	75 38                	jne    c01141ae <sfs_reclaim+0x268>
        sfs_block_free(sfs, sin->ino);
c0114176:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114179:	8b 40 04             	mov    0x4(%eax),%eax
c011417c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114180:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114183:	89 04 24             	mov    %eax,(%esp)
c0114186:	e8 2a e5 ff ff       	call   c01126b5 <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
c011418b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011418e:	8b 00                	mov    (%eax),%eax
c0114190:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114193:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0114196:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c011419a:	74 12                	je     c01141ae <sfs_reclaim+0x268>
            sfs_block_free(sfs, ent);
c011419c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011419f:	89 44 24 04          	mov    %eax,0x4(%esp)
c01141a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01141a6:	89 04 24             	mov    %eax,(%esp)
c01141a9:	e8 07 e5 ff ff       	call   c01126b5 <sfs_block_free>
        }
    }
    kfree(sin->din);
c01141ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01141b1:	8b 00                	mov    (%eax),%eax
c01141b3:	89 04 24             	mov    %eax,(%esp)
c01141b6:	e8 b6 0c ff ff       	call   c0104e71 <kfree>
    vop_kill(node);
c01141bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01141be:	89 04 24             	mov    %eax,(%esp)
c01141c1:	e8 36 b0 ff ff       	call   c010f1fc <inode_kill>
    return 0;
c01141c6:	b8 00 00 00 00       	mov    $0x0,%eax
c01141cb:	eb 12                	jmp    c01141df <sfs_reclaim+0x299>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
        if ((ret = vop_truncate(node, 0)) != 0) {
            goto failed_unlock;
c01141cd:	90                   	nop
c01141ce:	eb 01                	jmp    c01141d1 <sfs_reclaim+0x28b>
        }
    }
    if (sin->dirty) {
        if ((ret = vop_fsync(node)) != 0) {
            goto failed_unlock;
c01141d0:	90                   	nop
    kfree(sin->din);
    vop_kill(node);
    return 0;

failed_unlock:
    unlock_sfs_fs(sfs);
c01141d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01141d4:	89 04 24             	mov    %eax,(%esp)
c01141d7:	e8 84 09 00 00       	call   c0114b60 <unlock_sfs_fs>
    return ret;
c01141dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01141df:	c9                   	leave  
c01141e0:	c3                   	ret    

c01141e1 <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c01141e1:	55                   	push   %ebp
c01141e2:	89 e5                	mov    %esp,%ebp
c01141e4:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c01141e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01141ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01141ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01141f1:	74 0d                	je     c0114200 <sfs_gettype+0x1f>
c01141f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01141f6:	8b 40 2c             	mov    0x2c(%eax),%eax
c01141f9:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01141fe:	74 24                	je     c0114224 <sfs_gettype+0x43>
c0114200:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c0114207:	c0 
c0114208:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c011420f:	c0 
c0114210:	c7 44 24 04 7c 03 00 	movl   $0x37c,0x4(%esp)
c0114217:	00 
c0114218:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011421f:	e8 88 cc fe ff       	call   c0100eac <__panic>
c0114224:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114227:	8b 00                	mov    (%eax),%eax
c0114229:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c011422c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011422f:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0114233:	0f b7 c0             	movzwl %ax,%eax
c0114236:	83 f8 02             	cmp    $0x2,%eax
c0114239:	74 0c                	je     c0114247 <sfs_gettype+0x66>
c011423b:	83 f8 03             	cmp    $0x3,%eax
c011423e:	74 27                	je     c0114267 <sfs_gettype+0x86>
c0114240:	83 f8 01             	cmp    $0x1,%eax
c0114243:	74 12                	je     c0114257 <sfs_gettype+0x76>
c0114245:	eb 30                	jmp    c0114277 <sfs_gettype+0x96>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c0114247:	8b 45 0c             	mov    0xc(%ebp),%eax
c011424a:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c0114250:	b8 00 00 00 00       	mov    $0x0,%eax
c0114255:	eb 4a                	jmp    c01142a1 <sfs_gettype+0xc0>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c0114257:	8b 45 0c             	mov    0xc(%ebp),%eax
c011425a:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c0114260:	b8 00 00 00 00       	mov    $0x0,%eax
c0114265:	eb 3a                	jmp    c01142a1 <sfs_gettype+0xc0>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c0114267:	8b 45 0c             	mov    0xc(%ebp),%eax
c011426a:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c0114270:	b8 00 00 00 00       	mov    $0x0,%eax
c0114275:	eb 2a                	jmp    c01142a1 <sfs_gettype+0xc0>
    }
    panic("invalid file type %d.\n", din->type);
c0114277:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011427a:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011427e:	0f b7 c0             	movzwl %ax,%eax
c0114281:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114285:	c7 44 24 08 40 97 11 	movl   $0xc0119740,0x8(%esp)
c011428c:	c0 
c011428d:	c7 44 24 04 88 03 00 	movl   $0x388,0x4(%esp)
c0114294:	00 
c0114295:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011429c:	e8 0b cc fe ff       	call   c0100eac <__panic>
}
c01142a1:	c9                   	leave  
c01142a2:	c3                   	ret    

c01142a3 <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c01142a3:	55                   	push   %ebp
c01142a4:	89 e5                	mov    %esp,%ebp
c01142a6:	83 ec 28             	sub    $0x28,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c01142a9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01142ad:	78 0a                	js     c01142b9 <sfs_tryseek+0x16>
c01142af:	8b 45 0c             	mov    0xc(%ebp),%eax
c01142b2:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c01142b7:	76 0a                	jbe    c01142c3 <sfs_tryseek+0x20>
        return -E_INVAL;
c01142b9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01142be:	e9 ca 00 00 00       	jmp    c011438d <sfs_tryseek+0xea>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01142c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01142c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01142c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01142cd:	74 0d                	je     c01142dc <sfs_tryseek+0x39>
c01142cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01142d2:	8b 40 2c             	mov    0x2c(%eax),%eax
c01142d5:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01142da:	74 24                	je     c0114300 <sfs_tryseek+0x5d>
c01142dc:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c01142e3:	c0 
c01142e4:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c01142eb:	c0 
c01142ec:	c7 44 24 04 93 03 00 	movl   $0x393,0x4(%esp)
c01142f3:	00 
c01142f4:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c01142fb:	e8 ac cb fe ff       	call   c0100eac <__panic>
c0114300:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114303:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c0114306:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114309:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011430c:	8b 00                	mov    (%eax),%eax
c011430e:	8b 00                	mov    (%eax),%eax
c0114310:	39 c2                	cmp    %eax,%edx
c0114312:	76 74                	jbe    c0114388 <sfs_tryseek+0xe5>
        return vop_truncate(node, pos);
c0114314:	8b 45 08             	mov    0x8(%ebp),%eax
c0114317:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011431a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011431e:	74 17                	je     c0114337 <sfs_tryseek+0x94>
c0114320:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114323:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114326:	85 c0                	test   %eax,%eax
c0114328:	74 0d                	je     c0114337 <sfs_tryseek+0x94>
c011432a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011432d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114330:	8b 40 30             	mov    0x30(%eax),%eax
c0114333:	85 c0                	test   %eax,%eax
c0114335:	75 24                	jne    c011435b <sfs_tryseek+0xb8>
c0114337:	c7 44 24 0c e8 9a 11 	movl   $0xc0119ae8,0xc(%esp)
c011433e:	c0 
c011433f:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0114346:	c0 
c0114347:	c7 44 24 04 95 03 00 	movl   $0x395,0x4(%esp)
c011434e:	00 
c011434f:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0114356:	e8 51 cb fe ff       	call   c0100eac <__panic>
c011435b:	c7 44 24 04 39 9b 11 	movl   $0xc0119b39,0x4(%esp)
c0114362:	c0 
c0114363:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114366:	89 04 24             	mov    %eax,(%esp)
c0114369:	e8 0f b1 ff ff       	call   c010f47d <inode_check>
c011436e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114371:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114374:	8b 50 30             	mov    0x30(%eax),%edx
c0114377:	8b 45 0c             	mov    0xc(%ebp),%eax
c011437a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011437e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114381:	89 04 24             	mov    %eax,(%esp)
c0114384:	ff d2                	call   *%edx
c0114386:	eb 05                	jmp    c011438d <sfs_tryseek+0xea>
    }
    return 0;
c0114388:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011438d:	c9                   	leave  
c011438e:	c3                   	ret    

c011438f <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c011438f:	55                   	push   %ebp
c0114390:	89 e5                	mov    %esp,%ebp
c0114392:	83 ec 48             	sub    $0x48,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c0114395:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114399:	78 0a                	js     c01143a5 <sfs_truncfile+0x16>
c011439b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011439e:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01143a3:	76 0a                	jbe    c01143af <sfs_truncfile+0x20>
        return -E_INVAL;
c01143a5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01143aa:	e9 d5 01 00 00       	jmp    c0114584 <sfs_truncfile+0x1f5>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01143af:	8b 45 08             	mov    0x8(%ebp),%eax
c01143b2:	8b 40 38             	mov    0x38(%eax),%eax
c01143b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01143b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01143bc:	74 0a                	je     c01143c8 <sfs_truncfile+0x39>
c01143be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01143c1:	8b 40 6c             	mov    0x6c(%eax),%eax
c01143c4:	85 c0                	test   %eax,%eax
c01143c6:	74 24                	je     c01143ec <sfs_truncfile+0x5d>
c01143c8:	c7 44 24 0c 14 9a 11 	movl   $0xc0119a14,0xc(%esp)
c01143cf:	c0 
c01143d0:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c01143d7:	c0 
c01143d8:	c7 44 24 04 a2 03 00 	movl   $0x3a2,0x4(%esp)
c01143df:	00 
c01143e0:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c01143e7:	e8 c0 ca fe ff       	call   c0100eac <__panic>
c01143ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01143ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01143f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01143f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01143f8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01143fc:	74 0d                	je     c011440b <sfs_truncfile+0x7c>
c01143fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114401:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114404:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114409:	74 24                	je     c011442f <sfs_truncfile+0xa0>
c011440b:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c0114412:	c0 
c0114413:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c011441a:	c0 
c011441b:	c7 44 24 04 a3 03 00 	movl   $0x3a3,0x4(%esp)
c0114422:	00 
c0114423:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011442a:	e8 7d ca fe ff       	call   c0100eac <__panic>
c011442f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114432:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c0114435:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114438:	8b 00                	mov    (%eax),%eax
c011443a:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c011443d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c0114444:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c011444b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011444e:	03 45 d8             	add    -0x28(%ebp),%eax
c0114451:	83 e8 01             	sub    $0x1,%eax
c0114454:	ba 00 00 00 00       	mov    $0x0,%edx
c0114459:	f7 75 d8             	divl   -0x28(%ebp)
c011445c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c011445f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114462:	8b 10                	mov    (%eax),%edx
c0114464:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114467:	39 c2                	cmp    %eax,%edx
c0114469:	75 39                	jne    c01144a4 <sfs_truncfile+0x115>
        assert(tblks == din->blocks);
c011446b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011446e:	8b 40 08             	mov    0x8(%eax),%eax
c0114471:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0114474:	74 24                	je     c011449a <sfs_truncfile+0x10b>
c0114476:	c7 44 24 0c 42 9b 11 	movl   $0xc0119b42,0xc(%esp)
c011447d:	c0 
c011447e:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0114485:	c0 
c0114486:	c7 44 24 04 aa 03 00 	movl   $0x3aa,0x4(%esp)
c011448d:	00 
c011448e:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0114495:	e8 12 ca fe ff       	call   c0100eac <__panic>
        return 0;
c011449a:	b8 00 00 00 00       	mov    $0x0,%eax
c011449f:	e9 e0 00 00 00       	jmp    c0114584 <sfs_truncfile+0x1f5>
    }

    lock_sin(sin);
c01144a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01144a7:	89 04 24             	mov    %eax,(%esp)
c01144aa:	e8 08 df ff ff       	call   c01123b7 <lock_sin>
	// old number of disk blocks of file
    nblks = din->blocks;
c01144af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01144b2:	8b 40 08             	mov    0x8(%eax),%eax
c01144b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c01144b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01144bb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01144be:	73 3e                	jae    c01144fe <sfs_truncfile+0x16f>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c01144c0:	eb 32                	jmp    c01144f4 <sfs_truncfile+0x165>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c01144c2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01144c9:	00 
c01144ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01144cd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01144d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01144d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01144d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01144db:	89 04 24             	mov    %eax,(%esp)
c01144de:	e8 d0 e9 ff ff       	call   c0112eb3 <sfs_bmap_load_nolock>
c01144e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01144e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01144ea:	0f 85 82 00 00 00    	jne    c0114572 <sfs_truncfile+0x1e3>
                goto out_unlock;
            }
            nblks ++;
c01144f0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c01144f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01144f7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01144fa:	75 c6                	jne    c01144c2 <sfs_truncfile+0x133>
c01144fc:	eb 31                	jmp    c011452f <sfs_truncfile+0x1a0>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c01144fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0114501:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0114504:	73 29                	jae    c011452f <sfs_truncfile+0x1a0>
		// try to reduce the file size 
        while (tblks != nblks) {
c0114506:	eb 1f                	jmp    c0114527 <sfs_truncfile+0x198>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c0114508:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011450b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011450f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114512:	89 04 24             	mov    %eax,(%esp)
c0114515:	e8 81 ea ff ff       	call   c0112f9b <sfs_bmap_truncate_nolock>
c011451a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011451d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114521:	75 52                	jne    c0114575 <sfs_truncfile+0x1e6>
                goto out_unlock;
            }
            nblks --;
c0114523:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c0114527:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011452a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011452d:	75 d9                	jne    c0114508 <sfs_truncfile+0x179>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c011452f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114532:	8b 40 08             	mov    0x8(%eax),%eax
c0114535:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0114538:	74 24                	je     c011455e <sfs_truncfile+0x1cf>
c011453a:	c7 44 24 0c 57 9b 11 	movl   $0xc0119b57,0xc(%esp)
c0114541:	c0 
c0114542:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c0114549:	c0 
c011454a:	c7 44 24 04 c3 03 00 	movl   $0x3c3,0x4(%esp)
c0114551:	00 
c0114552:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0114559:	e8 4e c9 fe ff       	call   c0100eac <__panic>
    din->size = len;
c011455e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114561:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114564:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c0114566:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114569:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
c0114570:	eb 04                	jmp    c0114576 <sfs_truncfile+0x1e7>
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
                goto out_unlock;
c0114572:	90                   	nop
c0114573:	eb 01                	jmp    c0114576 <sfs_truncfile+0x1e7>
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
                goto out_unlock;
c0114575:	90                   	nop
    assert(din->blocks == tblks);
    din->size = len;
    sin->dirty = 1;

out_unlock:
    unlock_sin(sin);
c0114576:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114579:	89 04 24             	mov    %eax,(%esp)
c011457c:	e8 4c de ff ff       	call   c01123cd <unlock_sin>
    return ret;
c0114581:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114584:	c9                   	leave  
c0114585:	c3                   	ret    

c0114586 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c0114586:	55                   	push   %ebp
c0114587:	89 e5                	mov    %esp,%ebp
c0114589:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011458c:	8b 45 08             	mov    0x8(%ebp),%eax
c011458f:	8b 40 38             	mov    0x38(%eax),%eax
c0114592:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114595:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114599:	74 0a                	je     c01145a5 <sfs_lookup+0x1f>
c011459b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011459e:	8b 40 6c             	mov    0x6c(%eax),%eax
c01145a1:	85 c0                	test   %eax,%eax
c01145a3:	74 24                	je     c01145c9 <sfs_lookup+0x43>
c01145a5:	c7 44 24 0c 14 9a 11 	movl   $0xc0119a14,0xc(%esp)
c01145ac:	c0 
c01145ad:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c01145b4:	c0 
c01145b5:	c7 44 24 04 d3 03 00 	movl   $0x3d3,0x4(%esp)
c01145bc:	00 
c01145bd:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c01145c4:	e8 e3 c8 fe ff       	call   c0100eac <__panic>
c01145c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01145cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c01145cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01145d2:	0f b6 00             	movzbl (%eax),%eax
c01145d5:	84 c0                	test   %al,%al
c01145d7:	74 0a                	je     c01145e3 <sfs_lookup+0x5d>
c01145d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01145dc:	0f b6 00             	movzbl (%eax),%eax
c01145df:	3c 2f                	cmp    $0x2f,%al
c01145e1:	75 24                	jne    c0114607 <sfs_lookup+0x81>
c01145e3:	c7 44 24 0c 6c 9b 11 	movl   $0xc0119b6c,0xc(%esp)
c01145ea:	c0 
c01145eb:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c01145f2:	c0 
c01145f3:	c7 44 24 04 d4 03 00 	movl   $0x3d4,0x4(%esp)
c01145fa:	00 
c01145fb:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c0114602:	e8 a5 c8 fe ff       	call   c0100eac <__panic>
    vop_ref_inc(node);
c0114607:	8b 45 08             	mov    0x8(%ebp),%eax
c011460a:	89 04 24             	mov    %eax,(%esp)
c011460d:	e8 63 ac ff ff       	call   c010f275 <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114612:	8b 45 08             	mov    0x8(%ebp),%eax
c0114615:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114618:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011461c:	74 0d                	je     c011462b <sfs_lookup+0xa5>
c011461e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114621:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114624:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114629:	74 24                	je     c011464f <sfs_lookup+0xc9>
c011462b:	c7 44 24 0c 10 98 11 	movl   $0xc0119810,0xc(%esp)
c0114632:	c0 
c0114633:	c7 44 24 08 bf 97 11 	movl   $0xc01197bf,0x8(%esp)
c011463a:	c0 
c011463b:	c7 44 24 04 d6 03 00 	movl   $0x3d6,0x4(%esp)
c0114642:	00 
c0114643:	c7 04 24 57 97 11 c0 	movl   $0xc0119757,(%esp)
c011464a:	e8 5d c8 fe ff       	call   c0100eac <__panic>
c011464f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114652:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c0114655:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114658:	8b 00                	mov    (%eax),%eax
c011465a:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011465e:	66 83 f8 02          	cmp    $0x2,%ax
c0114662:	74 12                	je     c0114676 <sfs_lookup+0xf0>
        vop_ref_dec(node);
c0114664:	8b 45 08             	mov    0x8(%ebp),%eax
c0114667:	89 04 24             	mov    %eax,(%esp)
c011466a:	e8 20 ac ff ff       	call   c010f28f <inode_ref_dec>
        return -E_NOTDIR;
c011466f:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c0114674:	eb 4e                	jmp    c01146c4 <sfs_lookup+0x13e>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c0114676:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011467d:	00 
c011467e:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0114681:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114685:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114688:	89 44 24 08          	mov    %eax,0x8(%esp)
c011468c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011468f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114693:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114696:	89 04 24             	mov    %eax,(%esp)
c0114699:	e8 1c ec ff ff       	call   c01132ba <sfs_lookup_once>
c011469e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c01146a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01146a4:	89 04 24             	mov    %eax,(%esp)
c01146a7:	e8 e3 ab ff ff       	call   c010f28f <inode_ref_dec>
    if (ret != 0) {
c01146ac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01146b0:	74 05                	je     c01146b7 <sfs_lookup+0x131>
        return ret;
c01146b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01146b5:	eb 0d                	jmp    c01146c4 <sfs_lookup+0x13e>
    }
    *node_store = subnode;
c01146b7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01146ba:	8b 45 10             	mov    0x10(%ebp),%eax
c01146bd:	89 10                	mov    %edx,(%eax)
    return 0;
c01146bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01146c4:	c9                   	leave  
c01146c5:	c3                   	ret    
	...

c01146c8 <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c01146c8:	55                   	push   %ebp
c01146c9:	89 e5                	mov    %esp,%ebp
c01146cb:	83 ec 38             	sub    $0x38,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c01146ce:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01146d2:	75 06                	jne    c01146da <sfs_rwblock_nolock+0x12>
c01146d4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01146d8:	75 0b                	jne    c01146e5 <sfs_rwblock_nolock+0x1d>
c01146da:	8b 45 08             	mov    0x8(%ebp),%eax
c01146dd:	8b 40 04             	mov    0x4(%eax),%eax
c01146e0:	3b 45 10             	cmp    0x10(%ebp),%eax
c01146e3:	77 24                	ja     c0114709 <sfs_rwblock_nolock+0x41>
c01146e5:	c7 44 24 0c 8c 9b 11 	movl   $0xc0119b8c,0xc(%esp)
c01146ec:	c0 
c01146ed:	c7 44 24 08 c0 9b 11 	movl   $0xc0119bc0,0x8(%esp)
c01146f4:	c0 
c01146f5:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c01146fc:	00 
c01146fd:	c7 04 24 d5 9b 11 c0 	movl   $0xc0119bd5,(%esp)
c0114704:	e8 a3 c7 fe ff       	call   c0100eac <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0114709:	8b 45 10             	mov    0x10(%ebp),%eax
c011470c:	c1 e0 0c             	shl    $0xc,%eax
c011470f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114713:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c011471a:	00 
c011471b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011471e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114722:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0114725:	89 04 24             	mov    %eax,(%esp)
c0114728:	e8 6b 6d ff ff       	call   c010b498 <iobuf_init>
c011472d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c0114730:	8b 45 08             	mov    0x8(%ebp),%eax
c0114733:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114736:	8b 48 10             	mov    0x10(%eax),%ecx
c0114739:	8b 45 08             	mov    0x8(%ebp),%eax
c011473c:	8b 40 2c             	mov    0x2c(%eax),%eax
c011473f:	8b 55 14             	mov    0x14(%ebp),%edx
c0114742:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114746:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114749:	89 54 24 04          	mov    %edx,0x4(%esp)
c011474d:	89 04 24             	mov    %eax,(%esp)
c0114750:	ff d1                	call   *%ecx
}
c0114752:	c9                   	leave  
c0114753:	c3                   	ret    

c0114754 <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c0114754:	55                   	push   %ebp
c0114755:	89 e5                	mov    %esp,%ebp
c0114757:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c011475a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c0114761:	8b 45 08             	mov    0x8(%ebp),%eax
c0114764:	89 04 24             	mov    %eax,(%esp)
c0114767:	e8 de 03 00 00       	call   c0114b4a <lock_sfs_io>
    {
        while (nblks != 0) {
c011476c:	eb 40                	jmp    c01147ae <sfs_rwblock+0x5a>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c011476e:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114775:	00 
c0114776:	8b 45 18             	mov    0x18(%ebp),%eax
c0114779:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011477d:	8b 45 10             	mov    0x10(%ebp),%eax
c0114780:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114784:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114787:	89 44 24 04          	mov    %eax,0x4(%esp)
c011478b:	8b 45 08             	mov    0x8(%ebp),%eax
c011478e:	89 04 24             	mov    %eax,(%esp)
c0114791:	e8 32 ff ff ff       	call   c01146c8 <sfs_rwblock_nolock>
c0114796:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114799:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011479d:	75 17                	jne    c01147b6 <sfs_rwblock+0x62>
                break;
            }
            blkno ++, nblks --;
c011479f:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c01147a3:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c01147a7:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c01147ae:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01147b2:	75 ba                	jne    c011476e <sfs_rwblock+0x1a>
c01147b4:	eb 01                	jmp    c01147b7 <sfs_rwblock+0x63>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
                break;
c01147b6:	90                   	nop
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c01147b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01147ba:	89 04 24             	mov    %eax,(%esp)
c01147bd:	e8 b4 03 00 00       	call   c0114b76 <unlock_sfs_io>
    return ret;
c01147c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01147c5:	c9                   	leave  
c01147c6:	c3                   	ret    

c01147c7 <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c01147c7:	55                   	push   %ebp
c01147c8:	89 e5                	mov    %esp,%ebp
c01147ca:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c01147cd:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01147d4:	00 
c01147d5:	8b 45 14             	mov    0x14(%ebp),%eax
c01147d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01147dc:	8b 45 10             	mov    0x10(%ebp),%eax
c01147df:	89 44 24 08          	mov    %eax,0x8(%esp)
c01147e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01147e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01147ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01147ed:	89 04 24             	mov    %eax,(%esp)
c01147f0:	e8 5f ff ff ff       	call   c0114754 <sfs_rwblock>
}
c01147f5:	c9                   	leave  
c01147f6:	c3                   	ret    

c01147f7 <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c01147f7:	55                   	push   %ebp
c01147f8:	89 e5                	mov    %esp,%ebp
c01147fa:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c01147fd:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114804:	00 
c0114805:	8b 45 14             	mov    0x14(%ebp),%eax
c0114808:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011480c:	8b 45 10             	mov    0x10(%ebp),%eax
c011480f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114813:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114816:	89 44 24 04          	mov    %eax,0x4(%esp)
c011481a:	8b 45 08             	mov    0x8(%ebp),%eax
c011481d:	89 04 24             	mov    %eax,(%esp)
c0114820:	e8 2f ff ff ff       	call   c0114754 <sfs_rwblock>
}
c0114825:	c9                   	leave  
c0114826:	c3                   	ret    

c0114827 <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0114827:	55                   	push   %ebp
c0114828:	89 e5                	mov    %esp,%ebp
c011482a:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c011482d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114831:	78 16                	js     c0114849 <sfs_rbuf+0x22>
c0114833:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c011483a:	7f 0d                	jg     c0114849 <sfs_rbuf+0x22>
c011483c:	8b 45 18             	mov    0x18(%ebp),%eax
c011483f:	03 45 10             	add    0x10(%ebp),%eax
c0114842:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0114847:	76 24                	jbe    c011486d <sfs_rbuf+0x46>
c0114849:	c7 44 24 0c ec 9b 11 	movl   $0xc0119bec,0xc(%esp)
c0114850:	c0 
c0114851:	c7 44 24 08 c0 9b 11 	movl   $0xc0119bc0,0x8(%esp)
c0114858:	c0 
c0114859:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0114860:	00 
c0114861:	c7 04 24 d5 9b 11 c0 	movl   $0xc0119bd5,(%esp)
c0114868:	e8 3f c6 fe ff       	call   c0100eac <__panic>
    int ret;
    lock_sfs_io(sfs);
c011486d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114870:	89 04 24             	mov    %eax,(%esp)
c0114873:	e8 d2 02 00 00       	call   c0114b4a <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c0114878:	8b 45 08             	mov    0x8(%ebp),%eax
c011487b:	8b 40 38             	mov    0x38(%eax),%eax
c011487e:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114885:	00 
c0114886:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011488d:	00 
c011488e:	8b 55 14             	mov    0x14(%ebp),%edx
c0114891:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114895:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114899:	8b 45 08             	mov    0x8(%ebp),%eax
c011489c:	89 04 24             	mov    %eax,(%esp)
c011489f:	e8 24 fe ff ff       	call   c01146c8 <sfs_rwblock_nolock>
c01148a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01148a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01148ab:	75 21                	jne    c01148ce <sfs_rbuf+0xa7>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c01148ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01148b0:	8b 50 38             	mov    0x38(%eax),%edx
c01148b3:	8b 45 18             	mov    0x18(%ebp),%eax
c01148b6:	01 c2                	add    %eax,%edx
c01148b8:	8b 45 10             	mov    0x10(%ebp),%eax
c01148bb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01148bf:	89 54 24 04          	mov    %edx,0x4(%esp)
c01148c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01148c6:	89 04 24             	mov    %eax,(%esp)
c01148c9:	e8 a5 0f 00 00       	call   c0115873 <memcpy>
        }
    }
    unlock_sfs_io(sfs);
c01148ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01148d1:	89 04 24             	mov    %eax,(%esp)
c01148d4:	e8 9d 02 00 00       	call   c0114b76 <unlock_sfs_io>
    return ret;
c01148d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01148dc:	c9                   	leave  
c01148dd:	c3                   	ret    

c01148de <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c01148de:	55                   	push   %ebp
c01148df:	89 e5                	mov    %esp,%ebp
c01148e1:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c01148e4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01148e8:	78 16                	js     c0114900 <sfs_wbuf+0x22>
c01148ea:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c01148f1:	7f 0d                	jg     c0114900 <sfs_wbuf+0x22>
c01148f3:	8b 45 18             	mov    0x18(%ebp),%eax
c01148f6:	03 45 10             	add    0x10(%ebp),%eax
c01148f9:	3d 00 10 00 00       	cmp    $0x1000,%eax
c01148fe:	76 24                	jbe    c0114924 <sfs_wbuf+0x46>
c0114900:	c7 44 24 0c ec 9b 11 	movl   $0xc0119bec,0xc(%esp)
c0114907:	c0 
c0114908:	c7 44 24 08 c0 9b 11 	movl   $0xc0119bc0,0x8(%esp)
c011490f:	c0 
c0114910:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0114917:	00 
c0114918:	c7 04 24 d5 9b 11 c0 	movl   $0xc0119bd5,(%esp)
c011491f:	e8 88 c5 fe ff       	call   c0100eac <__panic>
    int ret;
    lock_sfs_io(sfs);
c0114924:	8b 45 08             	mov    0x8(%ebp),%eax
c0114927:	89 04 24             	mov    %eax,(%esp)
c011492a:	e8 1b 02 00 00       	call   c0114b4a <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c011492f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114932:	8b 40 38             	mov    0x38(%eax),%eax
c0114935:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c011493c:	00 
c011493d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0114944:	00 
c0114945:	8b 55 14             	mov    0x14(%ebp),%edx
c0114948:	89 54 24 08          	mov    %edx,0x8(%esp)
c011494c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114950:	8b 45 08             	mov    0x8(%ebp),%eax
c0114953:	89 04 24             	mov    %eax,(%esp)
c0114956:	e8 6d fd ff ff       	call   c01146c8 <sfs_rwblock_nolock>
c011495b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011495e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114962:	75 50                	jne    c01149b4 <sfs_wbuf+0xd6>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c0114964:	8b 45 08             	mov    0x8(%ebp),%eax
c0114967:	8b 50 38             	mov    0x38(%eax),%edx
c011496a:	8b 45 18             	mov    0x18(%ebp),%eax
c011496d:	01 c2                	add    %eax,%edx
c011496f:	8b 45 10             	mov    0x10(%ebp),%eax
c0114972:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114976:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114979:	89 44 24 04          	mov    %eax,0x4(%esp)
c011497d:	89 14 24             	mov    %edx,(%esp)
c0114980:	e8 ee 0e 00 00       	call   c0115873 <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c0114985:	8b 45 08             	mov    0x8(%ebp),%eax
c0114988:	8b 40 38             	mov    0x38(%eax),%eax
c011498b:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114992:	00 
c0114993:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011499a:	00 
c011499b:	8b 55 14             	mov    0x14(%ebp),%edx
c011499e:	89 54 24 08          	mov    %edx,0x8(%esp)
c01149a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01149a9:	89 04 24             	mov    %eax,(%esp)
c01149ac:	e8 17 fd ff ff       	call   c01146c8 <sfs_rwblock_nolock>
c01149b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c01149b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01149b7:	89 04 24             	mov    %eax,(%esp)
c01149ba:	e8 b7 01 00 00       	call   c0114b76 <unlock_sfs_io>
    return ret;
c01149bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01149c2:	c9                   	leave  
c01149c3:	c3                   	ret    

c01149c4 <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c01149c4:	55                   	push   %ebp
c01149c5:	89 e5                	mov    %esp,%ebp
c01149c7:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c01149ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01149cd:	89 04 24             	mov    %eax,(%esp)
c01149d0:	e8 75 01 00 00       	call   c0114b4a <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c01149d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01149d8:	8b 40 38             	mov    0x38(%eax),%eax
c01149db:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01149e2:	00 
c01149e3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01149ea:	00 
c01149eb:	89 04 24             	mov    %eax,(%esp)
c01149ee:	e8 81 0d 00 00       	call   c0115774 <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c01149f3:	8b 55 08             	mov    0x8(%ebp),%edx
c01149f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01149f9:	8b 40 38             	mov    0x38(%eax),%eax
c01149fc:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c0114a03:	00 
c0114a04:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114a08:	89 04 24             	mov    %eax,(%esp)
c0114a0b:	e8 63 0e 00 00       	call   c0115873 <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c0114a10:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a13:	8b 40 38             	mov    0x38(%eax),%eax
c0114a16:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114a1d:	00 
c0114a1e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114a25:	00 
c0114a26:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0114a2d:	00 
c0114a2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a32:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a35:	89 04 24             	mov    %eax,(%esp)
c0114a38:	e8 8b fc ff ff       	call   c01146c8 <sfs_rwblock_nolock>
c0114a3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c0114a40:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a43:	89 04 24             	mov    %eax,(%esp)
c0114a46:	e8 2b 01 00 00       	call   c0114b76 <unlock_sfs_io>
    return ret;
c0114a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114a4e:	c9                   	leave  
c0114a4f:	c3                   	ret    

c0114a50 <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c0114a50:	55                   	push   %ebp
c0114a51:	89 e5                	mov    %esp,%ebp
c0114a53:	83 ec 28             	sub    $0x28,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c0114a56:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c0114a5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a60:	8b 40 04             	mov    0x4(%eax),%eax
c0114a63:	03 45 f4             	add    -0xc(%ebp),%eax
c0114a66:	83 e8 01             	sub    $0x1,%eax
c0114a69:	ba 00 00 00 00       	mov    $0x0,%edx
c0114a6e:	f7 75 f4             	divl   -0xc(%ebp)
c0114a71:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c0114a74:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a77:	8b 40 30             	mov    0x30(%eax),%eax
c0114a7a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114a81:	00 
c0114a82:	89 04 24             	mov    %eax,(%esp)
c0114a85:	e8 f8 cf ff ff       	call   c0111a82 <bitmap_getdata>
c0114a8a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114a8d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0114a91:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0114a98:	00 
c0114a99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114aa0:	89 04 24             	mov    %eax,(%esp)
c0114aa3:	e8 4f fd ff ff       	call   c01147f7 <sfs_wblock>
}
c0114aa8:	c9                   	leave  
c0114aa9:	c3                   	ret    

c0114aaa <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c0114aaa:	55                   	push   %ebp
c0114aab:	89 e5                	mov    %esp,%ebp
c0114aad:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0114ab0:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ab3:	89 04 24             	mov    %eax,(%esp)
c0114ab6:	e8 8f 00 00 00       	call   c0114b4a <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114abb:	8b 45 08             	mov    0x8(%ebp),%eax
c0114abe:	8b 40 38             	mov    0x38(%eax),%eax
c0114ac1:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114ac8:	00 
c0114ac9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114ad0:	00 
c0114ad1:	89 04 24             	mov    %eax,(%esp)
c0114ad4:	e8 9b 0c 00 00       	call   c0115774 <memset>
        while (nblks != 0) {
c0114ad9:	eb 3d                	jmp    c0114b18 <sfs_clear_block+0x6e>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c0114adb:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ade:	8b 40 38             	mov    0x38(%eax),%eax
c0114ae1:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114ae8:	00 
c0114ae9:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114af0:	00 
c0114af1:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114af4:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114af8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114afc:	8b 45 08             	mov    0x8(%ebp),%eax
c0114aff:	89 04 24             	mov    %eax,(%esp)
c0114b02:	e8 c1 fb ff ff       	call   c01146c8 <sfs_rwblock_nolock>
c0114b07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114b0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114b0e:	75 10                	jne    c0114b20 <sfs_clear_block+0x76>
                break;
            }
            blkno ++, nblks --;
c0114b10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0114b14:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c0114b18:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114b1c:	75 bd                	jne    c0114adb <sfs_clear_block+0x31>
c0114b1e:	eb 01                	jmp    c0114b21 <sfs_clear_block+0x77>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
                break;
c0114b20:	90                   	nop
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c0114b21:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b24:	89 04 24             	mov    %eax,(%esp)
c0114b27:	e8 4a 00 00 00       	call   c0114b76 <unlock_sfs_io>
    return ret;
c0114b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114b2f:	c9                   	leave  
c0114b30:	c3                   	ret    
c0114b31:	00 00                	add    %al,(%eax)
	...

c0114b34 <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c0114b34:	55                   	push   %ebp
c0114b35:	89 e5                	mov    %esp,%ebp
c0114b37:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->fs_sem));
c0114b3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b3d:	83 c0 3c             	add    $0x3c,%eax
c0114b40:	89 04 24             	mov    %eax,(%esp)
c0114b43:	e8 f4 52 ff ff       	call   c0109e3c <down>
}
c0114b48:	c9                   	leave  
c0114b49:	c3                   	ret    

c0114b4a <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c0114b4a:	55                   	push   %ebp
c0114b4b:	89 e5                	mov    %esp,%ebp
c0114b4d:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->io_sem));
c0114b50:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b53:	83 c0 48             	add    $0x48,%eax
c0114b56:	89 04 24             	mov    %eax,(%esp)
c0114b59:	e8 de 52 ff ff       	call   c0109e3c <down>
}
c0114b5e:	c9                   	leave  
c0114b5f:	c3                   	ret    

c0114b60 <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c0114b60:	55                   	push   %ebp
c0114b61:	89 e5                	mov    %esp,%ebp
c0114b63:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->fs_sem));
c0114b66:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b69:	83 c0 3c             	add    $0x3c,%eax
c0114b6c:	89 04 24             	mov    %eax,(%esp)
c0114b6f:	e8 ad 52 ff ff       	call   c0109e21 <up>
}
c0114b74:	c9                   	leave  
c0114b75:	c3                   	ret    

c0114b76 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c0114b76:	55                   	push   %ebp
c0114b77:	89 e5                	mov    %esp,%ebp
c0114b79:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->io_sem));
c0114b7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b7f:	83 c0 48             	add    $0x48,%eax
c0114b82:	89 04 24             	mov    %eax,(%esp)
c0114b85:	e8 97 52 ff ff       	call   c0109e21 <up>
}
c0114b8a:	c9                   	leave  
c0114b8b:	c3                   	ret    

c0114b8c <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c0114b8c:	55                   	push   %ebp
c0114b8d:	89 e5                	mov    %esp,%ebp
c0114b8f:	53                   	push   %ebx
c0114b90:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c0114b93:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b96:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c0114b9c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return (hash >> (32 - bits));
c0114b9f:	b8 20 00 00 00       	mov    $0x20,%eax
c0114ba4:	2b 45 0c             	sub    0xc(%ebp),%eax
c0114ba7:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0114baa:	89 d3                	mov    %edx,%ebx
c0114bac:	89 c1                	mov    %eax,%ecx
c0114bae:	d3 eb                	shr    %cl,%ebx
c0114bb0:	89 d8                	mov    %ebx,%eax
}
c0114bb2:	83 c4 10             	add    $0x10,%esp
c0114bb5:	5b                   	pop    %ebx
c0114bb6:	5d                   	pop    %ebp
c0114bb7:	c3                   	ret    

c0114bb8 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c0114bb8:	55                   	push   %ebp
c0114bb9:	89 e5                	mov    %esp,%ebp
c0114bbb:	56                   	push   %esi
c0114bbc:	53                   	push   %ebx
c0114bbd:	83 ec 60             	sub    $0x60,%esp
c0114bc0:	8b 45 14             	mov    0x14(%ebp),%eax
c0114bc3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0114bc6:	8b 45 18             	mov    0x18(%ebp),%eax
c0114bc9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c0114bcc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0114bcf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0114bd2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114bd5:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c0114bd8:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114bdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114bde:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114be1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114be4:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0114be7:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0114bea:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0114bed:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0114bf0:	89 d3                	mov    %edx,%ebx
c0114bf2:	89 c6                	mov    %eax,%esi
c0114bf4:	89 75 e0             	mov    %esi,-0x20(%ebp)
c0114bf7:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0114bfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114bfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114c00:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114c04:	74 1c                	je     c0114c22 <printnum+0x6a>
c0114c06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c09:	ba 00 00 00 00       	mov    $0x0,%edx
c0114c0e:	f7 75 e4             	divl   -0x1c(%ebp)
c0114c11:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0114c14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c17:	ba 00 00 00 00       	mov    $0x0,%edx
c0114c1c:	f7 75 e4             	divl   -0x1c(%ebp)
c0114c1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114c22:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0114c25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114c28:	89 d6                	mov    %edx,%esi
c0114c2a:	89 c3                	mov    %eax,%ebx
c0114c2c:	89 f0                	mov    %esi,%eax
c0114c2e:	89 da                	mov    %ebx,%edx
c0114c30:	f7 75 e4             	divl   -0x1c(%ebp)
c0114c33:	89 d3                	mov    %edx,%ebx
c0114c35:	89 c6                	mov    %eax,%esi
c0114c37:	89 75 e0             	mov    %esi,-0x20(%ebp)
c0114c3a:	89 5d dc             	mov    %ebx,-0x24(%ebp)
c0114c3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114c40:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0114c43:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114c46:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0114c49:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0114c4c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0114c4f:	89 c3                	mov    %eax,%ebx
c0114c51:	89 d6                	mov    %edx,%esi
c0114c53:	89 5d e8             	mov    %ebx,-0x18(%ebp)
c0114c56:	89 75 ec             	mov    %esi,-0x14(%ebp)
c0114c59:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114c5c:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0114c5f:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114c62:	ba 00 00 00 00       	mov    $0x0,%edx
c0114c67:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114c6a:	77 64                	ja     c0114cd0 <printnum+0x118>
c0114c6c:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114c6f:	72 05                	jb     c0114c76 <printnum+0xbe>
c0114c71:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0114c74:	77 5a                	ja     c0114cd0 <printnum+0x118>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c0114c76:	8b 45 20             	mov    0x20(%ebp),%eax
c0114c79:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114c7c:	8b 45 24             	mov    0x24(%ebp),%eax
c0114c7f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0114c83:	89 54 24 18          	mov    %edx,0x18(%esp)
c0114c87:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114c8a:	89 44 24 14          	mov    %eax,0x14(%esp)
c0114c8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114c91:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114c94:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114c98:	89 54 24 10          	mov    %edx,0x10(%esp)
c0114c9c:	8b 45 10             	mov    0x10(%ebp),%eax
c0114c9f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114ca3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ca6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114caa:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cad:	89 04 24             	mov    %eax,(%esp)
c0114cb0:	e8 03 ff ff ff       	call   c0114bb8 <printnum>
c0114cb5:	eb 23                	jmp    c0114cda <printnum+0x122>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c0114cb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114cba:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114cbe:	8b 45 10             	mov    0x10(%ebp),%eax
c0114cc1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114cc5:	8b 45 24             	mov    0x24(%ebp),%eax
c0114cc8:	89 04 24             	mov    %eax,(%esp)
c0114ccb:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cce:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c0114cd0:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c0114cd4:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0114cd8:	7f dd                	jg     c0114cb7 <printnum+0xff>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c0114cda:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114cdd:	05 44 9e 11 c0       	add    $0xc0119e44,%eax
c0114ce2:	0f b6 00             	movzbl (%eax),%eax
c0114ce5:	0f be c0             	movsbl %al,%eax
c0114ce8:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114ceb:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114cef:	8b 55 10             	mov    0x10(%ebp),%edx
c0114cf2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114cf6:	89 04 24             	mov    %eax,(%esp)
c0114cf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cfc:	ff d0                	call   *%eax
}
c0114cfe:	83 c4 60             	add    $0x60,%esp
c0114d01:	5b                   	pop    %ebx
c0114d02:	5e                   	pop    %esi
c0114d03:	5d                   	pop    %ebp
c0114d04:	c3                   	ret    

c0114d05 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0114d05:	55                   	push   %ebp
c0114d06:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114d08:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114d0c:	7e 14                	jle    c0114d22 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0114d0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d11:	8b 00                	mov    (%eax),%eax
c0114d13:	8d 48 08             	lea    0x8(%eax),%ecx
c0114d16:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d19:	89 0a                	mov    %ecx,(%edx)
c0114d1b:	8b 50 04             	mov    0x4(%eax),%edx
c0114d1e:	8b 00                	mov    (%eax),%eax
c0114d20:	eb 30                	jmp    c0114d52 <getuint+0x4d>
    }
    else if (lflag) {
c0114d22:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114d26:	74 16                	je     c0114d3e <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0114d28:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d2b:	8b 00                	mov    (%eax),%eax
c0114d2d:	8d 48 04             	lea    0x4(%eax),%ecx
c0114d30:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d33:	89 0a                	mov    %ecx,(%edx)
c0114d35:	8b 00                	mov    (%eax),%eax
c0114d37:	ba 00 00 00 00       	mov    $0x0,%edx
c0114d3c:	eb 14                	jmp    c0114d52 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0114d3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d41:	8b 00                	mov    (%eax),%eax
c0114d43:	8d 48 04             	lea    0x4(%eax),%ecx
c0114d46:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d49:	89 0a                	mov    %ecx,(%edx)
c0114d4b:	8b 00                	mov    (%eax),%eax
c0114d4d:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0114d52:	5d                   	pop    %ebp
c0114d53:	c3                   	ret    

c0114d54 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0114d54:	55                   	push   %ebp
c0114d55:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114d57:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114d5b:	7e 14                	jle    c0114d71 <getint+0x1d>
        return va_arg(*ap, long long);
c0114d5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d60:	8b 00                	mov    (%eax),%eax
c0114d62:	8d 48 08             	lea    0x8(%eax),%ecx
c0114d65:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d68:	89 0a                	mov    %ecx,(%edx)
c0114d6a:	8b 50 04             	mov    0x4(%eax),%edx
c0114d6d:	8b 00                	mov    (%eax),%eax
c0114d6f:	eb 30                	jmp    c0114da1 <getint+0x4d>
    }
    else if (lflag) {
c0114d71:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114d75:	74 16                	je     c0114d8d <getint+0x39>
        return va_arg(*ap, long);
c0114d77:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d7a:	8b 00                	mov    (%eax),%eax
c0114d7c:	8d 48 04             	lea    0x4(%eax),%ecx
c0114d7f:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d82:	89 0a                	mov    %ecx,(%edx)
c0114d84:	8b 00                	mov    (%eax),%eax
c0114d86:	89 c2                	mov    %eax,%edx
c0114d88:	c1 fa 1f             	sar    $0x1f,%edx
c0114d8b:	eb 14                	jmp    c0114da1 <getint+0x4d>
    }
    else {
        return va_arg(*ap, int);
c0114d8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d90:	8b 00                	mov    (%eax),%eax
c0114d92:	8d 48 04             	lea    0x4(%eax),%ecx
c0114d95:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d98:	89 0a                	mov    %ecx,(%edx)
c0114d9a:	8b 00                	mov    (%eax),%eax
c0114d9c:	89 c2                	mov    %eax,%edx
c0114d9e:	c1 fa 1f             	sar    $0x1f,%edx
    }
}
c0114da1:	5d                   	pop    %ebp
c0114da2:	c3                   	ret    

c0114da3 <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c0114da3:	55                   	push   %ebp
c0114da4:	89 e5                	mov    %esp,%ebp
c0114da6:	83 ec 38             	sub    $0x38,%esp
    va_list ap;

    va_start(ap, fmt);
c0114da9:	8d 55 18             	lea    0x18(%ebp),%edx
c0114dac:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0114daf:	89 10                	mov    %edx,(%eax)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0114db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114db4:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114db8:	8b 45 14             	mov    0x14(%ebp),%eax
c0114dbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114dbf:	8b 45 10             	mov    0x10(%ebp),%eax
c0114dc2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114dc6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114dc9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114dcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dd0:	89 04 24             	mov    %eax,(%esp)
c0114dd3:	e8 02 00 00 00       	call   c0114dda <vprintfmt>
    va_end(ap);
}
c0114dd8:	c9                   	leave  
c0114dd9:	c3                   	ret    

c0114dda <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c0114dda:	55                   	push   %ebp
c0114ddb:	89 e5                	mov    %esp,%ebp
c0114ddd:	56                   	push   %esi
c0114dde:	53                   	push   %ebx
c0114ddf:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114de2:	eb 1e                	jmp    c0114e02 <vprintfmt+0x28>
            if (ch == '\0') {
c0114de4:	85 db                	test   %ebx,%ebx
c0114de6:	0f 84 45 04 00 00    	je     c0115231 <vprintfmt+0x457>
                return;
            }
            putch(ch, putdat, fd);
c0114dec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114def:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114df3:	8b 45 10             	mov    0x10(%ebp),%eax
c0114df6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114dfa:	89 1c 24             	mov    %ebx,(%esp)
c0114dfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e00:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114e02:	8b 45 14             	mov    0x14(%ebp),%eax
c0114e05:	0f b6 00             	movzbl (%eax),%eax
c0114e08:	0f b6 d8             	movzbl %al,%ebx
c0114e0b:	83 fb 25             	cmp    $0x25,%ebx
c0114e0e:	0f 95 c0             	setne  %al
c0114e11:	83 45 14 01          	addl   $0x1,0x14(%ebp)
c0114e15:	84 c0                	test   %al,%al
c0114e17:	75 cb                	jne    c0114de4 <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c0114e19:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0114e1d:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c0114e24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114e27:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0114e2a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0114e31:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114e34:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114e37:	eb 04                	jmp    c0114e3d <vprintfmt+0x63>
            goto process_precision;

        case '.':
            if (width < 0)
                width = 0;
            goto reswitch;
c0114e39:	90                   	nop
c0114e3a:	eb 01                	jmp    c0114e3d <vprintfmt+0x63>
            goto reswitch;

        process_precision:
            if (width < 0)
                width = precision, precision = -1;
            goto reswitch;
c0114e3c:	90                   	nop
        char padc = ' ';
        width = precision = -1;
        lflag = altflag = 0;

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c0114e3d:	8b 45 14             	mov    0x14(%ebp),%eax
c0114e40:	0f b6 00             	movzbl (%eax),%eax
c0114e43:	0f b6 d8             	movzbl %al,%ebx
c0114e46:	89 d8                	mov    %ebx,%eax
c0114e48:	83 45 14 01          	addl   $0x1,0x14(%ebp)
c0114e4c:	83 e8 23             	sub    $0x23,%eax
c0114e4f:	83 f8 55             	cmp    $0x55,%eax
c0114e52:	0f 87 a1 03 00 00    	ja     c01151f9 <vprintfmt+0x41f>
c0114e58:	8b 04 85 68 9e 11 c0 	mov    -0x3fee6198(,%eax,4),%eax
c0114e5f:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c0114e61:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0114e65:	eb d6                	jmp    c0114e3d <vprintfmt+0x63>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0114e67:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0114e6b:	eb d0                	jmp    c0114e3d <vprintfmt+0x63>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114e6d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0114e74:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114e77:	89 d0                	mov    %edx,%eax
c0114e79:	c1 e0 02             	shl    $0x2,%eax
c0114e7c:	01 d0                	add    %edx,%eax
c0114e7e:	01 c0                	add    %eax,%eax
c0114e80:	01 d8                	add    %ebx,%eax
c0114e82:	83 e8 30             	sub    $0x30,%eax
c0114e85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0114e88:	8b 45 14             	mov    0x14(%ebp),%eax
c0114e8b:	0f b6 00             	movzbl (%eax),%eax
c0114e8e:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c0114e91:	83 fb 2f             	cmp    $0x2f,%ebx
c0114e94:	7e 39                	jle    c0114ecf <vprintfmt+0xf5>
c0114e96:	83 fb 39             	cmp    $0x39,%ebx
c0114e99:	7f 34                	jg     c0114ecf <vprintfmt+0xf5>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114e9b:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c0114e9f:	eb d3                	jmp    c0114e74 <vprintfmt+0x9a>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c0114ea1:	8b 45 18             	mov    0x18(%ebp),%eax
c0114ea4:	8d 50 04             	lea    0x4(%eax),%edx
c0114ea7:	89 55 18             	mov    %edx,0x18(%ebp)
c0114eaa:	8b 00                	mov    (%eax),%eax
c0114eac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c0114eaf:	eb 1f                	jmp    c0114ed0 <vprintfmt+0xf6>

        case '.':
            if (width < 0)
c0114eb1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114eb5:	79 82                	jns    c0114e39 <vprintfmt+0x5f>
                width = 0;
c0114eb7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c0114ebe:	e9 76 ff ff ff       	jmp    c0114e39 <vprintfmt+0x5f>

        case '#':
            altflag = 1;
c0114ec3:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c0114eca:	e9 6e ff ff ff       	jmp    c0114e3d <vprintfmt+0x63>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c0114ecf:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c0114ed0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114ed4:	0f 89 62 ff ff ff    	jns    c0114e3c <vprintfmt+0x62>
                width = precision, precision = -1;
c0114eda:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114edd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114ee0:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0114ee7:	e9 50 ff ff ff       	jmp    c0114e3c <vprintfmt+0x62>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0114eec:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0114ef0:	e9 48 ff ff ff       	jmp    c0114e3d <vprintfmt+0x63>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c0114ef5:	8b 45 18             	mov    0x18(%ebp),%eax
c0114ef8:	8d 50 04             	lea    0x4(%eax),%edx
c0114efb:	89 55 18             	mov    %edx,0x18(%ebp)
c0114efe:	8b 00                	mov    (%eax),%eax
c0114f00:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114f03:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114f07:	8b 55 10             	mov    0x10(%ebp),%edx
c0114f0a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114f0e:	89 04 24             	mov    %eax,(%esp)
c0114f11:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f14:	ff d0                	call   *%eax
            break;
c0114f16:	e9 10 03 00 00       	jmp    c011522b <vprintfmt+0x451>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0114f1b:	8b 45 18             	mov    0x18(%ebp),%eax
c0114f1e:	8d 50 04             	lea    0x4(%eax),%edx
c0114f21:	89 55 18             	mov    %edx,0x18(%ebp)
c0114f24:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c0114f26:	85 db                	test   %ebx,%ebx
c0114f28:	79 02                	jns    c0114f2c <vprintfmt+0x152>
                err = -err;
c0114f2a:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0114f2c:	83 fb 18             	cmp    $0x18,%ebx
c0114f2f:	7f 0b                	jg     c0114f3c <vprintfmt+0x162>
c0114f31:	8b 34 9d e0 9d 11 c0 	mov    -0x3fee6220(,%ebx,4),%esi
c0114f38:	85 f6                	test   %esi,%esi
c0114f3a:	75 2a                	jne    c0114f66 <vprintfmt+0x18c>
                printfmt(putch, fd, putdat, "error %d", err);
c0114f3c:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0114f40:	c7 44 24 0c 55 9e 11 	movl   $0xc0119e55,0xc(%esp)
c0114f47:	c0 
c0114f48:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f4b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f52:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f56:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f59:	89 04 24             	mov    %eax,(%esp)
c0114f5c:	e8 42 fe ff ff       	call   c0114da3 <printfmt>
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0114f61:	e9 c5 02 00 00       	jmp    c011522b <vprintfmt+0x451>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c0114f66:	89 74 24 10          	mov    %esi,0x10(%esp)
c0114f6a:	c7 44 24 0c 5e 9e 11 	movl   $0xc0119e5e,0xc(%esp)
c0114f71:	c0 
c0114f72:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f75:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f79:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f7c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f80:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f83:	89 04 24             	mov    %eax,(%esp)
c0114f86:	e8 18 fe ff ff       	call   c0114da3 <printfmt>
            }
            break;
c0114f8b:	e9 9b 02 00 00       	jmp    c011522b <vprintfmt+0x451>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0114f90:	8b 45 18             	mov    0x18(%ebp),%eax
c0114f93:	8d 50 04             	lea    0x4(%eax),%edx
c0114f96:	89 55 18             	mov    %edx,0x18(%ebp)
c0114f99:	8b 30                	mov    (%eax),%esi
c0114f9b:	85 f6                	test   %esi,%esi
c0114f9d:	75 05                	jne    c0114fa4 <vprintfmt+0x1ca>
                p = "(null)";
c0114f9f:	be 61 9e 11 c0       	mov    $0xc0119e61,%esi
            }
            if (width > 0 && padc != '-') {
c0114fa4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114fa8:	0f 8e 95 00 00 00    	jle    c0115043 <vprintfmt+0x269>
c0114fae:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c0114fb2:	0f 84 8b 00 00 00    	je     c0115043 <vprintfmt+0x269>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114fb8:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c0114fbb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114fbe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114fc2:	89 34 24             	mov    %esi,(%esp)
c0114fc5:	e8 75 04 00 00       	call   c011543f <strnlen>
c0114fca:	89 da                	mov    %ebx,%edx
c0114fcc:	29 c2                	sub    %eax,%edx
c0114fce:	89 d0                	mov    %edx,%eax
c0114fd0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114fd3:	eb 1e                	jmp    c0114ff3 <vprintfmt+0x219>
                    putch(padc, putdat, fd);
c0114fd5:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c0114fd9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114fdc:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114fe0:	8b 55 10             	mov    0x10(%ebp),%edx
c0114fe3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114fe7:	89 04 24             	mov    %eax,(%esp)
c0114fea:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fed:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114fef:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114ff3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114ff7:	7f dc                	jg     c0114fd5 <vprintfmt+0x1fb>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114ff9:	eb 48                	jmp    c0115043 <vprintfmt+0x269>
                if (altflag && (ch < ' ' || ch > '~')) {
c0114ffb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0114fff:	74 26                	je     c0115027 <vprintfmt+0x24d>
c0115001:	83 fb 1f             	cmp    $0x1f,%ebx
c0115004:	7e 05                	jle    c011500b <vprintfmt+0x231>
c0115006:	83 fb 7e             	cmp    $0x7e,%ebx
c0115009:	7e 1c                	jle    c0115027 <vprintfmt+0x24d>
                    putch('?', putdat, fd);
c011500b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011500e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115012:	8b 45 10             	mov    0x10(%ebp),%eax
c0115015:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115019:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c0115020:	8b 45 08             	mov    0x8(%ebp),%eax
c0115023:	ff d0                	call   *%eax
c0115025:	eb 16                	jmp    c011503d <vprintfmt+0x263>
                }
                else {
                    putch(ch, putdat, fd);
c0115027:	8b 45 0c             	mov    0xc(%ebp),%eax
c011502a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011502e:	8b 45 10             	mov    0x10(%ebp),%eax
c0115031:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115035:	89 1c 24             	mov    %ebx,(%esp)
c0115038:	8b 45 08             	mov    0x8(%ebp),%eax
c011503b:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c011503d:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0115041:	eb 01                	jmp    c0115044 <vprintfmt+0x26a>
c0115043:	90                   	nop
c0115044:	0f b6 06             	movzbl (%esi),%eax
c0115047:	0f be d8             	movsbl %al,%ebx
c011504a:	85 db                	test   %ebx,%ebx
c011504c:	0f 95 c0             	setne  %al
c011504f:	83 c6 01             	add    $0x1,%esi
c0115052:	84 c0                	test   %al,%al
c0115054:	74 30                	je     c0115086 <vprintfmt+0x2ac>
c0115056:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011505a:	78 9f                	js     c0114ffb <vprintfmt+0x221>
c011505c:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0115060:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0115064:	79 95                	jns    c0114ffb <vprintfmt+0x221>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0115066:	eb 1e                	jmp    c0115086 <vprintfmt+0x2ac>
                putch(' ', putdat, fd);
c0115068:	8b 45 0c             	mov    0xc(%ebp),%eax
c011506b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011506f:	8b 45 10             	mov    0x10(%ebp),%eax
c0115072:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115076:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c011507d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115080:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0115082:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0115086:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011508a:	7f dc                	jg     c0115068 <vprintfmt+0x28e>
                putch(' ', putdat, fd);
            }
            break;
c011508c:	e9 9a 01 00 00       	jmp    c011522b <vprintfmt+0x451>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c0115091:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115094:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115098:	8d 45 18             	lea    0x18(%ebp),%eax
c011509b:	89 04 24             	mov    %eax,(%esp)
c011509e:	e8 b1 fc ff ff       	call   c0114d54 <getint>
c01150a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01150a6:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c01150a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01150ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01150af:	85 d2                	test   %edx,%edx
c01150b1:	79 2d                	jns    c01150e0 <vprintfmt+0x306>
                putch('-', putdat, fd);
c01150b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01150b6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01150ba:	8b 45 10             	mov    0x10(%ebp),%eax
c01150bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01150c1:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c01150c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01150cb:	ff d0                	call   *%eax
                num = -(long long)num;
c01150cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01150d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01150d3:	f7 d8                	neg    %eax
c01150d5:	83 d2 00             	adc    $0x0,%edx
c01150d8:	f7 da                	neg    %edx
c01150da:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01150dd:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c01150e0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c01150e7:	e9 b6 00 00 00       	jmp    c01151a2 <vprintfmt+0x3c8>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c01150ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01150ef:	89 44 24 04          	mov    %eax,0x4(%esp)
c01150f3:	8d 45 18             	lea    0x18(%ebp),%eax
c01150f6:	89 04 24             	mov    %eax,(%esp)
c01150f9:	e8 07 fc ff ff       	call   c0114d05 <getuint>
c01150fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115101:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c0115104:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c011510b:	e9 92 00 00 00       	jmp    c01151a2 <vprintfmt+0x3c8>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0115110:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115113:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115117:	8d 45 18             	lea    0x18(%ebp),%eax
c011511a:	89 04 24             	mov    %eax,(%esp)
c011511d:	e8 e3 fb ff ff       	call   c0114d05 <getuint>
c0115122:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115125:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c0115128:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c011512f:	eb 71                	jmp    c01151a2 <vprintfmt+0x3c8>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c0115131:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115134:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115138:	8b 45 10             	mov    0x10(%ebp),%eax
c011513b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011513f:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c0115146:	8b 45 08             	mov    0x8(%ebp),%eax
c0115149:	ff d0                	call   *%eax
            putch('x', putdat, fd);
c011514b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011514e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115152:	8b 45 10             	mov    0x10(%ebp),%eax
c0115155:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115159:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c0115160:	8b 45 08             	mov    0x8(%ebp),%eax
c0115163:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c0115165:	8b 45 18             	mov    0x18(%ebp),%eax
c0115168:	8d 50 04             	lea    0x4(%eax),%edx
c011516b:	89 55 18             	mov    %edx,0x18(%ebp)
c011516e:	8b 00                	mov    (%eax),%eax
c0115170:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115173:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c011517a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c0115181:	eb 1f                	jmp    c01151a2 <vprintfmt+0x3c8>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c0115183:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115186:	89 44 24 04          	mov    %eax,0x4(%esp)
c011518a:	8d 45 18             	lea    0x18(%ebp),%eax
c011518d:	89 04 24             	mov    %eax,(%esp)
c0115190:	e8 70 fb ff ff       	call   c0114d05 <getuint>
c0115195:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115198:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c011519b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c01151a2:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c01151a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01151a9:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c01151ad:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01151b0:	89 54 24 18          	mov    %edx,0x18(%esp)
c01151b4:	89 44 24 14          	mov    %eax,0x14(%esp)
c01151b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01151bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01151be:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01151c2:	89 54 24 10          	mov    %edx,0x10(%esp)
c01151c6:	8b 45 10             	mov    0x10(%ebp),%eax
c01151c9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01151cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01151d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01151d7:	89 04 24             	mov    %eax,(%esp)
c01151da:	e8 d9 f9 ff ff       	call   c0114bb8 <printnum>
            break;
c01151df:	eb 4a                	jmp    c011522b <vprintfmt+0x451>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c01151e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151e4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01151e8:	8b 45 10             	mov    0x10(%ebp),%eax
c01151eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01151ef:	89 1c 24             	mov    %ebx,(%esp)
c01151f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01151f5:	ff d0                	call   *%eax
            break;
c01151f7:	eb 32                	jmp    c011522b <vprintfmt+0x451>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c01151f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151fc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115200:	8b 45 10             	mov    0x10(%ebp),%eax
c0115203:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115207:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c011520e:	8b 45 08             	mov    0x8(%ebp),%eax
c0115211:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c0115213:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0115217:	eb 04                	jmp    c011521d <vprintfmt+0x443>
c0115219:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c011521d:	8b 45 14             	mov    0x14(%ebp),%eax
c0115220:	83 e8 01             	sub    $0x1,%eax
c0115223:	0f b6 00             	movzbl (%eax),%eax
c0115226:	3c 25                	cmp    $0x25,%al
c0115228:	75 ef                	jne    c0115219 <vprintfmt+0x43f>
                /* do nothing */;
            break;
c011522a:	90                   	nop
        }
    }
c011522b:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c011522c:	e9 d1 fb ff ff       	jmp    c0114e02 <vprintfmt+0x28>
            if (ch == '\0') {
                return;
c0115231:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c0115232:	83 c4 40             	add    $0x40,%esp
c0115235:	5b                   	pop    %ebx
c0115236:	5e                   	pop    %esi
c0115237:	5d                   	pop    %ebp
c0115238:	c3                   	ret    

c0115239 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0115239:	55                   	push   %ebp
c011523a:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c011523c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011523f:	8b 40 08             	mov    0x8(%eax),%eax
c0115242:	8d 50 01             	lea    0x1(%eax),%edx
c0115245:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115248:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c011524b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011524e:	8b 10                	mov    (%eax),%edx
c0115250:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115253:	8b 40 04             	mov    0x4(%eax),%eax
c0115256:	39 c2                	cmp    %eax,%edx
c0115258:	73 12                	jae    c011526c <sprintputch+0x33>
        *b->buf ++ = ch;
c011525a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011525d:	8b 00                	mov    (%eax),%eax
c011525f:	8b 55 08             	mov    0x8(%ebp),%edx
c0115262:	88 10                	mov    %dl,(%eax)
c0115264:	8d 50 01             	lea    0x1(%eax),%edx
c0115267:	8b 45 0c             	mov    0xc(%ebp),%eax
c011526a:	89 10                	mov    %edx,(%eax)
    }
}
c011526c:	5d                   	pop    %ebp
c011526d:	c3                   	ret    

c011526e <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c011526e:	55                   	push   %ebp
c011526f:	89 e5                	mov    %esp,%ebp
c0115271:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0115274:	8d 55 14             	lea    0x14(%ebp),%edx
c0115277:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011527a:	89 10                	mov    %edx,(%eax)
    cnt = vsnprintf(str, size, fmt, ap);
c011527c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011527f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0115283:	8b 45 10             	mov    0x10(%ebp),%eax
c0115286:	89 44 24 08          	mov    %eax,0x8(%esp)
c011528a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011528d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115291:	8b 45 08             	mov    0x8(%ebp),%eax
c0115294:	89 04 24             	mov    %eax,(%esp)
c0115297:	e8 08 00 00 00       	call   c01152a4 <vsnprintf>
c011529c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c011529f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01152a2:	c9                   	leave  
c01152a3:	c3                   	ret    

c01152a4 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c01152a4:	55                   	push   %ebp
c01152a5:	89 e5                	mov    %esp,%ebp
c01152a7:	83 ec 38             	sub    $0x38,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c01152aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01152ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01152b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01152b3:	83 e8 01             	sub    $0x1,%eax
c01152b6:	03 45 08             	add    0x8(%ebp),%eax
c01152b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01152bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c01152c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01152c7:	74 0a                	je     c01152d3 <vsnprintf+0x2f>
c01152c9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01152cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01152cf:	39 c2                	cmp    %eax,%edx
c01152d1:	76 07                	jbe    c01152da <vsnprintf+0x36>
        return -E_INVAL;
c01152d3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01152d8:	eb 33                	jmp    c011530d <vsnprintf+0x69>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c01152da:	b8 39 52 11 c0       	mov    $0xc0115239,%eax
c01152df:	8b 55 14             	mov    0x14(%ebp),%edx
c01152e2:	89 54 24 10          	mov    %edx,0x10(%esp)
c01152e6:	8b 55 10             	mov    0x10(%ebp),%edx
c01152e9:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01152ed:	8d 55 ec             	lea    -0x14(%ebp),%edx
c01152f0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01152f4:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c01152fb:	ff 
c01152fc:	89 04 24             	mov    %eax,(%esp)
c01152ff:	e8 d6 fa ff ff       	call   c0114dda <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c0115304:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115307:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c011530a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011530d:	c9                   	leave  
c011530e:	c3                   	ret    
	...

c0115310 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c0115310:	55                   	push   %ebp
c0115311:	89 e5                	mov    %esp,%ebp
c0115313:	57                   	push   %edi
c0115314:	56                   	push   %esi
c0115315:	53                   	push   %ebx
c0115316:	83 ec 34             	sub    $0x34,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c0115319:	a1 c8 0e 15 c0       	mov    0xc0150ec8,%eax
c011531e:	8b 15 cc 0e 15 c0    	mov    0xc0150ecc,%edx
c0115324:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c011532a:	6b c8 05             	imul   $0x5,%eax,%ecx
c011532d:	01 cf                	add    %ecx,%edi
c011532f:	b9 6d e6 ec de       	mov    $0xdeece66d,%ecx
c0115334:	f7 e1                	mul    %ecx
c0115336:	8d 0c 17             	lea    (%edi,%edx,1),%ecx
c0115339:	89 ca                	mov    %ecx,%edx
c011533b:	83 c0 0b             	add    $0xb,%eax
c011533e:	83 d2 00             	adc    $0x0,%edx
c0115341:	89 c3                	mov    %eax,%ebx
c0115343:	80 e7 ff             	and    $0xff,%bh
c0115346:	0f b7 f2             	movzwl %dx,%esi
c0115349:	89 1d c8 0e 15 c0    	mov    %ebx,0xc0150ec8
c011534f:	89 35 cc 0e 15 c0    	mov    %esi,0xc0150ecc
    unsigned long long result = (next >> 12);
c0115355:	a1 c8 0e 15 c0       	mov    0xc0150ec8,%eax
c011535a:	8b 15 cc 0e 15 c0    	mov    0xc0150ecc,%edx
c0115360:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0115364:	c1 ea 0c             	shr    $0xc,%edx
c0115367:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011536a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c011536d:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c0115374:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115377:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011537a:	89 45 c8             	mov    %eax,-0x38(%ebp)
c011537d:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0115380:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0115383:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0115386:	89 d3                	mov    %edx,%ebx
c0115388:	89 c6                	mov    %eax,%esi
c011538a:	89 75 d8             	mov    %esi,-0x28(%ebp)
c011538d:	89 5d e8             	mov    %ebx,-0x18(%ebp)
c0115390:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115393:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115396:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011539a:	74 1c                	je     c01153b8 <rand+0xa8>
c011539c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011539f:	ba 00 00 00 00       	mov    $0x0,%edx
c01153a4:	f7 75 dc             	divl   -0x24(%ebp)
c01153a7:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01153aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01153ad:	ba 00 00 00 00       	mov    $0x0,%edx
c01153b2:	f7 75 dc             	divl   -0x24(%ebp)
c01153b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01153b8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01153bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01153be:	89 d6                	mov    %edx,%esi
c01153c0:	89 c3                	mov    %eax,%ebx
c01153c2:	89 f0                	mov    %esi,%eax
c01153c4:	89 da                	mov    %ebx,%edx
c01153c6:	f7 75 dc             	divl   -0x24(%ebp)
c01153c9:	89 d3                	mov    %edx,%ebx
c01153cb:	89 c6                	mov    %eax,%esi
c01153cd:	89 75 d8             	mov    %esi,-0x28(%ebp)
c01153d0:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c01153d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01153d6:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01153d9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01153dc:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c01153df:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01153e2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01153e5:	89 c3                	mov    %eax,%ebx
c01153e7:	89 d6                	mov    %edx,%esi
c01153e9:	89 5d e0             	mov    %ebx,-0x20(%ebp)
c01153ec:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c01153ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c01153f2:	83 c4 34             	add    $0x34,%esp
c01153f5:	5b                   	pop    %ebx
c01153f6:	5e                   	pop    %esi
c01153f7:	5f                   	pop    %edi
c01153f8:	5d                   	pop    %ebp
c01153f9:	c3                   	ret    

c01153fa <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c01153fa:	55                   	push   %ebp
c01153fb:	89 e5                	mov    %esp,%ebp
    next = seed;
c01153fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0115400:	ba 00 00 00 00       	mov    $0x0,%edx
c0115405:	a3 c8 0e 15 c0       	mov    %eax,0xc0150ec8
c011540a:	89 15 cc 0e 15 c0    	mov    %edx,0xc0150ecc
}
c0115410:	5d                   	pop    %ebp
c0115411:	c3                   	ret    
	...

c0115414 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c0115414:	55                   	push   %ebp
c0115415:	89 e5                	mov    %esp,%ebp
c0115417:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c011541a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c0115421:	eb 04                	jmp    c0115427 <strlen+0x13>
        cnt ++;
c0115423:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c0115427:	8b 45 08             	mov    0x8(%ebp),%eax
c011542a:	0f b6 00             	movzbl (%eax),%eax
c011542d:	84 c0                	test   %al,%al
c011542f:	0f 95 c0             	setne  %al
c0115432:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115436:	84 c0                	test   %al,%al
c0115438:	75 e9                	jne    c0115423 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c011543a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c011543d:	c9                   	leave  
c011543e:	c3                   	ret    

c011543f <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c011543f:	55                   	push   %ebp
c0115440:	89 e5                	mov    %esp,%ebp
c0115442:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0115445:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c011544c:	eb 04                	jmp    c0115452 <strnlen+0x13>
        cnt ++;
c011544e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c0115452:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0115455:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0115458:	73 13                	jae    c011546d <strnlen+0x2e>
c011545a:	8b 45 08             	mov    0x8(%ebp),%eax
c011545d:	0f b6 00             	movzbl (%eax),%eax
c0115460:	84 c0                	test   %al,%al
c0115462:	0f 95 c0             	setne  %al
c0115465:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115469:	84 c0                	test   %al,%al
c011546b:	75 e1                	jne    c011544e <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c011546d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115470:	c9                   	leave  
c0115471:	c3                   	ret    

c0115472 <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c0115472:	55                   	push   %ebp
c0115473:	89 e5                	mov    %esp,%ebp
c0115475:	83 ec 18             	sub    $0x18,%esp
    return strcpy(dst + strlen(dst), src);
c0115478:	8b 45 08             	mov    0x8(%ebp),%eax
c011547b:	89 04 24             	mov    %eax,(%esp)
c011547e:	e8 91 ff ff ff       	call   c0115414 <strlen>
c0115483:	03 45 08             	add    0x8(%ebp),%eax
c0115486:	8b 55 0c             	mov    0xc(%ebp),%edx
c0115489:	89 54 24 04          	mov    %edx,0x4(%esp)
c011548d:	89 04 24             	mov    %eax,(%esp)
c0115490:	e8 02 00 00 00       	call   c0115497 <strcpy>
}
c0115495:	c9                   	leave  
c0115496:	c3                   	ret    

c0115497 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c0115497:	55                   	push   %ebp
c0115498:	89 e5                	mov    %esp,%ebp
c011549a:	57                   	push   %edi
c011549b:	56                   	push   %esi
c011549c:	53                   	push   %ebx
c011549d:	83 ec 24             	sub    $0x24,%esp
c01154a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01154a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01154a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01154a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c01154ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01154af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01154b2:	89 d6                	mov    %edx,%esi
c01154b4:	89 c3                	mov    %eax,%ebx
c01154b6:	89 df                	mov    %ebx,%edi
c01154b8:	ac                   	lods   %ds:(%esi),%al
c01154b9:	aa                   	stos   %al,%es:(%edi)
c01154ba:	84 c0                	test   %al,%al
c01154bc:	75 fa                	jne    c01154b8 <strcpy+0x21>
c01154be:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01154c1:	89 fb                	mov    %edi,%ebx
c01154c3:	89 75 e8             	mov    %esi,-0x18(%ebp)
c01154c6:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
c01154c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01154cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c01154cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c01154d2:	83 c4 24             	add    $0x24,%esp
c01154d5:	5b                   	pop    %ebx
c01154d6:	5e                   	pop    %esi
c01154d7:	5f                   	pop    %edi
c01154d8:	5d                   	pop    %ebp
c01154d9:	c3                   	ret    

c01154da <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c01154da:	55                   	push   %ebp
c01154db:	89 e5                	mov    %esp,%ebp
c01154dd:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c01154e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01154e3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c01154e6:	eb 21                	jmp    c0115509 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c01154e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01154eb:	0f b6 10             	movzbl (%eax),%edx
c01154ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01154f1:	88 10                	mov    %dl,(%eax)
c01154f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01154f6:	0f b6 00             	movzbl (%eax),%eax
c01154f9:	84 c0                	test   %al,%al
c01154fb:	74 04                	je     c0115501 <strncpy+0x27>
            src ++;
c01154fd:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c0115501:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0115505:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c0115509:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011550d:	75 d9                	jne    c01154e8 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c011550f:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0115512:	c9                   	leave  
c0115513:	c3                   	ret    

c0115514 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c0115514:	55                   	push   %ebp
c0115515:	89 e5                	mov    %esp,%ebp
c0115517:	57                   	push   %edi
c0115518:	56                   	push   %esi
c0115519:	53                   	push   %ebx
c011551a:	83 ec 24             	sub    $0x24,%esp
c011551d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115520:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115523:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115526:	89 45 ec             	mov    %eax,-0x14(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c0115529:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011552c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011552f:	89 d6                	mov    %edx,%esi
c0115531:	89 c3                	mov    %eax,%ebx
c0115533:	89 df                	mov    %ebx,%edi
c0115535:	ac                   	lods   %ds:(%esi),%al
c0115536:	ae                   	scas   %es:(%edi),%al
c0115537:	75 08                	jne    c0115541 <strcmp+0x2d>
c0115539:	84 c0                	test   %al,%al
c011553b:	75 f8                	jne    c0115535 <strcmp+0x21>
c011553d:	31 c0                	xor    %eax,%eax
c011553f:	eb 04                	jmp    c0115545 <strcmp+0x31>
c0115541:	19 c0                	sbb    %eax,%eax
c0115543:	0c 01                	or     $0x1,%al
c0115545:	89 fb                	mov    %edi,%ebx
c0115547:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011554a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011554d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0115550:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c0115553:	89 5d e0             	mov    %ebx,-0x20(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c0115556:	8b 45 e8             	mov    -0x18(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c0115559:	83 c4 24             	add    $0x24,%esp
c011555c:	5b                   	pop    %ebx
c011555d:	5e                   	pop    %esi
c011555e:	5f                   	pop    %edi
c011555f:	5d                   	pop    %ebp
c0115560:	c3                   	ret    

c0115561 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c0115561:	55                   	push   %ebp
c0115562:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0115564:	eb 0c                	jmp    c0115572 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0115566:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c011556a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011556e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0115572:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115576:	74 1a                	je     c0115592 <strncmp+0x31>
c0115578:	8b 45 08             	mov    0x8(%ebp),%eax
c011557b:	0f b6 00             	movzbl (%eax),%eax
c011557e:	84 c0                	test   %al,%al
c0115580:	74 10                	je     c0115592 <strncmp+0x31>
c0115582:	8b 45 08             	mov    0x8(%ebp),%eax
c0115585:	0f b6 10             	movzbl (%eax),%edx
c0115588:	8b 45 0c             	mov    0xc(%ebp),%eax
c011558b:	0f b6 00             	movzbl (%eax),%eax
c011558e:	38 c2                	cmp    %al,%dl
c0115590:	74 d4                	je     c0115566 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c0115592:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115596:	74 1a                	je     c01155b2 <strncmp+0x51>
c0115598:	8b 45 08             	mov    0x8(%ebp),%eax
c011559b:	0f b6 00             	movzbl (%eax),%eax
c011559e:	0f b6 d0             	movzbl %al,%edx
c01155a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01155a4:	0f b6 00             	movzbl (%eax),%eax
c01155a7:	0f b6 c0             	movzbl %al,%eax
c01155aa:	89 d1                	mov    %edx,%ecx
c01155ac:	29 c1                	sub    %eax,%ecx
c01155ae:	89 c8                	mov    %ecx,%eax
c01155b0:	eb 05                	jmp    c01155b7 <strncmp+0x56>
c01155b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01155b7:	5d                   	pop    %ebp
c01155b8:	c3                   	ret    

c01155b9 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c01155b9:	55                   	push   %ebp
c01155ba:	89 e5                	mov    %esp,%ebp
c01155bc:	83 ec 04             	sub    $0x4,%esp
c01155bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01155c2:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01155c5:	eb 14                	jmp    c01155db <strchr+0x22>
        if (*s == c) {
c01155c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01155ca:	0f b6 00             	movzbl (%eax),%eax
c01155cd:	3a 45 fc             	cmp    -0x4(%ebp),%al
c01155d0:	75 05                	jne    c01155d7 <strchr+0x1e>
            return (char *)s;
c01155d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01155d5:	eb 13                	jmp    c01155ea <strchr+0x31>
        }
        s ++;
c01155d7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c01155db:	8b 45 08             	mov    0x8(%ebp),%eax
c01155de:	0f b6 00             	movzbl (%eax),%eax
c01155e1:	84 c0                	test   %al,%al
c01155e3:	75 e2                	jne    c01155c7 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c01155e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01155ea:	c9                   	leave  
c01155eb:	c3                   	ret    

c01155ec <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c01155ec:	55                   	push   %ebp
c01155ed:	89 e5                	mov    %esp,%ebp
c01155ef:	83 ec 04             	sub    $0x4,%esp
c01155f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01155f5:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01155f8:	eb 0f                	jmp    c0115609 <strfind+0x1d>
        if (*s == c) {
c01155fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01155fd:	0f b6 00             	movzbl (%eax),%eax
c0115600:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0115603:	74 10                	je     c0115615 <strfind+0x29>
            break;
        }
        s ++;
c0115605:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c0115609:	8b 45 08             	mov    0x8(%ebp),%eax
c011560c:	0f b6 00             	movzbl (%eax),%eax
c011560f:	84 c0                	test   %al,%al
c0115611:	75 e7                	jne    c01155fa <strfind+0xe>
c0115613:	eb 01                	jmp    c0115616 <strfind+0x2a>
        if (*s == c) {
            break;
c0115615:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c0115616:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0115619:	c9                   	leave  
c011561a:	c3                   	ret    

c011561b <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c011561b:	55                   	push   %ebp
c011561c:	89 e5                	mov    %esp,%ebp
c011561e:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c0115621:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c0115628:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c011562f:	eb 04                	jmp    c0115635 <strtol+0x1a>
        s ++;
c0115631:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0115635:	8b 45 08             	mov    0x8(%ebp),%eax
c0115638:	0f b6 00             	movzbl (%eax),%eax
c011563b:	3c 20                	cmp    $0x20,%al
c011563d:	74 f2                	je     c0115631 <strtol+0x16>
c011563f:	8b 45 08             	mov    0x8(%ebp),%eax
c0115642:	0f b6 00             	movzbl (%eax),%eax
c0115645:	3c 09                	cmp    $0x9,%al
c0115647:	74 e8                	je     c0115631 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c0115649:	8b 45 08             	mov    0x8(%ebp),%eax
c011564c:	0f b6 00             	movzbl (%eax),%eax
c011564f:	3c 2b                	cmp    $0x2b,%al
c0115651:	75 06                	jne    c0115659 <strtol+0x3e>
        s ++;
c0115653:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115657:	eb 15                	jmp    c011566e <strtol+0x53>
    }
    else if (*s == '-') {
c0115659:	8b 45 08             	mov    0x8(%ebp),%eax
c011565c:	0f b6 00             	movzbl (%eax),%eax
c011565f:	3c 2d                	cmp    $0x2d,%al
c0115661:	75 0b                	jne    c011566e <strtol+0x53>
        s ++, neg = 1;
c0115663:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115667:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c011566e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115672:	74 06                	je     c011567a <strtol+0x5f>
c0115674:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0115678:	75 24                	jne    c011569e <strtol+0x83>
c011567a:	8b 45 08             	mov    0x8(%ebp),%eax
c011567d:	0f b6 00             	movzbl (%eax),%eax
c0115680:	3c 30                	cmp    $0x30,%al
c0115682:	75 1a                	jne    c011569e <strtol+0x83>
c0115684:	8b 45 08             	mov    0x8(%ebp),%eax
c0115687:	83 c0 01             	add    $0x1,%eax
c011568a:	0f b6 00             	movzbl (%eax),%eax
c011568d:	3c 78                	cmp    $0x78,%al
c011568f:	75 0d                	jne    c011569e <strtol+0x83>
        s += 2, base = 16;
c0115691:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c0115695:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c011569c:	eb 2a                	jmp    c01156c8 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c011569e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01156a2:	75 17                	jne    c01156bb <strtol+0xa0>
c01156a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01156a7:	0f b6 00             	movzbl (%eax),%eax
c01156aa:	3c 30                	cmp    $0x30,%al
c01156ac:	75 0d                	jne    c01156bb <strtol+0xa0>
        s ++, base = 8;
c01156ae:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01156b2:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c01156b9:	eb 0d                	jmp    c01156c8 <strtol+0xad>
    }
    else if (base == 0) {
c01156bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01156bf:	75 07                	jne    c01156c8 <strtol+0xad>
        base = 10;
c01156c1:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c01156c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01156cb:	0f b6 00             	movzbl (%eax),%eax
c01156ce:	3c 2f                	cmp    $0x2f,%al
c01156d0:	7e 1b                	jle    c01156ed <strtol+0xd2>
c01156d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01156d5:	0f b6 00             	movzbl (%eax),%eax
c01156d8:	3c 39                	cmp    $0x39,%al
c01156da:	7f 11                	jg     c01156ed <strtol+0xd2>
            dig = *s - '0';
c01156dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01156df:	0f b6 00             	movzbl (%eax),%eax
c01156e2:	0f be c0             	movsbl %al,%eax
c01156e5:	83 e8 30             	sub    $0x30,%eax
c01156e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01156eb:	eb 48                	jmp    c0115735 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c01156ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01156f0:	0f b6 00             	movzbl (%eax),%eax
c01156f3:	3c 60                	cmp    $0x60,%al
c01156f5:	7e 1b                	jle    c0115712 <strtol+0xf7>
c01156f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01156fa:	0f b6 00             	movzbl (%eax),%eax
c01156fd:	3c 7a                	cmp    $0x7a,%al
c01156ff:	7f 11                	jg     c0115712 <strtol+0xf7>
            dig = *s - 'a' + 10;
c0115701:	8b 45 08             	mov    0x8(%ebp),%eax
c0115704:	0f b6 00             	movzbl (%eax),%eax
c0115707:	0f be c0             	movsbl %al,%eax
c011570a:	83 e8 57             	sub    $0x57,%eax
c011570d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115710:	eb 23                	jmp    c0115735 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c0115712:	8b 45 08             	mov    0x8(%ebp),%eax
c0115715:	0f b6 00             	movzbl (%eax),%eax
c0115718:	3c 40                	cmp    $0x40,%al
c011571a:	7e 38                	jle    c0115754 <strtol+0x139>
c011571c:	8b 45 08             	mov    0x8(%ebp),%eax
c011571f:	0f b6 00             	movzbl (%eax),%eax
c0115722:	3c 5a                	cmp    $0x5a,%al
c0115724:	7f 2e                	jg     c0115754 <strtol+0x139>
            dig = *s - 'A' + 10;
c0115726:	8b 45 08             	mov    0x8(%ebp),%eax
c0115729:	0f b6 00             	movzbl (%eax),%eax
c011572c:	0f be c0             	movsbl %al,%eax
c011572f:	83 e8 37             	sub    $0x37,%eax
c0115732:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c0115735:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115738:	3b 45 10             	cmp    0x10(%ebp),%eax
c011573b:	7d 16                	jge    c0115753 <strtol+0x138>
            break;
        }
        s ++, val = (val * base) + dig;
c011573d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115741:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115744:	0f af 45 10          	imul   0x10(%ebp),%eax
c0115748:	03 45 f4             	add    -0xc(%ebp),%eax
c011574b:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c011574e:	e9 75 ff ff ff       	jmp    c01156c8 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c0115753:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c0115754:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0115758:	74 08                	je     c0115762 <strtol+0x147>
        *endptr = (char *) s;
c011575a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011575d:	8b 55 08             	mov    0x8(%ebp),%edx
c0115760:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c0115762:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0115766:	74 07                	je     c011576f <strtol+0x154>
c0115768:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011576b:	f7 d8                	neg    %eax
c011576d:	eb 03                	jmp    c0115772 <strtol+0x157>
c011576f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0115772:	c9                   	leave  
c0115773:	c3                   	ret    

c0115774 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0115774:	55                   	push   %ebp
c0115775:	89 e5                	mov    %esp,%ebp
c0115777:	57                   	push   %edi
c0115778:	56                   	push   %esi
c0115779:	53                   	push   %ebx
c011577a:	83 ec 24             	sub    $0x24,%esp
c011577d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115780:	88 45 d0             	mov    %al,-0x30(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c0115783:	0f be 45 d0          	movsbl -0x30(%ebp),%eax
c0115787:	8b 55 08             	mov    0x8(%ebp),%edx
c011578a:	89 55 f0             	mov    %edx,-0x10(%ebp)
c011578d:	88 45 ef             	mov    %al,-0x11(%ebp)
c0115790:	8b 45 10             	mov    0x10(%ebp),%eax
c0115793:	89 45 e8             	mov    %eax,-0x18(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0115796:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0115799:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c011579d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01157a0:	89 ce                	mov    %ecx,%esi
c01157a2:	89 d3                	mov    %edx,%ebx
c01157a4:	89 f1                	mov    %esi,%ecx
c01157a6:	89 df                	mov    %ebx,%edi
c01157a8:	f3 aa                	rep stos %al,%es:(%edi)
c01157aa:	89 fb                	mov    %edi,%ebx
c01157ac:	89 ce                	mov    %ecx,%esi
c01157ae:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c01157b1:	89 5d e0             	mov    %ebx,-0x20(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c01157b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c01157b7:	83 c4 24             	add    $0x24,%esp
c01157ba:	5b                   	pop    %ebx
c01157bb:	5e                   	pop    %esi
c01157bc:	5f                   	pop    %edi
c01157bd:	5d                   	pop    %ebp
c01157be:	c3                   	ret    

c01157bf <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c01157bf:	55                   	push   %ebp
c01157c0:	89 e5                	mov    %esp,%ebp
c01157c2:	57                   	push   %edi
c01157c3:	56                   	push   %esi
c01157c4:	53                   	push   %ebx
c01157c5:	83 ec 38             	sub    $0x38,%esp
c01157c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01157cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01157ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01157d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01157d4:	8b 45 10             	mov    0x10(%ebp),%eax
c01157d7:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c01157da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01157dd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01157e0:	73 4e                	jae    c0115830 <memmove+0x71>
c01157e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01157e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01157e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01157eb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01157ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01157f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c01157f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01157f7:	89 c1                	mov    %eax,%ecx
c01157f9:	c1 e9 02             	shr    $0x2,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c01157fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01157ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115802:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c0115805:	89 d7                	mov    %edx,%edi
c0115807:	89 c3                	mov    %eax,%ebx
c0115809:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c011580c:	89 de                	mov    %ebx,%esi
c011580e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0115810:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0115813:	83 e1 03             	and    $0x3,%ecx
c0115816:	74 02                	je     c011581a <memmove+0x5b>
c0115818:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c011581a:	89 f3                	mov    %esi,%ebx
c011581c:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c011581f:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0115822:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c0115825:	89 7d d4             	mov    %edi,-0x2c(%ebp)
c0115828:	89 5d d0             	mov    %ebx,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c011582b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011582e:	eb 3b                	jmp    c011586b <memmove+0xac>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c0115830:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115833:	83 e8 01             	sub    $0x1,%eax
c0115836:	89 c2                	mov    %eax,%edx
c0115838:	03 55 ec             	add    -0x14(%ebp),%edx
c011583b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011583e:	83 e8 01             	sub    $0x1,%eax
c0115841:	03 45 f0             	add    -0x10(%ebp),%eax
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c0115844:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0115847:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c011584a:	89 d6                	mov    %edx,%esi
c011584c:	89 c3                	mov    %eax,%ebx
c011584e:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0115851:	89 df                	mov    %ebx,%edi
c0115853:	fd                   	std    
c0115854:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0115856:	fc                   	cld    
c0115857:	89 fb                	mov    %edi,%ebx
c0115859:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c011585c:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c011585f:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c0115862:	89 75 c8             	mov    %esi,-0x38(%ebp)
c0115865:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c0115868:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c011586b:	83 c4 38             	add    $0x38,%esp
c011586e:	5b                   	pop    %ebx
c011586f:	5e                   	pop    %esi
c0115870:	5f                   	pop    %edi
c0115871:	5d                   	pop    %ebp
c0115872:	c3                   	ret    

c0115873 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c0115873:	55                   	push   %ebp
c0115874:	89 e5                	mov    %esp,%ebp
c0115876:	57                   	push   %edi
c0115877:	56                   	push   %esi
c0115878:	53                   	push   %ebx
c0115879:	83 ec 24             	sub    $0x24,%esp
c011587c:	8b 45 08             	mov    0x8(%ebp),%eax
c011587f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115882:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115885:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115888:	8b 45 10             	mov    0x10(%ebp),%eax
c011588b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c011588e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115891:	89 c1                	mov    %eax,%ecx
c0115893:	c1 e9 02             	shr    $0x2,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0115896:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0115899:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011589c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c011589f:	89 d7                	mov    %edx,%edi
c01158a1:	89 c3                	mov    %eax,%ebx
c01158a3:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01158a6:	89 de                	mov    %ebx,%esi
c01158a8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c01158aa:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01158ad:	83 e1 03             	and    $0x3,%ecx
c01158b0:	74 02                	je     c01158b4 <memcpy+0x41>
c01158b2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c01158b4:	89 f3                	mov    %esi,%ebx
c01158b6:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c01158b9:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01158bc:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c01158bf:	89 7d e0             	mov    %edi,-0x20(%ebp)
c01158c2:	89 5d dc             	mov    %ebx,-0x24(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c01158c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c01158c8:	83 c4 24             	add    $0x24,%esp
c01158cb:	5b                   	pop    %ebx
c01158cc:	5e                   	pop    %esi
c01158cd:	5f                   	pop    %edi
c01158ce:	5d                   	pop    %ebp
c01158cf:	c3                   	ret    

c01158d0 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c01158d0:	55                   	push   %ebp
c01158d1:	89 e5                	mov    %esp,%ebp
c01158d3:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c01158d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01158d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c01158dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01158df:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c01158e2:	eb 32                	jmp    c0115916 <memcmp+0x46>
        if (*s1 != *s2) {
c01158e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01158e7:	0f b6 10             	movzbl (%eax),%edx
c01158ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01158ed:	0f b6 00             	movzbl (%eax),%eax
c01158f0:	38 c2                	cmp    %al,%dl
c01158f2:	74 1a                	je     c011590e <memcmp+0x3e>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c01158f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01158f7:	0f b6 00             	movzbl (%eax),%eax
c01158fa:	0f b6 d0             	movzbl %al,%edx
c01158fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115900:	0f b6 00             	movzbl (%eax),%eax
c0115903:	0f b6 c0             	movzbl %al,%eax
c0115906:	89 d1                	mov    %edx,%ecx
c0115908:	29 c1                	sub    %eax,%ecx
c011590a:	89 c8                	mov    %ecx,%eax
c011590c:	eb 1c                	jmp    c011592a <memcmp+0x5a>
        }
        s1 ++, s2 ++;
c011590e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0115912:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c0115916:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011591a:	0f 95 c0             	setne  %al
c011591d:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c0115921:	84 c0                	test   %al,%al
c0115923:	75 bf                	jne    c01158e4 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c0115925:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011592a:	c9                   	leave  
c011592b:	c3                   	ret    
