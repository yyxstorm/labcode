
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 d0 12 00 	lgdtl  0x12d018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 d0 12 c0       	mov    $0xc012d000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba b8 20 1a c0       	mov    $0xc01a20b8,%edx
c0100035:	b8 2a ef 19 c0       	mov    $0xc019ef2a,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 2a ef 19 c0 	movl   $0xc019ef2a,(%esp)
c0100051:	e8 2f d1 00 00       	call   c010d185 <memset>

    cons_init();                // init the console
c0100056:	e8 03 2b 00 00       	call   c0102b5e <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 20 d3 10 c0 	movl   $0xc010d320,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 3c d3 10 c0 	movl   $0xc010d33c,(%esp)
c0100070:	e8 61 17 00 00       	call   c01017d6 <cprintf>

    print_kerninfo();
c0100075:	e8 88 1d 00 00       	call   c0101e02 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 9d 00 00 00       	call   c010011c <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 99 6a 00 00       	call   c0106b1d <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 b3 34 00 00       	call   c010353c <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 2b 36 00 00       	call   c01036b9 <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 89 9a 00 00       	call   c0109b1c <vmm_init>
    proc_init();                // init process table
c0100093:	e8 b0 c0 00 00       	call   c010c148 <proc_init>
    
    ide_init();                 // init ide devices
c0100098:	e8 f2 2b 00 00       	call   c0102c8f <ide_init>
    swap_init();                // init swap
c010009d:	e8 56 81 00 00       	call   c01081f8 <swap_init>

    clock_init();               // init clock interrupt
c01000a2:	e8 6d 22 00 00       	call   c0102314 <clock_init>
    intr_enable();              // enable irq interrupt
c01000a7:	e8 fe 33 00 00       	call   c01034aa <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000ac:	e8 56 c2 00 00       	call   c010c307 <cpu_idle>

c01000b1 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b1:	55                   	push   %ebp
c01000b2:	89 e5                	mov    %esp,%ebp
c01000b4:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000b7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000be:	00 
c01000bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000c6:	00 
c01000c7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000ce:	e8 73 21 00 00       	call   c0102246 <mon_backtrace>
}
c01000d3:	c9                   	leave  
c01000d4:	c3                   	ret    

c01000d5 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000d5:	55                   	push   %ebp
c01000d6:	89 e5                	mov    %esp,%ebp
c01000d8:	53                   	push   %ebx
c01000d9:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000dc:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000df:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000e2:	8d 55 08             	lea    0x8(%ebp),%edx
c01000e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01000e8:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000ec:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000f4:	89 04 24             	mov    %eax,(%esp)
c01000f7:	e8 b5 ff ff ff       	call   c01000b1 <grade_backtrace2>
}
c01000fc:	83 c4 14             	add    $0x14,%esp
c01000ff:	5b                   	pop    %ebx
c0100100:	5d                   	pop    %ebp
c0100101:	c3                   	ret    

c0100102 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100102:	55                   	push   %ebp
c0100103:	89 e5                	mov    %esp,%ebp
c0100105:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100108:	8b 45 10             	mov    0x10(%ebp),%eax
c010010b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010010f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100112:	89 04 24             	mov    %eax,(%esp)
c0100115:	e8 bb ff ff ff       	call   c01000d5 <grade_backtrace1>
}
c010011a:	c9                   	leave  
c010011b:	c3                   	ret    

c010011c <grade_backtrace>:

void
grade_backtrace(void) {
c010011c:	55                   	push   %ebp
c010011d:	89 e5                	mov    %esp,%ebp
c010011f:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100122:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100127:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c010012e:	ff 
c010012f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100133:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010013a:	e8 c3 ff ff ff       	call   c0100102 <grade_backtrace0>
}
c010013f:	c9                   	leave  
c0100140:	c3                   	ret    

c0100141 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100141:	55                   	push   %ebp
c0100142:	89 e5                	mov    %esp,%ebp
c0100144:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100147:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010014a:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c010014d:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100150:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100153:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100157:	0f b7 c0             	movzwl %ax,%eax
c010015a:	83 e0 03             	and    $0x3,%eax
c010015d:	89 c2                	mov    %eax,%edx
c010015f:	a1 40 ef 19 c0       	mov    0xc019ef40,%eax
c0100164:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100168:	89 44 24 04          	mov    %eax,0x4(%esp)
c010016c:	c7 04 24 41 d3 10 c0 	movl   $0xc010d341,(%esp)
c0100173:	e8 5e 16 00 00       	call   c01017d6 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100178:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010017c:	0f b7 d0             	movzwl %ax,%edx
c010017f:	a1 40 ef 19 c0       	mov    0xc019ef40,%eax
c0100184:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100188:	89 44 24 04          	mov    %eax,0x4(%esp)
c010018c:	c7 04 24 4f d3 10 c0 	movl   $0xc010d34f,(%esp)
c0100193:	e8 3e 16 00 00       	call   c01017d6 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c0100198:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010019c:	0f b7 d0             	movzwl %ax,%edx
c010019f:	a1 40 ef 19 c0       	mov    0xc019ef40,%eax
c01001a4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001ac:	c7 04 24 5d d3 10 c0 	movl   $0xc010d35d,(%esp)
c01001b3:	e8 1e 16 00 00       	call   c01017d6 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001b8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001bc:	0f b7 d0             	movzwl %ax,%edx
c01001bf:	a1 40 ef 19 c0       	mov    0xc019ef40,%eax
c01001c4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001cc:	c7 04 24 6b d3 10 c0 	movl   $0xc010d36b,(%esp)
c01001d3:	e8 fe 15 00 00       	call   c01017d6 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001d8:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001dc:	0f b7 d0             	movzwl %ax,%edx
c01001df:	a1 40 ef 19 c0       	mov    0xc019ef40,%eax
c01001e4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001ec:	c7 04 24 79 d3 10 c0 	movl   $0xc010d379,(%esp)
c01001f3:	e8 de 15 00 00       	call   c01017d6 <cprintf>
    round ++;
c01001f8:	a1 40 ef 19 c0       	mov    0xc019ef40,%eax
c01001fd:	83 c0 01             	add    $0x1,%eax
c0100200:	a3 40 ef 19 c0       	mov    %eax,0xc019ef40
}
c0100205:	c9                   	leave  
c0100206:	c3                   	ret    

c0100207 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100207:	55                   	push   %ebp
c0100208:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010020a:	5d                   	pop    %ebp
c010020b:	c3                   	ret    

c010020c <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c010020c:	55                   	push   %ebp
c010020d:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c010020f:	5d                   	pop    %ebp
c0100210:	c3                   	ret    

c0100211 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
c0100214:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100217:	e8 25 ff ff ff       	call   c0100141 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c010021c:	c7 04 24 88 d3 10 c0 	movl   $0xc010d388,(%esp)
c0100223:	e8 ae 15 00 00       	call   c01017d6 <cprintf>
    lab1_switch_to_user();
c0100228:	e8 da ff ff ff       	call   c0100207 <lab1_switch_to_user>
    lab1_print_cur_status();
c010022d:	e8 0f ff ff ff       	call   c0100141 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100232:	c7 04 24 a8 d3 10 c0 	movl   $0xc010d3a8,(%esp)
c0100239:	e8 98 15 00 00       	call   c01017d6 <cprintf>
    lab1_switch_to_kernel();
c010023e:	e8 c9 ff ff ff       	call   c010020c <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100243:	e8 f9 fe ff ff       	call   c0100141 <lab1_print_cur_status>
}
c0100248:	c9                   	leave  
c0100249:	c3                   	ret    

c010024a <rb_node_create>:
#include <rb_tree.h>
#include <assert.h>

/* rb_node_create - create a new rb_node */
static inline rb_node *
rb_node_create(void) {
c010024a:	55                   	push   %ebp
c010024b:	89 e5                	mov    %esp,%ebp
c010024d:	83 ec 18             	sub    $0x18,%esp
    return kmalloc(sizeof(rb_node));
c0100250:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0100257:	e8 19 5e 00 00       	call   c0106075 <kmalloc>
}
c010025c:	c9                   	leave  
c010025d:	c3                   	ret    

c010025e <rb_tree_empty>:

/* rb_tree_empty - tests if tree is empty */
static inline bool
rb_tree_empty(rb_tree *tree) {
c010025e:	55                   	push   %ebp
c010025f:	89 e5                	mov    %esp,%ebp
c0100261:	83 ec 10             	sub    $0x10,%esp
    rb_node *nil = tree->nil, *root = tree->root;
c0100264:	8b 45 08             	mov    0x8(%ebp),%eax
c0100267:	8b 40 04             	mov    0x4(%eax),%eax
c010026a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010026d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100270:	8b 40 08             	mov    0x8(%eax),%eax
c0100273:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return root->left == nil;
c0100276:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100279:	8b 40 08             	mov    0x8(%eax),%eax
c010027c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010027f:	0f 94 c0             	sete   %al
c0100282:	0f b6 c0             	movzbl %al,%eax
}
c0100285:	c9                   	leave  
c0100286:	c3                   	ret    

c0100287 <rb_tree_create>:
 * Note that, root->left should always point to the node that is the root
 * of the tree. And nil points to a 'NULL' node which should always be
 * black and may have arbitrary children and parent node.
 * */
rb_tree *
rb_tree_create(int (*compare)(rb_node *node1, rb_node *node2)) {
c0100287:	55                   	push   %ebp
c0100288:	89 e5                	mov    %esp,%ebp
c010028a:	83 ec 28             	sub    $0x28,%esp
    assert(compare != NULL);
c010028d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100291:	75 24                	jne    c01002b7 <rb_tree_create+0x30>
c0100293:	c7 44 24 0c c8 d3 10 	movl   $0xc010d3c8,0xc(%esp)
c010029a:	c0 
c010029b:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c01002a2:	c0 
c01002a3:	c7 44 24 04 1f 00 00 	movl   $0x1f,0x4(%esp)
c01002aa:	00 
c01002ab:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c01002b2:	e8 a1 1f 00 00       	call   c0102258 <__panic>

    rb_tree *tree;
    rb_node *nil, *root;

    if ((tree = kmalloc(sizeof(rb_tree))) == NULL) {
c01002b7:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c01002be:	e8 b2 5d 00 00       	call   c0106075 <kmalloc>
c01002c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01002c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002ca:	75 05                	jne    c01002d1 <rb_tree_create+0x4a>
        goto bad_tree;
c01002cc:	e9 ad 00 00 00       	jmp    c010037e <rb_tree_create+0xf7>
    }

    tree->compare = compare;
c01002d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002d4:	8b 55 08             	mov    0x8(%ebp),%edx
c01002d7:	89 10                	mov    %edx,(%eax)

    if ((nil = rb_node_create()) == NULL) {
c01002d9:	e8 6c ff ff ff       	call   c010024a <rb_node_create>
c01002de:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01002e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01002e5:	75 05                	jne    c01002ec <rb_tree_create+0x65>
        goto bad_node_cleanup_tree;
c01002e7:	e9 87 00 00 00       	jmp    c0100373 <rb_tree_create+0xec>
    }

    nil->parent = nil->left = nil->right = nil;
c01002ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002f2:	89 50 0c             	mov    %edx,0xc(%eax)
c01002f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002f8:	8b 50 0c             	mov    0xc(%eax),%edx
c01002fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002fe:	89 50 08             	mov    %edx,0x8(%eax)
c0100301:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100304:	8b 50 08             	mov    0x8(%eax),%edx
c0100307:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010030a:	89 50 04             	mov    %edx,0x4(%eax)
    nil->red = 0;
c010030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100310:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tree->nil = nil;
c0100316:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100319:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010031c:	89 50 04             	mov    %edx,0x4(%eax)

    if ((root = rb_node_create()) == NULL) {
c010031f:	e8 26 ff ff ff       	call   c010024a <rb_node_create>
c0100324:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100327:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010032b:	75 0e                	jne    c010033b <rb_tree_create+0xb4>
        goto bad_node_cleanup_nil;
c010032d:	90                   	nop
    root->red = 0;
    tree->root = root;
    return tree;

bad_node_cleanup_nil:
    kfree(nil);
c010032e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100331:	89 04 24             	mov    %eax,(%esp)
c0100334:	e8 57 5d 00 00       	call   c0106090 <kfree>
c0100339:	eb 38                	jmp    c0100373 <rb_tree_create+0xec>

    if ((root = rb_node_create()) == NULL) {
        goto bad_node_cleanup_nil;
    }

    root->parent = root->left = root->right = nil;
c010033b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010033e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100341:	89 50 0c             	mov    %edx,0xc(%eax)
c0100344:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100347:	8b 50 0c             	mov    0xc(%eax),%edx
c010034a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010034d:	89 50 08             	mov    %edx,0x8(%eax)
c0100350:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100353:	8b 50 08             	mov    0x8(%eax),%edx
c0100356:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100359:	89 50 04             	mov    %edx,0x4(%eax)
    root->red = 0;
c010035c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010035f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tree->root = root;
c0100365:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100368:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010036b:	89 50 08             	mov    %edx,0x8(%eax)
    return tree;
c010036e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100371:	eb 10                	jmp    c0100383 <rb_tree_create+0xfc>

bad_node_cleanup_nil:
    kfree(nil);
bad_node_cleanup_tree:
    kfree(tree);
c0100373:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100376:	89 04 24             	mov    %eax,(%esp)
c0100379:	e8 12 5d 00 00       	call   c0106090 <kfree>
bad_tree:
    return NULL;
c010037e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100383:	c9                   	leave  
c0100384:	c3                   	ret    

c0100385 <rb_left_rotate>:
    y->_left = x;                                               \
    x->parent = y;                                              \
    assert(!(nil->red));                                        \
}

FUNC_ROTATE(rb_left_rotate, left, right);
c0100385:	55                   	push   %ebp
c0100386:	89 e5                	mov    %esp,%ebp
c0100388:	83 ec 28             	sub    $0x28,%esp
c010038b:	8b 45 08             	mov    0x8(%ebp),%eax
c010038e:	8b 40 04             	mov    0x4(%eax),%eax
c0100391:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100394:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100397:	8b 40 0c             	mov    0xc(%eax),%eax
c010039a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010039d:	8b 45 08             	mov    0x8(%ebp),%eax
c01003a0:	8b 40 08             	mov    0x8(%eax),%eax
c01003a3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01003a6:	74 10                	je     c01003b8 <rb_left_rotate+0x33>
c01003a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01003ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01003ae:	74 08                	je     c01003b8 <rb_left_rotate+0x33>
c01003b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01003b6:	75 24                	jne    c01003dc <rb_left_rotate+0x57>
c01003b8:	c7 44 24 0c 04 d4 10 	movl   $0xc010d404,0xc(%esp)
c01003bf:	c0 
c01003c0:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c01003c7:	c0 
c01003c8:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01003cf:	00 
c01003d0:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c01003d7:	e8 7c 1e 00 00       	call   c0102258 <__panic>
c01003dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003df:	8b 50 08             	mov    0x8(%eax),%edx
c01003e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01003e5:	89 50 0c             	mov    %edx,0xc(%eax)
c01003e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003eb:	8b 40 08             	mov    0x8(%eax),%eax
c01003ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01003f1:	74 0c                	je     c01003ff <rb_left_rotate+0x7a>
c01003f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003f6:	8b 40 08             	mov    0x8(%eax),%eax
c01003f9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01003fc:	89 50 04             	mov    %edx,0x4(%eax)
c01003ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100402:	8b 50 04             	mov    0x4(%eax),%edx
c0100405:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100408:	89 50 04             	mov    %edx,0x4(%eax)
c010040b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010040e:	8b 40 04             	mov    0x4(%eax),%eax
c0100411:	8b 40 08             	mov    0x8(%eax),%eax
c0100414:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100417:	75 0e                	jne    c0100427 <rb_left_rotate+0xa2>
c0100419:	8b 45 0c             	mov    0xc(%ebp),%eax
c010041c:	8b 40 04             	mov    0x4(%eax),%eax
c010041f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100422:	89 50 08             	mov    %edx,0x8(%eax)
c0100425:	eb 0c                	jmp    c0100433 <rb_left_rotate+0xae>
c0100427:	8b 45 0c             	mov    0xc(%ebp),%eax
c010042a:	8b 40 04             	mov    0x4(%eax),%eax
c010042d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100430:	89 50 0c             	mov    %edx,0xc(%eax)
c0100433:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100436:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100439:	89 50 08             	mov    %edx,0x8(%eax)
c010043c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010043f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100442:	89 50 04             	mov    %edx,0x4(%eax)
c0100445:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100448:	8b 00                	mov    (%eax),%eax
c010044a:	85 c0                	test   %eax,%eax
c010044c:	74 24                	je     c0100472 <rb_left_rotate+0xed>
c010044e:	c7 44 24 0c 2c d4 10 	movl   $0xc010d42c,0xc(%esp)
c0100455:	c0 
c0100456:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c010045d:	c0 
c010045e:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0100465:	00 
c0100466:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c010046d:	e8 e6 1d 00 00       	call   c0102258 <__panic>
c0100472:	c9                   	leave  
c0100473:	c3                   	ret    

c0100474 <rb_right_rotate>:
FUNC_ROTATE(rb_right_rotate, right, left);
c0100474:	55                   	push   %ebp
c0100475:	89 e5                	mov    %esp,%ebp
c0100477:	83 ec 28             	sub    $0x28,%esp
c010047a:	8b 45 08             	mov    0x8(%ebp),%eax
c010047d:	8b 40 04             	mov    0x4(%eax),%eax
c0100480:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100483:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100486:	8b 40 08             	mov    0x8(%eax),%eax
c0100489:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010048c:	8b 45 08             	mov    0x8(%ebp),%eax
c010048f:	8b 40 08             	mov    0x8(%eax),%eax
c0100492:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100495:	74 10                	je     c01004a7 <rb_right_rotate+0x33>
c0100497:	8b 45 0c             	mov    0xc(%ebp),%eax
c010049a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010049d:	74 08                	je     c01004a7 <rb_right_rotate+0x33>
c010049f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004a2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01004a5:	75 24                	jne    c01004cb <rb_right_rotate+0x57>
c01004a7:	c7 44 24 0c 04 d4 10 	movl   $0xc010d404,0xc(%esp)
c01004ae:	c0 
c01004af:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c01004b6:	c0 
c01004b7:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01004be:	00 
c01004bf:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c01004c6:	e8 8d 1d 00 00       	call   c0102258 <__panic>
c01004cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004ce:	8b 50 0c             	mov    0xc(%eax),%edx
c01004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004d4:	89 50 08             	mov    %edx,0x8(%eax)
c01004d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004da:	8b 40 0c             	mov    0xc(%eax),%eax
c01004dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01004e0:	74 0c                	je     c01004ee <rb_right_rotate+0x7a>
c01004e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e5:	8b 40 0c             	mov    0xc(%eax),%eax
c01004e8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01004eb:	89 50 04             	mov    %edx,0x4(%eax)
c01004ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004f1:	8b 50 04             	mov    0x4(%eax),%edx
c01004f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004f7:	89 50 04             	mov    %edx,0x4(%eax)
c01004fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004fd:	8b 40 04             	mov    0x4(%eax),%eax
c0100500:	8b 40 0c             	mov    0xc(%eax),%eax
c0100503:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100506:	75 0e                	jne    c0100516 <rb_right_rotate+0xa2>
c0100508:	8b 45 0c             	mov    0xc(%ebp),%eax
c010050b:	8b 40 04             	mov    0x4(%eax),%eax
c010050e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100511:	89 50 0c             	mov    %edx,0xc(%eax)
c0100514:	eb 0c                	jmp    c0100522 <rb_right_rotate+0xae>
c0100516:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100519:	8b 40 04             	mov    0x4(%eax),%eax
c010051c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010051f:	89 50 08             	mov    %edx,0x8(%eax)
c0100522:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100525:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100528:	89 50 0c             	mov    %edx,0xc(%eax)
c010052b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010052e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100531:	89 50 04             	mov    %edx,0x4(%eax)
c0100534:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100537:	8b 00                	mov    (%eax),%eax
c0100539:	85 c0                	test   %eax,%eax
c010053b:	74 24                	je     c0100561 <rb_right_rotate+0xed>
c010053d:	c7 44 24 0c 2c d4 10 	movl   $0xc010d42c,0xc(%esp)
c0100544:	c0 
c0100545:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c010054c:	c0 
c010054d:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0100554:	00 
c0100555:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c010055c:	e8 f7 1c 00 00       	call   c0102258 <__panic>
c0100561:	c9                   	leave  
c0100562:	c3                   	ret    

c0100563 <rb_insert_binary>:
 * rb_insert_binary - insert @node to red-black @tree as if it were
 * a regular binary tree. This function is only intended to be called
 * by function rb_insert.
 * */
static inline void
rb_insert_binary(rb_tree *tree, rb_node *node) {
c0100563:	55                   	push   %ebp
c0100564:	89 e5                	mov    %esp,%ebp
c0100566:	83 ec 38             	sub    $0x38,%esp
    rb_node *x, *y, *z = node, *nil = tree->nil, *root = tree->root;
c0100569:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010056f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100572:	8b 40 04             	mov    0x4(%eax),%eax
c0100575:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100578:	8b 45 08             	mov    0x8(%ebp),%eax
c010057b:	8b 40 08             	mov    0x8(%eax),%eax
c010057e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    z->left = z->right = nil;
c0100581:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100584:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100587:	89 50 0c             	mov    %edx,0xc(%eax)
c010058a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010058d:	8b 50 0c             	mov    0xc(%eax),%edx
c0100590:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100593:	89 50 08             	mov    %edx,0x8(%eax)
    y = root, x = y->left;
c0100596:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100599:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010059c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010059f:	8b 40 08             	mov    0x8(%eax),%eax
c01005a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (x != nil) {
c01005a5:	eb 2f                	jmp    c01005d6 <rb_insert_binary+0x73>
        y = x;
c01005a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        x = (COMPARE(tree, x, node) > 0) ? x->left : x->right;
c01005ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01005b0:	8b 00                	mov    (%eax),%eax
c01005b2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01005b5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01005b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01005bc:	89 14 24             	mov    %edx,(%esp)
c01005bf:	ff d0                	call   *%eax
c01005c1:	85 c0                	test   %eax,%eax
c01005c3:	7e 08                	jle    c01005cd <rb_insert_binary+0x6a>
c01005c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005c8:	8b 40 08             	mov    0x8(%eax),%eax
c01005cb:	eb 06                	jmp    c01005d3 <rb_insert_binary+0x70>
c01005cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005d0:	8b 40 0c             	mov    0xc(%eax),%eax
c01005d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
rb_insert_binary(rb_tree *tree, rb_node *node) {
    rb_node *x, *y, *z = node, *nil = tree->nil, *root = tree->root;

    z->left = z->right = nil;
    y = root, x = y->left;
    while (x != nil) {
c01005d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005d9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01005dc:	75 c9                	jne    c01005a7 <rb_insert_binary+0x44>
        y = x;
        x = (COMPARE(tree, x, node) > 0) ? x->left : x->right;
    }
    z->parent = y;
c01005de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01005e1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005e4:	89 50 04             	mov    %edx,0x4(%eax)
    if (y == root || COMPARE(tree, y, z) > 0) {
c01005e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ea:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c01005ed:	74 18                	je     c0100607 <rb_insert_binary+0xa4>
c01005ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01005f2:	8b 00                	mov    (%eax),%eax
c01005f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01005f7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01005fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005fe:	89 14 24             	mov    %edx,(%esp)
c0100601:	ff d0                	call   *%eax
c0100603:	85 c0                	test   %eax,%eax
c0100605:	7e 0b                	jle    c0100612 <rb_insert_binary+0xaf>
        y->left = z;
c0100607:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010060a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010060d:	89 50 08             	mov    %edx,0x8(%eax)
c0100610:	eb 09                	jmp    c010061b <rb_insert_binary+0xb8>
    }
    else {
        y->right = z;
c0100612:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100615:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100618:	89 50 0c             	mov    %edx,0xc(%eax)
    }
}
c010061b:	c9                   	leave  
c010061c:	c3                   	ret    

c010061d <rb_insert>:

/* rb_insert - insert a node to red-black tree */
void
rb_insert(rb_tree *tree, rb_node *node) {
c010061d:	55                   	push   %ebp
c010061e:	89 e5                	mov    %esp,%ebp
c0100620:	83 ec 28             	sub    $0x28,%esp
    rb_insert_binary(tree, node);
c0100623:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100626:	89 44 24 04          	mov    %eax,0x4(%esp)
c010062a:	8b 45 08             	mov    0x8(%ebp),%eax
c010062d:	89 04 24             	mov    %eax,(%esp)
c0100630:	e8 2e ff ff ff       	call   c0100563 <rb_insert_binary>
    node->red = 1;
c0100635:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100638:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    rb_node *x = node, *y;
c010063e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100641:	89 45 f4             	mov    %eax,-0xc(%ebp)
            x->parent->parent->red = 1;                         \
            rb_##_right##_rotate(tree, x->parent->parent);      \
        }                                                       \
    } while (0)

    while (x->parent->red) {
c0100644:	e9 6e 01 00 00       	jmp    c01007b7 <rb_insert+0x19a>
        if (x->parent == x->parent->parent->left) {
c0100649:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010064c:	8b 50 04             	mov    0x4(%eax),%edx
c010064f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100652:	8b 40 04             	mov    0x4(%eax),%eax
c0100655:	8b 40 04             	mov    0x4(%eax),%eax
c0100658:	8b 40 08             	mov    0x8(%eax),%eax
c010065b:	39 c2                	cmp    %eax,%edx
c010065d:	0f 85 ae 00 00 00    	jne    c0100711 <rb_insert+0xf4>
            RB_INSERT_SUB(left, right);
c0100663:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100666:	8b 40 04             	mov    0x4(%eax),%eax
c0100669:	8b 40 04             	mov    0x4(%eax),%eax
c010066c:	8b 40 0c             	mov    0xc(%eax),%eax
c010066f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100672:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100675:	8b 00                	mov    (%eax),%eax
c0100677:	85 c0                	test   %eax,%eax
c0100679:	74 35                	je     c01006b0 <rb_insert+0x93>
c010067b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010067e:	8b 40 04             	mov    0x4(%eax),%eax
c0100681:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100687:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010068a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100690:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100693:	8b 40 04             	mov    0x4(%eax),%eax
c0100696:	8b 40 04             	mov    0x4(%eax),%eax
c0100699:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010069f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006a2:	8b 40 04             	mov    0x4(%eax),%eax
c01006a5:	8b 40 04             	mov    0x4(%eax),%eax
c01006a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01006ab:	e9 07 01 00 00       	jmp    c01007b7 <rb_insert+0x19a>
c01006b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006b3:	8b 40 04             	mov    0x4(%eax),%eax
c01006b6:	8b 40 0c             	mov    0xc(%eax),%eax
c01006b9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01006bc:	75 1b                	jne    c01006d9 <rb_insert+0xbc>
c01006be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006c1:	8b 40 04             	mov    0x4(%eax),%eax
c01006c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01006c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01006d1:	89 04 24             	mov    %eax,(%esp)
c01006d4:	e8 ac fc ff ff       	call   c0100385 <rb_left_rotate>
c01006d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006dc:	8b 40 04             	mov    0x4(%eax),%eax
c01006df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c01006e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006e8:	8b 40 04             	mov    0x4(%eax),%eax
c01006eb:	8b 40 04             	mov    0x4(%eax),%eax
c01006ee:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01006f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006f7:	8b 40 04             	mov    0x4(%eax),%eax
c01006fa:	8b 40 04             	mov    0x4(%eax),%eax
c01006fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100701:	8b 45 08             	mov    0x8(%ebp),%eax
c0100704:	89 04 24             	mov    %eax,(%esp)
c0100707:	e8 68 fd ff ff       	call   c0100474 <rb_right_rotate>
c010070c:	e9 a6 00 00 00       	jmp    c01007b7 <rb_insert+0x19a>
        }
        else {
            RB_INSERT_SUB(right, left);
c0100711:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100714:	8b 40 04             	mov    0x4(%eax),%eax
c0100717:	8b 40 04             	mov    0x4(%eax),%eax
c010071a:	8b 40 08             	mov    0x8(%eax),%eax
c010071d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100720:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100723:	8b 00                	mov    (%eax),%eax
c0100725:	85 c0                	test   %eax,%eax
c0100727:	74 32                	je     c010075b <rb_insert+0x13e>
c0100729:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010072c:	8b 40 04             	mov    0x4(%eax),%eax
c010072f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100735:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100738:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010073e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100741:	8b 40 04             	mov    0x4(%eax),%eax
c0100744:	8b 40 04             	mov    0x4(%eax),%eax
c0100747:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010074d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100750:	8b 40 04             	mov    0x4(%eax),%eax
c0100753:	8b 40 04             	mov    0x4(%eax),%eax
c0100756:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100759:	eb 5c                	jmp    c01007b7 <rb_insert+0x19a>
c010075b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010075e:	8b 40 04             	mov    0x4(%eax),%eax
c0100761:	8b 40 08             	mov    0x8(%eax),%eax
c0100764:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100767:	75 1b                	jne    c0100784 <rb_insert+0x167>
c0100769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010076c:	8b 40 04             	mov    0x4(%eax),%eax
c010076f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100772:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100775:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100779:	8b 45 08             	mov    0x8(%ebp),%eax
c010077c:	89 04 24             	mov    %eax,(%esp)
c010077f:	e8 f0 fc ff ff       	call   c0100474 <rb_right_rotate>
c0100784:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100787:	8b 40 04             	mov    0x4(%eax),%eax
c010078a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100790:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100793:	8b 40 04             	mov    0x4(%eax),%eax
c0100796:	8b 40 04             	mov    0x4(%eax),%eax
c0100799:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010079f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007a2:	8b 40 04             	mov    0x4(%eax),%eax
c01007a5:	8b 40 04             	mov    0x4(%eax),%eax
c01007a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01007af:	89 04 24             	mov    %eax,(%esp)
c01007b2:	e8 ce fb ff ff       	call   c0100385 <rb_left_rotate>
            x->parent->parent->red = 1;                         \
            rb_##_right##_rotate(tree, x->parent->parent);      \
        }                                                       \
    } while (0)

    while (x->parent->red) {
c01007b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007ba:	8b 40 04             	mov    0x4(%eax),%eax
c01007bd:	8b 00                	mov    (%eax),%eax
c01007bf:	85 c0                	test   %eax,%eax
c01007c1:	0f 85 82 fe ff ff    	jne    c0100649 <rb_insert+0x2c>
        }
        else {
            RB_INSERT_SUB(right, left);
        }
    }
    tree->root->left->red = 0;
c01007c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01007ca:	8b 40 08             	mov    0x8(%eax),%eax
c01007cd:	8b 40 08             	mov    0x8(%eax),%eax
c01007d0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    assert(!(tree->nil->red) && !(tree->root->red));
c01007d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01007d9:	8b 40 04             	mov    0x4(%eax),%eax
c01007dc:	8b 00                	mov    (%eax),%eax
c01007de:	85 c0                	test   %eax,%eax
c01007e0:	75 0c                	jne    c01007ee <rb_insert+0x1d1>
c01007e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01007e5:	8b 40 08             	mov    0x8(%eax),%eax
c01007e8:	8b 00                	mov    (%eax),%eax
c01007ea:	85 c0                	test   %eax,%eax
c01007ec:	74 24                	je     c0100812 <rb_insert+0x1f5>
c01007ee:	c7 44 24 0c 38 d4 10 	movl   $0xc010d438,0xc(%esp)
c01007f5:	c0 
c01007f6:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c01007fd:	c0 
c01007fe:	c7 44 24 04 a9 00 00 	movl   $0xa9,0x4(%esp)
c0100805:	00 
c0100806:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c010080d:	e8 46 1a 00 00       	call   c0102258 <__panic>

#undef RB_INSERT_SUB
}
c0100812:	c9                   	leave  
c0100813:	c3                   	ret    

c0100814 <rb_tree_successor>:
 * rb_tree_successor - returns the successor of @node, or nil
 * if no successor exists. Make sure that @node must belong to @tree,
 * and this function should only be called by rb_node_prev.
 * */
static inline rb_node *
rb_tree_successor(rb_tree *tree, rb_node *node) {
c0100814:	55                   	push   %ebp
c0100815:	89 e5                	mov    %esp,%ebp
c0100817:	83 ec 10             	sub    $0x10,%esp
    rb_node *x = node, *y, *nil = tree->nil;
c010081a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010081d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100820:	8b 45 08             	mov    0x8(%ebp),%eax
c0100823:	8b 40 04             	mov    0x4(%eax),%eax
c0100826:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ((y = x->right) != nil) {
c0100829:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010082c:	8b 40 0c             	mov    0xc(%eax),%eax
c010082f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100832:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100835:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100838:	74 1b                	je     c0100855 <rb_tree_successor+0x41>
        while (y->left != nil) {
c010083a:	eb 09                	jmp    c0100845 <rb_tree_successor+0x31>
            y = y->left;
c010083c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010083f:	8b 40 08             	mov    0x8(%eax),%eax
c0100842:	89 45 f8             	mov    %eax,-0x8(%ebp)
static inline rb_node *
rb_tree_successor(rb_tree *tree, rb_node *node) {
    rb_node *x = node, *y, *nil = tree->nil;

    if ((y = x->right) != nil) {
        while (y->left != nil) {
c0100845:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100848:	8b 40 08             	mov    0x8(%eax),%eax
c010084b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010084e:	75 ec                	jne    c010083c <rb_tree_successor+0x28>
            y = y->left;
        }
        return y;
c0100850:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100853:	eb 38                	jmp    c010088d <rb_tree_successor+0x79>
    }
    else {
        y = x->parent;
c0100855:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100858:	8b 40 04             	mov    0x4(%eax),%eax
c010085b:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->right) {
c010085e:	eb 0f                	jmp    c010086f <rb_tree_successor+0x5b>
            x = y, y = y->parent;
c0100860:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100863:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100866:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100869:	8b 40 04             	mov    0x4(%eax),%eax
c010086c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        return y;
    }
    else {
        y = x->parent;
        while (x == y->right) {
c010086f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100872:	8b 40 0c             	mov    0xc(%eax),%eax
c0100875:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100878:	74 e6                	je     c0100860 <rb_tree_successor+0x4c>
            x = y, y = y->parent;
        }
        if (y == tree->root) {
c010087a:	8b 45 08             	mov    0x8(%ebp),%eax
c010087d:	8b 40 08             	mov    0x8(%eax),%eax
c0100880:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0100883:	75 05                	jne    c010088a <rb_tree_successor+0x76>
            return nil;
c0100885:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100888:	eb 03                	jmp    c010088d <rb_tree_successor+0x79>
        }
        return y;
c010088a:	8b 45 f8             	mov    -0x8(%ebp),%eax
    }
}
c010088d:	c9                   	leave  
c010088e:	c3                   	ret    

c010088f <rb_tree_predecessor>:
/* *
 * rb_tree_predecessor - returns the predecessor of @node, or nil
 * if no predecessor exists, likes rb_tree_successor.
 * */
static inline rb_node *
rb_tree_predecessor(rb_tree *tree, rb_node *node) {
c010088f:	55                   	push   %ebp
c0100890:	89 e5                	mov    %esp,%ebp
c0100892:	83 ec 10             	sub    $0x10,%esp
    rb_node *x = node, *y, *nil = tree->nil;
c0100895:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100898:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010089b:	8b 45 08             	mov    0x8(%ebp),%eax
c010089e:	8b 40 04             	mov    0x4(%eax),%eax
c01008a1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ((y = x->left) != nil) {
c01008a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01008a7:	8b 40 08             	mov    0x8(%eax),%eax
c01008aa:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01008ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01008b3:	74 1b                	je     c01008d0 <rb_tree_predecessor+0x41>
        while (y->right != nil) {
c01008b5:	eb 09                	jmp    c01008c0 <rb_tree_predecessor+0x31>
            y = y->right;
c01008b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008ba:	8b 40 0c             	mov    0xc(%eax),%eax
c01008bd:	89 45 f8             	mov    %eax,-0x8(%ebp)
static inline rb_node *
rb_tree_predecessor(rb_tree *tree, rb_node *node) {
    rb_node *x = node, *y, *nil = tree->nil;

    if ((y = x->left) != nil) {
        while (y->right != nil) {
c01008c0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008c3:	8b 40 0c             	mov    0xc(%eax),%eax
c01008c6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01008c9:	75 ec                	jne    c01008b7 <rb_tree_predecessor+0x28>
            y = y->right;
        }
        return y;
c01008cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008ce:	eb 38                	jmp    c0100908 <rb_tree_predecessor+0x79>
    }
    else {
        y = x->parent;
c01008d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01008d3:	8b 40 04             	mov    0x4(%eax),%eax
c01008d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->left) {
c01008d9:	eb 1f                	jmp    c01008fa <rb_tree_predecessor+0x6b>
            if (y == tree->root) {
c01008db:	8b 45 08             	mov    0x8(%ebp),%eax
c01008de:	8b 40 08             	mov    0x8(%eax),%eax
c01008e1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01008e4:	75 05                	jne    c01008eb <rb_tree_predecessor+0x5c>
                return nil;
c01008e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008e9:	eb 1d                	jmp    c0100908 <rb_tree_predecessor+0x79>
            }
            x = y, y = y->parent;
c01008eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01008f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008f4:	8b 40 04             	mov    0x4(%eax),%eax
c01008f7:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        return y;
    }
    else {
        y = x->parent;
        while (x == y->left) {
c01008fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008fd:	8b 40 08             	mov    0x8(%eax),%eax
c0100900:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100903:	74 d6                	je     c01008db <rb_tree_predecessor+0x4c>
            if (y == tree->root) {
                return nil;
            }
            x = y, y = y->parent;
        }
        return y;
c0100905:	8b 45 f8             	mov    -0x8(%ebp),%eax
    }
}
c0100908:	c9                   	leave  
c0100909:	c3                   	ret    

c010090a <rb_search>:
 * rb_search - returns a node with value 'equal' to @key (according to
 * function @compare). If there're multiple nodes with value 'equal' to @key,
 * the functions returns the one highest in the tree.
 * */
rb_node *
rb_search(rb_tree *tree, int (*compare)(rb_node *node, void *key), void *key) {
c010090a:	55                   	push   %ebp
c010090b:	89 e5                	mov    %esp,%ebp
c010090d:	83 ec 28             	sub    $0x28,%esp
    rb_node *nil = tree->nil, *node = tree->root->left;
c0100910:	8b 45 08             	mov    0x8(%ebp),%eax
c0100913:	8b 40 04             	mov    0x4(%eax),%eax
c0100916:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100919:	8b 45 08             	mov    0x8(%ebp),%eax
c010091c:	8b 40 08             	mov    0x8(%eax),%eax
c010091f:	8b 40 08             	mov    0x8(%eax),%eax
c0100922:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int r;
    while (node != nil && (r = compare(node, key)) != 0) {
c0100925:	eb 17                	jmp    c010093e <rb_search+0x34>
        node = (r > 0) ? node->left : node->right;
c0100927:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010092b:	7e 08                	jle    c0100935 <rb_search+0x2b>
c010092d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100930:	8b 40 08             	mov    0x8(%eax),%eax
c0100933:	eb 06                	jmp    c010093b <rb_search+0x31>
c0100935:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100938:	8b 40 0c             	mov    0xc(%eax),%eax
c010093b:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * */
rb_node *
rb_search(rb_tree *tree, int (*compare)(rb_node *node, void *key), void *key) {
    rb_node *nil = tree->nil, *node = tree->root->left;
    int r;
    while (node != nil && (r = compare(node, key)) != 0) {
c010093e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100941:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100944:	74 1b                	je     c0100961 <rb_search+0x57>
c0100946:	8b 45 10             	mov    0x10(%ebp),%eax
c0100949:	89 44 24 04          	mov    %eax,0x4(%esp)
c010094d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100950:	89 04 24             	mov    %eax,(%esp)
c0100953:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100956:	ff d0                	call   *%eax
c0100958:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010095b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010095f:	75 c6                	jne    c0100927 <rb_search+0x1d>
        node = (r > 0) ? node->left : node->right;
    }
    return (node != nil) ? node : NULL;
c0100961:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100964:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100967:	74 05                	je     c010096e <rb_search+0x64>
c0100969:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010096c:	eb 05                	jmp    c0100973 <rb_search+0x69>
c010096e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100973:	c9                   	leave  
c0100974:	c3                   	ret    

c0100975 <rb_delete_fixup>:
/* *
 * rb_delete_fixup - performs rotations and changes colors to restore
 * red-black properties after a node is deleted.
 * */
static void
rb_delete_fixup(rb_tree *tree, rb_node *node) {
c0100975:	55                   	push   %ebp
c0100976:	89 e5                	mov    %esp,%ebp
c0100978:	83 ec 28             	sub    $0x28,%esp
    rb_node *x = node, *w, *root = tree->root->left;
c010097b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010097e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100981:	8b 45 08             	mov    0x8(%ebp),%eax
c0100984:	8b 40 08             	mov    0x8(%eax),%eax
c0100987:	8b 40 08             	mov    0x8(%eax),%eax
c010098a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            rb_##_left##_rotate(tree, x->parent);               \
            x = root;                                           \
        }                                                       \
    } while (0)

    while (x != root && !x->red) {
c010098d:	e9 06 02 00 00       	jmp    c0100b98 <rb_delete_fixup+0x223>
        if (x == x->parent->left) {
c0100992:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100995:	8b 40 04             	mov    0x4(%eax),%eax
c0100998:	8b 40 08             	mov    0x8(%eax),%eax
c010099b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010099e:	0f 85 fe 00 00 00    	jne    c0100aa2 <rb_delete_fixup+0x12d>
            RB_DELETE_FIXUP_SUB(left, right);
c01009a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a7:	8b 40 04             	mov    0x4(%eax),%eax
c01009aa:	8b 40 0c             	mov    0xc(%eax),%eax
c01009ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01009b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01009b3:	8b 00                	mov    (%eax),%eax
c01009b5:	85 c0                	test   %eax,%eax
c01009b7:	74 36                	je     c01009ef <rb_delete_fixup+0x7a>
c01009b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01009bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c01009c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009c5:	8b 40 04             	mov    0x4(%eax),%eax
c01009c8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01009ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009d1:	8b 40 04             	mov    0x4(%eax),%eax
c01009d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01009d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01009db:	89 04 24             	mov    %eax,(%esp)
c01009de:	e8 a2 f9 ff ff       	call   c0100385 <rb_left_rotate>
c01009e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009e6:	8b 40 04             	mov    0x4(%eax),%eax
c01009e9:	8b 40 0c             	mov    0xc(%eax),%eax
c01009ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01009ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01009f2:	8b 40 08             	mov    0x8(%eax),%eax
c01009f5:	8b 00                	mov    (%eax),%eax
c01009f7:	85 c0                	test   %eax,%eax
c01009f9:	75 23                	jne    c0100a1e <rb_delete_fixup+0xa9>
c01009fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01009fe:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a01:	8b 00                	mov    (%eax),%eax
c0100a03:	85 c0                	test   %eax,%eax
c0100a05:	75 17                	jne    c0100a1e <rb_delete_fixup+0xa9>
c0100a07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a0a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100a10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a13:	8b 40 04             	mov    0x4(%eax),%eax
c0100a16:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100a19:	e9 7a 01 00 00       	jmp    c0100b98 <rb_delete_fixup+0x223>
c0100a1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a21:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a24:	8b 00                	mov    (%eax),%eax
c0100a26:	85 c0                	test   %eax,%eax
c0100a28:	75 33                	jne    c0100a5d <rb_delete_fixup+0xe8>
c0100a2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a2d:	8b 40 08             	mov    0x8(%eax),%eax
c0100a30:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100a36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a39:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100a3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a42:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a46:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a49:	89 04 24             	mov    %eax,(%esp)
c0100a4c:	e8 23 fa ff ff       	call   c0100474 <rb_right_rotate>
c0100a51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a54:	8b 40 04             	mov    0x4(%eax),%eax
c0100a57:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100a5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a60:	8b 40 04             	mov    0x4(%eax),%eax
c0100a63:	8b 10                	mov    (%eax),%edx
c0100a65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a68:	89 10                	mov    %edx,(%eax)
c0100a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a6d:	8b 40 04             	mov    0x4(%eax),%eax
c0100a70:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100a76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a79:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a85:	8b 40 04             	mov    0x4(%eax),%eax
c0100a88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a8f:	89 04 24             	mov    %eax,(%esp)
c0100a92:	e8 ee f8 ff ff       	call   c0100385 <rb_left_rotate>
c0100a97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100a9d:	e9 f6 00 00 00       	jmp    c0100b98 <rb_delete_fixup+0x223>
        }
        else {
            RB_DELETE_FIXUP_SUB(right, left);
c0100aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aa5:	8b 40 04             	mov    0x4(%eax),%eax
c0100aa8:	8b 40 08             	mov    0x8(%eax),%eax
c0100aab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100aae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100ab1:	8b 00                	mov    (%eax),%eax
c0100ab3:	85 c0                	test   %eax,%eax
c0100ab5:	74 36                	je     c0100aed <rb_delete_fixup+0x178>
c0100ab7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100aba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100ac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ac3:	8b 40 04             	mov    0x4(%eax),%eax
c0100ac6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100acf:	8b 40 04             	mov    0x4(%eax),%eax
c0100ad2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ad6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ad9:	89 04 24             	mov    %eax,(%esp)
c0100adc:	e8 93 f9 ff ff       	call   c0100474 <rb_right_rotate>
c0100ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ae4:	8b 40 04             	mov    0x4(%eax),%eax
c0100ae7:	8b 40 08             	mov    0x8(%eax),%eax
c0100aea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100aed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100af0:	8b 40 0c             	mov    0xc(%eax),%eax
c0100af3:	8b 00                	mov    (%eax),%eax
c0100af5:	85 c0                	test   %eax,%eax
c0100af7:	75 20                	jne    c0100b19 <rb_delete_fixup+0x1a4>
c0100af9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100afc:	8b 40 08             	mov    0x8(%eax),%eax
c0100aff:	8b 00                	mov    (%eax),%eax
c0100b01:	85 c0                	test   %eax,%eax
c0100b03:	75 14                	jne    c0100b19 <rb_delete_fixup+0x1a4>
c0100b05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b08:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b11:	8b 40 04             	mov    0x4(%eax),%eax
c0100b14:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100b17:	eb 7f                	jmp    c0100b98 <rb_delete_fixup+0x223>
c0100b19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b1c:	8b 40 08             	mov    0x8(%eax),%eax
c0100b1f:	8b 00                	mov    (%eax),%eax
c0100b21:	85 c0                	test   %eax,%eax
c0100b23:	75 33                	jne    c0100b58 <rb_delete_fixup+0x1e3>
c0100b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b28:	8b 40 0c             	mov    0xc(%eax),%eax
c0100b2b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b34:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100b3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b3d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b41:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b44:	89 04 24             	mov    %eax,(%esp)
c0100b47:	e8 39 f8 ff ff       	call   c0100385 <rb_left_rotate>
c0100b4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b4f:	8b 40 04             	mov    0x4(%eax),%eax
c0100b52:	8b 40 08             	mov    0x8(%eax),%eax
c0100b55:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b5b:	8b 40 04             	mov    0x4(%eax),%eax
c0100b5e:	8b 10                	mov    (%eax),%edx
c0100b60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b63:	89 10                	mov    %edx,(%eax)
c0100b65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b68:	8b 40 04             	mov    0x4(%eax),%eax
c0100b6b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b74:	8b 40 08             	mov    0x8(%eax),%eax
c0100b77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b80:	8b 40 04             	mov    0x4(%eax),%eax
c0100b83:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b87:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b8a:	89 04 24             	mov    %eax,(%esp)
c0100b8d:	e8 e2 f8 ff ff       	call   c0100474 <rb_right_rotate>
c0100b92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100b95:	89 45 f4             	mov    %eax,-0xc(%ebp)
            rb_##_left##_rotate(tree, x->parent);               \
            x = root;                                           \
        }                                                       \
    } while (0)

    while (x != root && !x->red) {
c0100b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b9b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100b9e:	74 0d                	je     c0100bad <rb_delete_fixup+0x238>
c0100ba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba3:	8b 00                	mov    (%eax),%eax
c0100ba5:	85 c0                	test   %eax,%eax
c0100ba7:	0f 84 e5 fd ff ff    	je     c0100992 <rb_delete_fixup+0x1d>
        }
        else {
            RB_DELETE_FIXUP_SUB(right, left);
        }
    }
    x->red = 0;
c0100bad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bb0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

#undef RB_DELETE_FIXUP_SUB
}
c0100bb6:	c9                   	leave  
c0100bb7:	c3                   	ret    

c0100bb8 <rb_delete>:
/* *
 * rb_delete - deletes @node from @tree, and calls rb_delete_fixup to
 * restore red-black properties.
 * */
void
rb_delete(rb_tree *tree, rb_node *node) {
c0100bb8:	55                   	push   %ebp
c0100bb9:	89 e5                	mov    %esp,%ebp
c0100bbb:	83 ec 38             	sub    $0x38,%esp
    rb_node *x, *y, *z = node;
c0100bbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100bc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    rb_node *nil = tree->nil, *root = tree->root;
c0100bc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bc7:	8b 40 04             	mov    0x4(%eax),%eax
c0100bca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100bcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bd0:	8b 40 08             	mov    0x8(%eax),%eax
c0100bd3:	89 45 ec             	mov    %eax,-0x14(%ebp)

    y = (z->left == nil || z->right == nil) ? z : rb_tree_successor(tree, z);
c0100bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bd9:	8b 40 08             	mov    0x8(%eax),%eax
c0100bdc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100bdf:	74 1f                	je     c0100c00 <rb_delete+0x48>
c0100be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100be4:	8b 40 0c             	mov    0xc(%eax),%eax
c0100be7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100bea:	74 14                	je     c0100c00 <rb_delete+0x48>
c0100bec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bef:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bf3:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bf6:	89 04 24             	mov    %eax,(%esp)
c0100bf9:	e8 16 fc ff ff       	call   c0100814 <rb_tree_successor>
c0100bfe:	eb 03                	jmp    c0100c03 <rb_delete+0x4b>
c0100c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c03:	89 45 e8             	mov    %eax,-0x18(%ebp)
    x = (y->left != nil) ? y->left : y->right;
c0100c06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c09:	8b 40 08             	mov    0x8(%eax),%eax
c0100c0c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100c0f:	74 08                	je     c0100c19 <rb_delete+0x61>
c0100c11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c14:	8b 40 08             	mov    0x8(%eax),%eax
c0100c17:	eb 06                	jmp    c0100c1f <rb_delete+0x67>
c0100c19:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c1c:	8b 40 0c             	mov    0xc(%eax),%eax
c0100c1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    assert(y != root && y != nil);
c0100c22:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c25:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100c28:	74 08                	je     c0100c32 <rb_delete+0x7a>
c0100c2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c2d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100c30:	75 24                	jne    c0100c56 <rb_delete+0x9e>
c0100c32:	c7 44 24 0c 60 d4 10 	movl   $0xc010d460,0xc(%esp)
c0100c39:	c0 
c0100c3a:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0100c41:	c0 
c0100c42:	c7 44 24 04 2f 01 00 	movl   $0x12f,0x4(%esp)
c0100c49:	00 
c0100c4a:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0100c51:	e8 02 16 00 00       	call   c0102258 <__panic>

    x->parent = y->parent;
c0100c56:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c59:	8b 50 04             	mov    0x4(%eax),%edx
c0100c5c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100c5f:	89 50 04             	mov    %edx,0x4(%eax)
    if (y == y->parent->left) {
c0100c62:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c65:	8b 40 04             	mov    0x4(%eax),%eax
c0100c68:	8b 40 08             	mov    0x8(%eax),%eax
c0100c6b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0100c6e:	75 0e                	jne    c0100c7e <rb_delete+0xc6>
        y->parent->left = x;
c0100c70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c73:	8b 40 04             	mov    0x4(%eax),%eax
c0100c76:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100c79:	89 50 08             	mov    %edx,0x8(%eax)
c0100c7c:	eb 0c                	jmp    c0100c8a <rb_delete+0xd2>
    }
    else {
        y->parent->right = x;
c0100c7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c81:	8b 40 04             	mov    0x4(%eax),%eax
c0100c84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100c87:	89 50 0c             	mov    %edx,0xc(%eax)
    }

    bool need_fixup = !(y->red);
c0100c8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c8d:	8b 00                	mov    (%eax),%eax
c0100c8f:	85 c0                	test   %eax,%eax
c0100c91:	0f 94 c0             	sete   %al
c0100c94:	0f b6 c0             	movzbl %al,%eax
c0100c97:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if (y != z) {
c0100c9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c9d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100ca0:	74 5c                	je     c0100cfe <rb_delete+0x146>
        if (z == z->parent->left) {
c0100ca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ca5:	8b 40 04             	mov    0x4(%eax),%eax
c0100ca8:	8b 40 08             	mov    0x8(%eax),%eax
c0100cab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100cae:	75 0e                	jne    c0100cbe <rb_delete+0x106>
            z->parent->left = y;
c0100cb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cb3:	8b 40 04             	mov    0x4(%eax),%eax
c0100cb6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100cb9:	89 50 08             	mov    %edx,0x8(%eax)
c0100cbc:	eb 0c                	jmp    c0100cca <rb_delete+0x112>
        }
        else {
            z->parent->right = y;
c0100cbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cc1:	8b 40 04             	mov    0x4(%eax),%eax
c0100cc4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100cc7:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        z->left->parent = z->right->parent = y;
c0100cca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ccd:	8b 50 08             	mov    0x8(%eax),%edx
c0100cd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cd3:	8b 40 0c             	mov    0xc(%eax),%eax
c0100cd6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100cd9:	89 48 04             	mov    %ecx,0x4(%eax)
c0100cdc:	8b 40 04             	mov    0x4(%eax),%eax
c0100cdf:	89 42 04             	mov    %eax,0x4(%edx)
        *y = *z;
c0100ce2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100ce5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100ce8:	8b 0a                	mov    (%edx),%ecx
c0100cea:	89 08                	mov    %ecx,(%eax)
c0100cec:	8b 4a 04             	mov    0x4(%edx),%ecx
c0100cef:	89 48 04             	mov    %ecx,0x4(%eax)
c0100cf2:	8b 4a 08             	mov    0x8(%edx),%ecx
c0100cf5:	89 48 08             	mov    %ecx,0x8(%eax)
c0100cf8:	8b 52 0c             	mov    0xc(%edx),%edx
c0100cfb:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    if (need_fixup) {
c0100cfe:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0100d02:	74 12                	je     c0100d16 <rb_delete+0x15e>
        rb_delete_fixup(tree, x);
c0100d04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100d07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d0e:	89 04 24             	mov    %eax,(%esp)
c0100d11:	e8 5f fc ff ff       	call   c0100975 <rb_delete_fixup>
    }
}
c0100d16:	c9                   	leave  
c0100d17:	c3                   	ret    

c0100d18 <rb_tree_destroy>:

/* rb_tree_destroy - destroy a tree and free memory */
void
rb_tree_destroy(rb_tree *tree) {
c0100d18:	55                   	push   %ebp
c0100d19:	89 e5                	mov    %esp,%ebp
c0100d1b:	83 ec 18             	sub    $0x18,%esp
    kfree(tree->root);
c0100d1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d21:	8b 40 08             	mov    0x8(%eax),%eax
c0100d24:	89 04 24             	mov    %eax,(%esp)
c0100d27:	e8 64 53 00 00       	call   c0106090 <kfree>
    kfree(tree->nil);
c0100d2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d2f:	8b 40 04             	mov    0x4(%eax),%eax
c0100d32:	89 04 24             	mov    %eax,(%esp)
c0100d35:	e8 56 53 00 00       	call   c0106090 <kfree>
    kfree(tree);
c0100d3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d3d:	89 04 24             	mov    %eax,(%esp)
c0100d40:	e8 4b 53 00 00       	call   c0106090 <kfree>
}
c0100d45:	c9                   	leave  
c0100d46:	c3                   	ret    

c0100d47 <rb_node_prev>:
/* *
 * rb_node_prev - returns the predecessor node of @node in @tree,
 * or 'NULL' if no predecessor exists.
 * */
rb_node *
rb_node_prev(rb_tree *tree, rb_node *node) {
c0100d47:	55                   	push   %ebp
c0100d48:	89 e5                	mov    %esp,%ebp
c0100d4a:	83 ec 18             	sub    $0x18,%esp
    rb_node *prev = rb_tree_predecessor(tree, node);
c0100d4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100d50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d54:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d57:	89 04 24             	mov    %eax,(%esp)
c0100d5a:	e8 30 fb ff ff       	call   c010088f <rb_tree_predecessor>
c0100d5f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (prev != tree->nil) ? prev : NULL;
c0100d62:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d65:	8b 40 04             	mov    0x4(%eax),%eax
c0100d68:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100d6b:	74 05                	je     c0100d72 <rb_node_prev+0x2b>
c0100d6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100d70:	eb 05                	jmp    c0100d77 <rb_node_prev+0x30>
c0100d72:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d77:	c9                   	leave  
c0100d78:	c3                   	ret    

c0100d79 <rb_node_next>:
/* *
 * rb_node_next - returns the successor node of @node in @tree,
 * or 'NULL' if no successor exists.
 * */
rb_node *
rb_node_next(rb_tree *tree, rb_node *node) {
c0100d79:	55                   	push   %ebp
c0100d7a:	89 e5                	mov    %esp,%ebp
c0100d7c:	83 ec 18             	sub    $0x18,%esp
    rb_node *next = rb_tree_successor(tree, node);
c0100d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100d82:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d86:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d89:	89 04 24             	mov    %eax,(%esp)
c0100d8c:	e8 83 fa ff ff       	call   c0100814 <rb_tree_successor>
c0100d91:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (next != tree->nil) ? next : NULL;
c0100d94:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d97:	8b 40 04             	mov    0x4(%eax),%eax
c0100d9a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100d9d:	74 05                	je     c0100da4 <rb_node_next+0x2b>
c0100d9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100da2:	eb 05                	jmp    c0100da9 <rb_node_next+0x30>
c0100da4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100da9:	c9                   	leave  
c0100daa:	c3                   	ret    

c0100dab <rb_node_root>:

/* rb_node_root - returns the root node of a @tree, or 'NULL' if tree is empty */
rb_node *
rb_node_root(rb_tree *tree) {
c0100dab:	55                   	push   %ebp
c0100dac:	89 e5                	mov    %esp,%ebp
c0100dae:	83 ec 10             	sub    $0x10,%esp
    rb_node *node = tree->root->left;
c0100db1:	8b 45 08             	mov    0x8(%ebp),%eax
c0100db4:	8b 40 08             	mov    0x8(%eax),%eax
c0100db7:	8b 40 08             	mov    0x8(%eax),%eax
c0100dba:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (node != tree->nil) ? node : NULL;
c0100dbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100dc0:	8b 40 04             	mov    0x4(%eax),%eax
c0100dc3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100dc6:	74 05                	je     c0100dcd <rb_node_root+0x22>
c0100dc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100dcb:	eb 05                	jmp    c0100dd2 <rb_node_root+0x27>
c0100dcd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd2:	c9                   	leave  
c0100dd3:	c3                   	ret    

c0100dd4 <rb_node_left>:

/* rb_node_left - gets the left child of @node, or 'NULL' if no such node */
rb_node *
rb_node_left(rb_tree *tree, rb_node *node) {
c0100dd4:	55                   	push   %ebp
c0100dd5:	89 e5                	mov    %esp,%ebp
c0100dd7:	83 ec 10             	sub    $0x10,%esp
    rb_node *left = node->left;
c0100dda:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ddd:	8b 40 08             	mov    0x8(%eax),%eax
c0100de0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (left != tree->nil) ? left : NULL;
c0100de3:	8b 45 08             	mov    0x8(%ebp),%eax
c0100de6:	8b 40 04             	mov    0x4(%eax),%eax
c0100de9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100dec:	74 05                	je     c0100df3 <rb_node_left+0x1f>
c0100dee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100df1:	eb 05                	jmp    c0100df8 <rb_node_left+0x24>
c0100df3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100df8:	c9                   	leave  
c0100df9:	c3                   	ret    

c0100dfa <rb_node_right>:

/* rb_node_right - gets the right child of @node, or 'NULL' if no such node */
rb_node *
rb_node_right(rb_tree *tree, rb_node *node) {
c0100dfa:	55                   	push   %ebp
c0100dfb:	89 e5                	mov    %esp,%ebp
c0100dfd:	83 ec 10             	sub    $0x10,%esp
    rb_node *right = node->right;
c0100e00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e03:	8b 40 0c             	mov    0xc(%eax),%eax
c0100e06:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (right != tree->nil) ? right : NULL;
c0100e09:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e0c:	8b 40 04             	mov    0x4(%eax),%eax
c0100e0f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100e12:	74 05                	je     c0100e19 <rb_node_right+0x1f>
c0100e14:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100e17:	eb 05                	jmp    c0100e1e <rb_node_right+0x24>
c0100e19:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e1e:	c9                   	leave  
c0100e1f:	c3                   	ret    

c0100e20 <check_tree>:

int
check_tree(rb_tree *tree, rb_node *node) {
c0100e20:	55                   	push   %ebp
c0100e21:	89 e5                	mov    %esp,%ebp
c0100e23:	83 ec 28             	sub    $0x28,%esp
    rb_node *nil = tree->nil;
c0100e26:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e29:	8b 40 04             	mov    0x4(%eax),%eax
c0100e2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (node == nil) {
c0100e2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e32:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100e35:	75 37                	jne    c0100e6e <check_tree+0x4e>
        assert(!node->red);
c0100e37:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e3a:	8b 00                	mov    (%eax),%eax
c0100e3c:	85 c0                	test   %eax,%eax
c0100e3e:	74 24                	je     c0100e64 <check_tree+0x44>
c0100e40:	c7 44 24 0c 76 d4 10 	movl   $0xc010d476,0xc(%esp)
c0100e47:	c0 
c0100e48:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0100e4f:	c0 
c0100e50:	c7 44 24 04 7f 01 00 	movl   $0x17f,0x4(%esp)
c0100e57:	00 
c0100e58:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0100e5f:	e8 f4 13 00 00       	call   c0102258 <__panic>
        return 1;
c0100e64:	b8 01 00 00 00       	mov    $0x1,%eax
c0100e69:	e9 af 01 00 00       	jmp    c010101d <check_tree+0x1fd>
    }
    if (node->left != nil) {
c0100e6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e71:	8b 40 08             	mov    0x8(%eax),%eax
c0100e74:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100e77:	74 71                	je     c0100eea <check_tree+0xca>
        assert(COMPARE(tree, node, node->left) >= 0);
c0100e79:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e7c:	8b 00                	mov    (%eax),%eax
c0100e7e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100e81:	8b 52 08             	mov    0x8(%edx),%edx
c0100e84:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100e88:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100e8b:	89 14 24             	mov    %edx,(%esp)
c0100e8e:	ff d0                	call   *%eax
c0100e90:	85 c0                	test   %eax,%eax
c0100e92:	79 24                	jns    c0100eb8 <check_tree+0x98>
c0100e94:	c7 44 24 0c 84 d4 10 	movl   $0xc010d484,0xc(%esp)
c0100e9b:	c0 
c0100e9c:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0100ea3:	c0 
c0100ea4:	c7 44 24 04 83 01 00 	movl   $0x183,0x4(%esp)
c0100eab:	00 
c0100eac:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0100eb3:	e8 a0 13 00 00       	call   c0102258 <__panic>
        assert(node->left->parent == node);
c0100eb8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ebb:	8b 40 08             	mov    0x8(%eax),%eax
c0100ebe:	8b 40 04             	mov    0x4(%eax),%eax
c0100ec1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100ec4:	74 24                	je     c0100eea <check_tree+0xca>
c0100ec6:	c7 44 24 0c a9 d4 10 	movl   $0xc010d4a9,0xc(%esp)
c0100ecd:	c0 
c0100ece:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0100ed5:	c0 
c0100ed6:	c7 44 24 04 84 01 00 	movl   $0x184,0x4(%esp)
c0100edd:	00 
c0100ede:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0100ee5:	e8 6e 13 00 00       	call   c0102258 <__panic>
    }
    if (node->right != nil) {
c0100eea:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100eed:	8b 40 0c             	mov    0xc(%eax),%eax
c0100ef0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100ef3:	74 71                	je     c0100f66 <check_tree+0x146>
        assert(COMPARE(tree, node, node->right) <= 0);
c0100ef5:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ef8:	8b 00                	mov    (%eax),%eax
c0100efa:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100efd:	8b 52 0c             	mov    0xc(%edx),%edx
c0100f00:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100f04:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100f07:	89 14 24             	mov    %edx,(%esp)
c0100f0a:	ff d0                	call   *%eax
c0100f0c:	85 c0                	test   %eax,%eax
c0100f0e:	7e 24                	jle    c0100f34 <check_tree+0x114>
c0100f10:	c7 44 24 0c c4 d4 10 	movl   $0xc010d4c4,0xc(%esp)
c0100f17:	c0 
c0100f18:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0100f1f:	c0 
c0100f20:	c7 44 24 04 87 01 00 	movl   $0x187,0x4(%esp)
c0100f27:	00 
c0100f28:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0100f2f:	e8 24 13 00 00       	call   c0102258 <__panic>
        assert(node->right->parent == node);
c0100f34:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f37:	8b 40 0c             	mov    0xc(%eax),%eax
c0100f3a:	8b 40 04             	mov    0x4(%eax),%eax
c0100f3d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100f40:	74 24                	je     c0100f66 <check_tree+0x146>
c0100f42:	c7 44 24 0c ea d4 10 	movl   $0xc010d4ea,0xc(%esp)
c0100f49:	c0 
c0100f4a:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0100f51:	c0 
c0100f52:	c7 44 24 04 88 01 00 	movl   $0x188,0x4(%esp)
c0100f59:	00 
c0100f5a:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0100f61:	e8 f2 12 00 00       	call   c0102258 <__panic>
    }
    if (node->red) {
c0100f66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f69:	8b 00                	mov    (%eax),%eax
c0100f6b:	85 c0                	test   %eax,%eax
c0100f6d:	74 3c                	je     c0100fab <check_tree+0x18b>
        assert(!node->left->red && !node->right->red);
c0100f6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f72:	8b 40 08             	mov    0x8(%eax),%eax
c0100f75:	8b 00                	mov    (%eax),%eax
c0100f77:	85 c0                	test   %eax,%eax
c0100f79:	75 0c                	jne    c0100f87 <check_tree+0x167>
c0100f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f7e:	8b 40 0c             	mov    0xc(%eax),%eax
c0100f81:	8b 00                	mov    (%eax),%eax
c0100f83:	85 c0                	test   %eax,%eax
c0100f85:	74 24                	je     c0100fab <check_tree+0x18b>
c0100f87:	c7 44 24 0c 08 d5 10 	movl   $0xc010d508,0xc(%esp)
c0100f8e:	c0 
c0100f8f:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0100f96:	c0 
c0100f97:	c7 44 24 04 8b 01 00 	movl   $0x18b,0x4(%esp)
c0100f9e:	00 
c0100f9f:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0100fa6:	e8 ad 12 00 00       	call   c0102258 <__panic>
    }
    int hb_left = check_tree(tree, node->left);
c0100fab:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100fae:	8b 40 08             	mov    0x8(%eax),%eax
c0100fb1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100fb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0100fb8:	89 04 24             	mov    %eax,(%esp)
c0100fbb:	e8 60 fe ff ff       	call   c0100e20 <check_tree>
c0100fc0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int hb_right = check_tree(tree, node->right);
c0100fc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100fc6:	8b 40 0c             	mov    0xc(%eax),%eax
c0100fc9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100fcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100fd0:	89 04 24             	mov    %eax,(%esp)
c0100fd3:	e8 48 fe ff ff       	call   c0100e20 <check_tree>
c0100fd8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(hb_left == hb_right);
c0100fdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100fde:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0100fe1:	74 24                	je     c0101007 <check_tree+0x1e7>
c0100fe3:	c7 44 24 0c 2e d5 10 	movl   $0xc010d52e,0xc(%esp)
c0100fea:	c0 
c0100feb:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0100ff2:	c0 
c0100ff3:	c7 44 24 04 8f 01 00 	movl   $0x18f,0x4(%esp)
c0100ffa:	00 
c0100ffb:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0101002:	e8 51 12 00 00       	call   c0102258 <__panic>
    int hb = hb_left;
c0101007:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010100a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!node->red) {
c010100d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101010:	8b 00                	mov    (%eax),%eax
c0101012:	85 c0                	test   %eax,%eax
c0101014:	75 04                	jne    c010101a <check_tree+0x1fa>
        hb ++;
c0101016:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    }
    return hb;
c010101a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010101d:	c9                   	leave  
c010101e:	c3                   	ret    

c010101f <check_safe_kmalloc>:

static void *
check_safe_kmalloc(size_t size) {
c010101f:	55                   	push   %ebp
c0101020:	89 e5                	mov    %esp,%ebp
c0101022:	83 ec 28             	sub    $0x28,%esp
    void *ret = kmalloc(size);
c0101025:	8b 45 08             	mov    0x8(%ebp),%eax
c0101028:	89 04 24             	mov    %eax,(%esp)
c010102b:	e8 45 50 00 00       	call   c0106075 <kmalloc>
c0101030:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(ret != NULL);
c0101033:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101037:	75 24                	jne    c010105d <check_safe_kmalloc+0x3e>
c0101039:	c7 44 24 0c 42 d5 10 	movl   $0xc010d542,0xc(%esp)
c0101040:	c0 
c0101041:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0101048:	c0 
c0101049:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
c0101050:	00 
c0101051:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0101058:	e8 fb 11 00 00       	call   c0102258 <__panic>
    return ret;
c010105d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101060:	c9                   	leave  
c0101061:	c3                   	ret    

c0101062 <check_compare1>:

#define rbn2data(node)              \
    (to_struct(node, struct check_data, rb_link))

static inline int
check_compare1(rb_node *node1, rb_node *node2) {
c0101062:	55                   	push   %ebp
c0101063:	89 e5                	mov    %esp,%ebp
    return rbn2data(node1)->data - rbn2data(node2)->data;
c0101065:	8b 45 08             	mov    0x8(%ebp),%eax
c0101068:	83 e8 04             	sub    $0x4,%eax
c010106b:	8b 10                	mov    (%eax),%edx
c010106d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101070:	83 e8 04             	sub    $0x4,%eax
c0101073:	8b 00                	mov    (%eax),%eax
c0101075:	29 c2                	sub    %eax,%edx
c0101077:	89 d0                	mov    %edx,%eax
}
c0101079:	5d                   	pop    %ebp
c010107a:	c3                   	ret    

c010107b <check_compare2>:

static inline int
check_compare2(rb_node *node, void *key) {
c010107b:	55                   	push   %ebp
c010107c:	89 e5                	mov    %esp,%ebp
    return rbn2data(node)->data - (long)key;
c010107e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101081:	83 e8 04             	sub    $0x4,%eax
c0101084:	8b 10                	mov    (%eax),%edx
c0101086:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101089:	29 c2                	sub    %eax,%edx
c010108b:	89 d0                	mov    %edx,%eax
}
c010108d:	5d                   	pop    %ebp
c010108e:	c3                   	ret    

c010108f <check_rb_tree>:

void
check_rb_tree(void) {
c010108f:	55                   	push   %ebp
c0101090:	89 e5                	mov    %esp,%ebp
c0101092:	53                   	push   %ebx
c0101093:	83 ec 44             	sub    $0x44,%esp
    rb_tree *tree = rb_tree_create(check_compare1);
c0101096:	c7 04 24 62 10 10 c0 	movl   $0xc0101062,(%esp)
c010109d:	e8 e5 f1 ff ff       	call   c0100287 <rb_tree_create>
c01010a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(tree != NULL);
c01010a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01010a9:	75 24                	jne    c01010cf <check_rb_tree+0x40>
c01010ab:	c7 44 24 0c 4e d5 10 	movl   $0xc010d54e,0xc(%esp)
c01010b2:	c0 
c01010b3:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c01010ba:	c0 
c01010bb:	c7 44 24 04 b3 01 00 	movl   $0x1b3,0x4(%esp)
c01010c2:	00 
c01010c3:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c01010ca:	e8 89 11 00 00       	call   c0102258 <__panic>

    rb_node *nil = tree->nil, *root = tree->root;
c01010cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010d2:	8b 40 04             	mov    0x4(%eax),%eax
c01010d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01010d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010db:	8b 40 08             	mov    0x8(%eax),%eax
c01010de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(!nil->red && root->left == nil);
c01010e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01010e4:	8b 00                	mov    (%eax),%eax
c01010e6:	85 c0                	test   %eax,%eax
c01010e8:	75 0b                	jne    c01010f5 <check_rb_tree+0x66>
c01010ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01010ed:	8b 40 08             	mov    0x8(%eax),%eax
c01010f0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01010f3:	74 24                	je     c0101119 <check_rb_tree+0x8a>
c01010f5:	c7 44 24 0c 5c d5 10 	movl   $0xc010d55c,0xc(%esp)
c01010fc:	c0 
c01010fd:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0101104:	c0 
c0101105:	c7 44 24 04 b6 01 00 	movl   $0x1b6,0x4(%esp)
c010110c:	00 
c010110d:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0101114:	e8 3f 11 00 00       	call   c0102258 <__panic>

    int total = 1000;
c0101119:	c7 45 e0 e8 03 00 00 	movl   $0x3e8,-0x20(%ebp)
    struct check_data **all = check_safe_kmalloc(sizeof(struct check_data *) * total);
c0101120:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101123:	c1 e0 02             	shl    $0x2,%eax
c0101126:	89 04 24             	mov    %eax,(%esp)
c0101129:	e8 f1 fe ff ff       	call   c010101f <check_safe_kmalloc>
c010112e:	89 45 dc             	mov    %eax,-0x24(%ebp)

    long i;
    for (i = 0; i < total; i ++) {
c0101131:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101138:	eb 38                	jmp    c0101172 <check_rb_tree+0xe3>
        all[i] = check_safe_kmalloc(sizeof(struct check_data));
c010113a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010113d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101144:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101147:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010114a:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c0101151:	e8 c9 fe ff ff       	call   c010101f <check_safe_kmalloc>
c0101156:	89 03                	mov    %eax,(%ebx)
        all[i]->data = i;
c0101158:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010115b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101162:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101165:	01 d0                	add    %edx,%eax
c0101167:	8b 00                	mov    (%eax),%eax
c0101169:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010116c:	89 10                	mov    %edx,(%eax)

    int total = 1000;
    struct check_data **all = check_safe_kmalloc(sizeof(struct check_data *) * total);

    long i;
    for (i = 0; i < total; i ++) {
c010116e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101172:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101175:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101178:	7c c0                	jl     c010113a <check_rb_tree+0xab>
        all[i] = check_safe_kmalloc(sizeof(struct check_data));
        all[i]->data = i;
    }

    int *mark = check_safe_kmalloc(sizeof(int) * total);
c010117a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010117d:	c1 e0 02             	shl    $0x2,%eax
c0101180:	89 04 24             	mov    %eax,(%esp)
c0101183:	e8 97 fe ff ff       	call   c010101f <check_safe_kmalloc>
c0101188:	89 45 d8             	mov    %eax,-0x28(%ebp)
    memset(mark, 0, sizeof(int) * total);
c010118b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010118e:	c1 e0 02             	shl    $0x2,%eax
c0101191:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101195:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010119c:	00 
c010119d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01011a0:	89 04 24             	mov    %eax,(%esp)
c01011a3:	e8 dd bf 00 00       	call   c010d185 <memset>

    for (i = 0; i < total; i ++) {
c01011a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01011af:	eb 29                	jmp    c01011da <check_rb_tree+0x14b>
        mark[all[i]->data] = 1;
c01011b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01011be:	01 d0                	add    %edx,%eax
c01011c0:	8b 00                	mov    (%eax),%eax
c01011c2:	8b 00                	mov    (%eax),%eax
c01011c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01011ce:	01 d0                	add    %edx,%eax
c01011d0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    }

    int *mark = check_safe_kmalloc(sizeof(int) * total);
    memset(mark, 0, sizeof(int) * total);

    for (i = 0; i < total; i ++) {
c01011d6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01011da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011dd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01011e0:	7c cf                	jl     c01011b1 <check_rb_tree+0x122>
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c01011e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01011e9:	eb 3e                	jmp    c0101229 <check_rb_tree+0x19a>
        assert(mark[i] == 1);
c01011eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011ee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01011f8:	01 d0                	add    %edx,%eax
c01011fa:	8b 00                	mov    (%eax),%eax
c01011fc:	83 f8 01             	cmp    $0x1,%eax
c01011ff:	74 24                	je     c0101225 <check_rb_tree+0x196>
c0101201:	c7 44 24 0c 7b d5 10 	movl   $0xc010d57b,0xc(%esp)
c0101208:	c0 
c0101209:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0101210:	c0 
c0101211:	c7 44 24 04 c8 01 00 	movl   $0x1c8,0x4(%esp)
c0101218:	00 
c0101219:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0101220:	e8 33 10 00 00       	call   c0102258 <__panic>
    memset(mark, 0, sizeof(int) * total);

    for (i = 0; i < total; i ++) {
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c0101225:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101229:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010122c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010122f:	7c ba                	jl     c01011eb <check_rb_tree+0x15c>
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c0101231:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101238:	eb 66                	jmp    c01012a0 <check_rb_tree+0x211>
        int j = (rand() % (total - i)) + i;
c010123a:	e8 3f bb 00 00       	call   c010cd7e <rand>
c010123f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101242:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0101245:	29 d1                	sub    %edx,%ecx
c0101247:	99                   	cltd   
c0101248:	f7 f9                	idiv   %ecx
c010124a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010124d:	01 d0                	add    %edx,%eax
c010124f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        struct check_data *z = all[i];
c0101252:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101255:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010125c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010125f:	01 d0                	add    %edx,%eax
c0101261:	8b 00                	mov    (%eax),%eax
c0101263:	89 45 d0             	mov    %eax,-0x30(%ebp)
        all[i] = all[j];
c0101266:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101269:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101270:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101273:	01 c2                	add    %eax,%edx
c0101275:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101278:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c010127f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101282:	01 c8                	add    %ecx,%eax
c0101284:	8b 00                	mov    (%eax),%eax
c0101286:	89 02                	mov    %eax,(%edx)
        all[j] = z;
c0101288:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010128b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101292:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101295:	01 c2                	add    %eax,%edx
c0101297:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010129a:	89 02                	mov    %eax,(%edx)
    }
    for (i = 0; i < total; i ++) {
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c010129c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01012a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012a3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01012a6:	7c 92                	jl     c010123a <check_rb_tree+0x1ab>
        struct check_data *z = all[i];
        all[i] = all[j];
        all[j] = z;
    }

    memset(mark, 0, sizeof(int) * total);
c01012a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01012ab:	c1 e0 02             	shl    $0x2,%eax
c01012ae:	89 44 24 08          	mov    %eax,0x8(%esp)
c01012b2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01012b9:	00 
c01012ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01012bd:	89 04 24             	mov    %eax,(%esp)
c01012c0:	e8 c0 be 00 00       	call   c010d185 <memset>
    for (i = 0; i < total; i ++) {
c01012c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01012cc:	eb 29                	jmp    c01012f7 <check_rb_tree+0x268>
        mark[all[i]->data] = 1;
c01012ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012d1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01012d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01012db:	01 d0                	add    %edx,%eax
c01012dd:	8b 00                	mov    (%eax),%eax
c01012df:	8b 00                	mov    (%eax),%eax
c01012e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01012e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01012eb:	01 d0                	add    %edx,%eax
c01012ed:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        all[i] = all[j];
        all[j] = z;
    }

    memset(mark, 0, sizeof(int) * total);
    for (i = 0; i < total; i ++) {
c01012f3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01012f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012fa:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01012fd:	7c cf                	jl     c01012ce <check_rb_tree+0x23f>
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c01012ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101306:	eb 3e                	jmp    c0101346 <check_rb_tree+0x2b7>
        assert(mark[i] == 1);
c0101308:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010130b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101312:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101315:	01 d0                	add    %edx,%eax
c0101317:	8b 00                	mov    (%eax),%eax
c0101319:	83 f8 01             	cmp    $0x1,%eax
c010131c:	74 24                	je     c0101342 <check_rb_tree+0x2b3>
c010131e:	c7 44 24 0c 7b d5 10 	movl   $0xc010d57b,0xc(%esp)
c0101325:	c0 
c0101326:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c010132d:	c0 
c010132e:	c7 44 24 04 d7 01 00 	movl   $0x1d7,0x4(%esp)
c0101335:	00 
c0101336:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c010133d:	e8 16 0f 00 00       	call   c0102258 <__panic>

    memset(mark, 0, sizeof(int) * total);
    for (i = 0; i < total; i ++) {
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c0101342:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101346:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101349:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010134c:	7c ba                	jl     c0101308 <check_rb_tree+0x279>
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c010134e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101355:	eb 3c                	jmp    c0101393 <check_rb_tree+0x304>
        rb_insert(tree, &(all[i]->rb_link));
c0101357:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010135a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101361:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101364:	01 d0                	add    %edx,%eax
c0101366:	8b 00                	mov    (%eax),%eax
c0101368:	83 c0 04             	add    $0x4,%eax
c010136b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010136f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101372:	89 04 24             	mov    %eax,(%esp)
c0101375:	e8 a3 f2 ff ff       	call   c010061d <rb_insert>
        check_tree(tree, root->left);
c010137a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010137d:	8b 40 08             	mov    0x8(%eax),%eax
c0101380:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101384:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101387:	89 04 24             	mov    %eax,(%esp)
c010138a:	e8 91 fa ff ff       	call   c0100e20 <check_tree>
    }
    for (i = 0; i < total; i ++) {
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c010138f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101393:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101396:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101399:	7c bc                	jl     c0101357 <check_rb_tree+0x2c8>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_node *node;
    for (i = 0; i < total; i ++) {
c010139b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01013a2:	eb 74                	jmp    c0101418 <check_rb_tree+0x389>
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
c01013a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01013ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01013b1:	01 d0                	add    %edx,%eax
c01013b3:	8b 00                	mov    (%eax),%eax
c01013b5:	8b 00                	mov    (%eax),%eax
c01013b7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01013bb:	c7 44 24 04 7b 10 10 	movl   $0xc010107b,0x4(%esp)
c01013c2:	c0 
c01013c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01013c6:	89 04 24             	mov    %eax,(%esp)
c01013c9:	e8 3c f5 ff ff       	call   c010090a <rb_search>
c01013ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && node == &(all[i]->rb_link));
c01013d1:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01013d5:	74 19                	je     c01013f0 <check_rb_tree+0x361>
c01013d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013da:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01013e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01013e4:	01 d0                	add    %edx,%eax
c01013e6:	8b 00                	mov    (%eax),%eax
c01013e8:	83 c0 04             	add    $0x4,%eax
c01013eb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c01013ee:	74 24                	je     c0101414 <check_rb_tree+0x385>
c01013f0:	c7 44 24 0c 88 d5 10 	movl   $0xc010d588,0xc(%esp)
c01013f7:	c0 
c01013f8:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c01013ff:	c0 
c0101400:	c7 44 24 04 e2 01 00 	movl   $0x1e2,0x4(%esp)
c0101407:	00 
c0101408:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c010140f:	e8 44 0e 00 00       	call   c0102258 <__panic>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_node *node;
    for (i = 0; i < total; i ++) {
c0101414:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101418:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010141b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010141e:	7c 84                	jl     c01013a4 <check_rb_tree+0x315>
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
        assert(node != NULL && node == &(all[i]->rb_link));
    }

    for (i = 0; i < total; i ++) {
c0101420:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101427:	eb 7f                	jmp    c01014a8 <check_rb_tree+0x419>
        node = rb_search(tree, check_compare2, (void *)i);
c0101429:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010142c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101430:	c7 44 24 04 7b 10 10 	movl   $0xc010107b,0x4(%esp)
c0101437:	c0 
c0101438:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010143b:	89 04 24             	mov    %eax,(%esp)
c010143e:	e8 c7 f4 ff ff       	call   c010090a <rb_search>
c0101443:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && rbn2data(node)->data == i);
c0101446:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010144a:	74 0d                	je     c0101459 <check_rb_tree+0x3ca>
c010144c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010144f:	83 e8 04             	sub    $0x4,%eax
c0101452:	8b 00                	mov    (%eax),%eax
c0101454:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0101457:	74 24                	je     c010147d <check_rb_tree+0x3ee>
c0101459:	c7 44 24 0c b4 d5 10 	movl   $0xc010d5b4,0xc(%esp)
c0101460:	c0 
c0101461:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0101468:	c0 
c0101469:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0101470:	00 
c0101471:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0101478:	e8 db 0d 00 00       	call   c0102258 <__panic>
        rb_delete(tree, node);
c010147d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101480:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101484:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101487:	89 04 24             	mov    %eax,(%esp)
c010148a:	e8 29 f7 ff ff       	call   c0100bb8 <rb_delete>
        check_tree(tree, root->left);
c010148f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101492:	8b 40 08             	mov    0x8(%eax),%eax
c0101495:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101499:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010149c:	89 04 24             	mov    %eax,(%esp)
c010149f:	e8 7c f9 ff ff       	call   c0100e20 <check_tree>
    for (i = 0; i < total; i ++) {
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
        assert(node != NULL && node == &(all[i]->rb_link));
    }

    for (i = 0; i < total; i ++) {
c01014a4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01014a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01014ab:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01014ae:	0f 8c 75 ff ff ff    	jl     c0101429 <check_rb_tree+0x39a>
        assert(node != NULL && rbn2data(node)->data == i);
        rb_delete(tree, node);
        check_tree(tree, root->left);
    }

    assert(!nil->red && root->left == nil);
c01014b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01014b7:	8b 00                	mov    (%eax),%eax
c01014b9:	85 c0                	test   %eax,%eax
c01014bb:	75 0b                	jne    c01014c8 <check_rb_tree+0x439>
c01014bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01014c0:	8b 40 08             	mov    0x8(%eax),%eax
c01014c3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01014c6:	74 24                	je     c01014ec <check_rb_tree+0x45d>
c01014c8:	c7 44 24 0c 5c d5 10 	movl   $0xc010d55c,0xc(%esp)
c01014cf:	c0 
c01014d0:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c01014d7:	c0 
c01014d8:	c7 44 24 04 ec 01 00 	movl   $0x1ec,0x4(%esp)
c01014df:	00 
c01014e0:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c01014e7:	e8 6c 0d 00 00       	call   c0102258 <__panic>

    long max = 32;
c01014ec:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%ebp)
    if (max > total) {
c01014f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01014f6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01014f9:	7e 06                	jle    c0101501 <check_rb_tree+0x472>
        max = total;
c01014fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01014fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    for (i = 0; i < max; i ++) {
c0101501:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101508:	eb 52                	jmp    c010155c <check_rb_tree+0x4cd>
        all[i]->data = max;
c010150a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010150d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101514:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101517:	01 d0                	add    %edx,%eax
c0101519:	8b 00                	mov    (%eax),%eax
c010151b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010151e:	89 10                	mov    %edx,(%eax)
        rb_insert(tree, &(all[i]->rb_link));
c0101520:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101523:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010152a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010152d:	01 d0                	add    %edx,%eax
c010152f:	8b 00                	mov    (%eax),%eax
c0101531:	83 c0 04             	add    $0x4,%eax
c0101534:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101538:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010153b:	89 04 24             	mov    %eax,(%esp)
c010153e:	e8 da f0 ff ff       	call   c010061d <rb_insert>
        check_tree(tree, root->left);
c0101543:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101546:	8b 40 08             	mov    0x8(%eax),%eax
c0101549:	89 44 24 04          	mov    %eax,0x4(%esp)
c010154d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101550:	89 04 24             	mov    %eax,(%esp)
c0101553:	e8 c8 f8 ff ff       	call   c0100e20 <check_tree>
    long max = 32;
    if (max > total) {
        max = total;
    }

    for (i = 0; i < max; i ++) {
c0101558:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010155c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010155f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0101562:	7c a6                	jl     c010150a <check_rb_tree+0x47b>
        all[i]->data = max;
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    for (i = 0; i < max; i ++) {
c0101564:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010156b:	eb 7f                	jmp    c01015ec <check_rb_tree+0x55d>
        node = rb_search(tree, check_compare2, (void *)max);
c010156d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101570:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101574:	c7 44 24 04 7b 10 10 	movl   $0xc010107b,0x4(%esp)
c010157b:	c0 
c010157c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010157f:	89 04 24             	mov    %eax,(%esp)
c0101582:	e8 83 f3 ff ff       	call   c010090a <rb_search>
c0101587:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && rbn2data(node)->data == max);
c010158a:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010158e:	74 0d                	je     c010159d <check_rb_tree+0x50e>
c0101590:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101593:	83 e8 04             	sub    $0x4,%eax
c0101596:	8b 00                	mov    (%eax),%eax
c0101598:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010159b:	74 24                	je     c01015c1 <check_rb_tree+0x532>
c010159d:	c7 44 24 0c e0 d5 10 	movl   $0xc010d5e0,0xc(%esp)
c01015a4:	c0 
c01015a5:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c01015ac:	c0 
c01015ad:	c7 44 24 04 fb 01 00 	movl   $0x1fb,0x4(%esp)
c01015b4:	00 
c01015b5:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c01015bc:	e8 97 0c 00 00       	call   c0102258 <__panic>
        rb_delete(tree, node);
c01015c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01015c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01015c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01015cb:	89 04 24             	mov    %eax,(%esp)
c01015ce:	e8 e5 f5 ff ff       	call   c0100bb8 <rb_delete>
        check_tree(tree, root->left);
c01015d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01015d6:	8b 40 08             	mov    0x8(%eax),%eax
c01015d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01015dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01015e0:	89 04 24             	mov    %eax,(%esp)
c01015e3:	e8 38 f8 ff ff       	call   c0100e20 <check_tree>
        all[i]->data = max;
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    for (i = 0; i < max; i ++) {
c01015e8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01015ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01015ef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01015f2:	0f 8c 75 ff ff ff    	jl     c010156d <check_rb_tree+0x4de>
        assert(node != NULL && rbn2data(node)->data == max);
        rb_delete(tree, node);
        check_tree(tree, root->left);
    }

    assert(rb_tree_empty(tree));
c01015f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01015fb:	89 04 24             	mov    %eax,(%esp)
c01015fe:	e8 5b ec ff ff       	call   c010025e <rb_tree_empty>
c0101603:	85 c0                	test   %eax,%eax
c0101605:	75 24                	jne    c010162b <check_rb_tree+0x59c>
c0101607:	c7 44 24 0c 0c d6 10 	movl   $0xc010d60c,0xc(%esp)
c010160e:	c0 
c010160f:	c7 44 24 08 d8 d3 10 	movl   $0xc010d3d8,0x8(%esp)
c0101616:	c0 
c0101617:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
c010161e:	00 
c010161f:	c7 04 24 ed d3 10 c0 	movl   $0xc010d3ed,(%esp)
c0101626:	e8 2d 0c 00 00       	call   c0102258 <__panic>

    for (i = 0; i < total; i ++) {
c010162b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101632:	eb 3c                	jmp    c0101670 <check_rb_tree+0x5e1>
        rb_insert(tree, &(all[i]->rb_link));
c0101634:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101637:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010163e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101641:	01 d0                	add    %edx,%eax
c0101643:	8b 00                	mov    (%eax),%eax
c0101645:	83 c0 04             	add    $0x4,%eax
c0101648:	89 44 24 04          	mov    %eax,0x4(%esp)
c010164c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010164f:	89 04 24             	mov    %eax,(%esp)
c0101652:	e8 c6 ef ff ff       	call   c010061d <rb_insert>
        check_tree(tree, root->left);
c0101657:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010165a:	8b 40 08             	mov    0x8(%eax),%eax
c010165d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101661:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101664:	89 04 24             	mov    %eax,(%esp)
c0101667:	e8 b4 f7 ff ff       	call   c0100e20 <check_tree>
        check_tree(tree, root->left);
    }

    assert(rb_tree_empty(tree));

    for (i = 0; i < total; i ++) {
c010166c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101670:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101673:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101676:	7c bc                	jl     c0101634 <check_rb_tree+0x5a5>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_tree_destroy(tree);
c0101678:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010167b:	89 04 24             	mov    %eax,(%esp)
c010167e:	e8 95 f6 ff ff       	call   c0100d18 <rb_tree_destroy>

    for (i = 0; i < total; i ++) {
c0101683:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010168a:	eb 1d                	jmp    c01016a9 <check_rb_tree+0x61a>
        kfree(all[i]);
c010168c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010168f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101696:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101699:	01 d0                	add    %edx,%eax
c010169b:	8b 00                	mov    (%eax),%eax
c010169d:	89 04 24             	mov    %eax,(%esp)
c01016a0:	e8 eb 49 00 00       	call   c0106090 <kfree>
        check_tree(tree, root->left);
    }

    rb_tree_destroy(tree);

    for (i = 0; i < total; i ++) {
c01016a5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01016a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01016ac:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01016af:	7c db                	jl     c010168c <check_rb_tree+0x5fd>
        kfree(all[i]);
    }

    kfree(mark);
c01016b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01016b4:	89 04 24             	mov    %eax,(%esp)
c01016b7:	e8 d4 49 00 00       	call   c0106090 <kfree>
    kfree(all);
c01016bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01016bf:	89 04 24             	mov    %eax,(%esp)
c01016c2:	e8 c9 49 00 00       	call   c0106090 <kfree>
}
c01016c7:	83 c4 44             	add    $0x44,%esp
c01016ca:	5b                   	pop    %ebx
c01016cb:	5d                   	pop    %ebp
c01016cc:	c3                   	ret    

c01016cd <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c01016cd:	55                   	push   %ebp
c01016ce:	89 e5                	mov    %esp,%ebp
c01016d0:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c01016d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01016d7:	74 13                	je     c01016ec <readline+0x1f>
        cprintf("%s", prompt);
c01016d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01016dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01016e0:	c7 04 24 20 d6 10 c0 	movl   $0xc010d620,(%esp)
c01016e7:	e8 ea 00 00 00       	call   c01017d6 <cprintf>
    }
    int i = 0, c;
c01016ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c01016f3:	e8 66 01 00 00       	call   c010185e <getchar>
c01016f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c01016fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01016ff:	79 07                	jns    c0101708 <readline+0x3b>
            return NULL;
c0101701:	b8 00 00 00 00       	mov    $0x0,%eax
c0101706:	eb 79                	jmp    c0101781 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0101708:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010170c:	7e 28                	jle    c0101736 <readline+0x69>
c010170e:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0101715:	7f 1f                	jg     c0101736 <readline+0x69>
            cputchar(c);
c0101717:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010171a:	89 04 24             	mov    %eax,(%esp)
c010171d:	e8 da 00 00 00       	call   c01017fc <cputchar>
            buf[i ++] = c;
c0101722:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101725:	8d 50 01             	lea    0x1(%eax),%edx
c0101728:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010172b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010172e:	88 90 60 ef 19 c0    	mov    %dl,-0x3fe610a0(%eax)
c0101734:	eb 46                	jmp    c010177c <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c0101736:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c010173a:	75 17                	jne    c0101753 <readline+0x86>
c010173c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101740:	7e 11                	jle    c0101753 <readline+0x86>
            cputchar(c);
c0101742:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101745:	89 04 24             	mov    %eax,(%esp)
c0101748:	e8 af 00 00 00       	call   c01017fc <cputchar>
            i --;
c010174d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0101751:	eb 29                	jmp    c010177c <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c0101753:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c0101757:	74 06                	je     c010175f <readline+0x92>
c0101759:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c010175d:	75 1d                	jne    c010177c <readline+0xaf>
            cputchar(c);
c010175f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101762:	89 04 24             	mov    %eax,(%esp)
c0101765:	e8 92 00 00 00       	call   c01017fc <cputchar>
            buf[i] = '\0';
c010176a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010176d:	05 60 ef 19 c0       	add    $0xc019ef60,%eax
c0101772:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c0101775:	b8 60 ef 19 c0       	mov    $0xc019ef60,%eax
c010177a:	eb 05                	jmp    c0101781 <readline+0xb4>
        }
    }
c010177c:	e9 72 ff ff ff       	jmp    c01016f3 <readline+0x26>
}
c0101781:	c9                   	leave  
c0101782:	c3                   	ret    

c0101783 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0101783:	55                   	push   %ebp
c0101784:	89 e5                	mov    %esp,%ebp
c0101786:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0101789:	8b 45 08             	mov    0x8(%ebp),%eax
c010178c:	89 04 24             	mov    %eax,(%esp)
c010178f:	e8 f6 13 00 00       	call   c0102b8a <cons_putc>
    (*cnt) ++;
c0101794:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101797:	8b 00                	mov    (%eax),%eax
c0101799:	8d 50 01             	lea    0x1(%eax),%edx
c010179c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010179f:	89 10                	mov    %edx,(%eax)
}
c01017a1:	c9                   	leave  
c01017a2:	c3                   	ret    

c01017a3 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c01017a3:	55                   	push   %ebp
c01017a4:	89 e5                	mov    %esp,%ebp
c01017a6:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01017a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c01017b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01017b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01017b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01017ba:	89 44 24 08          	mov    %eax,0x8(%esp)
c01017be:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01017c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01017c5:	c7 04 24 83 17 10 c0 	movl   $0xc0101783,(%esp)
c01017cc:	e8 f5 b0 00 00       	call   c010c8c6 <vprintfmt>
    return cnt;
c01017d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017d4:	c9                   	leave  
c01017d5:	c3                   	ret    

c01017d6 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c01017d6:	55                   	push   %ebp
c01017d7:	89 e5                	mov    %esp,%ebp
c01017d9:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c01017dc:	8d 45 0c             	lea    0xc(%ebp),%eax
c01017df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01017e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01017e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01017e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01017ec:	89 04 24             	mov    %eax,(%esp)
c01017ef:	e8 af ff ff ff       	call   c01017a3 <vcprintf>
c01017f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01017f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017fa:	c9                   	leave  
c01017fb:	c3                   	ret    

c01017fc <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01017fc:	55                   	push   %ebp
c01017fd:	89 e5                	mov    %esp,%ebp
c01017ff:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0101802:	8b 45 08             	mov    0x8(%ebp),%eax
c0101805:	89 04 24             	mov    %eax,(%esp)
c0101808:	e8 7d 13 00 00       	call   c0102b8a <cons_putc>
}
c010180d:	c9                   	leave  
c010180e:	c3                   	ret    

c010180f <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010180f:	55                   	push   %ebp
c0101810:	89 e5                	mov    %esp,%ebp
c0101812:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0101815:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c010181c:	eb 13                	jmp    c0101831 <cputs+0x22>
        cputch(c, &cnt);
c010181e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c0101822:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0101825:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101829:	89 04 24             	mov    %eax,(%esp)
c010182c:	e8 52 ff ff ff       	call   c0101783 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c0101831:	8b 45 08             	mov    0x8(%ebp),%eax
c0101834:	8d 50 01             	lea    0x1(%eax),%edx
c0101837:	89 55 08             	mov    %edx,0x8(%ebp)
c010183a:	0f b6 00             	movzbl (%eax),%eax
c010183d:	88 45 f7             	mov    %al,-0x9(%ebp)
c0101840:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0101844:	75 d8                	jne    c010181e <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c0101846:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0101849:	89 44 24 04          	mov    %eax,0x4(%esp)
c010184d:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0101854:	e8 2a ff ff ff       	call   c0101783 <cputch>
    return cnt;
c0101859:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010185c:	c9                   	leave  
c010185d:	c3                   	ret    

c010185e <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c010185e:	55                   	push   %ebp
c010185f:	89 e5                	mov    %esp,%ebp
c0101861:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0101864:	e8 5d 13 00 00       	call   c0102bc6 <cons_getc>
c0101869:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010186c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101870:	74 f2                	je     c0101864 <getchar+0x6>
        /* do nothing */;
    return c;
c0101872:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101875:	c9                   	leave  
c0101876:	c3                   	ret    

c0101877 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c0101877:	55                   	push   %ebp
c0101878:	89 e5                	mov    %esp,%ebp
c010187a:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c010187d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101880:	8b 00                	mov    (%eax),%eax
c0101882:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0101885:	8b 45 10             	mov    0x10(%ebp),%eax
c0101888:	8b 00                	mov    (%eax),%eax
c010188a:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010188d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0101894:	e9 d2 00 00 00       	jmp    c010196b <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0101899:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010189c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010189f:	01 d0                	add    %edx,%eax
c01018a1:	89 c2                	mov    %eax,%edx
c01018a3:	c1 ea 1f             	shr    $0x1f,%edx
c01018a6:	01 d0                	add    %edx,%eax
c01018a8:	d1 f8                	sar    %eax
c01018aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01018ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01018b0:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01018b3:	eb 04                	jmp    c01018b9 <stab_binsearch+0x42>
            m --;
c01018b5:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01018b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018bc:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01018bf:	7c 1f                	jl     c01018e0 <stab_binsearch+0x69>
c01018c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01018c4:	89 d0                	mov    %edx,%eax
c01018c6:	01 c0                	add    %eax,%eax
c01018c8:	01 d0                	add    %edx,%eax
c01018ca:	c1 e0 02             	shl    $0x2,%eax
c01018cd:	89 c2                	mov    %eax,%edx
c01018cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01018d2:	01 d0                	add    %edx,%eax
c01018d4:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01018d8:	0f b6 c0             	movzbl %al,%eax
c01018db:	3b 45 14             	cmp    0x14(%ebp),%eax
c01018de:	75 d5                	jne    c01018b5 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c01018e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018e3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01018e6:	7d 0b                	jge    c01018f3 <stab_binsearch+0x7c>
            l = true_m + 1;
c01018e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01018eb:	83 c0 01             	add    $0x1,%eax
c01018ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c01018f1:	eb 78                	jmp    c010196b <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c01018f3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c01018fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01018fd:	89 d0                	mov    %edx,%eax
c01018ff:	01 c0                	add    %eax,%eax
c0101901:	01 d0                	add    %edx,%eax
c0101903:	c1 e0 02             	shl    $0x2,%eax
c0101906:	89 c2                	mov    %eax,%edx
c0101908:	8b 45 08             	mov    0x8(%ebp),%eax
c010190b:	01 d0                	add    %edx,%eax
c010190d:	8b 40 08             	mov    0x8(%eax),%eax
c0101910:	3b 45 18             	cmp    0x18(%ebp),%eax
c0101913:	73 13                	jae    c0101928 <stab_binsearch+0xb1>
            *region_left = m;
c0101915:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101918:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010191b:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010191d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101920:	83 c0 01             	add    $0x1,%eax
c0101923:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0101926:	eb 43                	jmp    c010196b <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0101928:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010192b:	89 d0                	mov    %edx,%eax
c010192d:	01 c0                	add    %eax,%eax
c010192f:	01 d0                	add    %edx,%eax
c0101931:	c1 e0 02             	shl    $0x2,%eax
c0101934:	89 c2                	mov    %eax,%edx
c0101936:	8b 45 08             	mov    0x8(%ebp),%eax
c0101939:	01 d0                	add    %edx,%eax
c010193b:	8b 40 08             	mov    0x8(%eax),%eax
c010193e:	3b 45 18             	cmp    0x18(%ebp),%eax
c0101941:	76 16                	jbe    c0101959 <stab_binsearch+0xe2>
            *region_right = m - 1;
c0101943:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101946:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101949:	8b 45 10             	mov    0x10(%ebp),%eax
c010194c:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c010194e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101951:	83 e8 01             	sub    $0x1,%eax
c0101954:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0101957:	eb 12                	jmp    c010196b <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c0101959:	8b 45 0c             	mov    0xc(%ebp),%eax
c010195c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010195f:	89 10                	mov    %edx,(%eax)
            l = m;
c0101961:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101964:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c0101967:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c010196b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010196e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0101971:	0f 8e 22 ff ff ff    	jle    c0101899 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c0101977:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010197b:	75 0f                	jne    c010198c <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c010197d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101980:	8b 00                	mov    (%eax),%eax
c0101982:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101985:	8b 45 10             	mov    0x10(%ebp),%eax
c0101988:	89 10                	mov    %edx,(%eax)
c010198a:	eb 3f                	jmp    c01019cb <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010198c:	8b 45 10             	mov    0x10(%ebp),%eax
c010198f:	8b 00                	mov    (%eax),%eax
c0101991:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0101994:	eb 04                	jmp    c010199a <stab_binsearch+0x123>
c0101996:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010199a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010199d:	8b 00                	mov    (%eax),%eax
c010199f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01019a2:	7d 1f                	jge    c01019c3 <stab_binsearch+0x14c>
c01019a4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01019a7:	89 d0                	mov    %edx,%eax
c01019a9:	01 c0                	add    %eax,%eax
c01019ab:	01 d0                	add    %edx,%eax
c01019ad:	c1 e0 02             	shl    $0x2,%eax
c01019b0:	89 c2                	mov    %eax,%edx
c01019b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01019b5:	01 d0                	add    %edx,%eax
c01019b7:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01019bb:	0f b6 c0             	movzbl %al,%eax
c01019be:	3b 45 14             	cmp    0x14(%ebp),%eax
c01019c1:	75 d3                	jne    c0101996 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c01019c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019c6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01019c9:	89 10                	mov    %edx,(%eax)
    }
}
c01019cb:	c9                   	leave  
c01019cc:	c3                   	ret    

c01019cd <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c01019cd:	55                   	push   %ebp
c01019ce:	89 e5                	mov    %esp,%ebp
c01019d0:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c01019d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019d6:	c7 00 24 d6 10 c0    	movl   $0xc010d624,(%eax)
    info->eip_line = 0;
c01019dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019df:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c01019e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019e9:	c7 40 08 24 d6 10 c0 	movl   $0xc010d624,0x8(%eax)
    info->eip_fn_namelen = 9;
c01019f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019f3:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c01019fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019fd:	8b 55 08             	mov    0x8(%ebp),%edx
c0101a00:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0101a03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101a06:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0101a0d:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0101a14:	76 21                	jbe    c0101a37 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0101a16:	c7 45 f4 60 fd 10 c0 	movl   $0xc010fd60,-0xc(%ebp)
        stab_end = __STAB_END__;
c0101a1d:	c7 45 f0 4c 5b 12 c0 	movl   $0xc0125b4c,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0101a24:	c7 45 ec 4d 5b 12 c0 	movl   $0xc0125b4d,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0101a2b:	c7 45 e8 63 ad 12 c0 	movl   $0xc012ad63,-0x18(%ebp)
c0101a32:	e9 ea 00 00 00       	jmp    c0101b21 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0101a37:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0101a3e:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0101a43:	85 c0                	test   %eax,%eax
c0101a45:	74 11                	je     c0101a58 <debuginfo_eip+0x8b>
c0101a47:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0101a4c:	8b 40 18             	mov    0x18(%eax),%eax
c0101a4f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0101a52:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0101a56:	75 0a                	jne    c0101a62 <debuginfo_eip+0x95>
            return -1;
c0101a58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101a5d:	e9 9e 03 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c0101a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a65:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0101a6c:	00 
c0101a6d:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0101a74:	00 
c0101a75:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101a79:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a7c:	89 04 24             	mov    %eax,(%esp)
c0101a7f:	e8 e2 89 00 00       	call   c010a466 <user_mem_check>
c0101a84:	85 c0                	test   %eax,%eax
c0101a86:	75 0a                	jne    c0101a92 <debuginfo_eip+0xc5>
            return -1;
c0101a88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101a8d:	e9 6e 03 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0101a92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a95:	8b 00                	mov    (%eax),%eax
c0101a97:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c0101a9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a9d:	8b 40 04             	mov    0x4(%eax),%eax
c0101aa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0101aa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101aa6:	8b 40 08             	mov    0x8(%eax),%eax
c0101aa9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c0101aac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101aaf:	8b 40 0c             	mov    0xc(%eax),%eax
c0101ab2:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0101ab5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101abb:	29 c2                	sub    %eax,%edx
c0101abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ac0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0101ac7:	00 
c0101ac8:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101acc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ad0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101ad3:	89 04 24             	mov    %eax,(%esp)
c0101ad6:	e8 8b 89 00 00       	call   c010a466 <user_mem_check>
c0101adb:	85 c0                	test   %eax,%eax
c0101add:	75 0a                	jne    c0101ae9 <debuginfo_eip+0x11c>
            return -1;
c0101adf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101ae4:	e9 17 03 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0101ae9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0101aec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101aef:	29 c2                	sub    %eax,%edx
c0101af1:	89 d0                	mov    %edx,%eax
c0101af3:	89 c2                	mov    %eax,%edx
c0101af5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101af8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0101aff:	00 
c0101b00:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101b04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101b08:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101b0b:	89 04 24             	mov    %eax,(%esp)
c0101b0e:	e8 53 89 00 00       	call   c010a466 <user_mem_check>
c0101b13:	85 c0                	test   %eax,%eax
c0101b15:	75 0a                	jne    c0101b21 <debuginfo_eip+0x154>
            return -1;
c0101b17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b1c:	e9 df 02 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0101b21:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101b24:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0101b27:	76 0d                	jbe    c0101b36 <debuginfo_eip+0x169>
c0101b29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101b2c:	83 e8 01             	sub    $0x1,%eax
c0101b2f:	0f b6 00             	movzbl (%eax),%eax
c0101b32:	84 c0                	test   %al,%al
c0101b34:	74 0a                	je     c0101b40 <debuginfo_eip+0x173>
        return -1;
c0101b36:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b3b:	e9 c0 02 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0101b40:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0101b47:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101b4d:	29 c2                	sub    %eax,%edx
c0101b4f:	89 d0                	mov    %edx,%eax
c0101b51:	c1 f8 02             	sar    $0x2,%eax
c0101b54:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c0101b5a:	83 e8 01             	sub    $0x1,%eax
c0101b5d:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0101b60:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b63:	89 44 24 10          	mov    %eax,0x10(%esp)
c0101b67:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c0101b6e:	00 
c0101b6f:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0101b72:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101b76:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0101b79:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101b80:	89 04 24             	mov    %eax,(%esp)
c0101b83:	e8 ef fc ff ff       	call   c0101877 <stab_binsearch>
    if (lfile == 0)
c0101b88:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b8b:	85 c0                	test   %eax,%eax
c0101b8d:	75 0a                	jne    c0101b99 <debuginfo_eip+0x1cc>
        return -1;
c0101b8f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b94:	e9 67 02 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0101b99:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b9c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0101b9f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101ba2:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0101ba5:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ba8:	89 44 24 10          	mov    %eax,0x10(%esp)
c0101bac:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0101bb3:	00 
c0101bb4:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0101bb7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101bbb:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0101bbe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101bc5:	89 04 24             	mov    %eax,(%esp)
c0101bc8:	e8 aa fc ff ff       	call   c0101877 <stab_binsearch>

    if (lfun <= rfun) {
c0101bcd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101bd0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101bd3:	39 c2                	cmp    %eax,%edx
c0101bd5:	7f 7c                	jg     c0101c53 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0101bd7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101bda:	89 c2                	mov    %eax,%edx
c0101bdc:	89 d0                	mov    %edx,%eax
c0101bde:	01 c0                	add    %eax,%eax
c0101be0:	01 d0                	add    %edx,%eax
c0101be2:	c1 e0 02             	shl    $0x2,%eax
c0101be5:	89 c2                	mov    %eax,%edx
c0101be7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101bea:	01 d0                	add    %edx,%eax
c0101bec:	8b 10                	mov    (%eax),%edx
c0101bee:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0101bf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101bf4:	29 c1                	sub    %eax,%ecx
c0101bf6:	89 c8                	mov    %ecx,%eax
c0101bf8:	39 c2                	cmp    %eax,%edx
c0101bfa:	73 22                	jae    c0101c1e <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0101bfc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101bff:	89 c2                	mov    %eax,%edx
c0101c01:	89 d0                	mov    %edx,%eax
c0101c03:	01 c0                	add    %eax,%eax
c0101c05:	01 d0                	add    %edx,%eax
c0101c07:	c1 e0 02             	shl    $0x2,%eax
c0101c0a:	89 c2                	mov    %eax,%edx
c0101c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c0f:	01 d0                	add    %edx,%eax
c0101c11:	8b 10                	mov    (%eax),%edx
c0101c13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101c16:	01 c2                	add    %eax,%edx
c0101c18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c1b:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0101c1e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101c21:	89 c2                	mov    %eax,%edx
c0101c23:	89 d0                	mov    %edx,%eax
c0101c25:	01 c0                	add    %eax,%eax
c0101c27:	01 d0                	add    %edx,%eax
c0101c29:	c1 e0 02             	shl    $0x2,%eax
c0101c2c:	89 c2                	mov    %eax,%edx
c0101c2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c31:	01 d0                	add    %edx,%eax
c0101c33:	8b 50 08             	mov    0x8(%eax),%edx
c0101c36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c39:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0101c3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c3f:	8b 40 10             	mov    0x10(%eax),%eax
c0101c42:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c0101c45:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101c48:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0101c4b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101c4e:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0101c51:	eb 15                	jmp    c0101c68 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c0101c53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c56:	8b 55 08             	mov    0x8(%ebp),%edx
c0101c59:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0101c5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101c5f:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c0101c62:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101c65:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0101c68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c6b:	8b 40 08             	mov    0x8(%eax),%eax
c0101c6e:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0101c75:	00 
c0101c76:	89 04 24             	mov    %eax,(%esp)
c0101c79:	e8 7b b3 00 00       	call   c010cff9 <strfind>
c0101c7e:	89 c2                	mov    %eax,%edx
c0101c80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c83:	8b 40 08             	mov    0x8(%eax),%eax
c0101c86:	29 c2                	sub    %eax,%edx
c0101c88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c8b:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0101c8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c91:	89 44 24 10          	mov    %eax,0x10(%esp)
c0101c95:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c0101c9c:	00 
c0101c9d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0101ca0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101ca4:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0101ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101cab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101cae:	89 04 24             	mov    %eax,(%esp)
c0101cb1:	e8 c1 fb ff ff       	call   c0101877 <stab_binsearch>
    if (lline <= rline) {
c0101cb6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101cb9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101cbc:	39 c2                	cmp    %eax,%edx
c0101cbe:	7f 24                	jg     c0101ce4 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0101cc0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101cc3:	89 c2                	mov    %eax,%edx
c0101cc5:	89 d0                	mov    %edx,%eax
c0101cc7:	01 c0                	add    %eax,%eax
c0101cc9:	01 d0                	add    %edx,%eax
c0101ccb:	c1 e0 02             	shl    $0x2,%eax
c0101cce:	89 c2                	mov    %eax,%edx
c0101cd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101cd3:	01 d0                	add    %edx,%eax
c0101cd5:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0101cd9:	0f b7 d0             	movzwl %ax,%edx
c0101cdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cdf:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0101ce2:	eb 13                	jmp    c0101cf7 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0101ce4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101ce9:	e9 12 01 00 00       	jmp    c0101e00 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0101cee:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101cf1:	83 e8 01             	sub    $0x1,%eax
c0101cf4:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0101cf7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101cfa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101cfd:	39 c2                	cmp    %eax,%edx
c0101cff:	7c 56                	jl     c0101d57 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0101d01:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d04:	89 c2                	mov    %eax,%edx
c0101d06:	89 d0                	mov    %edx,%eax
c0101d08:	01 c0                	add    %eax,%eax
c0101d0a:	01 d0                	add    %edx,%eax
c0101d0c:	c1 e0 02             	shl    $0x2,%eax
c0101d0f:	89 c2                	mov    %eax,%edx
c0101d11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d14:	01 d0                	add    %edx,%eax
c0101d16:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101d1a:	3c 84                	cmp    $0x84,%al
c0101d1c:	74 39                	je     c0101d57 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0101d1e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d21:	89 c2                	mov    %eax,%edx
c0101d23:	89 d0                	mov    %edx,%eax
c0101d25:	01 c0                	add    %eax,%eax
c0101d27:	01 d0                	add    %edx,%eax
c0101d29:	c1 e0 02             	shl    $0x2,%eax
c0101d2c:	89 c2                	mov    %eax,%edx
c0101d2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d31:	01 d0                	add    %edx,%eax
c0101d33:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101d37:	3c 64                	cmp    $0x64,%al
c0101d39:	75 b3                	jne    c0101cee <debuginfo_eip+0x321>
c0101d3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d3e:	89 c2                	mov    %eax,%edx
c0101d40:	89 d0                	mov    %edx,%eax
c0101d42:	01 c0                	add    %eax,%eax
c0101d44:	01 d0                	add    %edx,%eax
c0101d46:	c1 e0 02             	shl    $0x2,%eax
c0101d49:	89 c2                	mov    %eax,%edx
c0101d4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d4e:	01 d0                	add    %edx,%eax
c0101d50:	8b 40 08             	mov    0x8(%eax),%eax
c0101d53:	85 c0                	test   %eax,%eax
c0101d55:	74 97                	je     c0101cee <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0101d57:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101d5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101d5d:	39 c2                	cmp    %eax,%edx
c0101d5f:	7c 46                	jl     c0101da7 <debuginfo_eip+0x3da>
c0101d61:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d64:	89 c2                	mov    %eax,%edx
c0101d66:	89 d0                	mov    %edx,%eax
c0101d68:	01 c0                	add    %eax,%eax
c0101d6a:	01 d0                	add    %edx,%eax
c0101d6c:	c1 e0 02             	shl    $0x2,%eax
c0101d6f:	89 c2                	mov    %eax,%edx
c0101d71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d74:	01 d0                	add    %edx,%eax
c0101d76:	8b 10                	mov    (%eax),%edx
c0101d78:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0101d7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101d7e:	29 c1                	sub    %eax,%ecx
c0101d80:	89 c8                	mov    %ecx,%eax
c0101d82:	39 c2                	cmp    %eax,%edx
c0101d84:	73 21                	jae    c0101da7 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0101d86:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d89:	89 c2                	mov    %eax,%edx
c0101d8b:	89 d0                	mov    %edx,%eax
c0101d8d:	01 c0                	add    %eax,%eax
c0101d8f:	01 d0                	add    %edx,%eax
c0101d91:	c1 e0 02             	shl    $0x2,%eax
c0101d94:	89 c2                	mov    %eax,%edx
c0101d96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d99:	01 d0                	add    %edx,%eax
c0101d9b:	8b 10                	mov    (%eax),%edx
c0101d9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101da0:	01 c2                	add    %eax,%edx
c0101da2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101da5:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0101da7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101daa:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101dad:	39 c2                	cmp    %eax,%edx
c0101daf:	7d 4a                	jge    c0101dfb <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0101db1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101db4:	83 c0 01             	add    $0x1,%eax
c0101db7:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101dba:	eb 18                	jmp    c0101dd4 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0101dbc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dbf:	8b 40 14             	mov    0x14(%eax),%eax
c0101dc2:	8d 50 01             	lea    0x1(%eax),%edx
c0101dc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dc8:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0101dcb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101dce:	83 c0 01             	add    $0x1,%eax
c0101dd1:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0101dd4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101dd7:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0101dda:	39 c2                	cmp    %eax,%edx
c0101ddc:	7d 1d                	jge    c0101dfb <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0101dde:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101de1:	89 c2                	mov    %eax,%edx
c0101de3:	89 d0                	mov    %edx,%eax
c0101de5:	01 c0                	add    %eax,%eax
c0101de7:	01 d0                	add    %edx,%eax
c0101de9:	c1 e0 02             	shl    $0x2,%eax
c0101dec:	89 c2                	mov    %eax,%edx
c0101dee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101df1:	01 d0                	add    %edx,%eax
c0101df3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101df7:	3c a0                	cmp    $0xa0,%al
c0101df9:	74 c1                	je     c0101dbc <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101e00:	c9                   	leave  
c0101e01:	c3                   	ret    

c0101e02 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0101e02:	55                   	push   %ebp
c0101e03:	89 e5                	mov    %esp,%ebp
c0101e05:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0101e08:	c7 04 24 2e d6 10 c0 	movl   $0xc010d62e,(%esp)
c0101e0f:	e8 c2 f9 ff ff       	call   c01017d6 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0101e14:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c0101e1b:	c0 
c0101e1c:	c7 04 24 47 d6 10 c0 	movl   $0xc010d647,(%esp)
c0101e23:	e8 ae f9 ff ff       	call   c01017d6 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0101e28:	c7 44 24 04 0e d3 10 	movl   $0xc010d30e,0x4(%esp)
c0101e2f:	c0 
c0101e30:	c7 04 24 5f d6 10 c0 	movl   $0xc010d65f,(%esp)
c0101e37:	e8 9a f9 ff ff       	call   c01017d6 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0101e3c:	c7 44 24 04 2a ef 19 	movl   $0xc019ef2a,0x4(%esp)
c0101e43:	c0 
c0101e44:	c7 04 24 77 d6 10 c0 	movl   $0xc010d677,(%esp)
c0101e4b:	e8 86 f9 ff ff       	call   c01017d6 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0101e50:	c7 44 24 04 b8 20 1a 	movl   $0xc01a20b8,0x4(%esp)
c0101e57:	c0 
c0101e58:	c7 04 24 8f d6 10 c0 	movl   $0xc010d68f,(%esp)
c0101e5f:	e8 72 f9 ff ff       	call   c01017d6 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0101e64:	b8 b8 20 1a c0       	mov    $0xc01a20b8,%eax
c0101e69:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0101e6f:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0101e74:	29 c2                	sub    %eax,%edx
c0101e76:	89 d0                	mov    %edx,%eax
c0101e78:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0101e7e:	85 c0                	test   %eax,%eax
c0101e80:	0f 48 c2             	cmovs  %edx,%eax
c0101e83:	c1 f8 0a             	sar    $0xa,%eax
c0101e86:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101e8a:	c7 04 24 a8 d6 10 c0 	movl   $0xc010d6a8,(%esp)
c0101e91:	e8 40 f9 ff ff       	call   c01017d6 <cprintf>
}
c0101e96:	c9                   	leave  
c0101e97:	c3                   	ret    

c0101e98 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0101e98:	55                   	push   %ebp
c0101e99:	89 e5                	mov    %esp,%ebp
c0101e9b:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0101ea1:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0101ea4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ea8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101eab:	89 04 24             	mov    %eax,(%esp)
c0101eae:	e8 1a fb ff ff       	call   c01019cd <debuginfo_eip>
c0101eb3:	85 c0                	test   %eax,%eax
c0101eb5:	74 15                	je     c0101ecc <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0101eb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0101eba:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ebe:	c7 04 24 d2 d6 10 c0 	movl   $0xc010d6d2,(%esp)
c0101ec5:	e8 0c f9 ff ff       	call   c01017d6 <cprintf>
c0101eca:	eb 6d                	jmp    c0101f39 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0101ecc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101ed3:	eb 1c                	jmp    c0101ef1 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0101ed5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0101ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101edb:	01 d0                	add    %edx,%eax
c0101edd:	0f b6 00             	movzbl (%eax),%eax
c0101ee0:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0101ee6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101ee9:	01 ca                	add    %ecx,%edx
c0101eeb:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0101eed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101ef1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101ef4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0101ef7:	7f dc                	jg     c0101ed5 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0101ef9:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0101eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f02:	01 d0                	add    %edx,%eax
c0101f04:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0101f07:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0101f0a:	8b 55 08             	mov    0x8(%ebp),%edx
c0101f0d:	89 d1                	mov    %edx,%ecx
c0101f0f:	29 c1                	sub    %eax,%ecx
c0101f11:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0101f14:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101f17:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0101f1b:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0101f21:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101f25:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101f29:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101f2d:	c7 04 24 ee d6 10 c0 	movl   $0xc010d6ee,(%esp)
c0101f34:	e8 9d f8 ff ff       	call   c01017d6 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0101f39:	c9                   	leave  
c0101f3a:	c3                   	ret    

c0101f3b <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0101f3b:	55                   	push   %ebp
c0101f3c:	89 e5                	mov    %esp,%ebp
c0101f3e:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0101f41:	8b 45 04             	mov    0x4(%ebp),%eax
c0101f44:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0101f47:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101f4a:	c9                   	leave  
c0101f4b:	c3                   	ret    

c0101f4c <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0101f4c:	55                   	push   %ebp
c0101f4d:	89 e5                	mov    %esp,%ebp
c0101f4f:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0101f52:	89 e8                	mov    %ebp,%eax
c0101f54:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0101f57:	8b 45 e0             	mov    -0x20(%ebp),%eax
     *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
     *    (3.5) popup a calling stackframe
     *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
     *                   the calling funciton's ebp = ss:[ebp]
     */
    uint32_t ebp = read_ebp();
c0101f5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t eip = read_eip();
c0101f5d:	e8 d9 ff ff ff       	call   c0101f3b <read_eip>
c0101f62:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i;
    int j;
    uint32_t *args;
    for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
c0101f65:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101f6c:	e9 88 00 00 00       	jmp    c0101ff9 <print_stackframe+0xad>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0101f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101f74:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101f78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101f7f:	c7 04 24 00 d7 10 c0 	movl   $0xc010d700,(%esp)
c0101f86:	e8 4b f8 ff ff       	call   c01017d6 <cprintf>
        args = (uint32_t *)ebp + 2;
c0101f8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f8e:	83 c0 08             	add    $0x8,%eax
c0101f91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for(j = 0; j < 4; j++)
c0101f94:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0101f9b:	eb 25                	jmp    c0101fc2 <print_stackframe+0x76>
            cprintf("0x%08x ",args[j]);
c0101f9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101fa0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101fa7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101faa:	01 d0                	add    %edx,%eax
c0101fac:	8b 00                	mov    (%eax),%eax
c0101fae:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101fb2:	c7 04 24 1c d7 10 c0 	movl   $0xc010d71c,(%esp)
c0101fb9:	e8 18 f8 ff ff       	call   c01017d6 <cprintf>
    int j;
    uint32_t *args;
    for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        args = (uint32_t *)ebp + 2;
        for(j = 0; j < 4; j++)
c0101fbe:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0101fc2:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0101fc6:	7e d5                	jle    c0101f9d <print_stackframe+0x51>
            cprintf("0x%08x ",args[j]);
        cprintf("\n");
c0101fc8:	c7 04 24 24 d7 10 c0 	movl   $0xc010d724,(%esp)
c0101fcf:	e8 02 f8 ff ff       	call   c01017d6 <cprintf>
        print_debuginfo(eip-1);
c0101fd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101fd7:	83 e8 01             	sub    $0x1,%eax
c0101fda:	89 04 24             	mov    %eax,(%esp)
c0101fdd:	e8 b6 fe ff ff       	call   c0101e98 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0101fe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101fe5:	83 c0 04             	add    $0x4,%eax
c0101fe8:	8b 00                	mov    (%eax),%eax
c0101fea:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0101fed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ff0:	8b 00                	mov    (%eax),%eax
c0101ff2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t ebp = read_ebp();
    uint32_t eip = read_eip();
    int i;
    int j;
    uint32_t *args;
    for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
c0101ff5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0101ff9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101ffd:	74 0a                	je     c0102009 <print_stackframe+0xbd>
c0101fff:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0102003:	0f 8e 68 ff ff ff    	jle    c0101f71 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip-1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0102009:	c9                   	leave  
c010200a:	c3                   	ret    

c010200b <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c010200b:	55                   	push   %ebp
c010200c:	89 e5                	mov    %esp,%ebp
c010200e:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0102011:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0102018:	eb 0c                	jmp    c0102026 <parse+0x1b>
            *buf ++ = '\0';
c010201a:	8b 45 08             	mov    0x8(%ebp),%eax
c010201d:	8d 50 01             	lea    0x1(%eax),%edx
c0102020:	89 55 08             	mov    %edx,0x8(%ebp)
c0102023:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0102026:	8b 45 08             	mov    0x8(%ebp),%eax
c0102029:	0f b6 00             	movzbl (%eax),%eax
c010202c:	84 c0                	test   %al,%al
c010202e:	74 1d                	je     c010204d <parse+0x42>
c0102030:	8b 45 08             	mov    0x8(%ebp),%eax
c0102033:	0f b6 00             	movzbl (%eax),%eax
c0102036:	0f be c0             	movsbl %al,%eax
c0102039:	89 44 24 04          	mov    %eax,0x4(%esp)
c010203d:	c7 04 24 a8 d7 10 c0 	movl   $0xc010d7a8,(%esp)
c0102044:	e8 7d af 00 00       	call   c010cfc6 <strchr>
c0102049:	85 c0                	test   %eax,%eax
c010204b:	75 cd                	jne    c010201a <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c010204d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102050:	0f b6 00             	movzbl (%eax),%eax
c0102053:	84 c0                	test   %al,%al
c0102055:	75 02                	jne    c0102059 <parse+0x4e>
            break;
c0102057:	eb 67                	jmp    c01020c0 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0102059:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c010205d:	75 14                	jne    c0102073 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c010205f:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0102066:	00 
c0102067:	c7 04 24 ad d7 10 c0 	movl   $0xc010d7ad,(%esp)
c010206e:	e8 63 f7 ff ff       	call   c01017d6 <cprintf>
        }
        argv[argc ++] = buf;
c0102073:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102076:	8d 50 01             	lea    0x1(%eax),%edx
c0102079:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010207c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0102083:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102086:	01 c2                	add    %eax,%edx
c0102088:	8b 45 08             	mov    0x8(%ebp),%eax
c010208b:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c010208d:	eb 04                	jmp    c0102093 <parse+0x88>
            buf ++;
c010208f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0102093:	8b 45 08             	mov    0x8(%ebp),%eax
c0102096:	0f b6 00             	movzbl (%eax),%eax
c0102099:	84 c0                	test   %al,%al
c010209b:	74 1d                	je     c01020ba <parse+0xaf>
c010209d:	8b 45 08             	mov    0x8(%ebp),%eax
c01020a0:	0f b6 00             	movzbl (%eax),%eax
c01020a3:	0f be c0             	movsbl %al,%eax
c01020a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01020aa:	c7 04 24 a8 d7 10 c0 	movl   $0xc010d7a8,(%esp)
c01020b1:	e8 10 af 00 00       	call   c010cfc6 <strchr>
c01020b6:	85 c0                	test   %eax,%eax
c01020b8:	74 d5                	je     c010208f <parse+0x84>
            buf ++;
        }
    }
c01020ba:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c01020bb:	e9 66 ff ff ff       	jmp    c0102026 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c01020c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01020c3:	c9                   	leave  
c01020c4:	c3                   	ret    

c01020c5 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c01020c5:	55                   	push   %ebp
c01020c6:	89 e5                	mov    %esp,%ebp
c01020c8:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c01020cb:	8d 45 b0             	lea    -0x50(%ebp),%eax
c01020ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01020d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01020d5:	89 04 24             	mov    %eax,(%esp)
c01020d8:	e8 2e ff ff ff       	call   c010200b <parse>
c01020dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c01020e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01020e4:	75 0a                	jne    c01020f0 <runcmd+0x2b>
        return 0;
c01020e6:	b8 00 00 00 00       	mov    $0x0,%eax
c01020eb:	e9 85 00 00 00       	jmp    c0102175 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c01020f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01020f7:	eb 5c                	jmp    c0102155 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c01020f9:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c01020fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01020ff:	89 d0                	mov    %edx,%eax
c0102101:	01 c0                	add    %eax,%eax
c0102103:	01 d0                	add    %edx,%eax
c0102105:	c1 e0 02             	shl    $0x2,%eax
c0102108:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c010210d:	8b 00                	mov    (%eax),%eax
c010210f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0102113:	89 04 24             	mov    %eax,(%esp)
c0102116:	e8 0c ae 00 00       	call   c010cf27 <strcmp>
c010211b:	85 c0                	test   %eax,%eax
c010211d:	75 32                	jne    c0102151 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c010211f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102122:	89 d0                	mov    %edx,%eax
c0102124:	01 c0                	add    %eax,%eax
c0102126:	01 d0                	add    %edx,%eax
c0102128:	c1 e0 02             	shl    $0x2,%eax
c010212b:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0102130:	8b 40 08             	mov    0x8(%eax),%eax
c0102133:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0102136:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0102139:	8b 55 0c             	mov    0xc(%ebp),%edx
c010213c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102140:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0102143:	83 c2 04             	add    $0x4,%edx
c0102146:	89 54 24 04          	mov    %edx,0x4(%esp)
c010214a:	89 0c 24             	mov    %ecx,(%esp)
c010214d:	ff d0                	call   *%eax
c010214f:	eb 24                	jmp    c0102175 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0102151:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102155:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102158:	83 f8 02             	cmp    $0x2,%eax
c010215b:	76 9c                	jbe    c01020f9 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c010215d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0102160:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102164:	c7 04 24 cb d7 10 c0 	movl   $0xc010d7cb,(%esp)
c010216b:	e8 66 f6 ff ff       	call   c01017d6 <cprintf>
    return 0;
c0102170:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102175:	c9                   	leave  
c0102176:	c3                   	ret    

c0102177 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0102177:	55                   	push   %ebp
c0102178:	89 e5                	mov    %esp,%ebp
c010217a:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c010217d:	c7 04 24 e4 d7 10 c0 	movl   $0xc010d7e4,(%esp)
c0102184:	e8 4d f6 ff ff       	call   c01017d6 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0102189:	c7 04 24 0c d8 10 c0 	movl   $0xc010d80c,(%esp)
c0102190:	e8 41 f6 ff ff       	call   c01017d6 <cprintf>

    if (tf != NULL) {
c0102195:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0102199:	74 0b                	je     c01021a6 <kmonitor+0x2f>
        print_trapframe(tf);
c010219b:	8b 45 08             	mov    0x8(%ebp),%eax
c010219e:	89 04 24             	mov    %eax,(%esp)
c01021a1:	e8 c7 16 00 00       	call   c010386d <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c01021a6:	c7 04 24 31 d8 10 c0 	movl   $0xc010d831,(%esp)
c01021ad:	e8 1b f5 ff ff       	call   c01016cd <readline>
c01021b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01021b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01021b9:	74 18                	je     c01021d3 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c01021bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01021be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01021c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01021c5:	89 04 24             	mov    %eax,(%esp)
c01021c8:	e8 f8 fe ff ff       	call   c01020c5 <runcmd>
c01021cd:	85 c0                	test   %eax,%eax
c01021cf:	79 02                	jns    c01021d3 <kmonitor+0x5c>
                break;
c01021d1:	eb 02                	jmp    c01021d5 <kmonitor+0x5e>
            }
        }
    }
c01021d3:	eb d1                	jmp    c01021a6 <kmonitor+0x2f>
}
c01021d5:	c9                   	leave  
c01021d6:	c3                   	ret    

c01021d7 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c01021d7:	55                   	push   %ebp
c01021d8:	89 e5                	mov    %esp,%ebp
c01021da:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c01021dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01021e4:	eb 3f                	jmp    c0102225 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c01021e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01021e9:	89 d0                	mov    %edx,%eax
c01021eb:	01 c0                	add    %eax,%eax
c01021ed:	01 d0                	add    %edx,%eax
c01021ef:	c1 e0 02             	shl    $0x2,%eax
c01021f2:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c01021f7:	8b 48 04             	mov    0x4(%eax),%ecx
c01021fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01021fd:	89 d0                	mov    %edx,%eax
c01021ff:	01 c0                	add    %eax,%eax
c0102201:	01 d0                	add    %edx,%eax
c0102203:	c1 e0 02             	shl    $0x2,%eax
c0102206:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c010220b:	8b 00                	mov    (%eax),%eax
c010220d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0102211:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102215:	c7 04 24 35 d8 10 c0 	movl   $0xc010d835,(%esp)
c010221c:	e8 b5 f5 ff ff       	call   c01017d6 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0102221:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102225:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102228:	83 f8 02             	cmp    $0x2,%eax
c010222b:	76 b9                	jbe    c01021e6 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c010222d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102232:	c9                   	leave  
c0102233:	c3                   	ret    

c0102234 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0102234:	55                   	push   %ebp
c0102235:	89 e5                	mov    %esp,%ebp
c0102237:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c010223a:	e8 c3 fb ff ff       	call   c0101e02 <print_kerninfo>
    return 0;
c010223f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102244:	c9                   	leave  
c0102245:	c3                   	ret    

c0102246 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0102246:	55                   	push   %ebp
c0102247:	89 e5                	mov    %esp,%ebp
c0102249:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c010224c:	e8 fb fc ff ff       	call   c0101f4c <print_stackframe>
    return 0;
c0102251:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102256:	c9                   	leave  
c0102257:	c3                   	ret    

c0102258 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0102258:	55                   	push   %ebp
c0102259:	89 e5                	mov    %esp,%ebp
c010225b:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c010225e:	a1 60 f3 19 c0       	mov    0xc019f360,%eax
c0102263:	85 c0                	test   %eax,%eax
c0102265:	74 02                	je     c0102269 <__panic+0x11>
        goto panic_dead;
c0102267:	eb 48                	jmp    c01022b1 <__panic+0x59>
    }
    is_panic = 1;
c0102269:	c7 05 60 f3 19 c0 01 	movl   $0x1,0xc019f360
c0102270:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0102273:	8d 45 14             	lea    0x14(%ebp),%eax
c0102276:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0102279:	8b 45 0c             	mov    0xc(%ebp),%eax
c010227c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102280:	8b 45 08             	mov    0x8(%ebp),%eax
c0102283:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102287:	c7 04 24 3e d8 10 c0 	movl   $0xc010d83e,(%esp)
c010228e:	e8 43 f5 ff ff       	call   c01017d6 <cprintf>
    vcprintf(fmt, ap);
c0102293:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102296:	89 44 24 04          	mov    %eax,0x4(%esp)
c010229a:	8b 45 10             	mov    0x10(%ebp),%eax
c010229d:	89 04 24             	mov    %eax,(%esp)
c01022a0:	e8 fe f4 ff ff       	call   c01017a3 <vcprintf>
    cprintf("\n");
c01022a5:	c7 04 24 5a d8 10 c0 	movl   $0xc010d85a,(%esp)
c01022ac:	e8 25 f5 ff ff       	call   c01017d6 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c01022b1:	e8 fa 11 00 00       	call   c01034b0 <intr_disable>
    while (1) {
        kmonitor(NULL);
c01022b6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01022bd:	e8 b5 fe ff ff       	call   c0102177 <kmonitor>
    }
c01022c2:	eb f2                	jmp    c01022b6 <__panic+0x5e>

c01022c4 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c01022c4:	55                   	push   %ebp
c01022c5:	89 e5                	mov    %esp,%ebp
c01022c7:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c01022ca:	8d 45 14             	lea    0x14(%ebp),%eax
c01022cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c01022d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01022d3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01022d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01022da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01022de:	c7 04 24 5c d8 10 c0 	movl   $0xc010d85c,(%esp)
c01022e5:	e8 ec f4 ff ff       	call   c01017d6 <cprintf>
    vcprintf(fmt, ap);
c01022ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01022ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01022f1:	8b 45 10             	mov    0x10(%ebp),%eax
c01022f4:	89 04 24             	mov    %eax,(%esp)
c01022f7:	e8 a7 f4 ff ff       	call   c01017a3 <vcprintf>
    cprintf("\n");
c01022fc:	c7 04 24 5a d8 10 c0 	movl   $0xc010d85a,(%esp)
c0102303:	e8 ce f4 ff ff       	call   c01017d6 <cprintf>
    va_end(ap);
}
c0102308:	c9                   	leave  
c0102309:	c3                   	ret    

c010230a <is_kernel_panic>:

bool
is_kernel_panic(void) {
c010230a:	55                   	push   %ebp
c010230b:	89 e5                	mov    %esp,%ebp
    return is_panic;
c010230d:	a1 60 f3 19 c0       	mov    0xc019f360,%eax
}
c0102312:	5d                   	pop    %ebp
c0102313:	c3                   	ret    

c0102314 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0102314:	55                   	push   %ebp
c0102315:	89 e5                	mov    %esp,%ebp
c0102317:	83 ec 28             	sub    $0x28,%esp
c010231a:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0102320:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102324:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102328:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010232c:	ee                   	out    %al,(%dx)
c010232d:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0102333:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0102337:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010233b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010233f:	ee                   	out    %al,(%dx)
c0102340:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0102346:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c010234a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010234e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102352:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0102353:	c7 05 b4 1f 1a c0 00 	movl   $0x0,0xc01a1fb4
c010235a:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c010235d:	c7 04 24 7a d8 10 c0 	movl   $0xc010d87a,(%esp)
c0102364:	e8 6d f4 ff ff       	call   c01017d6 <cprintf>
    pic_enable(IRQ_TIMER);
c0102369:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0102370:	e8 99 11 00 00       	call   c010350e <pic_enable>
}
c0102375:	c9                   	leave  
c0102376:	c3                   	ret    

c0102377 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0102377:	55                   	push   %ebp
c0102378:	89 e5                	mov    %esp,%ebp
c010237a:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010237d:	9c                   	pushf  
c010237e:	58                   	pop    %eax
c010237f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0102382:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0102385:	25 00 02 00 00       	and    $0x200,%eax
c010238a:	85 c0                	test   %eax,%eax
c010238c:	74 0c                	je     c010239a <__intr_save+0x23>
        intr_disable();
c010238e:	e8 1d 11 00 00       	call   c01034b0 <intr_disable>
        return 1;
c0102393:	b8 01 00 00 00       	mov    $0x1,%eax
c0102398:	eb 05                	jmp    c010239f <__intr_save+0x28>
    }
    return 0;
c010239a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010239f:	c9                   	leave  
c01023a0:	c3                   	ret    

c01023a1 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01023a1:	55                   	push   %ebp
c01023a2:	89 e5                	mov    %esp,%ebp
c01023a4:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01023a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01023ab:	74 05                	je     c01023b2 <__intr_restore+0x11>
        intr_enable();
c01023ad:	e8 f8 10 00 00       	call   c01034aa <intr_enable>
    }
}
c01023b2:	c9                   	leave  
c01023b3:	c3                   	ret    

c01023b4 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c01023b4:	55                   	push   %ebp
c01023b5:	89 e5                	mov    %esp,%ebp
c01023b7:	83 ec 10             	sub    $0x10,%esp
c01023ba:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01023c0:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01023c4:	89 c2                	mov    %eax,%edx
c01023c6:	ec                   	in     (%dx),%al
c01023c7:	88 45 fd             	mov    %al,-0x3(%ebp)
c01023ca:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c01023d0:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01023d4:	89 c2                	mov    %eax,%edx
c01023d6:	ec                   	in     (%dx),%al
c01023d7:	88 45 f9             	mov    %al,-0x7(%ebp)
c01023da:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c01023e0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01023e4:	89 c2                	mov    %eax,%edx
c01023e6:	ec                   	in     (%dx),%al
c01023e7:	88 45 f5             	mov    %al,-0xb(%ebp)
c01023ea:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c01023f0:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01023f4:	89 c2                	mov    %eax,%edx
c01023f6:	ec                   	in     (%dx),%al
c01023f7:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c01023fa:	c9                   	leave  
c01023fb:	c3                   	ret    

c01023fc <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c01023fc:	55                   	push   %ebp
c01023fd:	89 e5                	mov    %esp,%ebp
c01023ff:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0102402:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0102409:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010240c:	0f b7 00             	movzwl (%eax),%eax
c010240f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0102413:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102416:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c010241b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010241e:	0f b7 00             	movzwl (%eax),%eax
c0102421:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0102425:	74 12                	je     c0102439 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0102427:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c010242e:	66 c7 05 86 f3 19 c0 	movw   $0x3b4,0xc019f386
c0102435:	b4 03 
c0102437:	eb 13                	jmp    c010244c <cga_init+0x50>
    } else {
        *cp = was;
c0102439:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010243c:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102440:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0102443:	66 c7 05 86 f3 19 c0 	movw   $0x3d4,0xc019f386
c010244a:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c010244c:	0f b7 05 86 f3 19 c0 	movzwl 0xc019f386,%eax
c0102453:	0f b7 c0             	movzwl %ax,%eax
c0102456:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010245a:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010245e:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102462:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102466:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0102467:	0f b7 05 86 f3 19 c0 	movzwl 0xc019f386,%eax
c010246e:	83 c0 01             	add    $0x1,%eax
c0102471:	0f b7 c0             	movzwl %ax,%eax
c0102474:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102478:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010247c:	89 c2                	mov    %eax,%edx
c010247e:	ec                   	in     (%dx),%al
c010247f:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0102482:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102486:	0f b6 c0             	movzbl %al,%eax
c0102489:	c1 e0 08             	shl    $0x8,%eax
c010248c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010248f:	0f b7 05 86 f3 19 c0 	movzwl 0xc019f386,%eax
c0102496:	0f b7 c0             	movzwl %ax,%eax
c0102499:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010249d:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01024a1:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01024a5:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01024a9:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c01024aa:	0f b7 05 86 f3 19 c0 	movzwl 0xc019f386,%eax
c01024b1:	83 c0 01             	add    $0x1,%eax
c01024b4:	0f b7 c0             	movzwl %ax,%eax
c01024b7:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01024bb:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01024bf:	89 c2                	mov    %eax,%edx
c01024c1:	ec                   	in     (%dx),%al
c01024c2:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c01024c5:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01024c9:	0f b6 c0             	movzbl %al,%eax
c01024cc:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c01024cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01024d2:	a3 80 f3 19 c0       	mov    %eax,0xc019f380
    crt_pos = pos;
c01024d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01024da:	66 a3 84 f3 19 c0    	mov    %ax,0xc019f384
}
c01024e0:	c9                   	leave  
c01024e1:	c3                   	ret    

c01024e2 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c01024e2:	55                   	push   %ebp
c01024e3:	89 e5                	mov    %esp,%ebp
c01024e5:	83 ec 48             	sub    $0x48,%esp
c01024e8:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c01024ee:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01024f2:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01024f6:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01024fa:	ee                   	out    %al,(%dx)
c01024fb:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c0102501:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c0102505:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102509:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010250d:	ee                   	out    %al,(%dx)
c010250e:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c0102514:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0102518:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010251c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102520:	ee                   	out    %al,(%dx)
c0102521:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0102527:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c010252b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010252f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102533:	ee                   	out    %al,(%dx)
c0102534:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c010253a:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c010253e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102542:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102546:	ee                   	out    %al,(%dx)
c0102547:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c010254d:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c0102551:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102555:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102559:	ee                   	out    %al,(%dx)
c010255a:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c0102560:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c0102564:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102568:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010256c:	ee                   	out    %al,(%dx)
c010256d:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102573:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0102577:	89 c2                	mov    %eax,%edx
c0102579:	ec                   	in     (%dx),%al
c010257a:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c010257d:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0102581:	3c ff                	cmp    $0xff,%al
c0102583:	0f 95 c0             	setne  %al
c0102586:	0f b6 c0             	movzbl %al,%eax
c0102589:	a3 88 f3 19 c0       	mov    %eax,0xc019f388
c010258e:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102594:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0102598:	89 c2                	mov    %eax,%edx
c010259a:	ec                   	in     (%dx),%al
c010259b:	88 45 d5             	mov    %al,-0x2b(%ebp)
c010259e:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c01025a4:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c01025a8:	89 c2                	mov    %eax,%edx
c01025aa:	ec                   	in     (%dx),%al
c01025ab:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c01025ae:	a1 88 f3 19 c0       	mov    0xc019f388,%eax
c01025b3:	85 c0                	test   %eax,%eax
c01025b5:	74 0c                	je     c01025c3 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c01025b7:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01025be:	e8 4b 0f 00 00       	call   c010350e <pic_enable>
    }
}
c01025c3:	c9                   	leave  
c01025c4:	c3                   	ret    

c01025c5 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c01025c5:	55                   	push   %ebp
c01025c6:	89 e5                	mov    %esp,%ebp
c01025c8:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01025cb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01025d2:	eb 09                	jmp    c01025dd <lpt_putc_sub+0x18>
        delay();
c01025d4:	e8 db fd ff ff       	call   c01023b4 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01025d9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01025dd:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c01025e3:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01025e7:	89 c2                	mov    %eax,%edx
c01025e9:	ec                   	in     (%dx),%al
c01025ea:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01025ed:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01025f1:	84 c0                	test   %al,%al
c01025f3:	78 09                	js     c01025fe <lpt_putc_sub+0x39>
c01025f5:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01025fc:	7e d6                	jle    c01025d4 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c01025fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0102601:	0f b6 c0             	movzbl %al,%eax
c0102604:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c010260a:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010260d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102611:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102615:	ee                   	out    %al,(%dx)
c0102616:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c010261c:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c0102620:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102624:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102628:	ee                   	out    %al,(%dx)
c0102629:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c010262f:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c0102633:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102637:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010263b:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c010263c:	c9                   	leave  
c010263d:	c3                   	ret    

c010263e <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c010263e:	55                   	push   %ebp
c010263f:	89 e5                	mov    %esp,%ebp
c0102641:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0102644:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0102648:	74 0d                	je     c0102657 <lpt_putc+0x19>
        lpt_putc_sub(c);
c010264a:	8b 45 08             	mov    0x8(%ebp),%eax
c010264d:	89 04 24             	mov    %eax,(%esp)
c0102650:	e8 70 ff ff ff       	call   c01025c5 <lpt_putc_sub>
c0102655:	eb 24                	jmp    c010267b <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c0102657:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010265e:	e8 62 ff ff ff       	call   c01025c5 <lpt_putc_sub>
        lpt_putc_sub(' ');
c0102663:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010266a:	e8 56 ff ff ff       	call   c01025c5 <lpt_putc_sub>
        lpt_putc_sub('\b');
c010266f:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0102676:	e8 4a ff ff ff       	call   c01025c5 <lpt_putc_sub>
    }
}
c010267b:	c9                   	leave  
c010267c:	c3                   	ret    

c010267d <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c010267d:	55                   	push   %ebp
c010267e:	89 e5                	mov    %esp,%ebp
c0102680:	53                   	push   %ebx
c0102681:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0102684:	8b 45 08             	mov    0x8(%ebp),%eax
c0102687:	b0 00                	mov    $0x0,%al
c0102689:	85 c0                	test   %eax,%eax
c010268b:	75 07                	jne    c0102694 <cga_putc+0x17>
        c |= 0x0700;
c010268d:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0102694:	8b 45 08             	mov    0x8(%ebp),%eax
c0102697:	0f b6 c0             	movzbl %al,%eax
c010269a:	83 f8 0a             	cmp    $0xa,%eax
c010269d:	74 4c                	je     c01026eb <cga_putc+0x6e>
c010269f:	83 f8 0d             	cmp    $0xd,%eax
c01026a2:	74 57                	je     c01026fb <cga_putc+0x7e>
c01026a4:	83 f8 08             	cmp    $0x8,%eax
c01026a7:	0f 85 88 00 00 00    	jne    c0102735 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c01026ad:	0f b7 05 84 f3 19 c0 	movzwl 0xc019f384,%eax
c01026b4:	66 85 c0             	test   %ax,%ax
c01026b7:	74 30                	je     c01026e9 <cga_putc+0x6c>
            crt_pos --;
c01026b9:	0f b7 05 84 f3 19 c0 	movzwl 0xc019f384,%eax
c01026c0:	83 e8 01             	sub    $0x1,%eax
c01026c3:	66 a3 84 f3 19 c0    	mov    %ax,0xc019f384
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c01026c9:	a1 80 f3 19 c0       	mov    0xc019f380,%eax
c01026ce:	0f b7 15 84 f3 19 c0 	movzwl 0xc019f384,%edx
c01026d5:	0f b7 d2             	movzwl %dx,%edx
c01026d8:	01 d2                	add    %edx,%edx
c01026da:	01 c2                	add    %eax,%edx
c01026dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01026df:	b0 00                	mov    $0x0,%al
c01026e1:	83 c8 20             	or     $0x20,%eax
c01026e4:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c01026e7:	eb 72                	jmp    c010275b <cga_putc+0xde>
c01026e9:	eb 70                	jmp    c010275b <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c01026eb:	0f b7 05 84 f3 19 c0 	movzwl 0xc019f384,%eax
c01026f2:	83 c0 50             	add    $0x50,%eax
c01026f5:	66 a3 84 f3 19 c0    	mov    %ax,0xc019f384
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c01026fb:	0f b7 1d 84 f3 19 c0 	movzwl 0xc019f384,%ebx
c0102702:	0f b7 0d 84 f3 19 c0 	movzwl 0xc019f384,%ecx
c0102709:	0f b7 c1             	movzwl %cx,%eax
c010270c:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0102712:	c1 e8 10             	shr    $0x10,%eax
c0102715:	89 c2                	mov    %eax,%edx
c0102717:	66 c1 ea 06          	shr    $0x6,%dx
c010271b:	89 d0                	mov    %edx,%eax
c010271d:	c1 e0 02             	shl    $0x2,%eax
c0102720:	01 d0                	add    %edx,%eax
c0102722:	c1 e0 04             	shl    $0x4,%eax
c0102725:	29 c1                	sub    %eax,%ecx
c0102727:	89 ca                	mov    %ecx,%edx
c0102729:	89 d8                	mov    %ebx,%eax
c010272b:	29 d0                	sub    %edx,%eax
c010272d:	66 a3 84 f3 19 c0    	mov    %ax,0xc019f384
        break;
c0102733:	eb 26                	jmp    c010275b <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0102735:	8b 0d 80 f3 19 c0    	mov    0xc019f380,%ecx
c010273b:	0f b7 05 84 f3 19 c0 	movzwl 0xc019f384,%eax
c0102742:	8d 50 01             	lea    0x1(%eax),%edx
c0102745:	66 89 15 84 f3 19 c0 	mov    %dx,0xc019f384
c010274c:	0f b7 c0             	movzwl %ax,%eax
c010274f:	01 c0                	add    %eax,%eax
c0102751:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0102754:	8b 45 08             	mov    0x8(%ebp),%eax
c0102757:	66 89 02             	mov    %ax,(%edx)
        break;
c010275a:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c010275b:	0f b7 05 84 f3 19 c0 	movzwl 0xc019f384,%eax
c0102762:	66 3d cf 07          	cmp    $0x7cf,%ax
c0102766:	76 5b                	jbe    c01027c3 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0102768:	a1 80 f3 19 c0       	mov    0xc019f380,%eax
c010276d:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0102773:	a1 80 f3 19 c0       	mov    0xc019f380,%eax
c0102778:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c010277f:	00 
c0102780:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102784:	89 04 24             	mov    %eax,(%esp)
c0102787:	e8 38 aa 00 00       	call   c010d1c4 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010278c:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0102793:	eb 15                	jmp    c01027aa <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0102795:	a1 80 f3 19 c0       	mov    0xc019f380,%eax
c010279a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010279d:	01 d2                	add    %edx,%edx
c010279f:	01 d0                	add    %edx,%eax
c01027a1:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c01027a6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01027aa:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c01027b1:	7e e2                	jle    c0102795 <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c01027b3:	0f b7 05 84 f3 19 c0 	movzwl 0xc019f384,%eax
c01027ba:	83 e8 50             	sub    $0x50,%eax
c01027bd:	66 a3 84 f3 19 c0    	mov    %ax,0xc019f384
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c01027c3:	0f b7 05 86 f3 19 c0 	movzwl 0xc019f386,%eax
c01027ca:	0f b7 c0             	movzwl %ax,%eax
c01027cd:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01027d1:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c01027d5:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01027d9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01027dd:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c01027de:	0f b7 05 84 f3 19 c0 	movzwl 0xc019f384,%eax
c01027e5:	66 c1 e8 08          	shr    $0x8,%ax
c01027e9:	0f b6 c0             	movzbl %al,%eax
c01027ec:	0f b7 15 86 f3 19 c0 	movzwl 0xc019f386,%edx
c01027f3:	83 c2 01             	add    $0x1,%edx
c01027f6:	0f b7 d2             	movzwl %dx,%edx
c01027f9:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c01027fd:	88 45 ed             	mov    %al,-0x13(%ebp)
c0102800:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102804:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102808:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0102809:	0f b7 05 86 f3 19 c0 	movzwl 0xc019f386,%eax
c0102810:	0f b7 c0             	movzwl %ax,%eax
c0102813:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0102817:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c010281b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010281f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102823:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0102824:	0f b7 05 84 f3 19 c0 	movzwl 0xc019f384,%eax
c010282b:	0f b6 c0             	movzbl %al,%eax
c010282e:	0f b7 15 86 f3 19 c0 	movzwl 0xc019f386,%edx
c0102835:	83 c2 01             	add    $0x1,%edx
c0102838:	0f b7 d2             	movzwl %dx,%edx
c010283b:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010283f:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0102842:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102846:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010284a:	ee                   	out    %al,(%dx)
}
c010284b:	83 c4 34             	add    $0x34,%esp
c010284e:	5b                   	pop    %ebx
c010284f:	5d                   	pop    %ebp
c0102850:	c3                   	ret    

c0102851 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0102851:	55                   	push   %ebp
c0102852:	89 e5                	mov    %esp,%ebp
c0102854:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0102857:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010285e:	eb 09                	jmp    c0102869 <serial_putc_sub+0x18>
        delay();
c0102860:	e8 4f fb ff ff       	call   c01023b4 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0102865:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102869:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010286f:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102873:	89 c2                	mov    %eax,%edx
c0102875:	ec                   	in     (%dx),%al
c0102876:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0102879:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010287d:	0f b6 c0             	movzbl %al,%eax
c0102880:	83 e0 20             	and    $0x20,%eax
c0102883:	85 c0                	test   %eax,%eax
c0102885:	75 09                	jne    c0102890 <serial_putc_sub+0x3f>
c0102887:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010288e:	7e d0                	jle    c0102860 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0102890:	8b 45 08             	mov    0x8(%ebp),%eax
c0102893:	0f b6 c0             	movzbl %al,%eax
c0102896:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c010289c:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010289f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01028a3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01028a7:	ee                   	out    %al,(%dx)
}
c01028a8:	c9                   	leave  
c01028a9:	c3                   	ret    

c01028aa <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c01028aa:	55                   	push   %ebp
c01028ab:	89 e5                	mov    %esp,%ebp
c01028ad:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01028b0:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01028b4:	74 0d                	je     c01028c3 <serial_putc+0x19>
        serial_putc_sub(c);
c01028b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01028b9:	89 04 24             	mov    %eax,(%esp)
c01028bc:	e8 90 ff ff ff       	call   c0102851 <serial_putc_sub>
c01028c1:	eb 24                	jmp    c01028e7 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c01028c3:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01028ca:	e8 82 ff ff ff       	call   c0102851 <serial_putc_sub>
        serial_putc_sub(' ');
c01028cf:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01028d6:	e8 76 ff ff ff       	call   c0102851 <serial_putc_sub>
        serial_putc_sub('\b');
c01028db:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01028e2:	e8 6a ff ff ff       	call   c0102851 <serial_putc_sub>
    }
}
c01028e7:	c9                   	leave  
c01028e8:	c3                   	ret    

c01028e9 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c01028e9:	55                   	push   %ebp
c01028ea:	89 e5                	mov    %esp,%ebp
c01028ec:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c01028ef:	eb 33                	jmp    c0102924 <cons_intr+0x3b>
        if (c != 0) {
c01028f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01028f5:	74 2d                	je     c0102924 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c01028f7:	a1 a4 f5 19 c0       	mov    0xc019f5a4,%eax
c01028fc:	8d 50 01             	lea    0x1(%eax),%edx
c01028ff:	89 15 a4 f5 19 c0    	mov    %edx,0xc019f5a4
c0102905:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102908:	88 90 a0 f3 19 c0    	mov    %dl,-0x3fe60c60(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c010290e:	a1 a4 f5 19 c0       	mov    0xc019f5a4,%eax
c0102913:	3d 00 02 00 00       	cmp    $0x200,%eax
c0102918:	75 0a                	jne    c0102924 <cons_intr+0x3b>
                cons.wpos = 0;
c010291a:	c7 05 a4 f5 19 c0 00 	movl   $0x0,0xc019f5a4
c0102921:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0102924:	8b 45 08             	mov    0x8(%ebp),%eax
c0102927:	ff d0                	call   *%eax
c0102929:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010292c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0102930:	75 bf                	jne    c01028f1 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0102932:	c9                   	leave  
c0102933:	c3                   	ret    

c0102934 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0102934:	55                   	push   %ebp
c0102935:	89 e5                	mov    %esp,%ebp
c0102937:	83 ec 10             	sub    $0x10,%esp
c010293a:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102940:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102944:	89 c2                	mov    %eax,%edx
c0102946:	ec                   	in     (%dx),%al
c0102947:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010294a:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c010294e:	0f b6 c0             	movzbl %al,%eax
c0102951:	83 e0 01             	and    $0x1,%eax
c0102954:	85 c0                	test   %eax,%eax
c0102956:	75 07                	jne    c010295f <serial_proc_data+0x2b>
        return -1;
c0102958:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010295d:	eb 2a                	jmp    c0102989 <serial_proc_data+0x55>
c010295f:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102965:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102969:	89 c2                	mov    %eax,%edx
c010296b:	ec                   	in     (%dx),%al
c010296c:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c010296f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0102973:	0f b6 c0             	movzbl %al,%eax
c0102976:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0102979:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c010297d:	75 07                	jne    c0102986 <serial_proc_data+0x52>
        c = '\b';
c010297f:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0102986:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0102989:	c9                   	leave  
c010298a:	c3                   	ret    

c010298b <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c010298b:	55                   	push   %ebp
c010298c:	89 e5                	mov    %esp,%ebp
c010298e:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c0102991:	a1 88 f3 19 c0       	mov    0xc019f388,%eax
c0102996:	85 c0                	test   %eax,%eax
c0102998:	74 0c                	je     c01029a6 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c010299a:	c7 04 24 34 29 10 c0 	movl   $0xc0102934,(%esp)
c01029a1:	e8 43 ff ff ff       	call   c01028e9 <cons_intr>
    }
}
c01029a6:	c9                   	leave  
c01029a7:	c3                   	ret    

c01029a8 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c01029a8:	55                   	push   %ebp
c01029a9:	89 e5                	mov    %esp,%ebp
c01029ab:	83 ec 38             	sub    $0x38,%esp
c01029ae:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01029b4:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01029b8:	89 c2                	mov    %eax,%edx
c01029ba:	ec                   	in     (%dx),%al
c01029bb:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c01029be:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c01029c2:	0f b6 c0             	movzbl %al,%eax
c01029c5:	83 e0 01             	and    $0x1,%eax
c01029c8:	85 c0                	test   %eax,%eax
c01029ca:	75 0a                	jne    c01029d6 <kbd_proc_data+0x2e>
        return -1;
c01029cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01029d1:	e9 59 01 00 00       	jmp    c0102b2f <kbd_proc_data+0x187>
c01029d6:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01029dc:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01029e0:	89 c2                	mov    %eax,%edx
c01029e2:	ec                   	in     (%dx),%al
c01029e3:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c01029e6:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c01029ea:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c01029ed:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c01029f1:	75 17                	jne    c0102a0a <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c01029f3:	a1 a8 f5 19 c0       	mov    0xc019f5a8,%eax
c01029f8:	83 c8 40             	or     $0x40,%eax
c01029fb:	a3 a8 f5 19 c0       	mov    %eax,0xc019f5a8
        return 0;
c0102a00:	b8 00 00 00 00       	mov    $0x0,%eax
c0102a05:	e9 25 01 00 00       	jmp    c0102b2f <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0102a0a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a0e:	84 c0                	test   %al,%al
c0102a10:	79 47                	jns    c0102a59 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0102a12:	a1 a8 f5 19 c0       	mov    0xc019f5a8,%eax
c0102a17:	83 e0 40             	and    $0x40,%eax
c0102a1a:	85 c0                	test   %eax,%eax
c0102a1c:	75 09                	jne    c0102a27 <kbd_proc_data+0x7f>
c0102a1e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a22:	83 e0 7f             	and    $0x7f,%eax
c0102a25:	eb 04                	jmp    c0102a2b <kbd_proc_data+0x83>
c0102a27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a2b:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0102a2e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a32:	0f b6 80 60 d0 12 c0 	movzbl -0x3fed2fa0(%eax),%eax
c0102a39:	83 c8 40             	or     $0x40,%eax
c0102a3c:	0f b6 c0             	movzbl %al,%eax
c0102a3f:	f7 d0                	not    %eax
c0102a41:	89 c2                	mov    %eax,%edx
c0102a43:	a1 a8 f5 19 c0       	mov    0xc019f5a8,%eax
c0102a48:	21 d0                	and    %edx,%eax
c0102a4a:	a3 a8 f5 19 c0       	mov    %eax,0xc019f5a8
        return 0;
c0102a4f:	b8 00 00 00 00       	mov    $0x0,%eax
c0102a54:	e9 d6 00 00 00       	jmp    c0102b2f <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c0102a59:	a1 a8 f5 19 c0       	mov    0xc019f5a8,%eax
c0102a5e:	83 e0 40             	and    $0x40,%eax
c0102a61:	85 c0                	test   %eax,%eax
c0102a63:	74 11                	je     c0102a76 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0102a65:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0102a69:	a1 a8 f5 19 c0       	mov    0xc019f5a8,%eax
c0102a6e:	83 e0 bf             	and    $0xffffffbf,%eax
c0102a71:	a3 a8 f5 19 c0       	mov    %eax,0xc019f5a8
    }

    shift |= shiftcode[data];
c0102a76:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a7a:	0f b6 80 60 d0 12 c0 	movzbl -0x3fed2fa0(%eax),%eax
c0102a81:	0f b6 d0             	movzbl %al,%edx
c0102a84:	a1 a8 f5 19 c0       	mov    0xc019f5a8,%eax
c0102a89:	09 d0                	or     %edx,%eax
c0102a8b:	a3 a8 f5 19 c0       	mov    %eax,0xc019f5a8
    shift ^= togglecode[data];
c0102a90:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102a94:	0f b6 80 60 d1 12 c0 	movzbl -0x3fed2ea0(%eax),%eax
c0102a9b:	0f b6 d0             	movzbl %al,%edx
c0102a9e:	a1 a8 f5 19 c0       	mov    0xc019f5a8,%eax
c0102aa3:	31 d0                	xor    %edx,%eax
c0102aa5:	a3 a8 f5 19 c0       	mov    %eax,0xc019f5a8

    c = charcode[shift & (CTL | SHIFT)][data];
c0102aaa:	a1 a8 f5 19 c0       	mov    0xc019f5a8,%eax
c0102aaf:	83 e0 03             	and    $0x3,%eax
c0102ab2:	8b 14 85 60 d5 12 c0 	mov    -0x3fed2aa0(,%eax,4),%edx
c0102ab9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102abd:	01 d0                	add    %edx,%eax
c0102abf:	0f b6 00             	movzbl (%eax),%eax
c0102ac2:	0f b6 c0             	movzbl %al,%eax
c0102ac5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0102ac8:	a1 a8 f5 19 c0       	mov    0xc019f5a8,%eax
c0102acd:	83 e0 08             	and    $0x8,%eax
c0102ad0:	85 c0                	test   %eax,%eax
c0102ad2:	74 22                	je     c0102af6 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0102ad4:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0102ad8:	7e 0c                	jle    c0102ae6 <kbd_proc_data+0x13e>
c0102ada:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0102ade:	7f 06                	jg     c0102ae6 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0102ae0:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0102ae4:	eb 10                	jmp    c0102af6 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0102ae6:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0102aea:	7e 0a                	jle    c0102af6 <kbd_proc_data+0x14e>
c0102aec:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0102af0:	7f 04                	jg     c0102af6 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0102af2:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0102af6:	a1 a8 f5 19 c0       	mov    0xc019f5a8,%eax
c0102afb:	f7 d0                	not    %eax
c0102afd:	83 e0 06             	and    $0x6,%eax
c0102b00:	85 c0                	test   %eax,%eax
c0102b02:	75 28                	jne    c0102b2c <kbd_proc_data+0x184>
c0102b04:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0102b0b:	75 1f                	jne    c0102b2c <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0102b0d:	c7 04 24 95 d8 10 c0 	movl   $0xc010d895,(%esp)
c0102b14:	e8 bd ec ff ff       	call   c01017d6 <cprintf>
c0102b19:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0102b1f:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102b23:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0102b27:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0102b2b:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0102b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102b2f:	c9                   	leave  
c0102b30:	c3                   	ret    

c0102b31 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0102b31:	55                   	push   %ebp
c0102b32:	89 e5                	mov    %esp,%ebp
c0102b34:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c0102b37:	c7 04 24 a8 29 10 c0 	movl   $0xc01029a8,(%esp)
c0102b3e:	e8 a6 fd ff ff       	call   c01028e9 <cons_intr>
}
c0102b43:	c9                   	leave  
c0102b44:	c3                   	ret    

c0102b45 <kbd_init>:

static void
kbd_init(void) {
c0102b45:	55                   	push   %ebp
c0102b46:	89 e5                	mov    %esp,%ebp
c0102b48:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c0102b4b:	e8 e1 ff ff ff       	call   c0102b31 <kbd_intr>
    pic_enable(IRQ_KBD);
c0102b50:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0102b57:	e8 b2 09 00 00       	call   c010350e <pic_enable>
}
c0102b5c:	c9                   	leave  
c0102b5d:	c3                   	ret    

c0102b5e <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0102b5e:	55                   	push   %ebp
c0102b5f:	89 e5                	mov    %esp,%ebp
c0102b61:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c0102b64:	e8 93 f8 ff ff       	call   c01023fc <cga_init>
    serial_init();
c0102b69:	e8 74 f9 ff ff       	call   c01024e2 <serial_init>
    kbd_init();
c0102b6e:	e8 d2 ff ff ff       	call   c0102b45 <kbd_init>
    if (!serial_exists) {
c0102b73:	a1 88 f3 19 c0       	mov    0xc019f388,%eax
c0102b78:	85 c0                	test   %eax,%eax
c0102b7a:	75 0c                	jne    c0102b88 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c0102b7c:	c7 04 24 a1 d8 10 c0 	movl   $0xc010d8a1,(%esp)
c0102b83:	e8 4e ec ff ff       	call   c01017d6 <cprintf>
    }
}
c0102b88:	c9                   	leave  
c0102b89:	c3                   	ret    

c0102b8a <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0102b8a:	55                   	push   %ebp
c0102b8b:	89 e5                	mov    %esp,%ebp
c0102b8d:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0102b90:	e8 e2 f7 ff ff       	call   c0102377 <__intr_save>
c0102b95:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0102b98:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b9b:	89 04 24             	mov    %eax,(%esp)
c0102b9e:	e8 9b fa ff ff       	call   c010263e <lpt_putc>
        cga_putc(c);
c0102ba3:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ba6:	89 04 24             	mov    %eax,(%esp)
c0102ba9:	e8 cf fa ff ff       	call   c010267d <cga_putc>
        serial_putc(c);
c0102bae:	8b 45 08             	mov    0x8(%ebp),%eax
c0102bb1:	89 04 24             	mov    %eax,(%esp)
c0102bb4:	e8 f1 fc ff ff       	call   c01028aa <serial_putc>
    }
    local_intr_restore(intr_flag);
c0102bb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102bbc:	89 04 24             	mov    %eax,(%esp)
c0102bbf:	e8 dd f7 ff ff       	call   c01023a1 <__intr_restore>
}
c0102bc4:	c9                   	leave  
c0102bc5:	c3                   	ret    

c0102bc6 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0102bc6:	55                   	push   %ebp
c0102bc7:	89 e5                	mov    %esp,%ebp
c0102bc9:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0102bcc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0102bd3:	e8 9f f7 ff ff       	call   c0102377 <__intr_save>
c0102bd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0102bdb:	e8 ab fd ff ff       	call   c010298b <serial_intr>
        kbd_intr();
c0102be0:	e8 4c ff ff ff       	call   c0102b31 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0102be5:	8b 15 a0 f5 19 c0    	mov    0xc019f5a0,%edx
c0102beb:	a1 a4 f5 19 c0       	mov    0xc019f5a4,%eax
c0102bf0:	39 c2                	cmp    %eax,%edx
c0102bf2:	74 31                	je     c0102c25 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0102bf4:	a1 a0 f5 19 c0       	mov    0xc019f5a0,%eax
c0102bf9:	8d 50 01             	lea    0x1(%eax),%edx
c0102bfc:	89 15 a0 f5 19 c0    	mov    %edx,0xc019f5a0
c0102c02:	0f b6 80 a0 f3 19 c0 	movzbl -0x3fe60c60(%eax),%eax
c0102c09:	0f b6 c0             	movzbl %al,%eax
c0102c0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0102c0f:	a1 a0 f5 19 c0       	mov    0xc019f5a0,%eax
c0102c14:	3d 00 02 00 00       	cmp    $0x200,%eax
c0102c19:	75 0a                	jne    c0102c25 <cons_getc+0x5f>
                cons.rpos = 0;
c0102c1b:	c7 05 a0 f5 19 c0 00 	movl   $0x0,0xc019f5a0
c0102c22:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0102c25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102c28:	89 04 24             	mov    %eax,(%esp)
c0102c2b:	e8 71 f7 ff ff       	call   c01023a1 <__intr_restore>
    return c;
c0102c30:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102c33:	c9                   	leave  
c0102c34:	c3                   	ret    

c0102c35 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0102c35:	55                   	push   %ebp
c0102c36:	89 e5                	mov    %esp,%ebp
c0102c38:	83 ec 14             	sub    $0x14,%esp
c0102c3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c3e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0102c42:	90                   	nop
c0102c43:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102c47:	83 c0 07             	add    $0x7,%eax
c0102c4a:	0f b7 c0             	movzwl %ax,%eax
c0102c4d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102c51:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102c55:	89 c2                	mov    %eax,%edx
c0102c57:	ec                   	in     (%dx),%al
c0102c58:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0102c5b:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102c5f:	0f b6 c0             	movzbl %al,%eax
c0102c62:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0102c65:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c68:	25 80 00 00 00       	and    $0x80,%eax
c0102c6d:	85 c0                	test   %eax,%eax
c0102c6f:	75 d2                	jne    c0102c43 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0102c71:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0102c75:	74 11                	je     c0102c88 <ide_wait_ready+0x53>
c0102c77:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c7a:	83 e0 21             	and    $0x21,%eax
c0102c7d:	85 c0                	test   %eax,%eax
c0102c7f:	74 07                	je     c0102c88 <ide_wait_ready+0x53>
        return -1;
c0102c81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0102c86:	eb 05                	jmp    c0102c8d <ide_wait_ready+0x58>
    }
    return 0;
c0102c88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102c8d:	c9                   	leave  
c0102c8e:	c3                   	ret    

c0102c8f <ide_init>:

void
ide_init(void) {
c0102c8f:	55                   	push   %ebp
c0102c90:	89 e5                	mov    %esp,%ebp
c0102c92:	57                   	push   %edi
c0102c93:	53                   	push   %ebx
c0102c94:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0102c9a:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0102ca0:	e9 d6 02 00 00       	jmp    c0102f7b <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0102ca5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102ca9:	c1 e0 03             	shl    $0x3,%eax
c0102cac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102cb3:	29 c2                	sub    %eax,%edx
c0102cb5:	8d 82 c0 f5 19 c0    	lea    -0x3fe60a40(%edx),%eax
c0102cbb:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0102cbe:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102cc2:	66 d1 e8             	shr    %ax
c0102cc5:	0f b7 c0             	movzwl %ax,%eax
c0102cc8:	0f b7 04 85 c0 d8 10 	movzwl -0x3fef2740(,%eax,4),%eax
c0102ccf:	c0 
c0102cd0:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0102cd4:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102cd8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0102cdf:	00 
c0102ce0:	89 04 24             	mov    %eax,(%esp)
c0102ce3:	e8 4d ff ff ff       	call   c0102c35 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0102ce8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102cec:	83 e0 01             	and    $0x1,%eax
c0102cef:	c1 e0 04             	shl    $0x4,%eax
c0102cf2:	83 c8 e0             	or     $0xffffffe0,%eax
c0102cf5:	0f b6 c0             	movzbl %al,%eax
c0102cf8:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102cfc:	83 c2 06             	add    $0x6,%edx
c0102cff:	0f b7 d2             	movzwl %dx,%edx
c0102d02:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0102d06:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102d09:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0102d0d:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0102d11:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0102d12:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d16:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0102d1d:	00 
c0102d1e:	89 04 24             	mov    %eax,(%esp)
c0102d21:	e8 0f ff ff ff       	call   c0102c35 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0102d26:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d2a:	83 c0 07             	add    $0x7,%eax
c0102d2d:	0f b7 c0             	movzwl %ax,%eax
c0102d30:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c0102d34:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c0102d38:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0102d3c:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0102d40:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0102d41:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d45:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0102d4c:	00 
c0102d4d:	89 04 24             	mov    %eax,(%esp)
c0102d50:	e8 e0 fe ff ff       	call   c0102c35 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0102d55:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d59:	83 c0 07             	add    $0x7,%eax
c0102d5c:	0f b7 c0             	movzwl %ax,%eax
c0102d5f:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102d63:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0102d67:	89 c2                	mov    %eax,%edx
c0102d69:	ec                   	in     (%dx),%al
c0102d6a:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0102d6d:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0102d71:	84 c0                	test   %al,%al
c0102d73:	0f 84 f7 01 00 00    	je     c0102f70 <ide_init+0x2e1>
c0102d79:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102d7d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0102d84:	00 
c0102d85:	89 04 24             	mov    %eax,(%esp)
c0102d88:	e8 a8 fe ff ff       	call   c0102c35 <ide_wait_ready>
c0102d8d:	85 c0                	test   %eax,%eax
c0102d8f:	0f 85 db 01 00 00    	jne    c0102f70 <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0102d95:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102d99:	c1 e0 03             	shl    $0x3,%eax
c0102d9c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102da3:	29 c2                	sub    %eax,%edx
c0102da5:	8d 82 c0 f5 19 c0    	lea    -0x3fe60a40(%edx),%eax
c0102dab:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0102dae:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102db2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0102db5:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0102dbb:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0102dbe:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0102dc5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0102dc8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0102dcb:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0102dce:	89 cb                	mov    %ecx,%ebx
c0102dd0:	89 df                	mov    %ebx,%edi
c0102dd2:	89 c1                	mov    %eax,%ecx
c0102dd4:	fc                   	cld    
c0102dd5:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0102dd7:	89 c8                	mov    %ecx,%eax
c0102dd9:	89 fb                	mov    %edi,%ebx
c0102ddb:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0102dde:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0102de1:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0102de7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0102dea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102ded:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0102df3:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0102df6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0102df9:	25 00 00 00 04       	and    $0x4000000,%eax
c0102dfe:	85 c0                	test   %eax,%eax
c0102e00:	74 0e                	je     c0102e10 <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0102e02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102e05:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0102e0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0102e0e:	eb 09                	jmp    c0102e19 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0102e10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102e13:	8b 40 78             	mov    0x78(%eax),%eax
c0102e16:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0102e19:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102e1d:	c1 e0 03             	shl    $0x3,%eax
c0102e20:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102e27:	29 c2                	sub    %eax,%edx
c0102e29:	81 c2 c0 f5 19 c0    	add    $0xc019f5c0,%edx
c0102e2f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0102e32:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0102e35:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102e39:	c1 e0 03             	shl    $0x3,%eax
c0102e3c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102e43:	29 c2                	sub    %eax,%edx
c0102e45:	81 c2 c0 f5 19 c0    	add    $0xc019f5c0,%edx
c0102e4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102e4e:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0102e51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102e54:	83 c0 62             	add    $0x62,%eax
c0102e57:	0f b7 00             	movzwl (%eax),%eax
c0102e5a:	0f b7 c0             	movzwl %ax,%eax
c0102e5d:	25 00 02 00 00       	and    $0x200,%eax
c0102e62:	85 c0                	test   %eax,%eax
c0102e64:	75 24                	jne    c0102e8a <ide_init+0x1fb>
c0102e66:	c7 44 24 0c c8 d8 10 	movl   $0xc010d8c8,0xc(%esp)
c0102e6d:	c0 
c0102e6e:	c7 44 24 08 0b d9 10 	movl   $0xc010d90b,0x8(%esp)
c0102e75:	c0 
c0102e76:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0102e7d:	00 
c0102e7e:	c7 04 24 20 d9 10 c0 	movl   $0xc010d920,(%esp)
c0102e85:	e8 ce f3 ff ff       	call   c0102258 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0102e8a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102e8e:	c1 e0 03             	shl    $0x3,%eax
c0102e91:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102e98:	29 c2                	sub    %eax,%edx
c0102e9a:	8d 82 c0 f5 19 c0    	lea    -0x3fe60a40(%edx),%eax
c0102ea0:	83 c0 0c             	add    $0xc,%eax
c0102ea3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0102ea6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102ea9:	83 c0 36             	add    $0x36,%eax
c0102eac:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0102eaf:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0102eb6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0102ebd:	eb 34                	jmp    c0102ef3 <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0102ebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102ec2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102ec5:	01 c2                	add    %eax,%edx
c0102ec7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102eca:	8d 48 01             	lea    0x1(%eax),%ecx
c0102ecd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0102ed0:	01 c8                	add    %ecx,%eax
c0102ed2:	0f b6 00             	movzbl (%eax),%eax
c0102ed5:	88 02                	mov    %al,(%edx)
c0102ed7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102eda:	8d 50 01             	lea    0x1(%eax),%edx
c0102edd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0102ee0:	01 c2                	add    %eax,%edx
c0102ee2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102ee5:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0102ee8:	01 c8                	add    %ecx,%eax
c0102eea:	0f b6 00             	movzbl (%eax),%eax
c0102eed:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0102eef:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0102ef3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102ef6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0102ef9:	72 c4                	jb     c0102ebf <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0102efb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102efe:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102f01:	01 d0                	add    %edx,%eax
c0102f03:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0102f06:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102f09:	8d 50 ff             	lea    -0x1(%eax),%edx
c0102f0c:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0102f0f:	85 c0                	test   %eax,%eax
c0102f11:	74 0f                	je     c0102f22 <ide_init+0x293>
c0102f13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102f16:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102f19:	01 d0                	add    %edx,%eax
c0102f1b:	0f b6 00             	movzbl (%eax),%eax
c0102f1e:	3c 20                	cmp    $0x20,%al
c0102f20:	74 d9                	je     c0102efb <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0102f22:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f26:	c1 e0 03             	shl    $0x3,%eax
c0102f29:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102f30:	29 c2                	sub    %eax,%edx
c0102f32:	8d 82 c0 f5 19 c0    	lea    -0x3fe60a40(%edx),%eax
c0102f38:	8d 48 0c             	lea    0xc(%eax),%ecx
c0102f3b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f3f:	c1 e0 03             	shl    $0x3,%eax
c0102f42:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102f49:	29 c2                	sub    %eax,%edx
c0102f4b:	8d 82 c0 f5 19 c0    	lea    -0x3fe60a40(%edx),%eax
c0102f51:	8b 50 08             	mov    0x8(%eax),%edx
c0102f54:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f58:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0102f5c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102f60:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102f64:	c7 04 24 32 d9 10 c0 	movl   $0xc010d932,(%esp)
c0102f6b:	e8 66 e8 ff ff       	call   c01017d6 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0102f70:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102f74:	83 c0 01             	add    $0x1,%eax
c0102f77:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0102f7b:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0102f80:	0f 86 1f fd ff ff    	jbe    c0102ca5 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0102f86:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0102f8d:	e8 7c 05 00 00       	call   c010350e <pic_enable>
    pic_enable(IRQ_IDE2);
c0102f92:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0102f99:	e8 70 05 00 00       	call   c010350e <pic_enable>
}
c0102f9e:	81 c4 50 02 00 00    	add    $0x250,%esp
c0102fa4:	5b                   	pop    %ebx
c0102fa5:	5f                   	pop    %edi
c0102fa6:	5d                   	pop    %ebp
c0102fa7:	c3                   	ret    

c0102fa8 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0102fa8:	55                   	push   %ebp
c0102fa9:	89 e5                	mov    %esp,%ebp
c0102fab:	83 ec 04             	sub    $0x4,%esp
c0102fae:	8b 45 08             	mov    0x8(%ebp),%eax
c0102fb1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0102fb5:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0102fba:	77 24                	ja     c0102fe0 <ide_device_valid+0x38>
c0102fbc:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0102fc0:	c1 e0 03             	shl    $0x3,%eax
c0102fc3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102fca:	29 c2                	sub    %eax,%edx
c0102fcc:	8d 82 c0 f5 19 c0    	lea    -0x3fe60a40(%edx),%eax
c0102fd2:	0f b6 00             	movzbl (%eax),%eax
c0102fd5:	84 c0                	test   %al,%al
c0102fd7:	74 07                	je     c0102fe0 <ide_device_valid+0x38>
c0102fd9:	b8 01 00 00 00       	mov    $0x1,%eax
c0102fde:	eb 05                	jmp    c0102fe5 <ide_device_valid+0x3d>
c0102fe0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102fe5:	c9                   	leave  
c0102fe6:	c3                   	ret    

c0102fe7 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0102fe7:	55                   	push   %ebp
c0102fe8:	89 e5                	mov    %esp,%ebp
c0102fea:	83 ec 08             	sub    $0x8,%esp
c0102fed:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ff0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0102ff4:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0102ff8:	89 04 24             	mov    %eax,(%esp)
c0102ffb:	e8 a8 ff ff ff       	call   c0102fa8 <ide_device_valid>
c0103000:	85 c0                	test   %eax,%eax
c0103002:	74 1b                	je     c010301f <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0103004:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0103008:	c1 e0 03             	shl    $0x3,%eax
c010300b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0103012:	29 c2                	sub    %eax,%edx
c0103014:	8d 82 c0 f5 19 c0    	lea    -0x3fe60a40(%edx),%eax
c010301a:	8b 40 08             	mov    0x8(%eax),%eax
c010301d:	eb 05                	jmp    c0103024 <ide_device_size+0x3d>
    }
    return 0;
c010301f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103024:	c9                   	leave  
c0103025:	c3                   	ret    

c0103026 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0103026:	55                   	push   %ebp
c0103027:	89 e5                	mov    %esp,%ebp
c0103029:	57                   	push   %edi
c010302a:	53                   	push   %ebx
c010302b:	83 ec 50             	sub    $0x50,%esp
c010302e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103031:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0103035:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010303c:	77 24                	ja     c0103062 <ide_read_secs+0x3c>
c010303e:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0103043:	77 1d                	ja     c0103062 <ide_read_secs+0x3c>
c0103045:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0103049:	c1 e0 03             	shl    $0x3,%eax
c010304c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0103053:	29 c2                	sub    %eax,%edx
c0103055:	8d 82 c0 f5 19 c0    	lea    -0x3fe60a40(%edx),%eax
c010305b:	0f b6 00             	movzbl (%eax),%eax
c010305e:	84 c0                	test   %al,%al
c0103060:	75 24                	jne    c0103086 <ide_read_secs+0x60>
c0103062:	c7 44 24 0c 50 d9 10 	movl   $0xc010d950,0xc(%esp)
c0103069:	c0 
c010306a:	c7 44 24 08 0b d9 10 	movl   $0xc010d90b,0x8(%esp)
c0103071:	c0 
c0103072:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0103079:	00 
c010307a:	c7 04 24 20 d9 10 c0 	movl   $0xc010d920,(%esp)
c0103081:	e8 d2 f1 ff ff       	call   c0102258 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0103086:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c010308d:	77 0f                	ja     c010309e <ide_read_secs+0x78>
c010308f:	8b 45 14             	mov    0x14(%ebp),%eax
c0103092:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103095:	01 d0                	add    %edx,%eax
c0103097:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c010309c:	76 24                	jbe    c01030c2 <ide_read_secs+0x9c>
c010309e:	c7 44 24 0c 78 d9 10 	movl   $0xc010d978,0xc(%esp)
c01030a5:	c0 
c01030a6:	c7 44 24 08 0b d9 10 	movl   $0xc010d90b,0x8(%esp)
c01030ad:	c0 
c01030ae:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01030b5:	00 
c01030b6:	c7 04 24 20 d9 10 c0 	movl   $0xc010d920,(%esp)
c01030bd:	e8 96 f1 ff ff       	call   c0102258 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01030c2:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01030c6:	66 d1 e8             	shr    %ax
c01030c9:	0f b7 c0             	movzwl %ax,%eax
c01030cc:	0f b7 04 85 c0 d8 10 	movzwl -0x3fef2740(,%eax,4),%eax
c01030d3:	c0 
c01030d4:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01030d8:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01030dc:	66 d1 e8             	shr    %ax
c01030df:	0f b7 c0             	movzwl %ax,%eax
c01030e2:	0f b7 04 85 c2 d8 10 	movzwl -0x3fef273e(,%eax,4),%eax
c01030e9:	c0 
c01030ea:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c01030ee:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01030f2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01030f9:	00 
c01030fa:	89 04 24             	mov    %eax,(%esp)
c01030fd:	e8 33 fb ff ff       	call   c0102c35 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0103102:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0103106:	83 c0 02             	add    $0x2,%eax
c0103109:	0f b7 c0             	movzwl %ax,%eax
c010310c:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0103110:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103114:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0103118:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010311c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c010311d:	8b 45 14             	mov    0x14(%ebp),%eax
c0103120:	0f b6 c0             	movzbl %al,%eax
c0103123:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103127:	83 c2 02             	add    $0x2,%edx
c010312a:	0f b7 d2             	movzwl %dx,%edx
c010312d:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0103131:	88 45 e9             	mov    %al,-0x17(%ebp)
c0103134:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0103138:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010313c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c010313d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103140:	0f b6 c0             	movzbl %al,%eax
c0103143:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103147:	83 c2 03             	add    $0x3,%edx
c010314a:	0f b7 d2             	movzwl %dx,%edx
c010314d:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0103151:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0103154:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0103158:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010315c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c010315d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103160:	c1 e8 08             	shr    $0x8,%eax
c0103163:	0f b6 c0             	movzbl %al,%eax
c0103166:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010316a:	83 c2 04             	add    $0x4,%edx
c010316d:	0f b7 d2             	movzwl %dx,%edx
c0103170:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0103174:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0103177:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010317b:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010317f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0103180:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103183:	c1 e8 10             	shr    $0x10,%eax
c0103186:	0f b6 c0             	movzbl %al,%eax
c0103189:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010318d:	83 c2 05             	add    $0x5,%edx
c0103190:	0f b7 d2             	movzwl %dx,%edx
c0103193:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0103197:	88 45 dd             	mov    %al,-0x23(%ebp)
c010319a:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010319e:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01031a2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01031a3:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01031a7:	83 e0 01             	and    $0x1,%eax
c01031aa:	c1 e0 04             	shl    $0x4,%eax
c01031ad:	89 c2                	mov    %eax,%edx
c01031af:	8b 45 0c             	mov    0xc(%ebp),%eax
c01031b2:	c1 e8 18             	shr    $0x18,%eax
c01031b5:	83 e0 0f             	and    $0xf,%eax
c01031b8:	09 d0                	or     %edx,%eax
c01031ba:	83 c8 e0             	or     $0xffffffe0,%eax
c01031bd:	0f b6 c0             	movzbl %al,%eax
c01031c0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01031c4:	83 c2 06             	add    $0x6,%edx
c01031c7:	0f b7 d2             	movzwl %dx,%edx
c01031ca:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01031ce:	88 45 d9             	mov    %al,-0x27(%ebp)
c01031d1:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01031d5:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01031d9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01031da:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01031de:	83 c0 07             	add    $0x7,%eax
c01031e1:	0f b7 c0             	movzwl %ax,%eax
c01031e4:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01031e8:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c01031ec:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01031f0:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01031f4:	ee                   	out    %al,(%dx)

    int ret = 0;
c01031f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c01031fc:	eb 5a                	jmp    c0103258 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01031fe:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103202:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103209:	00 
c010320a:	89 04 24             	mov    %eax,(%esp)
c010320d:	e8 23 fa ff ff       	call   c0102c35 <ide_wait_ready>
c0103212:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103215:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103219:	74 02                	je     c010321d <ide_read_secs+0x1f7>
            goto out;
c010321b:	eb 41                	jmp    c010325e <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c010321d:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103221:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103224:	8b 45 10             	mov    0x10(%ebp),%eax
c0103227:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010322a:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0103231:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103234:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0103237:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010323a:	89 cb                	mov    %ecx,%ebx
c010323c:	89 df                	mov    %ebx,%edi
c010323e:	89 c1                	mov    %eax,%ecx
c0103240:	fc                   	cld    
c0103241:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0103243:	89 c8                	mov    %ecx,%eax
c0103245:	89 fb                	mov    %edi,%ebx
c0103247:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010324a:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c010324d:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0103251:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0103258:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010325c:	75 a0                	jne    c01031fe <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010325e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103261:	83 c4 50             	add    $0x50,%esp
c0103264:	5b                   	pop    %ebx
c0103265:	5f                   	pop    %edi
c0103266:	5d                   	pop    %ebp
c0103267:	c3                   	ret    

c0103268 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0103268:	55                   	push   %ebp
c0103269:	89 e5                	mov    %esp,%ebp
c010326b:	56                   	push   %esi
c010326c:	53                   	push   %ebx
c010326d:	83 ec 50             	sub    $0x50,%esp
c0103270:	8b 45 08             	mov    0x8(%ebp),%eax
c0103273:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0103277:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010327e:	77 24                	ja     c01032a4 <ide_write_secs+0x3c>
c0103280:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0103285:	77 1d                	ja     c01032a4 <ide_write_secs+0x3c>
c0103287:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010328b:	c1 e0 03             	shl    $0x3,%eax
c010328e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0103295:	29 c2                	sub    %eax,%edx
c0103297:	8d 82 c0 f5 19 c0    	lea    -0x3fe60a40(%edx),%eax
c010329d:	0f b6 00             	movzbl (%eax),%eax
c01032a0:	84 c0                	test   %al,%al
c01032a2:	75 24                	jne    c01032c8 <ide_write_secs+0x60>
c01032a4:	c7 44 24 0c 50 d9 10 	movl   $0xc010d950,0xc(%esp)
c01032ab:	c0 
c01032ac:	c7 44 24 08 0b d9 10 	movl   $0xc010d90b,0x8(%esp)
c01032b3:	c0 
c01032b4:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c01032bb:	00 
c01032bc:	c7 04 24 20 d9 10 c0 	movl   $0xc010d920,(%esp)
c01032c3:	e8 90 ef ff ff       	call   c0102258 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01032c8:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01032cf:	77 0f                	ja     c01032e0 <ide_write_secs+0x78>
c01032d1:	8b 45 14             	mov    0x14(%ebp),%eax
c01032d4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01032d7:	01 d0                	add    %edx,%eax
c01032d9:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01032de:	76 24                	jbe    c0103304 <ide_write_secs+0x9c>
c01032e0:	c7 44 24 0c 78 d9 10 	movl   $0xc010d978,0xc(%esp)
c01032e7:	c0 
c01032e8:	c7 44 24 08 0b d9 10 	movl   $0xc010d90b,0x8(%esp)
c01032ef:	c0 
c01032f0:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c01032f7:	00 
c01032f8:	c7 04 24 20 d9 10 c0 	movl   $0xc010d920,(%esp)
c01032ff:	e8 54 ef ff ff       	call   c0102258 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0103304:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0103308:	66 d1 e8             	shr    %ax
c010330b:	0f b7 c0             	movzwl %ax,%eax
c010330e:	0f b7 04 85 c0 d8 10 	movzwl -0x3fef2740(,%eax,4),%eax
c0103315:	c0 
c0103316:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010331a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010331e:	66 d1 e8             	shr    %ax
c0103321:	0f b7 c0             	movzwl %ax,%eax
c0103324:	0f b7 04 85 c2 d8 10 	movzwl -0x3fef273e(,%eax,4),%eax
c010332b:	c0 
c010332c:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0103330:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103334:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010333b:	00 
c010333c:	89 04 24             	mov    %eax,(%esp)
c010333f:	e8 f1 f8 ff ff       	call   c0102c35 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0103344:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0103348:	83 c0 02             	add    $0x2,%eax
c010334b:	0f b7 c0             	movzwl %ax,%eax
c010334e:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0103352:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0103356:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010335a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010335e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c010335f:	8b 45 14             	mov    0x14(%ebp),%eax
c0103362:	0f b6 c0             	movzbl %al,%eax
c0103365:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103369:	83 c2 02             	add    $0x2,%edx
c010336c:	0f b7 d2             	movzwl %dx,%edx
c010336f:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0103373:	88 45 e9             	mov    %al,-0x17(%ebp)
c0103376:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010337a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010337e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c010337f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103382:	0f b6 c0             	movzbl %al,%eax
c0103385:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103389:	83 c2 03             	add    $0x3,%edx
c010338c:	0f b7 d2             	movzwl %dx,%edx
c010338f:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0103393:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0103396:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010339a:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010339e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c010339f:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033a2:	c1 e8 08             	shr    $0x8,%eax
c01033a5:	0f b6 c0             	movzbl %al,%eax
c01033a8:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01033ac:	83 c2 04             	add    $0x4,%edx
c01033af:	0f b7 d2             	movzwl %dx,%edx
c01033b2:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01033b6:	88 45 e1             	mov    %al,-0x1f(%ebp)
c01033b9:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01033bd:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01033c1:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01033c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033c5:	c1 e8 10             	shr    $0x10,%eax
c01033c8:	0f b6 c0             	movzbl %al,%eax
c01033cb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01033cf:	83 c2 05             	add    $0x5,%edx
c01033d2:	0f b7 d2             	movzwl %dx,%edx
c01033d5:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c01033d9:	88 45 dd             	mov    %al,-0x23(%ebp)
c01033dc:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01033e0:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01033e4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01033e5:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01033e9:	83 e0 01             	and    $0x1,%eax
c01033ec:	c1 e0 04             	shl    $0x4,%eax
c01033ef:	89 c2                	mov    %eax,%edx
c01033f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033f4:	c1 e8 18             	shr    $0x18,%eax
c01033f7:	83 e0 0f             	and    $0xf,%eax
c01033fa:	09 d0                	or     %edx,%eax
c01033fc:	83 c8 e0             	or     $0xffffffe0,%eax
c01033ff:	0f b6 c0             	movzbl %al,%eax
c0103402:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103406:	83 c2 06             	add    $0x6,%edx
c0103409:	0f b7 d2             	movzwl %dx,%edx
c010340c:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0103410:	88 45 d9             	mov    %al,-0x27(%ebp)
c0103413:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0103417:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010341b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c010341c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103420:	83 c0 07             	add    $0x7,%eax
c0103423:	0f b7 c0             	movzwl %ax,%eax
c0103426:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c010342a:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c010342e:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0103432:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0103436:	ee                   	out    %al,(%dx)

    int ret = 0;
c0103437:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010343e:	eb 5a                	jmp    c010349a <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0103440:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103444:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010344b:	00 
c010344c:	89 04 24             	mov    %eax,(%esp)
c010344f:	e8 e1 f7 ff ff       	call   c0102c35 <ide_wait_ready>
c0103454:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103457:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010345b:	74 02                	je     c010345f <ide_write_secs+0x1f7>
            goto out;
c010345d:	eb 41                	jmp    c01034a0 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c010345f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0103463:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103466:	8b 45 10             	mov    0x10(%ebp),%eax
c0103469:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010346c:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0103473:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103476:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0103479:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010347c:	89 cb                	mov    %ecx,%ebx
c010347e:	89 de                	mov    %ebx,%esi
c0103480:	89 c1                	mov    %eax,%ecx
c0103482:	fc                   	cld    
c0103483:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0103485:	89 c8                	mov    %ecx,%eax
c0103487:	89 f3                	mov    %esi,%ebx
c0103489:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010348c:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010348f:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0103493:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010349a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010349e:	75 a0                	jne    c0103440 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01034a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01034a3:	83 c4 50             	add    $0x50,%esp
c01034a6:	5b                   	pop    %ebx
c01034a7:	5e                   	pop    %esi
c01034a8:	5d                   	pop    %ebp
c01034a9:	c3                   	ret    

c01034aa <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01034aa:	55                   	push   %ebp
c01034ab:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01034ad:	fb                   	sti    
    sti();
}
c01034ae:	5d                   	pop    %ebp
c01034af:	c3                   	ret    

c01034b0 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01034b0:	55                   	push   %ebp
c01034b1:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01034b3:	fa                   	cli    
    cli();
}
c01034b4:	5d                   	pop    %ebp
c01034b5:	c3                   	ret    

c01034b6 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c01034b6:	55                   	push   %ebp
c01034b7:	89 e5                	mov    %esp,%ebp
c01034b9:	83 ec 14             	sub    $0x14,%esp
c01034bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01034bf:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c01034c3:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01034c7:	66 a3 70 d5 12 c0    	mov    %ax,0xc012d570
    if (did_init) {
c01034cd:	a1 a0 f6 19 c0       	mov    0xc019f6a0,%eax
c01034d2:	85 c0                	test   %eax,%eax
c01034d4:	74 36                	je     c010350c <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c01034d6:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01034da:	0f b6 c0             	movzbl %al,%eax
c01034dd:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01034e3:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01034e6:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01034ea:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01034ee:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c01034ef:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01034f3:	66 c1 e8 08          	shr    $0x8,%ax
c01034f7:	0f b6 c0             	movzbl %al,%eax
c01034fa:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0103500:	88 45 f9             	mov    %al,-0x7(%ebp)
c0103503:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0103507:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010350b:	ee                   	out    %al,(%dx)
    }
}
c010350c:	c9                   	leave  
c010350d:	c3                   	ret    

c010350e <pic_enable>:

void
pic_enable(unsigned int irq) {
c010350e:	55                   	push   %ebp
c010350f:	89 e5                	mov    %esp,%ebp
c0103511:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c0103514:	8b 45 08             	mov    0x8(%ebp),%eax
c0103517:	ba 01 00 00 00       	mov    $0x1,%edx
c010351c:	89 c1                	mov    %eax,%ecx
c010351e:	d3 e2                	shl    %cl,%edx
c0103520:	89 d0                	mov    %edx,%eax
c0103522:	f7 d0                	not    %eax
c0103524:	89 c2                	mov    %eax,%edx
c0103526:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c010352d:	21 d0                	and    %edx,%eax
c010352f:	0f b7 c0             	movzwl %ax,%eax
c0103532:	89 04 24             	mov    %eax,(%esp)
c0103535:	e8 7c ff ff ff       	call   c01034b6 <pic_setmask>
}
c010353a:	c9                   	leave  
c010353b:	c3                   	ret    

c010353c <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c010353c:	55                   	push   %ebp
c010353d:	89 e5                	mov    %esp,%ebp
c010353f:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c0103542:	c7 05 a0 f6 19 c0 01 	movl   $0x1,0xc019f6a0
c0103549:	00 00 00 
c010354c:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0103552:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c0103556:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010355a:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010355e:	ee                   	out    %al,(%dx)
c010355f:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0103565:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c0103569:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010356d:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0103571:	ee                   	out    %al,(%dx)
c0103572:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c0103578:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c010357c:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0103580:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0103584:	ee                   	out    %al,(%dx)
c0103585:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c010358b:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c010358f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0103593:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103597:	ee                   	out    %al,(%dx)
c0103598:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c010359e:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c01035a2:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01035a6:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01035aa:	ee                   	out    %al,(%dx)
c01035ab:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c01035b1:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c01035b5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01035b9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01035bd:	ee                   	out    %al,(%dx)
c01035be:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c01035c4:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c01035c8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01035cc:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01035d0:	ee                   	out    %al,(%dx)
c01035d1:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c01035d7:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c01035db:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01035df:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01035e3:	ee                   	out    %al,(%dx)
c01035e4:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c01035ea:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c01035ee:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01035f2:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01035f6:	ee                   	out    %al,(%dx)
c01035f7:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c01035fd:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0103601:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0103605:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0103609:	ee                   	out    %al,(%dx)
c010360a:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0103610:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0103614:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0103618:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010361c:	ee                   	out    %al,(%dx)
c010361d:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c0103623:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c0103627:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c010362b:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010362f:	ee                   	out    %al,(%dx)
c0103630:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c0103636:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c010363a:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c010363e:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0103642:	ee                   	out    %al,(%dx)
c0103643:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c0103649:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c010364d:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0103651:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0103655:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0103656:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c010365d:	66 83 f8 ff          	cmp    $0xffff,%ax
c0103661:	74 12                	je     c0103675 <pic_init+0x139>
        pic_setmask(irq_mask);
c0103663:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c010366a:	0f b7 c0             	movzwl %ax,%eax
c010366d:	89 04 24             	mov    %eax,(%esp)
c0103670:	e8 41 fe ff ff       	call   c01034b6 <pic_setmask>
    }
}
c0103675:	c9                   	leave  
c0103676:	c3                   	ret    

c0103677 <print_ticks>:
#include <sched.h>
#include <sync.h>

#define TICK_NUM 100

static void print_ticks() {
c0103677:	55                   	push   %ebp
c0103678:	89 e5                	mov    %esp,%ebp
c010367a:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c010367d:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0103684:	00 
c0103685:	c7 04 24 c0 d9 10 c0 	movl   $0xc010d9c0,(%esp)
c010368c:	e8 45 e1 ff ff       	call   c01017d6 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c0103691:	c7 04 24 ca d9 10 c0 	movl   $0xc010d9ca,(%esp)
c0103698:	e8 39 e1 ff ff       	call   c01017d6 <cprintf>
    panic("EOT: kernel seems ok.");
c010369d:	c7 44 24 08 d8 d9 10 	movl   $0xc010d9d8,0x8(%esp)
c01036a4:	c0 
c01036a5:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c01036ac:	00 
c01036ad:	c7 04 24 ee d9 10 c0 	movl   $0xc010d9ee,(%esp)
c01036b4:	e8 9f eb ff ff       	call   c0102258 <__panic>

c01036b9 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01036b9:	55                   	push   %ebp
c01036ba:	89 e5                	mov    %esp,%ebp
c01036bc:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 2012012617 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for(i = 0; i < 256; i++) {
c01036bf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01036c6:	e9 c3 00 00 00       	jmp    c010378e <idt_init+0xd5>
        SETGATE(idt[i], 0, KERNEL_CS, __vectors[i], DPL_KERNEL);
c01036cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036ce:	8b 04 85 00 d6 12 c0 	mov    -0x3fed2a00(,%eax,4),%eax
c01036d5:	89 c2                	mov    %eax,%edx
c01036d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036da:	66 89 14 c5 c0 f6 19 	mov    %dx,-0x3fe60940(,%eax,8)
c01036e1:	c0 
c01036e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036e5:	66 c7 04 c5 c2 f6 19 	movw   $0x8,-0x3fe6093e(,%eax,8)
c01036ec:	c0 08 00 
c01036ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036f2:	0f b6 14 c5 c4 f6 19 	movzbl -0x3fe6093c(,%eax,8),%edx
c01036f9:	c0 
c01036fa:	83 e2 e0             	and    $0xffffffe0,%edx
c01036fd:	88 14 c5 c4 f6 19 c0 	mov    %dl,-0x3fe6093c(,%eax,8)
c0103704:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103707:	0f b6 14 c5 c4 f6 19 	movzbl -0x3fe6093c(,%eax,8),%edx
c010370e:	c0 
c010370f:	83 e2 1f             	and    $0x1f,%edx
c0103712:	88 14 c5 c4 f6 19 c0 	mov    %dl,-0x3fe6093c(,%eax,8)
c0103719:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010371c:	0f b6 14 c5 c5 f6 19 	movzbl -0x3fe6093b(,%eax,8),%edx
c0103723:	c0 
c0103724:	83 e2 f0             	and    $0xfffffff0,%edx
c0103727:	83 ca 0e             	or     $0xe,%edx
c010372a:	88 14 c5 c5 f6 19 c0 	mov    %dl,-0x3fe6093b(,%eax,8)
c0103731:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103734:	0f b6 14 c5 c5 f6 19 	movzbl -0x3fe6093b(,%eax,8),%edx
c010373b:	c0 
c010373c:	83 e2 ef             	and    $0xffffffef,%edx
c010373f:	88 14 c5 c5 f6 19 c0 	mov    %dl,-0x3fe6093b(,%eax,8)
c0103746:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103749:	0f b6 14 c5 c5 f6 19 	movzbl -0x3fe6093b(,%eax,8),%edx
c0103750:	c0 
c0103751:	83 e2 9f             	and    $0xffffff9f,%edx
c0103754:	88 14 c5 c5 f6 19 c0 	mov    %dl,-0x3fe6093b(,%eax,8)
c010375b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010375e:	0f b6 14 c5 c5 f6 19 	movzbl -0x3fe6093b(,%eax,8),%edx
c0103765:	c0 
c0103766:	83 ca 80             	or     $0xffffff80,%edx
c0103769:	88 14 c5 c5 f6 19 c0 	mov    %dl,-0x3fe6093b(,%eax,8)
c0103770:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103773:	8b 04 85 00 d6 12 c0 	mov    -0x3fed2a00(,%eax,4),%eax
c010377a:	c1 e8 10             	shr    $0x10,%eax
c010377d:	89 c2                	mov    %eax,%edx
c010377f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103782:	66 89 14 c5 c6 f6 19 	mov    %dx,-0x3fe6093a(,%eax,8)
c0103789:	c0 
     /* LAB5 2012012617 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for(i = 0; i < 256; i++) {
c010378a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010378e:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c0103795:	0f 8e 30 ff ff ff    	jle    c01036cb <idt_init+0x12>
        SETGATE(idt[i], 0, KERNEL_CS, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, KERNEL_CS, __vectors[T_SYSCALL], DPL_USER);
c010379b:	a1 00 d8 12 c0       	mov    0xc012d800,%eax
c01037a0:	66 a3 c0 fa 19 c0    	mov    %ax,0xc019fac0
c01037a6:	66 c7 05 c2 fa 19 c0 	movw   $0x8,0xc019fac2
c01037ad:	08 00 
c01037af:	0f b6 05 c4 fa 19 c0 	movzbl 0xc019fac4,%eax
c01037b6:	83 e0 e0             	and    $0xffffffe0,%eax
c01037b9:	a2 c4 fa 19 c0       	mov    %al,0xc019fac4
c01037be:	0f b6 05 c4 fa 19 c0 	movzbl 0xc019fac4,%eax
c01037c5:	83 e0 1f             	and    $0x1f,%eax
c01037c8:	a2 c4 fa 19 c0       	mov    %al,0xc019fac4
c01037cd:	0f b6 05 c5 fa 19 c0 	movzbl 0xc019fac5,%eax
c01037d4:	83 c8 0f             	or     $0xf,%eax
c01037d7:	a2 c5 fa 19 c0       	mov    %al,0xc019fac5
c01037dc:	0f b6 05 c5 fa 19 c0 	movzbl 0xc019fac5,%eax
c01037e3:	83 e0 ef             	and    $0xffffffef,%eax
c01037e6:	a2 c5 fa 19 c0       	mov    %al,0xc019fac5
c01037eb:	0f b6 05 c5 fa 19 c0 	movzbl 0xc019fac5,%eax
c01037f2:	83 c8 60             	or     $0x60,%eax
c01037f5:	a2 c5 fa 19 c0       	mov    %al,0xc019fac5
c01037fa:	0f b6 05 c5 fa 19 c0 	movzbl 0xc019fac5,%eax
c0103801:	83 c8 80             	or     $0xffffff80,%eax
c0103804:	a2 c5 fa 19 c0       	mov    %al,0xc019fac5
c0103809:	a1 00 d8 12 c0       	mov    0xc012d800,%eax
c010380e:	c1 e8 10             	shr    $0x10,%eax
c0103811:	66 a3 c6 fa 19 c0    	mov    %ax,0xc019fac6
c0103817:	c7 45 f8 80 d5 12 c0 	movl   $0xc012d580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010381e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0103821:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c0103824:	c9                   	leave  
c0103825:	c3                   	ret    

c0103826 <trapname>:

static const char *
trapname(int trapno) {
c0103826:	55                   	push   %ebp
c0103827:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c0103829:	8b 45 08             	mov    0x8(%ebp),%eax
c010382c:	83 f8 13             	cmp    $0x13,%eax
c010382f:	77 0c                	ja     c010383d <trapname+0x17>
        return excnames[trapno];
c0103831:	8b 45 08             	mov    0x8(%ebp),%eax
c0103834:	8b 04 85 60 de 10 c0 	mov    -0x3fef21a0(,%eax,4),%eax
c010383b:	eb 18                	jmp    c0103855 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c010383d:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0103841:	7e 0d                	jle    c0103850 <trapname+0x2a>
c0103843:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0103847:	7f 07                	jg     c0103850 <trapname+0x2a>
        return "Hardware Interrupt";
c0103849:	b8 ff d9 10 c0       	mov    $0xc010d9ff,%eax
c010384e:	eb 05                	jmp    c0103855 <trapname+0x2f>
    }
    return "(unknown trap)";
c0103850:	b8 12 da 10 c0       	mov    $0xc010da12,%eax
}
c0103855:	5d                   	pop    %ebp
c0103856:	c3                   	ret    

c0103857 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0103857:	55                   	push   %ebp
c0103858:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c010385a:	8b 45 08             	mov    0x8(%ebp),%eax
c010385d:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0103861:	66 83 f8 08          	cmp    $0x8,%ax
c0103865:	0f 94 c0             	sete   %al
c0103868:	0f b6 c0             	movzbl %al,%eax
}
c010386b:	5d                   	pop    %ebp
c010386c:	c3                   	ret    

c010386d <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c010386d:	55                   	push   %ebp
c010386e:	89 e5                	mov    %esp,%ebp
c0103870:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c0103873:	8b 45 08             	mov    0x8(%ebp),%eax
c0103876:	89 44 24 04          	mov    %eax,0x4(%esp)
c010387a:	c7 04 24 53 da 10 c0 	movl   $0xc010da53,(%esp)
c0103881:	e8 50 df ff ff       	call   c01017d6 <cprintf>
    print_regs(&tf->tf_regs);
c0103886:	8b 45 08             	mov    0x8(%ebp),%eax
c0103889:	89 04 24             	mov    %eax,(%esp)
c010388c:	e8 a1 01 00 00       	call   c0103a32 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0103891:	8b 45 08             	mov    0x8(%ebp),%eax
c0103894:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0103898:	0f b7 c0             	movzwl %ax,%eax
c010389b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010389f:	c7 04 24 64 da 10 c0 	movl   $0xc010da64,(%esp)
c01038a6:	e8 2b df ff ff       	call   c01017d6 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01038ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01038ae:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01038b2:	0f b7 c0             	movzwl %ax,%eax
c01038b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01038b9:	c7 04 24 77 da 10 c0 	movl   $0xc010da77,(%esp)
c01038c0:	e8 11 df ff ff       	call   c01017d6 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c01038c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01038c8:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c01038cc:	0f b7 c0             	movzwl %ax,%eax
c01038cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01038d3:	c7 04 24 8a da 10 c0 	movl   $0xc010da8a,(%esp)
c01038da:	e8 f7 de ff ff       	call   c01017d6 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01038df:	8b 45 08             	mov    0x8(%ebp),%eax
c01038e2:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01038e6:	0f b7 c0             	movzwl %ax,%eax
c01038e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01038ed:	c7 04 24 9d da 10 c0 	movl   $0xc010da9d,(%esp)
c01038f4:	e8 dd de ff ff       	call   c01017d6 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01038f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01038fc:	8b 40 30             	mov    0x30(%eax),%eax
c01038ff:	89 04 24             	mov    %eax,(%esp)
c0103902:	e8 1f ff ff ff       	call   c0103826 <trapname>
c0103907:	8b 55 08             	mov    0x8(%ebp),%edx
c010390a:	8b 52 30             	mov    0x30(%edx),%edx
c010390d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103911:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103915:	c7 04 24 b0 da 10 c0 	movl   $0xc010dab0,(%esp)
c010391c:	e8 b5 de ff ff       	call   c01017d6 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0103921:	8b 45 08             	mov    0x8(%ebp),%eax
c0103924:	8b 40 34             	mov    0x34(%eax),%eax
c0103927:	89 44 24 04          	mov    %eax,0x4(%esp)
c010392b:	c7 04 24 c2 da 10 c0 	movl   $0xc010dac2,(%esp)
c0103932:	e8 9f de ff ff       	call   c01017d6 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0103937:	8b 45 08             	mov    0x8(%ebp),%eax
c010393a:	8b 40 38             	mov    0x38(%eax),%eax
c010393d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103941:	c7 04 24 d1 da 10 c0 	movl   $0xc010dad1,(%esp)
c0103948:	e8 89 de ff ff       	call   c01017d6 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c010394d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103950:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0103954:	0f b7 c0             	movzwl %ax,%eax
c0103957:	89 44 24 04          	mov    %eax,0x4(%esp)
c010395b:	c7 04 24 e0 da 10 c0 	movl   $0xc010dae0,(%esp)
c0103962:	e8 6f de ff ff       	call   c01017d6 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0103967:	8b 45 08             	mov    0x8(%ebp),%eax
c010396a:	8b 40 40             	mov    0x40(%eax),%eax
c010396d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103971:	c7 04 24 f3 da 10 c0 	movl   $0xc010daf3,(%esp)
c0103978:	e8 59 de ff ff       	call   c01017d6 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010397d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103984:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010398b:	eb 3e                	jmp    c01039cb <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c010398d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103990:	8b 50 40             	mov    0x40(%eax),%edx
c0103993:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103996:	21 d0                	and    %edx,%eax
c0103998:	85 c0                	test   %eax,%eax
c010399a:	74 28                	je     c01039c4 <print_trapframe+0x157>
c010399c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010399f:	8b 04 85 a0 d5 12 c0 	mov    -0x3fed2a60(,%eax,4),%eax
c01039a6:	85 c0                	test   %eax,%eax
c01039a8:	74 1a                	je     c01039c4 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01039aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039ad:	8b 04 85 a0 d5 12 c0 	mov    -0x3fed2a60(,%eax,4),%eax
c01039b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01039b8:	c7 04 24 02 db 10 c0 	movl   $0xc010db02,(%esp)
c01039bf:	e8 12 de ff ff       	call   c01017d6 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01039c4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01039c8:	d1 65 f0             	shll   -0x10(%ebp)
c01039cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039ce:	83 f8 17             	cmp    $0x17,%eax
c01039d1:	76 ba                	jbe    c010398d <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01039d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01039d6:	8b 40 40             	mov    0x40(%eax),%eax
c01039d9:	25 00 30 00 00       	and    $0x3000,%eax
c01039de:	c1 e8 0c             	shr    $0xc,%eax
c01039e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01039e5:	c7 04 24 06 db 10 c0 	movl   $0xc010db06,(%esp)
c01039ec:	e8 e5 dd ff ff       	call   c01017d6 <cprintf>

    if (!trap_in_kernel(tf)) {
c01039f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01039f4:	89 04 24             	mov    %eax,(%esp)
c01039f7:	e8 5b fe ff ff       	call   c0103857 <trap_in_kernel>
c01039fc:	85 c0                	test   %eax,%eax
c01039fe:	75 30                	jne    c0103a30 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0103a00:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a03:	8b 40 44             	mov    0x44(%eax),%eax
c0103a06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a0a:	c7 04 24 0f db 10 c0 	movl   $0xc010db0f,(%esp)
c0103a11:	e8 c0 dd ff ff       	call   c01017d6 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0103a16:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a19:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0103a1d:	0f b7 c0             	movzwl %ax,%eax
c0103a20:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a24:	c7 04 24 1e db 10 c0 	movl   $0xc010db1e,(%esp)
c0103a2b:	e8 a6 dd ff ff       	call   c01017d6 <cprintf>
    }
}
c0103a30:	c9                   	leave  
c0103a31:	c3                   	ret    

c0103a32 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0103a32:	55                   	push   %ebp
c0103a33:	89 e5                	mov    %esp,%ebp
c0103a35:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0103a38:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a3b:	8b 00                	mov    (%eax),%eax
c0103a3d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a41:	c7 04 24 31 db 10 c0 	movl   $0xc010db31,(%esp)
c0103a48:	e8 89 dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0103a4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a50:	8b 40 04             	mov    0x4(%eax),%eax
c0103a53:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a57:	c7 04 24 40 db 10 c0 	movl   $0xc010db40,(%esp)
c0103a5e:	e8 73 dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0103a63:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a66:	8b 40 08             	mov    0x8(%eax),%eax
c0103a69:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a6d:	c7 04 24 4f db 10 c0 	movl   $0xc010db4f,(%esp)
c0103a74:	e8 5d dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0103a79:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a7c:	8b 40 0c             	mov    0xc(%eax),%eax
c0103a7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a83:	c7 04 24 5e db 10 c0 	movl   $0xc010db5e,(%esp)
c0103a8a:	e8 47 dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0103a8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a92:	8b 40 10             	mov    0x10(%eax),%eax
c0103a95:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a99:	c7 04 24 6d db 10 c0 	movl   $0xc010db6d,(%esp)
c0103aa0:	e8 31 dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0103aa5:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aa8:	8b 40 14             	mov    0x14(%eax),%eax
c0103aab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103aaf:	c7 04 24 7c db 10 c0 	movl   $0xc010db7c,(%esp)
c0103ab6:	e8 1b dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0103abb:	8b 45 08             	mov    0x8(%ebp),%eax
c0103abe:	8b 40 18             	mov    0x18(%eax),%eax
c0103ac1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103ac5:	c7 04 24 8b db 10 c0 	movl   $0xc010db8b,(%esp)
c0103acc:	e8 05 dd ff ff       	call   c01017d6 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0103ad1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ad4:	8b 40 1c             	mov    0x1c(%eax),%eax
c0103ad7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103adb:	c7 04 24 9a db 10 c0 	movl   $0xc010db9a,(%esp)
c0103ae2:	e8 ef dc ff ff       	call   c01017d6 <cprintf>
}
c0103ae7:	c9                   	leave  
c0103ae8:	c3                   	ret    

c0103ae9 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0103ae9:	55                   	push   %ebp
c0103aea:	89 e5                	mov    %esp,%ebp
c0103aec:	53                   	push   %ebx
c0103aed:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0103af0:	8b 45 08             	mov    0x8(%ebp),%eax
c0103af3:	8b 40 34             	mov    0x34(%eax),%eax
c0103af6:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103af9:	85 c0                	test   %eax,%eax
c0103afb:	74 07                	je     c0103b04 <print_pgfault+0x1b>
c0103afd:	b9 a9 db 10 c0       	mov    $0xc010dba9,%ecx
c0103b02:	eb 05                	jmp    c0103b09 <print_pgfault+0x20>
c0103b04:	b9 ba db 10 c0       	mov    $0xc010dbba,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0103b09:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b0c:	8b 40 34             	mov    0x34(%eax),%eax
c0103b0f:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103b12:	85 c0                	test   %eax,%eax
c0103b14:	74 07                	je     c0103b1d <print_pgfault+0x34>
c0103b16:	ba 57 00 00 00       	mov    $0x57,%edx
c0103b1b:	eb 05                	jmp    c0103b22 <print_pgfault+0x39>
c0103b1d:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0103b22:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b25:	8b 40 34             	mov    0x34(%eax),%eax
c0103b28:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103b2b:	85 c0                	test   %eax,%eax
c0103b2d:	74 07                	je     c0103b36 <print_pgfault+0x4d>
c0103b2f:	b8 55 00 00 00       	mov    $0x55,%eax
c0103b34:	eb 05                	jmp    c0103b3b <print_pgfault+0x52>
c0103b36:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0103b3b:	0f 20 d3             	mov    %cr2,%ebx
c0103b3e:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c0103b41:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0103b44:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0103b48:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0103b4c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103b50:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0103b54:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c0103b5b:	e8 76 dc ff ff       	call   c01017d6 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c0103b60:	83 c4 34             	add    $0x34,%esp
c0103b63:	5b                   	pop    %ebx
c0103b64:	5d                   	pop    %ebp
c0103b65:	c3                   	ret    

c0103b66 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0103b66:	55                   	push   %ebp
c0103b67:	89 e5                	mov    %esp,%ebp
c0103b69:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0103b6c:	a1 ac 20 1a c0       	mov    0xc01a20ac,%eax
c0103b71:	85 c0                	test   %eax,%eax
c0103b73:	74 0b                	je     c0103b80 <pgfault_handler+0x1a>
            print_pgfault(tf);
c0103b75:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b78:	89 04 24             	mov    %eax,(%esp)
c0103b7b:	e8 69 ff ff ff       	call   c0103ae9 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0103b80:	a1 ac 20 1a c0       	mov    0xc01a20ac,%eax
c0103b85:	85 c0                	test   %eax,%eax
c0103b87:	74 3d                	je     c0103bc6 <pgfault_handler+0x60>
        assert(current == idleproc);
c0103b89:	8b 15 88 ff 19 c0    	mov    0xc019ff88,%edx
c0103b8f:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0103b94:	39 c2                	cmp    %eax,%edx
c0103b96:	74 24                	je     c0103bbc <pgfault_handler+0x56>
c0103b98:	c7 44 24 0c eb db 10 	movl   $0xc010dbeb,0xc(%esp)
c0103b9f:	c0 
c0103ba0:	c7 44 24 08 ff db 10 	movl   $0xc010dbff,0x8(%esp)
c0103ba7:	c0 
c0103ba8:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0103baf:	00 
c0103bb0:	c7 04 24 ee d9 10 c0 	movl   $0xc010d9ee,(%esp)
c0103bb7:	e8 9c e6 ff ff       	call   c0102258 <__panic>
        mm = check_mm_struct;
c0103bbc:	a1 ac 20 1a c0       	mov    0xc01a20ac,%eax
c0103bc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bc4:	eb 46                	jmp    c0103c0c <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0103bc6:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0103bcb:	85 c0                	test   %eax,%eax
c0103bcd:	75 32                	jne    c0103c01 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0103bcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bd2:	89 04 24             	mov    %eax,(%esp)
c0103bd5:	e8 93 fc ff ff       	call   c010386d <print_trapframe>
            print_pgfault(tf);
c0103bda:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bdd:	89 04 24             	mov    %eax,(%esp)
c0103be0:	e8 04 ff ff ff       	call   c0103ae9 <print_pgfault>
            panic("unhandled page fault.\n");
c0103be5:	c7 44 24 08 14 dc 10 	movl   $0xc010dc14,0x8(%esp)
c0103bec:	c0 
c0103bed:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103bf4:	00 
c0103bf5:	c7 04 24 ee d9 10 c0 	movl   $0xc010d9ee,(%esp)
c0103bfc:	e8 57 e6 ff ff       	call   c0102258 <__panic>
        }
        mm = current->mm;
c0103c01:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0103c06:	8b 40 18             	mov    0x18(%eax),%eax
c0103c09:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0103c0c:	0f 20 d0             	mov    %cr2,%eax
c0103c0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0103c12:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0103c15:	89 c2                	mov    %eax,%edx
c0103c17:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c1a:	8b 40 34             	mov    0x34(%eax),%eax
c0103c1d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103c21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103c25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c28:	89 04 24             	mov    %eax,(%esp)
c0103c2b:	e8 fd 65 00 00       	call   c010a22d <do_pgfault>
}
c0103c30:	c9                   	leave  
c0103c31:	c3                   	ret    

c0103c32 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0103c32:	55                   	push   %ebp
c0103c33:	89 e5                	mov    %esp,%ebp
c0103c35:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c0103c38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0103c3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c42:	8b 40 30             	mov    0x30(%eax),%eax
c0103c45:	83 f8 2f             	cmp    $0x2f,%eax
c0103c48:	77 38                	ja     c0103c82 <trap_dispatch+0x50>
c0103c4a:	83 f8 2e             	cmp    $0x2e,%eax
c0103c4d:	0f 83 fa 01 00 00    	jae    c0103e4d <trap_dispatch+0x21b>
c0103c53:	83 f8 20             	cmp    $0x20,%eax
c0103c56:	0f 84 07 01 00 00    	je     c0103d63 <trap_dispatch+0x131>
c0103c5c:	83 f8 20             	cmp    $0x20,%eax
c0103c5f:	77 0a                	ja     c0103c6b <trap_dispatch+0x39>
c0103c61:	83 f8 0e             	cmp    $0xe,%eax
c0103c64:	74 3e                	je     c0103ca4 <trap_dispatch+0x72>
c0103c66:	e9 9a 01 00 00       	jmp    c0103e05 <trap_dispatch+0x1d3>
c0103c6b:	83 f8 21             	cmp    $0x21,%eax
c0103c6e:	0f 84 4f 01 00 00    	je     c0103dc3 <trap_dispatch+0x191>
c0103c74:	83 f8 24             	cmp    $0x24,%eax
c0103c77:	0f 84 1d 01 00 00    	je     c0103d9a <trap_dispatch+0x168>
c0103c7d:	e9 83 01 00 00       	jmp    c0103e05 <trap_dispatch+0x1d3>
c0103c82:	83 f8 78             	cmp    $0x78,%eax
c0103c85:	0f 82 7a 01 00 00    	jb     c0103e05 <trap_dispatch+0x1d3>
c0103c8b:	83 f8 79             	cmp    $0x79,%eax
c0103c8e:	0f 86 55 01 00 00    	jbe    c0103de9 <trap_dispatch+0x1b7>
c0103c94:	3d 80 00 00 00       	cmp    $0x80,%eax
c0103c99:	0f 84 ba 00 00 00    	je     c0103d59 <trap_dispatch+0x127>
c0103c9f:	e9 61 01 00 00       	jmp    c0103e05 <trap_dispatch+0x1d3>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0103ca4:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ca7:	89 04 24             	mov    %eax,(%esp)
c0103caa:	e8 b7 fe ff ff       	call   c0103b66 <pgfault_handler>
c0103caf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103cb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103cb6:	0f 84 98 00 00 00    	je     c0103d54 <trap_dispatch+0x122>
            print_trapframe(tf);
c0103cbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cbf:	89 04 24             	mov    %eax,(%esp)
c0103cc2:	e8 a6 fb ff ff       	call   c010386d <print_trapframe>
            if (current == NULL) {
c0103cc7:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0103ccc:	85 c0                	test   %eax,%eax
c0103cce:	75 23                	jne    c0103cf3 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0103cd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cd3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103cd7:	c7 44 24 08 2c dc 10 	movl   $0xc010dc2c,0x8(%esp)
c0103cde:	c0 
c0103cdf:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0103ce6:	00 
c0103ce7:	c7 04 24 ee d9 10 c0 	movl   $0xc010d9ee,(%esp)
c0103cee:	e8 65 e5 ff ff       	call   c0102258 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0103cf3:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cf6:	89 04 24             	mov    %eax,(%esp)
c0103cf9:	e8 59 fb ff ff       	call   c0103857 <trap_in_kernel>
c0103cfe:	85 c0                	test   %eax,%eax
c0103d00:	74 23                	je     c0103d25 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0103d02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d05:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103d09:	c7 44 24 08 4c dc 10 	movl   $0xc010dc4c,0x8(%esp)
c0103d10:	c0 
c0103d11:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
c0103d18:	00 
c0103d19:	c7 04 24 ee d9 10 c0 	movl   $0xc010d9ee,(%esp)
c0103d20:	e8 33 e5 ff ff       	call   c0102258 <__panic>
                }
                cprintf("killed by kernel.\n");
c0103d25:	c7 04 24 7a dc 10 c0 	movl   $0xc010dc7a,(%esp)
c0103d2c:	e8 a5 da ff ff       	call   c01017d6 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0103d31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d34:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103d38:	c7 44 24 08 90 dc 10 	movl   $0xc010dc90,0x8(%esp)
c0103d3f:	c0 
c0103d40:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c0103d47:	00 
c0103d48:	c7 04 24 ee d9 10 c0 	movl   $0xc010d9ee,(%esp)
c0103d4f:	e8 04 e5 ff ff       	call   c0102258 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c0103d54:	e9 f5 00 00 00       	jmp    c0103e4e <trap_dispatch+0x21c>
    case T_SYSCALL:
        syscall();
c0103d59:	e8 b4 88 00 00       	call   c010c612 <syscall>
        break;
c0103d5e:	e9 eb 00 00 00       	jmp    c0103e4e <trap_dispatch+0x21c>
         */
        /* LAB5 2012012617 */
        /* you should upate you lab1 code (just add ONE or TWO lines of code):
         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
         */
        ticks++;
c0103d63:	a1 b4 1f 1a c0       	mov    0xc01a1fb4,%eax
c0103d68:	83 c0 01             	add    $0x1,%eax
c0103d6b:	a3 b4 1f 1a c0       	mov    %eax,0xc01a1fb4
        if(ticks == TICK_NUM) {
c0103d70:	a1 b4 1f 1a c0       	mov    0xc01a1fb4,%eax
c0103d75:	83 f8 64             	cmp    $0x64,%eax
c0103d78:	75 1b                	jne    c0103d95 <trap_dispatch+0x163>
            ticks = 0;
c0103d7a:	c7 05 b4 1f 1a c0 00 	movl   $0x0,0xc01a1fb4
c0103d81:	00 00 00 
            current->need_resched = 1;
c0103d84:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0103d89:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
        }
        break;
c0103d90:	e9 b9 00 00 00       	jmp    c0103e4e <trap_dispatch+0x21c>
c0103d95:	e9 b4 00 00 00       	jmp    c0103e4e <trap_dispatch+0x21c>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0103d9a:	e8 27 ee ff ff       	call   c0102bc6 <cons_getc>
c0103d9f:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0103da2:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0103da6:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0103daa:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103dae:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103db2:	c7 04 24 b9 dc 10 c0 	movl   $0xc010dcb9,(%esp)
c0103db9:	e8 18 da ff ff       	call   c01017d6 <cprintf>
        break;
c0103dbe:	e9 8b 00 00 00       	jmp    c0103e4e <trap_dispatch+0x21c>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0103dc3:	e8 fe ed ff ff       	call   c0102bc6 <cons_getc>
c0103dc8:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0103dcb:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0103dcf:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0103dd3:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103dd7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103ddb:	c7 04 24 cb dc 10 c0 	movl   $0xc010dccb,(%esp)
c0103de2:	e8 ef d9 ff ff       	call   c01017d6 <cprintf>
        break;
c0103de7:	eb 65                	jmp    c0103e4e <trap_dispatch+0x21c>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0103de9:	c7 44 24 08 da dc 10 	movl   $0xc010dcda,0x8(%esp)
c0103df0:	c0 
c0103df1:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0103df8:	00 
c0103df9:	c7 04 24 ee d9 10 c0 	movl   $0xc010d9ee,(%esp)
c0103e00:	e8 53 e4 ff ff       	call   c0102258 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0103e05:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e08:	89 04 24             	mov    %eax,(%esp)
c0103e0b:	e8 5d fa ff ff       	call   c010386d <print_trapframe>
        if (current != NULL) {
c0103e10:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0103e15:	85 c0                	test   %eax,%eax
c0103e17:	74 18                	je     c0103e31 <trap_dispatch+0x1ff>
            cprintf("unhandled trap.\n");
c0103e19:	c7 04 24 ea dc 10 c0 	movl   $0xc010dcea,(%esp)
c0103e20:	e8 b1 d9 ff ff       	call   c01017d6 <cprintf>
            do_exit(-E_KILLED);
c0103e25:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0103e2c:	e8 84 75 00 00       	call   c010b3b5 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0103e31:	c7 44 24 08 fb dc 10 	movl   $0xc010dcfb,0x8(%esp)
c0103e38:	c0 
c0103e39:	c7 44 24 04 07 01 00 	movl   $0x107,0x4(%esp)
c0103e40:	00 
c0103e41:	c7 04 24 ee d9 10 c0 	movl   $0xc010d9ee,(%esp)
c0103e48:	e8 0b e4 ff ff       	call   c0102258 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0103e4d:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0103e4e:	c9                   	leave  
c0103e4f:	c3                   	ret    

c0103e50 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0103e50:	55                   	push   %ebp
c0103e51:	89 e5                	mov    %esp,%ebp
c0103e53:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0103e56:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0103e5b:	85 c0                	test   %eax,%eax
c0103e5d:	75 0d                	jne    c0103e6c <trap+0x1c>
        trap_dispatch(tf);
c0103e5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e62:	89 04 24             	mov    %eax,(%esp)
c0103e65:	e8 c8 fd ff ff       	call   c0103c32 <trap_dispatch>
c0103e6a:	eb 6c                	jmp    c0103ed8 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0103e6c:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0103e71:	8b 40 3c             	mov    0x3c(%eax),%eax
c0103e74:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0103e77:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0103e7c:	8b 55 08             	mov    0x8(%ebp),%edx
c0103e7f:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0103e82:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e85:	89 04 24             	mov    %eax,(%esp)
c0103e88:	e8 ca f9 ff ff       	call   c0103857 <trap_in_kernel>
c0103e8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0103e90:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e93:	89 04 24             	mov    %eax,(%esp)
c0103e96:	e8 97 fd ff ff       	call   c0103c32 <trap_dispatch>
    
        current->tf = otf;
c0103e9b:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0103ea0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103ea3:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0103ea6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103eaa:	75 2c                	jne    c0103ed8 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0103eac:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0103eb1:	8b 40 44             	mov    0x44(%eax),%eax
c0103eb4:	83 e0 01             	and    $0x1,%eax
c0103eb7:	85 c0                	test   %eax,%eax
c0103eb9:	74 0c                	je     c0103ec7 <trap+0x77>
                do_exit(-E_KILLED);
c0103ebb:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0103ec2:	e8 ee 74 00 00       	call   c010b3b5 <do_exit>
            }
            if (current->need_resched) {
c0103ec7:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c0103ecc:	8b 40 10             	mov    0x10(%eax),%eax
c0103ecf:	85 c0                	test   %eax,%eax
c0103ed1:	74 05                	je     c0103ed8 <trap+0x88>
                schedule();
c0103ed3:	e8 42 85 00 00       	call   c010c41a <schedule>
            }
        }
    }
}
c0103ed8:	c9                   	leave  
c0103ed9:	c3                   	ret    

c0103eda <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0103eda:	1e                   	push   %ds
    pushl %es
c0103edb:	06                   	push   %es
    pushl %fs
c0103edc:	0f a0                	push   %fs
    pushl %gs
c0103ede:	0f a8                	push   %gs
    pushal
c0103ee0:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0103ee1:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0103ee6:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0103ee8:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0103eea:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0103eeb:	e8 60 ff ff ff       	call   c0103e50 <trap>

    # pop the pushed stack pointer
    popl %esp
c0103ef0:	5c                   	pop    %esp

c0103ef1 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0103ef1:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0103ef2:	0f a9                	pop    %gs
    popl %fs
c0103ef4:	0f a1                	pop    %fs
    popl %es
c0103ef6:	07                   	pop    %es
    popl %ds
c0103ef7:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0103ef8:	83 c4 08             	add    $0x8,%esp
    iret
c0103efb:	cf                   	iret   

c0103efc <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0103efc:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0103f00:	e9 ec ff ff ff       	jmp    c0103ef1 <__trapret>

c0103f05 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0103f05:	6a 00                	push   $0x0
  pushl $0
c0103f07:	6a 00                	push   $0x0
  jmp __alltraps
c0103f09:	e9 cc ff ff ff       	jmp    c0103eda <__alltraps>

c0103f0e <vector1>:
.globl vector1
vector1:
  pushl $0
c0103f0e:	6a 00                	push   $0x0
  pushl $1
c0103f10:	6a 01                	push   $0x1
  jmp __alltraps
c0103f12:	e9 c3 ff ff ff       	jmp    c0103eda <__alltraps>

c0103f17 <vector2>:
.globl vector2
vector2:
  pushl $0
c0103f17:	6a 00                	push   $0x0
  pushl $2
c0103f19:	6a 02                	push   $0x2
  jmp __alltraps
c0103f1b:	e9 ba ff ff ff       	jmp    c0103eda <__alltraps>

c0103f20 <vector3>:
.globl vector3
vector3:
  pushl $0
c0103f20:	6a 00                	push   $0x0
  pushl $3
c0103f22:	6a 03                	push   $0x3
  jmp __alltraps
c0103f24:	e9 b1 ff ff ff       	jmp    c0103eda <__alltraps>

c0103f29 <vector4>:
.globl vector4
vector4:
  pushl $0
c0103f29:	6a 00                	push   $0x0
  pushl $4
c0103f2b:	6a 04                	push   $0x4
  jmp __alltraps
c0103f2d:	e9 a8 ff ff ff       	jmp    c0103eda <__alltraps>

c0103f32 <vector5>:
.globl vector5
vector5:
  pushl $0
c0103f32:	6a 00                	push   $0x0
  pushl $5
c0103f34:	6a 05                	push   $0x5
  jmp __alltraps
c0103f36:	e9 9f ff ff ff       	jmp    c0103eda <__alltraps>

c0103f3b <vector6>:
.globl vector6
vector6:
  pushl $0
c0103f3b:	6a 00                	push   $0x0
  pushl $6
c0103f3d:	6a 06                	push   $0x6
  jmp __alltraps
c0103f3f:	e9 96 ff ff ff       	jmp    c0103eda <__alltraps>

c0103f44 <vector7>:
.globl vector7
vector7:
  pushl $0
c0103f44:	6a 00                	push   $0x0
  pushl $7
c0103f46:	6a 07                	push   $0x7
  jmp __alltraps
c0103f48:	e9 8d ff ff ff       	jmp    c0103eda <__alltraps>

c0103f4d <vector8>:
.globl vector8
vector8:
  pushl $8
c0103f4d:	6a 08                	push   $0x8
  jmp __alltraps
c0103f4f:	e9 86 ff ff ff       	jmp    c0103eda <__alltraps>

c0103f54 <vector9>:
.globl vector9
vector9:
  pushl $9
c0103f54:	6a 09                	push   $0x9
  jmp __alltraps
c0103f56:	e9 7f ff ff ff       	jmp    c0103eda <__alltraps>

c0103f5b <vector10>:
.globl vector10
vector10:
  pushl $10
c0103f5b:	6a 0a                	push   $0xa
  jmp __alltraps
c0103f5d:	e9 78 ff ff ff       	jmp    c0103eda <__alltraps>

c0103f62 <vector11>:
.globl vector11
vector11:
  pushl $11
c0103f62:	6a 0b                	push   $0xb
  jmp __alltraps
c0103f64:	e9 71 ff ff ff       	jmp    c0103eda <__alltraps>

c0103f69 <vector12>:
.globl vector12
vector12:
  pushl $12
c0103f69:	6a 0c                	push   $0xc
  jmp __alltraps
c0103f6b:	e9 6a ff ff ff       	jmp    c0103eda <__alltraps>

c0103f70 <vector13>:
.globl vector13
vector13:
  pushl $13
c0103f70:	6a 0d                	push   $0xd
  jmp __alltraps
c0103f72:	e9 63 ff ff ff       	jmp    c0103eda <__alltraps>

c0103f77 <vector14>:
.globl vector14
vector14:
  pushl $14
c0103f77:	6a 0e                	push   $0xe
  jmp __alltraps
c0103f79:	e9 5c ff ff ff       	jmp    c0103eda <__alltraps>

c0103f7e <vector15>:
.globl vector15
vector15:
  pushl $0
c0103f7e:	6a 00                	push   $0x0
  pushl $15
c0103f80:	6a 0f                	push   $0xf
  jmp __alltraps
c0103f82:	e9 53 ff ff ff       	jmp    c0103eda <__alltraps>

c0103f87 <vector16>:
.globl vector16
vector16:
  pushl $0
c0103f87:	6a 00                	push   $0x0
  pushl $16
c0103f89:	6a 10                	push   $0x10
  jmp __alltraps
c0103f8b:	e9 4a ff ff ff       	jmp    c0103eda <__alltraps>

c0103f90 <vector17>:
.globl vector17
vector17:
  pushl $17
c0103f90:	6a 11                	push   $0x11
  jmp __alltraps
c0103f92:	e9 43 ff ff ff       	jmp    c0103eda <__alltraps>

c0103f97 <vector18>:
.globl vector18
vector18:
  pushl $0
c0103f97:	6a 00                	push   $0x0
  pushl $18
c0103f99:	6a 12                	push   $0x12
  jmp __alltraps
c0103f9b:	e9 3a ff ff ff       	jmp    c0103eda <__alltraps>

c0103fa0 <vector19>:
.globl vector19
vector19:
  pushl $0
c0103fa0:	6a 00                	push   $0x0
  pushl $19
c0103fa2:	6a 13                	push   $0x13
  jmp __alltraps
c0103fa4:	e9 31 ff ff ff       	jmp    c0103eda <__alltraps>

c0103fa9 <vector20>:
.globl vector20
vector20:
  pushl $0
c0103fa9:	6a 00                	push   $0x0
  pushl $20
c0103fab:	6a 14                	push   $0x14
  jmp __alltraps
c0103fad:	e9 28 ff ff ff       	jmp    c0103eda <__alltraps>

c0103fb2 <vector21>:
.globl vector21
vector21:
  pushl $0
c0103fb2:	6a 00                	push   $0x0
  pushl $21
c0103fb4:	6a 15                	push   $0x15
  jmp __alltraps
c0103fb6:	e9 1f ff ff ff       	jmp    c0103eda <__alltraps>

c0103fbb <vector22>:
.globl vector22
vector22:
  pushl $0
c0103fbb:	6a 00                	push   $0x0
  pushl $22
c0103fbd:	6a 16                	push   $0x16
  jmp __alltraps
c0103fbf:	e9 16 ff ff ff       	jmp    c0103eda <__alltraps>

c0103fc4 <vector23>:
.globl vector23
vector23:
  pushl $0
c0103fc4:	6a 00                	push   $0x0
  pushl $23
c0103fc6:	6a 17                	push   $0x17
  jmp __alltraps
c0103fc8:	e9 0d ff ff ff       	jmp    c0103eda <__alltraps>

c0103fcd <vector24>:
.globl vector24
vector24:
  pushl $0
c0103fcd:	6a 00                	push   $0x0
  pushl $24
c0103fcf:	6a 18                	push   $0x18
  jmp __alltraps
c0103fd1:	e9 04 ff ff ff       	jmp    c0103eda <__alltraps>

c0103fd6 <vector25>:
.globl vector25
vector25:
  pushl $0
c0103fd6:	6a 00                	push   $0x0
  pushl $25
c0103fd8:	6a 19                	push   $0x19
  jmp __alltraps
c0103fda:	e9 fb fe ff ff       	jmp    c0103eda <__alltraps>

c0103fdf <vector26>:
.globl vector26
vector26:
  pushl $0
c0103fdf:	6a 00                	push   $0x0
  pushl $26
c0103fe1:	6a 1a                	push   $0x1a
  jmp __alltraps
c0103fe3:	e9 f2 fe ff ff       	jmp    c0103eda <__alltraps>

c0103fe8 <vector27>:
.globl vector27
vector27:
  pushl $0
c0103fe8:	6a 00                	push   $0x0
  pushl $27
c0103fea:	6a 1b                	push   $0x1b
  jmp __alltraps
c0103fec:	e9 e9 fe ff ff       	jmp    c0103eda <__alltraps>

c0103ff1 <vector28>:
.globl vector28
vector28:
  pushl $0
c0103ff1:	6a 00                	push   $0x0
  pushl $28
c0103ff3:	6a 1c                	push   $0x1c
  jmp __alltraps
c0103ff5:	e9 e0 fe ff ff       	jmp    c0103eda <__alltraps>

c0103ffa <vector29>:
.globl vector29
vector29:
  pushl $0
c0103ffa:	6a 00                	push   $0x0
  pushl $29
c0103ffc:	6a 1d                	push   $0x1d
  jmp __alltraps
c0103ffe:	e9 d7 fe ff ff       	jmp    c0103eda <__alltraps>

c0104003 <vector30>:
.globl vector30
vector30:
  pushl $0
c0104003:	6a 00                	push   $0x0
  pushl $30
c0104005:	6a 1e                	push   $0x1e
  jmp __alltraps
c0104007:	e9 ce fe ff ff       	jmp    c0103eda <__alltraps>

c010400c <vector31>:
.globl vector31
vector31:
  pushl $0
c010400c:	6a 00                	push   $0x0
  pushl $31
c010400e:	6a 1f                	push   $0x1f
  jmp __alltraps
c0104010:	e9 c5 fe ff ff       	jmp    c0103eda <__alltraps>

c0104015 <vector32>:
.globl vector32
vector32:
  pushl $0
c0104015:	6a 00                	push   $0x0
  pushl $32
c0104017:	6a 20                	push   $0x20
  jmp __alltraps
c0104019:	e9 bc fe ff ff       	jmp    c0103eda <__alltraps>

c010401e <vector33>:
.globl vector33
vector33:
  pushl $0
c010401e:	6a 00                	push   $0x0
  pushl $33
c0104020:	6a 21                	push   $0x21
  jmp __alltraps
c0104022:	e9 b3 fe ff ff       	jmp    c0103eda <__alltraps>

c0104027 <vector34>:
.globl vector34
vector34:
  pushl $0
c0104027:	6a 00                	push   $0x0
  pushl $34
c0104029:	6a 22                	push   $0x22
  jmp __alltraps
c010402b:	e9 aa fe ff ff       	jmp    c0103eda <__alltraps>

c0104030 <vector35>:
.globl vector35
vector35:
  pushl $0
c0104030:	6a 00                	push   $0x0
  pushl $35
c0104032:	6a 23                	push   $0x23
  jmp __alltraps
c0104034:	e9 a1 fe ff ff       	jmp    c0103eda <__alltraps>

c0104039 <vector36>:
.globl vector36
vector36:
  pushl $0
c0104039:	6a 00                	push   $0x0
  pushl $36
c010403b:	6a 24                	push   $0x24
  jmp __alltraps
c010403d:	e9 98 fe ff ff       	jmp    c0103eda <__alltraps>

c0104042 <vector37>:
.globl vector37
vector37:
  pushl $0
c0104042:	6a 00                	push   $0x0
  pushl $37
c0104044:	6a 25                	push   $0x25
  jmp __alltraps
c0104046:	e9 8f fe ff ff       	jmp    c0103eda <__alltraps>

c010404b <vector38>:
.globl vector38
vector38:
  pushl $0
c010404b:	6a 00                	push   $0x0
  pushl $38
c010404d:	6a 26                	push   $0x26
  jmp __alltraps
c010404f:	e9 86 fe ff ff       	jmp    c0103eda <__alltraps>

c0104054 <vector39>:
.globl vector39
vector39:
  pushl $0
c0104054:	6a 00                	push   $0x0
  pushl $39
c0104056:	6a 27                	push   $0x27
  jmp __alltraps
c0104058:	e9 7d fe ff ff       	jmp    c0103eda <__alltraps>

c010405d <vector40>:
.globl vector40
vector40:
  pushl $0
c010405d:	6a 00                	push   $0x0
  pushl $40
c010405f:	6a 28                	push   $0x28
  jmp __alltraps
c0104061:	e9 74 fe ff ff       	jmp    c0103eda <__alltraps>

c0104066 <vector41>:
.globl vector41
vector41:
  pushl $0
c0104066:	6a 00                	push   $0x0
  pushl $41
c0104068:	6a 29                	push   $0x29
  jmp __alltraps
c010406a:	e9 6b fe ff ff       	jmp    c0103eda <__alltraps>

c010406f <vector42>:
.globl vector42
vector42:
  pushl $0
c010406f:	6a 00                	push   $0x0
  pushl $42
c0104071:	6a 2a                	push   $0x2a
  jmp __alltraps
c0104073:	e9 62 fe ff ff       	jmp    c0103eda <__alltraps>

c0104078 <vector43>:
.globl vector43
vector43:
  pushl $0
c0104078:	6a 00                	push   $0x0
  pushl $43
c010407a:	6a 2b                	push   $0x2b
  jmp __alltraps
c010407c:	e9 59 fe ff ff       	jmp    c0103eda <__alltraps>

c0104081 <vector44>:
.globl vector44
vector44:
  pushl $0
c0104081:	6a 00                	push   $0x0
  pushl $44
c0104083:	6a 2c                	push   $0x2c
  jmp __alltraps
c0104085:	e9 50 fe ff ff       	jmp    c0103eda <__alltraps>

c010408a <vector45>:
.globl vector45
vector45:
  pushl $0
c010408a:	6a 00                	push   $0x0
  pushl $45
c010408c:	6a 2d                	push   $0x2d
  jmp __alltraps
c010408e:	e9 47 fe ff ff       	jmp    c0103eda <__alltraps>

c0104093 <vector46>:
.globl vector46
vector46:
  pushl $0
c0104093:	6a 00                	push   $0x0
  pushl $46
c0104095:	6a 2e                	push   $0x2e
  jmp __alltraps
c0104097:	e9 3e fe ff ff       	jmp    c0103eda <__alltraps>

c010409c <vector47>:
.globl vector47
vector47:
  pushl $0
c010409c:	6a 00                	push   $0x0
  pushl $47
c010409e:	6a 2f                	push   $0x2f
  jmp __alltraps
c01040a0:	e9 35 fe ff ff       	jmp    c0103eda <__alltraps>

c01040a5 <vector48>:
.globl vector48
vector48:
  pushl $0
c01040a5:	6a 00                	push   $0x0
  pushl $48
c01040a7:	6a 30                	push   $0x30
  jmp __alltraps
c01040a9:	e9 2c fe ff ff       	jmp    c0103eda <__alltraps>

c01040ae <vector49>:
.globl vector49
vector49:
  pushl $0
c01040ae:	6a 00                	push   $0x0
  pushl $49
c01040b0:	6a 31                	push   $0x31
  jmp __alltraps
c01040b2:	e9 23 fe ff ff       	jmp    c0103eda <__alltraps>

c01040b7 <vector50>:
.globl vector50
vector50:
  pushl $0
c01040b7:	6a 00                	push   $0x0
  pushl $50
c01040b9:	6a 32                	push   $0x32
  jmp __alltraps
c01040bb:	e9 1a fe ff ff       	jmp    c0103eda <__alltraps>

c01040c0 <vector51>:
.globl vector51
vector51:
  pushl $0
c01040c0:	6a 00                	push   $0x0
  pushl $51
c01040c2:	6a 33                	push   $0x33
  jmp __alltraps
c01040c4:	e9 11 fe ff ff       	jmp    c0103eda <__alltraps>

c01040c9 <vector52>:
.globl vector52
vector52:
  pushl $0
c01040c9:	6a 00                	push   $0x0
  pushl $52
c01040cb:	6a 34                	push   $0x34
  jmp __alltraps
c01040cd:	e9 08 fe ff ff       	jmp    c0103eda <__alltraps>

c01040d2 <vector53>:
.globl vector53
vector53:
  pushl $0
c01040d2:	6a 00                	push   $0x0
  pushl $53
c01040d4:	6a 35                	push   $0x35
  jmp __alltraps
c01040d6:	e9 ff fd ff ff       	jmp    c0103eda <__alltraps>

c01040db <vector54>:
.globl vector54
vector54:
  pushl $0
c01040db:	6a 00                	push   $0x0
  pushl $54
c01040dd:	6a 36                	push   $0x36
  jmp __alltraps
c01040df:	e9 f6 fd ff ff       	jmp    c0103eda <__alltraps>

c01040e4 <vector55>:
.globl vector55
vector55:
  pushl $0
c01040e4:	6a 00                	push   $0x0
  pushl $55
c01040e6:	6a 37                	push   $0x37
  jmp __alltraps
c01040e8:	e9 ed fd ff ff       	jmp    c0103eda <__alltraps>

c01040ed <vector56>:
.globl vector56
vector56:
  pushl $0
c01040ed:	6a 00                	push   $0x0
  pushl $56
c01040ef:	6a 38                	push   $0x38
  jmp __alltraps
c01040f1:	e9 e4 fd ff ff       	jmp    c0103eda <__alltraps>

c01040f6 <vector57>:
.globl vector57
vector57:
  pushl $0
c01040f6:	6a 00                	push   $0x0
  pushl $57
c01040f8:	6a 39                	push   $0x39
  jmp __alltraps
c01040fa:	e9 db fd ff ff       	jmp    c0103eda <__alltraps>

c01040ff <vector58>:
.globl vector58
vector58:
  pushl $0
c01040ff:	6a 00                	push   $0x0
  pushl $58
c0104101:	6a 3a                	push   $0x3a
  jmp __alltraps
c0104103:	e9 d2 fd ff ff       	jmp    c0103eda <__alltraps>

c0104108 <vector59>:
.globl vector59
vector59:
  pushl $0
c0104108:	6a 00                	push   $0x0
  pushl $59
c010410a:	6a 3b                	push   $0x3b
  jmp __alltraps
c010410c:	e9 c9 fd ff ff       	jmp    c0103eda <__alltraps>

c0104111 <vector60>:
.globl vector60
vector60:
  pushl $0
c0104111:	6a 00                	push   $0x0
  pushl $60
c0104113:	6a 3c                	push   $0x3c
  jmp __alltraps
c0104115:	e9 c0 fd ff ff       	jmp    c0103eda <__alltraps>

c010411a <vector61>:
.globl vector61
vector61:
  pushl $0
c010411a:	6a 00                	push   $0x0
  pushl $61
c010411c:	6a 3d                	push   $0x3d
  jmp __alltraps
c010411e:	e9 b7 fd ff ff       	jmp    c0103eda <__alltraps>

c0104123 <vector62>:
.globl vector62
vector62:
  pushl $0
c0104123:	6a 00                	push   $0x0
  pushl $62
c0104125:	6a 3e                	push   $0x3e
  jmp __alltraps
c0104127:	e9 ae fd ff ff       	jmp    c0103eda <__alltraps>

c010412c <vector63>:
.globl vector63
vector63:
  pushl $0
c010412c:	6a 00                	push   $0x0
  pushl $63
c010412e:	6a 3f                	push   $0x3f
  jmp __alltraps
c0104130:	e9 a5 fd ff ff       	jmp    c0103eda <__alltraps>

c0104135 <vector64>:
.globl vector64
vector64:
  pushl $0
c0104135:	6a 00                	push   $0x0
  pushl $64
c0104137:	6a 40                	push   $0x40
  jmp __alltraps
c0104139:	e9 9c fd ff ff       	jmp    c0103eda <__alltraps>

c010413e <vector65>:
.globl vector65
vector65:
  pushl $0
c010413e:	6a 00                	push   $0x0
  pushl $65
c0104140:	6a 41                	push   $0x41
  jmp __alltraps
c0104142:	e9 93 fd ff ff       	jmp    c0103eda <__alltraps>

c0104147 <vector66>:
.globl vector66
vector66:
  pushl $0
c0104147:	6a 00                	push   $0x0
  pushl $66
c0104149:	6a 42                	push   $0x42
  jmp __alltraps
c010414b:	e9 8a fd ff ff       	jmp    c0103eda <__alltraps>

c0104150 <vector67>:
.globl vector67
vector67:
  pushl $0
c0104150:	6a 00                	push   $0x0
  pushl $67
c0104152:	6a 43                	push   $0x43
  jmp __alltraps
c0104154:	e9 81 fd ff ff       	jmp    c0103eda <__alltraps>

c0104159 <vector68>:
.globl vector68
vector68:
  pushl $0
c0104159:	6a 00                	push   $0x0
  pushl $68
c010415b:	6a 44                	push   $0x44
  jmp __alltraps
c010415d:	e9 78 fd ff ff       	jmp    c0103eda <__alltraps>

c0104162 <vector69>:
.globl vector69
vector69:
  pushl $0
c0104162:	6a 00                	push   $0x0
  pushl $69
c0104164:	6a 45                	push   $0x45
  jmp __alltraps
c0104166:	e9 6f fd ff ff       	jmp    c0103eda <__alltraps>

c010416b <vector70>:
.globl vector70
vector70:
  pushl $0
c010416b:	6a 00                	push   $0x0
  pushl $70
c010416d:	6a 46                	push   $0x46
  jmp __alltraps
c010416f:	e9 66 fd ff ff       	jmp    c0103eda <__alltraps>

c0104174 <vector71>:
.globl vector71
vector71:
  pushl $0
c0104174:	6a 00                	push   $0x0
  pushl $71
c0104176:	6a 47                	push   $0x47
  jmp __alltraps
c0104178:	e9 5d fd ff ff       	jmp    c0103eda <__alltraps>

c010417d <vector72>:
.globl vector72
vector72:
  pushl $0
c010417d:	6a 00                	push   $0x0
  pushl $72
c010417f:	6a 48                	push   $0x48
  jmp __alltraps
c0104181:	e9 54 fd ff ff       	jmp    c0103eda <__alltraps>

c0104186 <vector73>:
.globl vector73
vector73:
  pushl $0
c0104186:	6a 00                	push   $0x0
  pushl $73
c0104188:	6a 49                	push   $0x49
  jmp __alltraps
c010418a:	e9 4b fd ff ff       	jmp    c0103eda <__alltraps>

c010418f <vector74>:
.globl vector74
vector74:
  pushl $0
c010418f:	6a 00                	push   $0x0
  pushl $74
c0104191:	6a 4a                	push   $0x4a
  jmp __alltraps
c0104193:	e9 42 fd ff ff       	jmp    c0103eda <__alltraps>

c0104198 <vector75>:
.globl vector75
vector75:
  pushl $0
c0104198:	6a 00                	push   $0x0
  pushl $75
c010419a:	6a 4b                	push   $0x4b
  jmp __alltraps
c010419c:	e9 39 fd ff ff       	jmp    c0103eda <__alltraps>

c01041a1 <vector76>:
.globl vector76
vector76:
  pushl $0
c01041a1:	6a 00                	push   $0x0
  pushl $76
c01041a3:	6a 4c                	push   $0x4c
  jmp __alltraps
c01041a5:	e9 30 fd ff ff       	jmp    c0103eda <__alltraps>

c01041aa <vector77>:
.globl vector77
vector77:
  pushl $0
c01041aa:	6a 00                	push   $0x0
  pushl $77
c01041ac:	6a 4d                	push   $0x4d
  jmp __alltraps
c01041ae:	e9 27 fd ff ff       	jmp    c0103eda <__alltraps>

c01041b3 <vector78>:
.globl vector78
vector78:
  pushl $0
c01041b3:	6a 00                	push   $0x0
  pushl $78
c01041b5:	6a 4e                	push   $0x4e
  jmp __alltraps
c01041b7:	e9 1e fd ff ff       	jmp    c0103eda <__alltraps>

c01041bc <vector79>:
.globl vector79
vector79:
  pushl $0
c01041bc:	6a 00                	push   $0x0
  pushl $79
c01041be:	6a 4f                	push   $0x4f
  jmp __alltraps
c01041c0:	e9 15 fd ff ff       	jmp    c0103eda <__alltraps>

c01041c5 <vector80>:
.globl vector80
vector80:
  pushl $0
c01041c5:	6a 00                	push   $0x0
  pushl $80
c01041c7:	6a 50                	push   $0x50
  jmp __alltraps
c01041c9:	e9 0c fd ff ff       	jmp    c0103eda <__alltraps>

c01041ce <vector81>:
.globl vector81
vector81:
  pushl $0
c01041ce:	6a 00                	push   $0x0
  pushl $81
c01041d0:	6a 51                	push   $0x51
  jmp __alltraps
c01041d2:	e9 03 fd ff ff       	jmp    c0103eda <__alltraps>

c01041d7 <vector82>:
.globl vector82
vector82:
  pushl $0
c01041d7:	6a 00                	push   $0x0
  pushl $82
c01041d9:	6a 52                	push   $0x52
  jmp __alltraps
c01041db:	e9 fa fc ff ff       	jmp    c0103eda <__alltraps>

c01041e0 <vector83>:
.globl vector83
vector83:
  pushl $0
c01041e0:	6a 00                	push   $0x0
  pushl $83
c01041e2:	6a 53                	push   $0x53
  jmp __alltraps
c01041e4:	e9 f1 fc ff ff       	jmp    c0103eda <__alltraps>

c01041e9 <vector84>:
.globl vector84
vector84:
  pushl $0
c01041e9:	6a 00                	push   $0x0
  pushl $84
c01041eb:	6a 54                	push   $0x54
  jmp __alltraps
c01041ed:	e9 e8 fc ff ff       	jmp    c0103eda <__alltraps>

c01041f2 <vector85>:
.globl vector85
vector85:
  pushl $0
c01041f2:	6a 00                	push   $0x0
  pushl $85
c01041f4:	6a 55                	push   $0x55
  jmp __alltraps
c01041f6:	e9 df fc ff ff       	jmp    c0103eda <__alltraps>

c01041fb <vector86>:
.globl vector86
vector86:
  pushl $0
c01041fb:	6a 00                	push   $0x0
  pushl $86
c01041fd:	6a 56                	push   $0x56
  jmp __alltraps
c01041ff:	e9 d6 fc ff ff       	jmp    c0103eda <__alltraps>

c0104204 <vector87>:
.globl vector87
vector87:
  pushl $0
c0104204:	6a 00                	push   $0x0
  pushl $87
c0104206:	6a 57                	push   $0x57
  jmp __alltraps
c0104208:	e9 cd fc ff ff       	jmp    c0103eda <__alltraps>

c010420d <vector88>:
.globl vector88
vector88:
  pushl $0
c010420d:	6a 00                	push   $0x0
  pushl $88
c010420f:	6a 58                	push   $0x58
  jmp __alltraps
c0104211:	e9 c4 fc ff ff       	jmp    c0103eda <__alltraps>

c0104216 <vector89>:
.globl vector89
vector89:
  pushl $0
c0104216:	6a 00                	push   $0x0
  pushl $89
c0104218:	6a 59                	push   $0x59
  jmp __alltraps
c010421a:	e9 bb fc ff ff       	jmp    c0103eda <__alltraps>

c010421f <vector90>:
.globl vector90
vector90:
  pushl $0
c010421f:	6a 00                	push   $0x0
  pushl $90
c0104221:	6a 5a                	push   $0x5a
  jmp __alltraps
c0104223:	e9 b2 fc ff ff       	jmp    c0103eda <__alltraps>

c0104228 <vector91>:
.globl vector91
vector91:
  pushl $0
c0104228:	6a 00                	push   $0x0
  pushl $91
c010422a:	6a 5b                	push   $0x5b
  jmp __alltraps
c010422c:	e9 a9 fc ff ff       	jmp    c0103eda <__alltraps>

c0104231 <vector92>:
.globl vector92
vector92:
  pushl $0
c0104231:	6a 00                	push   $0x0
  pushl $92
c0104233:	6a 5c                	push   $0x5c
  jmp __alltraps
c0104235:	e9 a0 fc ff ff       	jmp    c0103eda <__alltraps>

c010423a <vector93>:
.globl vector93
vector93:
  pushl $0
c010423a:	6a 00                	push   $0x0
  pushl $93
c010423c:	6a 5d                	push   $0x5d
  jmp __alltraps
c010423e:	e9 97 fc ff ff       	jmp    c0103eda <__alltraps>

c0104243 <vector94>:
.globl vector94
vector94:
  pushl $0
c0104243:	6a 00                	push   $0x0
  pushl $94
c0104245:	6a 5e                	push   $0x5e
  jmp __alltraps
c0104247:	e9 8e fc ff ff       	jmp    c0103eda <__alltraps>

c010424c <vector95>:
.globl vector95
vector95:
  pushl $0
c010424c:	6a 00                	push   $0x0
  pushl $95
c010424e:	6a 5f                	push   $0x5f
  jmp __alltraps
c0104250:	e9 85 fc ff ff       	jmp    c0103eda <__alltraps>

c0104255 <vector96>:
.globl vector96
vector96:
  pushl $0
c0104255:	6a 00                	push   $0x0
  pushl $96
c0104257:	6a 60                	push   $0x60
  jmp __alltraps
c0104259:	e9 7c fc ff ff       	jmp    c0103eda <__alltraps>

c010425e <vector97>:
.globl vector97
vector97:
  pushl $0
c010425e:	6a 00                	push   $0x0
  pushl $97
c0104260:	6a 61                	push   $0x61
  jmp __alltraps
c0104262:	e9 73 fc ff ff       	jmp    c0103eda <__alltraps>

c0104267 <vector98>:
.globl vector98
vector98:
  pushl $0
c0104267:	6a 00                	push   $0x0
  pushl $98
c0104269:	6a 62                	push   $0x62
  jmp __alltraps
c010426b:	e9 6a fc ff ff       	jmp    c0103eda <__alltraps>

c0104270 <vector99>:
.globl vector99
vector99:
  pushl $0
c0104270:	6a 00                	push   $0x0
  pushl $99
c0104272:	6a 63                	push   $0x63
  jmp __alltraps
c0104274:	e9 61 fc ff ff       	jmp    c0103eda <__alltraps>

c0104279 <vector100>:
.globl vector100
vector100:
  pushl $0
c0104279:	6a 00                	push   $0x0
  pushl $100
c010427b:	6a 64                	push   $0x64
  jmp __alltraps
c010427d:	e9 58 fc ff ff       	jmp    c0103eda <__alltraps>

c0104282 <vector101>:
.globl vector101
vector101:
  pushl $0
c0104282:	6a 00                	push   $0x0
  pushl $101
c0104284:	6a 65                	push   $0x65
  jmp __alltraps
c0104286:	e9 4f fc ff ff       	jmp    c0103eda <__alltraps>

c010428b <vector102>:
.globl vector102
vector102:
  pushl $0
c010428b:	6a 00                	push   $0x0
  pushl $102
c010428d:	6a 66                	push   $0x66
  jmp __alltraps
c010428f:	e9 46 fc ff ff       	jmp    c0103eda <__alltraps>

c0104294 <vector103>:
.globl vector103
vector103:
  pushl $0
c0104294:	6a 00                	push   $0x0
  pushl $103
c0104296:	6a 67                	push   $0x67
  jmp __alltraps
c0104298:	e9 3d fc ff ff       	jmp    c0103eda <__alltraps>

c010429d <vector104>:
.globl vector104
vector104:
  pushl $0
c010429d:	6a 00                	push   $0x0
  pushl $104
c010429f:	6a 68                	push   $0x68
  jmp __alltraps
c01042a1:	e9 34 fc ff ff       	jmp    c0103eda <__alltraps>

c01042a6 <vector105>:
.globl vector105
vector105:
  pushl $0
c01042a6:	6a 00                	push   $0x0
  pushl $105
c01042a8:	6a 69                	push   $0x69
  jmp __alltraps
c01042aa:	e9 2b fc ff ff       	jmp    c0103eda <__alltraps>

c01042af <vector106>:
.globl vector106
vector106:
  pushl $0
c01042af:	6a 00                	push   $0x0
  pushl $106
c01042b1:	6a 6a                	push   $0x6a
  jmp __alltraps
c01042b3:	e9 22 fc ff ff       	jmp    c0103eda <__alltraps>

c01042b8 <vector107>:
.globl vector107
vector107:
  pushl $0
c01042b8:	6a 00                	push   $0x0
  pushl $107
c01042ba:	6a 6b                	push   $0x6b
  jmp __alltraps
c01042bc:	e9 19 fc ff ff       	jmp    c0103eda <__alltraps>

c01042c1 <vector108>:
.globl vector108
vector108:
  pushl $0
c01042c1:	6a 00                	push   $0x0
  pushl $108
c01042c3:	6a 6c                	push   $0x6c
  jmp __alltraps
c01042c5:	e9 10 fc ff ff       	jmp    c0103eda <__alltraps>

c01042ca <vector109>:
.globl vector109
vector109:
  pushl $0
c01042ca:	6a 00                	push   $0x0
  pushl $109
c01042cc:	6a 6d                	push   $0x6d
  jmp __alltraps
c01042ce:	e9 07 fc ff ff       	jmp    c0103eda <__alltraps>

c01042d3 <vector110>:
.globl vector110
vector110:
  pushl $0
c01042d3:	6a 00                	push   $0x0
  pushl $110
c01042d5:	6a 6e                	push   $0x6e
  jmp __alltraps
c01042d7:	e9 fe fb ff ff       	jmp    c0103eda <__alltraps>

c01042dc <vector111>:
.globl vector111
vector111:
  pushl $0
c01042dc:	6a 00                	push   $0x0
  pushl $111
c01042de:	6a 6f                	push   $0x6f
  jmp __alltraps
c01042e0:	e9 f5 fb ff ff       	jmp    c0103eda <__alltraps>

c01042e5 <vector112>:
.globl vector112
vector112:
  pushl $0
c01042e5:	6a 00                	push   $0x0
  pushl $112
c01042e7:	6a 70                	push   $0x70
  jmp __alltraps
c01042e9:	e9 ec fb ff ff       	jmp    c0103eda <__alltraps>

c01042ee <vector113>:
.globl vector113
vector113:
  pushl $0
c01042ee:	6a 00                	push   $0x0
  pushl $113
c01042f0:	6a 71                	push   $0x71
  jmp __alltraps
c01042f2:	e9 e3 fb ff ff       	jmp    c0103eda <__alltraps>

c01042f7 <vector114>:
.globl vector114
vector114:
  pushl $0
c01042f7:	6a 00                	push   $0x0
  pushl $114
c01042f9:	6a 72                	push   $0x72
  jmp __alltraps
c01042fb:	e9 da fb ff ff       	jmp    c0103eda <__alltraps>

c0104300 <vector115>:
.globl vector115
vector115:
  pushl $0
c0104300:	6a 00                	push   $0x0
  pushl $115
c0104302:	6a 73                	push   $0x73
  jmp __alltraps
c0104304:	e9 d1 fb ff ff       	jmp    c0103eda <__alltraps>

c0104309 <vector116>:
.globl vector116
vector116:
  pushl $0
c0104309:	6a 00                	push   $0x0
  pushl $116
c010430b:	6a 74                	push   $0x74
  jmp __alltraps
c010430d:	e9 c8 fb ff ff       	jmp    c0103eda <__alltraps>

c0104312 <vector117>:
.globl vector117
vector117:
  pushl $0
c0104312:	6a 00                	push   $0x0
  pushl $117
c0104314:	6a 75                	push   $0x75
  jmp __alltraps
c0104316:	e9 bf fb ff ff       	jmp    c0103eda <__alltraps>

c010431b <vector118>:
.globl vector118
vector118:
  pushl $0
c010431b:	6a 00                	push   $0x0
  pushl $118
c010431d:	6a 76                	push   $0x76
  jmp __alltraps
c010431f:	e9 b6 fb ff ff       	jmp    c0103eda <__alltraps>

c0104324 <vector119>:
.globl vector119
vector119:
  pushl $0
c0104324:	6a 00                	push   $0x0
  pushl $119
c0104326:	6a 77                	push   $0x77
  jmp __alltraps
c0104328:	e9 ad fb ff ff       	jmp    c0103eda <__alltraps>

c010432d <vector120>:
.globl vector120
vector120:
  pushl $0
c010432d:	6a 00                	push   $0x0
  pushl $120
c010432f:	6a 78                	push   $0x78
  jmp __alltraps
c0104331:	e9 a4 fb ff ff       	jmp    c0103eda <__alltraps>

c0104336 <vector121>:
.globl vector121
vector121:
  pushl $0
c0104336:	6a 00                	push   $0x0
  pushl $121
c0104338:	6a 79                	push   $0x79
  jmp __alltraps
c010433a:	e9 9b fb ff ff       	jmp    c0103eda <__alltraps>

c010433f <vector122>:
.globl vector122
vector122:
  pushl $0
c010433f:	6a 00                	push   $0x0
  pushl $122
c0104341:	6a 7a                	push   $0x7a
  jmp __alltraps
c0104343:	e9 92 fb ff ff       	jmp    c0103eda <__alltraps>

c0104348 <vector123>:
.globl vector123
vector123:
  pushl $0
c0104348:	6a 00                	push   $0x0
  pushl $123
c010434a:	6a 7b                	push   $0x7b
  jmp __alltraps
c010434c:	e9 89 fb ff ff       	jmp    c0103eda <__alltraps>

c0104351 <vector124>:
.globl vector124
vector124:
  pushl $0
c0104351:	6a 00                	push   $0x0
  pushl $124
c0104353:	6a 7c                	push   $0x7c
  jmp __alltraps
c0104355:	e9 80 fb ff ff       	jmp    c0103eda <__alltraps>

c010435a <vector125>:
.globl vector125
vector125:
  pushl $0
c010435a:	6a 00                	push   $0x0
  pushl $125
c010435c:	6a 7d                	push   $0x7d
  jmp __alltraps
c010435e:	e9 77 fb ff ff       	jmp    c0103eda <__alltraps>

c0104363 <vector126>:
.globl vector126
vector126:
  pushl $0
c0104363:	6a 00                	push   $0x0
  pushl $126
c0104365:	6a 7e                	push   $0x7e
  jmp __alltraps
c0104367:	e9 6e fb ff ff       	jmp    c0103eda <__alltraps>

c010436c <vector127>:
.globl vector127
vector127:
  pushl $0
c010436c:	6a 00                	push   $0x0
  pushl $127
c010436e:	6a 7f                	push   $0x7f
  jmp __alltraps
c0104370:	e9 65 fb ff ff       	jmp    c0103eda <__alltraps>

c0104375 <vector128>:
.globl vector128
vector128:
  pushl $0
c0104375:	6a 00                	push   $0x0
  pushl $128
c0104377:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c010437c:	e9 59 fb ff ff       	jmp    c0103eda <__alltraps>

c0104381 <vector129>:
.globl vector129
vector129:
  pushl $0
c0104381:	6a 00                	push   $0x0
  pushl $129
c0104383:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0104388:	e9 4d fb ff ff       	jmp    c0103eda <__alltraps>

c010438d <vector130>:
.globl vector130
vector130:
  pushl $0
c010438d:	6a 00                	push   $0x0
  pushl $130
c010438f:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0104394:	e9 41 fb ff ff       	jmp    c0103eda <__alltraps>

c0104399 <vector131>:
.globl vector131
vector131:
  pushl $0
c0104399:	6a 00                	push   $0x0
  pushl $131
c010439b:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c01043a0:	e9 35 fb ff ff       	jmp    c0103eda <__alltraps>

c01043a5 <vector132>:
.globl vector132
vector132:
  pushl $0
c01043a5:	6a 00                	push   $0x0
  pushl $132
c01043a7:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c01043ac:	e9 29 fb ff ff       	jmp    c0103eda <__alltraps>

c01043b1 <vector133>:
.globl vector133
vector133:
  pushl $0
c01043b1:	6a 00                	push   $0x0
  pushl $133
c01043b3:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c01043b8:	e9 1d fb ff ff       	jmp    c0103eda <__alltraps>

c01043bd <vector134>:
.globl vector134
vector134:
  pushl $0
c01043bd:	6a 00                	push   $0x0
  pushl $134
c01043bf:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c01043c4:	e9 11 fb ff ff       	jmp    c0103eda <__alltraps>

c01043c9 <vector135>:
.globl vector135
vector135:
  pushl $0
c01043c9:	6a 00                	push   $0x0
  pushl $135
c01043cb:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c01043d0:	e9 05 fb ff ff       	jmp    c0103eda <__alltraps>

c01043d5 <vector136>:
.globl vector136
vector136:
  pushl $0
c01043d5:	6a 00                	push   $0x0
  pushl $136
c01043d7:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c01043dc:	e9 f9 fa ff ff       	jmp    c0103eda <__alltraps>

c01043e1 <vector137>:
.globl vector137
vector137:
  pushl $0
c01043e1:	6a 00                	push   $0x0
  pushl $137
c01043e3:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c01043e8:	e9 ed fa ff ff       	jmp    c0103eda <__alltraps>

c01043ed <vector138>:
.globl vector138
vector138:
  pushl $0
c01043ed:	6a 00                	push   $0x0
  pushl $138
c01043ef:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c01043f4:	e9 e1 fa ff ff       	jmp    c0103eda <__alltraps>

c01043f9 <vector139>:
.globl vector139
vector139:
  pushl $0
c01043f9:	6a 00                	push   $0x0
  pushl $139
c01043fb:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0104400:	e9 d5 fa ff ff       	jmp    c0103eda <__alltraps>

c0104405 <vector140>:
.globl vector140
vector140:
  pushl $0
c0104405:	6a 00                	push   $0x0
  pushl $140
c0104407:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c010440c:	e9 c9 fa ff ff       	jmp    c0103eda <__alltraps>

c0104411 <vector141>:
.globl vector141
vector141:
  pushl $0
c0104411:	6a 00                	push   $0x0
  pushl $141
c0104413:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0104418:	e9 bd fa ff ff       	jmp    c0103eda <__alltraps>

c010441d <vector142>:
.globl vector142
vector142:
  pushl $0
c010441d:	6a 00                	push   $0x0
  pushl $142
c010441f:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0104424:	e9 b1 fa ff ff       	jmp    c0103eda <__alltraps>

c0104429 <vector143>:
.globl vector143
vector143:
  pushl $0
c0104429:	6a 00                	push   $0x0
  pushl $143
c010442b:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0104430:	e9 a5 fa ff ff       	jmp    c0103eda <__alltraps>

c0104435 <vector144>:
.globl vector144
vector144:
  pushl $0
c0104435:	6a 00                	push   $0x0
  pushl $144
c0104437:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010443c:	e9 99 fa ff ff       	jmp    c0103eda <__alltraps>

c0104441 <vector145>:
.globl vector145
vector145:
  pushl $0
c0104441:	6a 00                	push   $0x0
  pushl $145
c0104443:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0104448:	e9 8d fa ff ff       	jmp    c0103eda <__alltraps>

c010444d <vector146>:
.globl vector146
vector146:
  pushl $0
c010444d:	6a 00                	push   $0x0
  pushl $146
c010444f:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0104454:	e9 81 fa ff ff       	jmp    c0103eda <__alltraps>

c0104459 <vector147>:
.globl vector147
vector147:
  pushl $0
c0104459:	6a 00                	push   $0x0
  pushl $147
c010445b:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0104460:	e9 75 fa ff ff       	jmp    c0103eda <__alltraps>

c0104465 <vector148>:
.globl vector148
vector148:
  pushl $0
c0104465:	6a 00                	push   $0x0
  pushl $148
c0104467:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c010446c:	e9 69 fa ff ff       	jmp    c0103eda <__alltraps>

c0104471 <vector149>:
.globl vector149
vector149:
  pushl $0
c0104471:	6a 00                	push   $0x0
  pushl $149
c0104473:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0104478:	e9 5d fa ff ff       	jmp    c0103eda <__alltraps>

c010447d <vector150>:
.globl vector150
vector150:
  pushl $0
c010447d:	6a 00                	push   $0x0
  pushl $150
c010447f:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0104484:	e9 51 fa ff ff       	jmp    c0103eda <__alltraps>

c0104489 <vector151>:
.globl vector151
vector151:
  pushl $0
c0104489:	6a 00                	push   $0x0
  pushl $151
c010448b:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c0104490:	e9 45 fa ff ff       	jmp    c0103eda <__alltraps>

c0104495 <vector152>:
.globl vector152
vector152:
  pushl $0
c0104495:	6a 00                	push   $0x0
  pushl $152
c0104497:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c010449c:	e9 39 fa ff ff       	jmp    c0103eda <__alltraps>

c01044a1 <vector153>:
.globl vector153
vector153:
  pushl $0
c01044a1:	6a 00                	push   $0x0
  pushl $153
c01044a3:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01044a8:	e9 2d fa ff ff       	jmp    c0103eda <__alltraps>

c01044ad <vector154>:
.globl vector154
vector154:
  pushl $0
c01044ad:	6a 00                	push   $0x0
  pushl $154
c01044af:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01044b4:	e9 21 fa ff ff       	jmp    c0103eda <__alltraps>

c01044b9 <vector155>:
.globl vector155
vector155:
  pushl $0
c01044b9:	6a 00                	push   $0x0
  pushl $155
c01044bb:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01044c0:	e9 15 fa ff ff       	jmp    c0103eda <__alltraps>

c01044c5 <vector156>:
.globl vector156
vector156:
  pushl $0
c01044c5:	6a 00                	push   $0x0
  pushl $156
c01044c7:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01044cc:	e9 09 fa ff ff       	jmp    c0103eda <__alltraps>

c01044d1 <vector157>:
.globl vector157
vector157:
  pushl $0
c01044d1:	6a 00                	push   $0x0
  pushl $157
c01044d3:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c01044d8:	e9 fd f9 ff ff       	jmp    c0103eda <__alltraps>

c01044dd <vector158>:
.globl vector158
vector158:
  pushl $0
c01044dd:	6a 00                	push   $0x0
  pushl $158
c01044df:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c01044e4:	e9 f1 f9 ff ff       	jmp    c0103eda <__alltraps>

c01044e9 <vector159>:
.globl vector159
vector159:
  pushl $0
c01044e9:	6a 00                	push   $0x0
  pushl $159
c01044eb:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c01044f0:	e9 e5 f9 ff ff       	jmp    c0103eda <__alltraps>

c01044f5 <vector160>:
.globl vector160
vector160:
  pushl $0
c01044f5:	6a 00                	push   $0x0
  pushl $160
c01044f7:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c01044fc:	e9 d9 f9 ff ff       	jmp    c0103eda <__alltraps>

c0104501 <vector161>:
.globl vector161
vector161:
  pushl $0
c0104501:	6a 00                	push   $0x0
  pushl $161
c0104503:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0104508:	e9 cd f9 ff ff       	jmp    c0103eda <__alltraps>

c010450d <vector162>:
.globl vector162
vector162:
  pushl $0
c010450d:	6a 00                	push   $0x0
  pushl $162
c010450f:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0104514:	e9 c1 f9 ff ff       	jmp    c0103eda <__alltraps>

c0104519 <vector163>:
.globl vector163
vector163:
  pushl $0
c0104519:	6a 00                	push   $0x0
  pushl $163
c010451b:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0104520:	e9 b5 f9 ff ff       	jmp    c0103eda <__alltraps>

c0104525 <vector164>:
.globl vector164
vector164:
  pushl $0
c0104525:	6a 00                	push   $0x0
  pushl $164
c0104527:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010452c:	e9 a9 f9 ff ff       	jmp    c0103eda <__alltraps>

c0104531 <vector165>:
.globl vector165
vector165:
  pushl $0
c0104531:	6a 00                	push   $0x0
  pushl $165
c0104533:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0104538:	e9 9d f9 ff ff       	jmp    c0103eda <__alltraps>

c010453d <vector166>:
.globl vector166
vector166:
  pushl $0
c010453d:	6a 00                	push   $0x0
  pushl $166
c010453f:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0104544:	e9 91 f9 ff ff       	jmp    c0103eda <__alltraps>

c0104549 <vector167>:
.globl vector167
vector167:
  pushl $0
c0104549:	6a 00                	push   $0x0
  pushl $167
c010454b:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0104550:	e9 85 f9 ff ff       	jmp    c0103eda <__alltraps>

c0104555 <vector168>:
.globl vector168
vector168:
  pushl $0
c0104555:	6a 00                	push   $0x0
  pushl $168
c0104557:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010455c:	e9 79 f9 ff ff       	jmp    c0103eda <__alltraps>

c0104561 <vector169>:
.globl vector169
vector169:
  pushl $0
c0104561:	6a 00                	push   $0x0
  pushl $169
c0104563:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c0104568:	e9 6d f9 ff ff       	jmp    c0103eda <__alltraps>

c010456d <vector170>:
.globl vector170
vector170:
  pushl $0
c010456d:	6a 00                	push   $0x0
  pushl $170
c010456f:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0104574:	e9 61 f9 ff ff       	jmp    c0103eda <__alltraps>

c0104579 <vector171>:
.globl vector171
vector171:
  pushl $0
c0104579:	6a 00                	push   $0x0
  pushl $171
c010457b:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c0104580:	e9 55 f9 ff ff       	jmp    c0103eda <__alltraps>

c0104585 <vector172>:
.globl vector172
vector172:
  pushl $0
c0104585:	6a 00                	push   $0x0
  pushl $172
c0104587:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c010458c:	e9 49 f9 ff ff       	jmp    c0103eda <__alltraps>

c0104591 <vector173>:
.globl vector173
vector173:
  pushl $0
c0104591:	6a 00                	push   $0x0
  pushl $173
c0104593:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c0104598:	e9 3d f9 ff ff       	jmp    c0103eda <__alltraps>

c010459d <vector174>:
.globl vector174
vector174:
  pushl $0
c010459d:	6a 00                	push   $0x0
  pushl $174
c010459f:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01045a4:	e9 31 f9 ff ff       	jmp    c0103eda <__alltraps>

c01045a9 <vector175>:
.globl vector175
vector175:
  pushl $0
c01045a9:	6a 00                	push   $0x0
  pushl $175
c01045ab:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01045b0:	e9 25 f9 ff ff       	jmp    c0103eda <__alltraps>

c01045b5 <vector176>:
.globl vector176
vector176:
  pushl $0
c01045b5:	6a 00                	push   $0x0
  pushl $176
c01045b7:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01045bc:	e9 19 f9 ff ff       	jmp    c0103eda <__alltraps>

c01045c1 <vector177>:
.globl vector177
vector177:
  pushl $0
c01045c1:	6a 00                	push   $0x0
  pushl $177
c01045c3:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01045c8:	e9 0d f9 ff ff       	jmp    c0103eda <__alltraps>

c01045cd <vector178>:
.globl vector178
vector178:
  pushl $0
c01045cd:	6a 00                	push   $0x0
  pushl $178
c01045cf:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c01045d4:	e9 01 f9 ff ff       	jmp    c0103eda <__alltraps>

c01045d9 <vector179>:
.globl vector179
vector179:
  pushl $0
c01045d9:	6a 00                	push   $0x0
  pushl $179
c01045db:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c01045e0:	e9 f5 f8 ff ff       	jmp    c0103eda <__alltraps>

c01045e5 <vector180>:
.globl vector180
vector180:
  pushl $0
c01045e5:	6a 00                	push   $0x0
  pushl $180
c01045e7:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c01045ec:	e9 e9 f8 ff ff       	jmp    c0103eda <__alltraps>

c01045f1 <vector181>:
.globl vector181
vector181:
  pushl $0
c01045f1:	6a 00                	push   $0x0
  pushl $181
c01045f3:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c01045f8:	e9 dd f8 ff ff       	jmp    c0103eda <__alltraps>

c01045fd <vector182>:
.globl vector182
vector182:
  pushl $0
c01045fd:	6a 00                	push   $0x0
  pushl $182
c01045ff:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0104604:	e9 d1 f8 ff ff       	jmp    c0103eda <__alltraps>

c0104609 <vector183>:
.globl vector183
vector183:
  pushl $0
c0104609:	6a 00                	push   $0x0
  pushl $183
c010460b:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0104610:	e9 c5 f8 ff ff       	jmp    c0103eda <__alltraps>

c0104615 <vector184>:
.globl vector184
vector184:
  pushl $0
c0104615:	6a 00                	push   $0x0
  pushl $184
c0104617:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010461c:	e9 b9 f8 ff ff       	jmp    c0103eda <__alltraps>

c0104621 <vector185>:
.globl vector185
vector185:
  pushl $0
c0104621:	6a 00                	push   $0x0
  pushl $185
c0104623:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0104628:	e9 ad f8 ff ff       	jmp    c0103eda <__alltraps>

c010462d <vector186>:
.globl vector186
vector186:
  pushl $0
c010462d:	6a 00                	push   $0x0
  pushl $186
c010462f:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0104634:	e9 a1 f8 ff ff       	jmp    c0103eda <__alltraps>

c0104639 <vector187>:
.globl vector187
vector187:
  pushl $0
c0104639:	6a 00                	push   $0x0
  pushl $187
c010463b:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0104640:	e9 95 f8 ff ff       	jmp    c0103eda <__alltraps>

c0104645 <vector188>:
.globl vector188
vector188:
  pushl $0
c0104645:	6a 00                	push   $0x0
  pushl $188
c0104647:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010464c:	e9 89 f8 ff ff       	jmp    c0103eda <__alltraps>

c0104651 <vector189>:
.globl vector189
vector189:
  pushl $0
c0104651:	6a 00                	push   $0x0
  pushl $189
c0104653:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0104658:	e9 7d f8 ff ff       	jmp    c0103eda <__alltraps>

c010465d <vector190>:
.globl vector190
vector190:
  pushl $0
c010465d:	6a 00                	push   $0x0
  pushl $190
c010465f:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0104664:	e9 71 f8 ff ff       	jmp    c0103eda <__alltraps>

c0104669 <vector191>:
.globl vector191
vector191:
  pushl $0
c0104669:	6a 00                	push   $0x0
  pushl $191
c010466b:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0104670:	e9 65 f8 ff ff       	jmp    c0103eda <__alltraps>

c0104675 <vector192>:
.globl vector192
vector192:
  pushl $0
c0104675:	6a 00                	push   $0x0
  pushl $192
c0104677:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c010467c:	e9 59 f8 ff ff       	jmp    c0103eda <__alltraps>

c0104681 <vector193>:
.globl vector193
vector193:
  pushl $0
c0104681:	6a 00                	push   $0x0
  pushl $193
c0104683:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c0104688:	e9 4d f8 ff ff       	jmp    c0103eda <__alltraps>

c010468d <vector194>:
.globl vector194
vector194:
  pushl $0
c010468d:	6a 00                	push   $0x0
  pushl $194
c010468f:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0104694:	e9 41 f8 ff ff       	jmp    c0103eda <__alltraps>

c0104699 <vector195>:
.globl vector195
vector195:
  pushl $0
c0104699:	6a 00                	push   $0x0
  pushl $195
c010469b:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01046a0:	e9 35 f8 ff ff       	jmp    c0103eda <__alltraps>

c01046a5 <vector196>:
.globl vector196
vector196:
  pushl $0
c01046a5:	6a 00                	push   $0x0
  pushl $196
c01046a7:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01046ac:	e9 29 f8 ff ff       	jmp    c0103eda <__alltraps>

c01046b1 <vector197>:
.globl vector197
vector197:
  pushl $0
c01046b1:	6a 00                	push   $0x0
  pushl $197
c01046b3:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01046b8:	e9 1d f8 ff ff       	jmp    c0103eda <__alltraps>

c01046bd <vector198>:
.globl vector198
vector198:
  pushl $0
c01046bd:	6a 00                	push   $0x0
  pushl $198
c01046bf:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01046c4:	e9 11 f8 ff ff       	jmp    c0103eda <__alltraps>

c01046c9 <vector199>:
.globl vector199
vector199:
  pushl $0
c01046c9:	6a 00                	push   $0x0
  pushl $199
c01046cb:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01046d0:	e9 05 f8 ff ff       	jmp    c0103eda <__alltraps>

c01046d5 <vector200>:
.globl vector200
vector200:
  pushl $0
c01046d5:	6a 00                	push   $0x0
  pushl $200
c01046d7:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c01046dc:	e9 f9 f7 ff ff       	jmp    c0103eda <__alltraps>

c01046e1 <vector201>:
.globl vector201
vector201:
  pushl $0
c01046e1:	6a 00                	push   $0x0
  pushl $201
c01046e3:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c01046e8:	e9 ed f7 ff ff       	jmp    c0103eda <__alltraps>

c01046ed <vector202>:
.globl vector202
vector202:
  pushl $0
c01046ed:	6a 00                	push   $0x0
  pushl $202
c01046ef:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c01046f4:	e9 e1 f7 ff ff       	jmp    c0103eda <__alltraps>

c01046f9 <vector203>:
.globl vector203
vector203:
  pushl $0
c01046f9:	6a 00                	push   $0x0
  pushl $203
c01046fb:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0104700:	e9 d5 f7 ff ff       	jmp    c0103eda <__alltraps>

c0104705 <vector204>:
.globl vector204
vector204:
  pushl $0
c0104705:	6a 00                	push   $0x0
  pushl $204
c0104707:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010470c:	e9 c9 f7 ff ff       	jmp    c0103eda <__alltraps>

c0104711 <vector205>:
.globl vector205
vector205:
  pushl $0
c0104711:	6a 00                	push   $0x0
  pushl $205
c0104713:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0104718:	e9 bd f7 ff ff       	jmp    c0103eda <__alltraps>

c010471d <vector206>:
.globl vector206
vector206:
  pushl $0
c010471d:	6a 00                	push   $0x0
  pushl $206
c010471f:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0104724:	e9 b1 f7 ff ff       	jmp    c0103eda <__alltraps>

c0104729 <vector207>:
.globl vector207
vector207:
  pushl $0
c0104729:	6a 00                	push   $0x0
  pushl $207
c010472b:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0104730:	e9 a5 f7 ff ff       	jmp    c0103eda <__alltraps>

c0104735 <vector208>:
.globl vector208
vector208:
  pushl $0
c0104735:	6a 00                	push   $0x0
  pushl $208
c0104737:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010473c:	e9 99 f7 ff ff       	jmp    c0103eda <__alltraps>

c0104741 <vector209>:
.globl vector209
vector209:
  pushl $0
c0104741:	6a 00                	push   $0x0
  pushl $209
c0104743:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0104748:	e9 8d f7 ff ff       	jmp    c0103eda <__alltraps>

c010474d <vector210>:
.globl vector210
vector210:
  pushl $0
c010474d:	6a 00                	push   $0x0
  pushl $210
c010474f:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0104754:	e9 81 f7 ff ff       	jmp    c0103eda <__alltraps>

c0104759 <vector211>:
.globl vector211
vector211:
  pushl $0
c0104759:	6a 00                	push   $0x0
  pushl $211
c010475b:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0104760:	e9 75 f7 ff ff       	jmp    c0103eda <__alltraps>

c0104765 <vector212>:
.globl vector212
vector212:
  pushl $0
c0104765:	6a 00                	push   $0x0
  pushl $212
c0104767:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c010476c:	e9 69 f7 ff ff       	jmp    c0103eda <__alltraps>

c0104771 <vector213>:
.globl vector213
vector213:
  pushl $0
c0104771:	6a 00                	push   $0x0
  pushl $213
c0104773:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c0104778:	e9 5d f7 ff ff       	jmp    c0103eda <__alltraps>

c010477d <vector214>:
.globl vector214
vector214:
  pushl $0
c010477d:	6a 00                	push   $0x0
  pushl $214
c010477f:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0104784:	e9 51 f7 ff ff       	jmp    c0103eda <__alltraps>

c0104789 <vector215>:
.globl vector215
vector215:
  pushl $0
c0104789:	6a 00                	push   $0x0
  pushl $215
c010478b:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c0104790:	e9 45 f7 ff ff       	jmp    c0103eda <__alltraps>

c0104795 <vector216>:
.globl vector216
vector216:
  pushl $0
c0104795:	6a 00                	push   $0x0
  pushl $216
c0104797:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c010479c:	e9 39 f7 ff ff       	jmp    c0103eda <__alltraps>

c01047a1 <vector217>:
.globl vector217
vector217:
  pushl $0
c01047a1:	6a 00                	push   $0x0
  pushl $217
c01047a3:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01047a8:	e9 2d f7 ff ff       	jmp    c0103eda <__alltraps>

c01047ad <vector218>:
.globl vector218
vector218:
  pushl $0
c01047ad:	6a 00                	push   $0x0
  pushl $218
c01047af:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01047b4:	e9 21 f7 ff ff       	jmp    c0103eda <__alltraps>

c01047b9 <vector219>:
.globl vector219
vector219:
  pushl $0
c01047b9:	6a 00                	push   $0x0
  pushl $219
c01047bb:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01047c0:	e9 15 f7 ff ff       	jmp    c0103eda <__alltraps>

c01047c5 <vector220>:
.globl vector220
vector220:
  pushl $0
c01047c5:	6a 00                	push   $0x0
  pushl $220
c01047c7:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01047cc:	e9 09 f7 ff ff       	jmp    c0103eda <__alltraps>

c01047d1 <vector221>:
.globl vector221
vector221:
  pushl $0
c01047d1:	6a 00                	push   $0x0
  pushl $221
c01047d3:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c01047d8:	e9 fd f6 ff ff       	jmp    c0103eda <__alltraps>

c01047dd <vector222>:
.globl vector222
vector222:
  pushl $0
c01047dd:	6a 00                	push   $0x0
  pushl $222
c01047df:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c01047e4:	e9 f1 f6 ff ff       	jmp    c0103eda <__alltraps>

c01047e9 <vector223>:
.globl vector223
vector223:
  pushl $0
c01047e9:	6a 00                	push   $0x0
  pushl $223
c01047eb:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c01047f0:	e9 e5 f6 ff ff       	jmp    c0103eda <__alltraps>

c01047f5 <vector224>:
.globl vector224
vector224:
  pushl $0
c01047f5:	6a 00                	push   $0x0
  pushl $224
c01047f7:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c01047fc:	e9 d9 f6 ff ff       	jmp    c0103eda <__alltraps>

c0104801 <vector225>:
.globl vector225
vector225:
  pushl $0
c0104801:	6a 00                	push   $0x0
  pushl $225
c0104803:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0104808:	e9 cd f6 ff ff       	jmp    c0103eda <__alltraps>

c010480d <vector226>:
.globl vector226
vector226:
  pushl $0
c010480d:	6a 00                	push   $0x0
  pushl $226
c010480f:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0104814:	e9 c1 f6 ff ff       	jmp    c0103eda <__alltraps>

c0104819 <vector227>:
.globl vector227
vector227:
  pushl $0
c0104819:	6a 00                	push   $0x0
  pushl $227
c010481b:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0104820:	e9 b5 f6 ff ff       	jmp    c0103eda <__alltraps>

c0104825 <vector228>:
.globl vector228
vector228:
  pushl $0
c0104825:	6a 00                	push   $0x0
  pushl $228
c0104827:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010482c:	e9 a9 f6 ff ff       	jmp    c0103eda <__alltraps>

c0104831 <vector229>:
.globl vector229
vector229:
  pushl $0
c0104831:	6a 00                	push   $0x0
  pushl $229
c0104833:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0104838:	e9 9d f6 ff ff       	jmp    c0103eda <__alltraps>

c010483d <vector230>:
.globl vector230
vector230:
  pushl $0
c010483d:	6a 00                	push   $0x0
  pushl $230
c010483f:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0104844:	e9 91 f6 ff ff       	jmp    c0103eda <__alltraps>

c0104849 <vector231>:
.globl vector231
vector231:
  pushl $0
c0104849:	6a 00                	push   $0x0
  pushl $231
c010484b:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0104850:	e9 85 f6 ff ff       	jmp    c0103eda <__alltraps>

c0104855 <vector232>:
.globl vector232
vector232:
  pushl $0
c0104855:	6a 00                	push   $0x0
  pushl $232
c0104857:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010485c:	e9 79 f6 ff ff       	jmp    c0103eda <__alltraps>

c0104861 <vector233>:
.globl vector233
vector233:
  pushl $0
c0104861:	6a 00                	push   $0x0
  pushl $233
c0104863:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c0104868:	e9 6d f6 ff ff       	jmp    c0103eda <__alltraps>

c010486d <vector234>:
.globl vector234
vector234:
  pushl $0
c010486d:	6a 00                	push   $0x0
  pushl $234
c010486f:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0104874:	e9 61 f6 ff ff       	jmp    c0103eda <__alltraps>

c0104879 <vector235>:
.globl vector235
vector235:
  pushl $0
c0104879:	6a 00                	push   $0x0
  pushl $235
c010487b:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c0104880:	e9 55 f6 ff ff       	jmp    c0103eda <__alltraps>

c0104885 <vector236>:
.globl vector236
vector236:
  pushl $0
c0104885:	6a 00                	push   $0x0
  pushl $236
c0104887:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c010488c:	e9 49 f6 ff ff       	jmp    c0103eda <__alltraps>

c0104891 <vector237>:
.globl vector237
vector237:
  pushl $0
c0104891:	6a 00                	push   $0x0
  pushl $237
c0104893:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c0104898:	e9 3d f6 ff ff       	jmp    c0103eda <__alltraps>

c010489d <vector238>:
.globl vector238
vector238:
  pushl $0
c010489d:	6a 00                	push   $0x0
  pushl $238
c010489f:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01048a4:	e9 31 f6 ff ff       	jmp    c0103eda <__alltraps>

c01048a9 <vector239>:
.globl vector239
vector239:
  pushl $0
c01048a9:	6a 00                	push   $0x0
  pushl $239
c01048ab:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01048b0:	e9 25 f6 ff ff       	jmp    c0103eda <__alltraps>

c01048b5 <vector240>:
.globl vector240
vector240:
  pushl $0
c01048b5:	6a 00                	push   $0x0
  pushl $240
c01048b7:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01048bc:	e9 19 f6 ff ff       	jmp    c0103eda <__alltraps>

c01048c1 <vector241>:
.globl vector241
vector241:
  pushl $0
c01048c1:	6a 00                	push   $0x0
  pushl $241
c01048c3:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01048c8:	e9 0d f6 ff ff       	jmp    c0103eda <__alltraps>

c01048cd <vector242>:
.globl vector242
vector242:
  pushl $0
c01048cd:	6a 00                	push   $0x0
  pushl $242
c01048cf:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c01048d4:	e9 01 f6 ff ff       	jmp    c0103eda <__alltraps>

c01048d9 <vector243>:
.globl vector243
vector243:
  pushl $0
c01048d9:	6a 00                	push   $0x0
  pushl $243
c01048db:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c01048e0:	e9 f5 f5 ff ff       	jmp    c0103eda <__alltraps>

c01048e5 <vector244>:
.globl vector244
vector244:
  pushl $0
c01048e5:	6a 00                	push   $0x0
  pushl $244
c01048e7:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c01048ec:	e9 e9 f5 ff ff       	jmp    c0103eda <__alltraps>

c01048f1 <vector245>:
.globl vector245
vector245:
  pushl $0
c01048f1:	6a 00                	push   $0x0
  pushl $245
c01048f3:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c01048f8:	e9 dd f5 ff ff       	jmp    c0103eda <__alltraps>

c01048fd <vector246>:
.globl vector246
vector246:
  pushl $0
c01048fd:	6a 00                	push   $0x0
  pushl $246
c01048ff:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0104904:	e9 d1 f5 ff ff       	jmp    c0103eda <__alltraps>

c0104909 <vector247>:
.globl vector247
vector247:
  pushl $0
c0104909:	6a 00                	push   $0x0
  pushl $247
c010490b:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0104910:	e9 c5 f5 ff ff       	jmp    c0103eda <__alltraps>

c0104915 <vector248>:
.globl vector248
vector248:
  pushl $0
c0104915:	6a 00                	push   $0x0
  pushl $248
c0104917:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010491c:	e9 b9 f5 ff ff       	jmp    c0103eda <__alltraps>

c0104921 <vector249>:
.globl vector249
vector249:
  pushl $0
c0104921:	6a 00                	push   $0x0
  pushl $249
c0104923:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0104928:	e9 ad f5 ff ff       	jmp    c0103eda <__alltraps>

c010492d <vector250>:
.globl vector250
vector250:
  pushl $0
c010492d:	6a 00                	push   $0x0
  pushl $250
c010492f:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0104934:	e9 a1 f5 ff ff       	jmp    c0103eda <__alltraps>

c0104939 <vector251>:
.globl vector251
vector251:
  pushl $0
c0104939:	6a 00                	push   $0x0
  pushl $251
c010493b:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0104940:	e9 95 f5 ff ff       	jmp    c0103eda <__alltraps>

c0104945 <vector252>:
.globl vector252
vector252:
  pushl $0
c0104945:	6a 00                	push   $0x0
  pushl $252
c0104947:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010494c:	e9 89 f5 ff ff       	jmp    c0103eda <__alltraps>

c0104951 <vector253>:
.globl vector253
vector253:
  pushl $0
c0104951:	6a 00                	push   $0x0
  pushl $253
c0104953:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0104958:	e9 7d f5 ff ff       	jmp    c0103eda <__alltraps>

c010495d <vector254>:
.globl vector254
vector254:
  pushl $0
c010495d:	6a 00                	push   $0x0
  pushl $254
c010495f:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0104964:	e9 71 f5 ff ff       	jmp    c0103eda <__alltraps>

c0104969 <vector255>:
.globl vector255
vector255:
  pushl $0
c0104969:	6a 00                	push   $0x0
  pushl $255
c010496b:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0104970:	e9 65 f5 ff ff       	jmp    c0103eda <__alltraps>

c0104975 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104975:	55                   	push   %ebp
c0104976:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104978:	8b 55 08             	mov    0x8(%ebp),%edx
c010497b:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c0104980:	29 c2                	sub    %eax,%edx
c0104982:	89 d0                	mov    %edx,%eax
c0104984:	c1 f8 05             	sar    $0x5,%eax
}
c0104987:	5d                   	pop    %ebp
c0104988:	c3                   	ret    

c0104989 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104989:	55                   	push   %ebp
c010498a:	89 e5                	mov    %esp,%ebp
c010498c:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010498f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104992:	89 04 24             	mov    %eax,(%esp)
c0104995:	e8 db ff ff ff       	call   c0104975 <page2ppn>
c010499a:	c1 e0 0c             	shl    $0xc,%eax
}
c010499d:	c9                   	leave  
c010499e:	c3                   	ret    

c010499f <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c010499f:	55                   	push   %ebp
c01049a0:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01049a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01049a5:	8b 00                	mov    (%eax),%eax
}
c01049a7:	5d                   	pop    %ebp
c01049a8:	c3                   	ret    

c01049a9 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01049a9:	55                   	push   %ebp
c01049aa:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01049ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01049af:	8b 55 0c             	mov    0xc(%ebp),%edx
c01049b2:	89 10                	mov    %edx,(%eax)
}
c01049b4:	5d                   	pop    %ebp
c01049b5:	c3                   	ret    

c01049b6 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01049b6:	55                   	push   %ebp
c01049b7:	89 e5                	mov    %esp,%ebp
c01049b9:	83 ec 10             	sub    $0x10,%esp
c01049bc:	c7 45 fc b8 1f 1a c0 	movl   $0xc01a1fb8,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01049c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01049c6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01049c9:	89 50 04             	mov    %edx,0x4(%eax)
c01049cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01049cf:	8b 50 04             	mov    0x4(%eax),%edx
c01049d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01049d5:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c01049d7:	c7 05 c0 1f 1a c0 00 	movl   $0x0,0xc01a1fc0
c01049de:	00 00 00 
}
c01049e1:	c9                   	leave  
c01049e2:	c3                   	ret    

c01049e3 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c01049e3:	55                   	push   %ebp
c01049e4:	89 e5                	mov    %esp,%ebp
c01049e6:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c01049e9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01049ed:	75 24                	jne    c0104a13 <default_init_memmap+0x30>
c01049ef:	c7 44 24 0c b0 de 10 	movl   $0xc010deb0,0xc(%esp)
c01049f6:	c0 
c01049f7:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c01049fe:	c0 
c01049ff:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0104a06:	00 
c0104a07:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0104a0e:	e8 45 d8 ff ff       	call   c0102258 <__panic>
    struct Page *p = base;
c0104a13:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0104a19:	e9 dc 00 00 00       	jmp    c0104afa <default_init_memmap+0x117>
        assert(PageReserved(p));
c0104a1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a21:	83 c0 04             	add    $0x4,%eax
c0104a24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0104a2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104a2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a31:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a34:	0f a3 10             	bt     %edx,(%eax)
c0104a37:	19 c0                	sbb    %eax,%eax
c0104a39:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0104a3c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104a40:	0f 95 c0             	setne  %al
c0104a43:	0f b6 c0             	movzbl %al,%eax
c0104a46:	85 c0                	test   %eax,%eax
c0104a48:	75 24                	jne    c0104a6e <default_init_memmap+0x8b>
c0104a4a:	c7 44 24 0c e1 de 10 	movl   $0xc010dee1,0xc(%esp)
c0104a51:	c0 
c0104a52:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0104a59:	c0 
c0104a5a:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0104a61:	00 
c0104a62:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0104a69:	e8 ea d7 ff ff       	call   c0102258 <__panic>
        p->flags = 0;
c0104a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a71:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c0104a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a7b:	83 c0 04             	add    $0x4,%eax
c0104a7e:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0104a85:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104a88:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104a8b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104a8e:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c0104a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a94:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c0104a9b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104aa2:	00 
c0104aa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aa6:	89 04 24             	mov    %eax,(%esp)
c0104aa9:	e8 fb fe ff ff       	call   c01049a9 <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c0104aae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ab1:	83 c0 0c             	add    $0xc,%eax
c0104ab4:	c7 45 dc b8 1f 1a c0 	movl   $0xc01a1fb8,-0x24(%ebp)
c0104abb:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104abe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104ac1:	8b 00                	mov    (%eax),%eax
c0104ac3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104ac6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0104ac9:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104acc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104acf:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104ad2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104ad5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104ad8:	89 10                	mov    %edx,(%eax)
c0104ada:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104add:	8b 10                	mov    (%eax),%edx
c0104adf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104ae2:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104ae5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104ae8:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104aeb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104aee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104af1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104af4:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0104af6:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0104afa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104afd:	c1 e0 05             	shl    $0x5,%eax
c0104b00:	89 c2                	mov    %eax,%edx
c0104b02:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b05:	01 d0                	add    %edx,%eax
c0104b07:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b0a:	0f 85 0e ff ff ff    	jne    c0104a1e <default_init_memmap+0x3b>
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }

    nr_free += n;
c0104b10:	8b 15 c0 1f 1a c0    	mov    0xc01a1fc0,%edx
c0104b16:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b19:	01 d0                	add    %edx,%eax
c0104b1b:	a3 c0 1f 1a c0       	mov    %eax,0xc01a1fc0
    //first block
    base->property = n;
c0104b20:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b23:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104b26:	89 50 08             	mov    %edx,0x8(%eax)
}
c0104b29:	c9                   	leave  
c0104b2a:	c3                   	ret    

c0104b2b <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0104b2b:	55                   	push   %ebp
c0104b2c:	89 e5                	mov    %esp,%ebp
c0104b2e:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0104b31:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104b35:	75 24                	jne    c0104b5b <default_alloc_pages+0x30>
c0104b37:	c7 44 24 0c b0 de 10 	movl   $0xc010deb0,0xc(%esp)
c0104b3e:	c0 
c0104b3f:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0104b46:	c0 
c0104b47:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0104b4e:	00 
c0104b4f:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0104b56:	e8 fd d6 ff ff       	call   c0102258 <__panic>
    if (n > nr_free) {
c0104b5b:	a1 c0 1f 1a c0       	mov    0xc01a1fc0,%eax
c0104b60:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104b63:	73 0a                	jae    c0104b6f <default_alloc_pages+0x44>
        return NULL;
c0104b65:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b6a:	e9 37 01 00 00       	jmp    c0104ca6 <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len;
    le = &free_list;
c0104b6f:	c7 45 f4 b8 1f 1a c0 	movl   $0xc01a1fb8,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c0104b76:	e9 0a 01 00 00       	jmp    c0104c85 <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c0104b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b7e:	83 e8 0c             	sub    $0xc,%eax
c0104b81:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c0104b84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b87:	8b 40 08             	mov    0x8(%eax),%eax
c0104b8a:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104b8d:	0f 82 f2 00 00 00    	jb     c0104c85 <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){
c0104b93:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0104b9a:	eb 7c                	jmp    c0104c18 <default_alloc_pages+0xed>
c0104b9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b9f:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104ba2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104ba5:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c0104ba8:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c0104bab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bae:	83 e8 0c             	sub    $0xc,%eax
c0104bb1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c0104bb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104bb7:	83 c0 04             	add    $0x4,%eax
c0104bba:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104bc1:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0104bc4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104bc7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104bca:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c0104bcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104bd0:	83 c0 04             	add    $0x4,%eax
c0104bd3:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0104bda:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104bdd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104be0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104be3:	0f b3 10             	btr    %edx,(%eax)
c0104be6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104be9:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104bec:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104bef:	8b 40 04             	mov    0x4(%eax),%eax
c0104bf2:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104bf5:	8b 12                	mov    (%edx),%edx
c0104bf7:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0104bfa:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104bfd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104c00:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104c03:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104c06:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104c09:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104c0c:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c0104c0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104c11:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c0104c14:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0104c18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c1b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104c1e:	0f 82 78 ff ff ff    	jb     c0104b9c <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c0104c24:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c27:	8b 40 08             	mov    0x8(%eax),%eax
c0104c2a:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104c2d:	76 12                	jbe    c0104c41 <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c0104c2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c32:	8d 50 f4             	lea    -0xc(%eax),%edx
c0104c35:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c38:	8b 40 08             	mov    0x8(%eax),%eax
c0104c3b:	2b 45 08             	sub    0x8(%ebp),%eax
c0104c3e:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c0104c41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c44:	83 c0 04             	add    $0x4,%eax
c0104c47:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104c4e:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0104c51:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104c54:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104c57:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c0104c5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c5d:	83 c0 04             	add    $0x4,%eax
c0104c60:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c0104c67:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104c6a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104c6d:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0104c70:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c0104c73:	a1 c0 1f 1a c0       	mov    0xc01a1fc0,%eax
c0104c78:	2b 45 08             	sub    0x8(%ebp),%eax
c0104c7b:	a3 c0 1f 1a c0       	mov    %eax,0xc01a1fc0
        return p;
c0104c80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c83:	eb 21                	jmp    c0104ca6 <default_alloc_pages+0x17b>
c0104c85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c88:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104c8b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104c8e:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c0104c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c94:	81 7d f4 b8 1f 1a c0 	cmpl   $0xc01a1fb8,-0xc(%ebp)
c0104c9b:	0f 85 da fe ff ff    	jne    c0104b7b <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c0104ca1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104ca6:	c9                   	leave  
c0104ca7:	c3                   	ret    

c0104ca8 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c0104ca8:	55                   	push   %ebp
c0104ca9:	89 e5                	mov    %esp,%ebp
c0104cab:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0104cae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104cb2:	75 24                	jne    c0104cd8 <default_free_pages+0x30>
c0104cb4:	c7 44 24 0c b0 de 10 	movl   $0xc010deb0,0xc(%esp)
c0104cbb:	c0 
c0104cbc:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0104cc3:	c0 
c0104cc4:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c0104ccb:	00 
c0104ccc:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0104cd3:	e8 80 d5 ff ff       	call   c0102258 <__panic>
    assert(PageReserved(base));
c0104cd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cdb:	83 c0 04             	add    $0x4,%eax
c0104cde:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0104ce5:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104ceb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104cee:	0f a3 10             	bt     %edx,(%eax)
c0104cf1:	19 c0                	sbb    %eax,%eax
c0104cf3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0104cf6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104cfa:	0f 95 c0             	setne  %al
c0104cfd:	0f b6 c0             	movzbl %al,%eax
c0104d00:	85 c0                	test   %eax,%eax
c0104d02:	75 24                	jne    c0104d28 <default_free_pages+0x80>
c0104d04:	c7 44 24 0c f1 de 10 	movl   $0xc010def1,0xc(%esp)
c0104d0b:	c0 
c0104d0c:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0104d13:	c0 
c0104d14:	c7 44 24 04 7a 00 00 	movl   $0x7a,0x4(%esp)
c0104d1b:	00 
c0104d1c:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0104d23:	e8 30 d5 ff ff       	call   c0102258 <__panic>

    list_entry_t *le = &free_list;
c0104d28:	c7 45 f4 b8 1f 1a c0 	movl   $0xc01a1fb8,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0104d2f:	eb 13                	jmp    c0104d44 <default_free_pages+0x9c>
      p = le2page(le, page_link);
c0104d31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d34:	83 e8 0c             	sub    $0xc,%eax
c0104d37:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c0104d3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d3d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d40:	76 02                	jbe    c0104d44 <default_free_pages+0x9c>
        break;
c0104d42:	eb 18                	jmp    c0104d5c <default_free_pages+0xb4>
c0104d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d47:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0104d4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104d4d:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0104d50:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d53:	81 7d f4 b8 1f 1a c0 	cmpl   $0xc01a1fb8,-0xc(%ebp)
c0104d5a:	75 d5                	jne    c0104d31 <default_free_pages+0x89>
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c0104d5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d62:	eb 4b                	jmp    c0104daf <default_free_pages+0x107>
      list_add_before(le, &(p->page_link));
c0104d64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d67:	8d 50 0c             	lea    0xc(%eax),%edx
c0104d6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d6d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104d70:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104d73:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104d76:	8b 00                	mov    (%eax),%eax
c0104d78:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104d7b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0104d7e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104d81:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104d84:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104d87:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104d8a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104d8d:	89 10                	mov    %edx,(%eax)
c0104d8f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104d92:	8b 10                	mov    (%eax),%edx
c0104d94:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104d97:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104d9a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104d9d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104da0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104da3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104da6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104da9:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c0104dab:	83 45 f0 20          	addl   $0x20,-0x10(%ebp)
c0104daf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104db2:	c1 e0 05             	shl    $0x5,%eax
c0104db5:	89 c2                	mov    %eax,%edx
c0104db7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dba:	01 d0                	add    %edx,%eax
c0104dbc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104dbf:	77 a3                	ja     c0104d64 <default_free_pages+0xbc>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c0104dc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dc4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c0104dcb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104dd2:	00 
c0104dd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dd6:	89 04 24             	mov    %eax,(%esp)
c0104dd9:	e8 cb fb ff ff       	call   c01049a9 <set_page_ref>
    ClearPageProperty(base);
c0104dde:	8b 45 08             	mov    0x8(%ebp),%eax
c0104de1:	83 c0 04             	add    $0x4,%eax
c0104de4:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0104deb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104dee:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104df1:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104df4:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c0104df7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dfa:	83 c0 04             	add    $0x4,%eax
c0104dfd:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104e04:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104e07:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104e0a:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104e0d:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c0104e10:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e13:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104e16:	89 50 08             	mov    %edx,0x8(%eax)
    
    p = le2page(le,page_link) ;
c0104e19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e1c:	83 e8 0c             	sub    $0xc,%eax
c0104e1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c0104e22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104e25:	c1 e0 05             	shl    $0x5,%eax
c0104e28:	89 c2                	mov    %eax,%edx
c0104e2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e2d:	01 d0                	add    %edx,%eax
c0104e2f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104e32:	75 1e                	jne    c0104e52 <default_free_pages+0x1aa>
      base->property += p->property;
c0104e34:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e37:	8b 50 08             	mov    0x8(%eax),%edx
c0104e3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e3d:	8b 40 08             	mov    0x8(%eax),%eax
c0104e40:	01 c2                	add    %eax,%edx
c0104e42:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e45:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c0104e48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e4b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c0104e52:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e55:	83 c0 0c             	add    $0xc,%eax
c0104e58:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0104e5b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104e5e:	8b 00                	mov    (%eax),%eax
c0104e60:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0104e63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e66:	83 e8 0c             	sub    $0xc,%eax
c0104e69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c0104e6c:	81 7d f4 b8 1f 1a c0 	cmpl   $0xc01a1fb8,-0xc(%ebp)
c0104e73:	74 57                	je     c0104ecc <default_free_pages+0x224>
c0104e75:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e78:	83 e8 20             	sub    $0x20,%eax
c0104e7b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104e7e:	75 4c                	jne    c0104ecc <default_free_pages+0x224>
      while(le!=&free_list){
c0104e80:	eb 41                	jmp    c0104ec3 <default_free_pages+0x21b>
        if(p->property){
c0104e82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e85:	8b 40 08             	mov    0x8(%eax),%eax
c0104e88:	85 c0                	test   %eax,%eax
c0104e8a:	74 20                	je     c0104eac <default_free_pages+0x204>
          p->property += base->property;
c0104e8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e8f:	8b 50 08             	mov    0x8(%eax),%edx
c0104e92:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e95:	8b 40 08             	mov    0x8(%eax),%eax
c0104e98:	01 c2                	add    %eax,%edx
c0104e9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e9d:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0104ea0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ea3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0104eaa:	eb 20                	jmp    c0104ecc <default_free_pages+0x224>
c0104eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eaf:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0104eb2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104eb5:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0104eb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0104eba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ebd:	83 e8 0c             	sub    $0xc,%eax
c0104ec0:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0104ec3:	81 7d f4 b8 1f 1a c0 	cmpl   $0xc01a1fb8,-0xc(%ebp)
c0104eca:	75 b6                	jne    c0104e82 <default_free_pages+0x1da>
        }
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }
    nr_free += n;
c0104ecc:	8b 15 c0 1f 1a c0    	mov    0xc01a1fc0,%edx
c0104ed2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104ed5:	01 d0                	add    %edx,%eax
c0104ed7:	a3 c0 1f 1a c0       	mov    %eax,0xc01a1fc0
    return ;
c0104edc:	90                   	nop
}
c0104edd:	c9                   	leave  
c0104ede:	c3                   	ret    

c0104edf <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0104edf:	55                   	push   %ebp
c0104ee0:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0104ee2:	a1 c0 1f 1a c0       	mov    0xc01a1fc0,%eax
}
c0104ee7:	5d                   	pop    %ebp
c0104ee8:	c3                   	ret    

c0104ee9 <basic_check>:

static void
basic_check(void) {
c0104ee9:	55                   	push   %ebp
c0104eea:	89 e5                	mov    %esp,%ebp
c0104eec:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0104eef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ef9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104efc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104eff:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0104f02:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104f09:	e8 dc 15 00 00       	call   c01064ea <alloc_pages>
c0104f0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104f11:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104f15:	75 24                	jne    c0104f3b <basic_check+0x52>
c0104f17:	c7 44 24 0c 04 df 10 	movl   $0xc010df04,0xc(%esp)
c0104f1e:	c0 
c0104f1f:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0104f26:	c0 
c0104f27:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0104f2e:	00 
c0104f2f:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0104f36:	e8 1d d3 ff ff       	call   c0102258 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0104f3b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104f42:	e8 a3 15 00 00       	call   c01064ea <alloc_pages>
c0104f47:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104f4a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104f4e:	75 24                	jne    c0104f74 <basic_check+0x8b>
c0104f50:	c7 44 24 0c 20 df 10 	movl   $0xc010df20,0xc(%esp)
c0104f57:	c0 
c0104f58:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0104f5f:	c0 
c0104f60:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0104f67:	00 
c0104f68:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0104f6f:	e8 e4 d2 ff ff       	call   c0102258 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0104f74:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104f7b:	e8 6a 15 00 00       	call   c01064ea <alloc_pages>
c0104f80:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104f87:	75 24                	jne    c0104fad <basic_check+0xc4>
c0104f89:	c7 44 24 0c 3c df 10 	movl   $0xc010df3c,0xc(%esp)
c0104f90:	c0 
c0104f91:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0104f98:	c0 
c0104f99:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0104fa0:	00 
c0104fa1:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0104fa8:	e8 ab d2 ff ff       	call   c0102258 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0104fad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104fb0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104fb3:	74 10                	je     c0104fc5 <basic_check+0xdc>
c0104fb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104fb8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104fbb:	74 08                	je     c0104fc5 <basic_check+0xdc>
c0104fbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fc0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104fc3:	75 24                	jne    c0104fe9 <basic_check+0x100>
c0104fc5:	c7 44 24 0c 58 df 10 	movl   $0xc010df58,0xc(%esp)
c0104fcc:	c0 
c0104fcd:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0104fd4:	c0 
c0104fd5:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0104fdc:	00 
c0104fdd:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0104fe4:	e8 6f d2 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0104fe9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104fec:	89 04 24             	mov    %eax,(%esp)
c0104fef:	e8 ab f9 ff ff       	call   c010499f <page_ref>
c0104ff4:	85 c0                	test   %eax,%eax
c0104ff6:	75 1e                	jne    c0105016 <basic_check+0x12d>
c0104ff8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ffb:	89 04 24             	mov    %eax,(%esp)
c0104ffe:	e8 9c f9 ff ff       	call   c010499f <page_ref>
c0105003:	85 c0                	test   %eax,%eax
c0105005:	75 0f                	jne    c0105016 <basic_check+0x12d>
c0105007:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010500a:	89 04 24             	mov    %eax,(%esp)
c010500d:	e8 8d f9 ff ff       	call   c010499f <page_ref>
c0105012:	85 c0                	test   %eax,%eax
c0105014:	74 24                	je     c010503a <basic_check+0x151>
c0105016:	c7 44 24 0c 7c df 10 	movl   $0xc010df7c,0xc(%esp)
c010501d:	c0 
c010501e:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105025:	c0 
c0105026:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c010502d:	00 
c010502e:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105035:	e8 1e d2 ff ff       	call   c0102258 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c010503a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010503d:	89 04 24             	mov    %eax,(%esp)
c0105040:	e8 44 f9 ff ff       	call   c0104989 <page2pa>
c0105045:	8b 15 e0 fe 19 c0    	mov    0xc019fee0,%edx
c010504b:	c1 e2 0c             	shl    $0xc,%edx
c010504e:	39 d0                	cmp    %edx,%eax
c0105050:	72 24                	jb     c0105076 <basic_check+0x18d>
c0105052:	c7 44 24 0c b8 df 10 	movl   $0xc010dfb8,0xc(%esp)
c0105059:	c0 
c010505a:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105061:	c0 
c0105062:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0105069:	00 
c010506a:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105071:	e8 e2 d1 ff ff       	call   c0102258 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0105076:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105079:	89 04 24             	mov    %eax,(%esp)
c010507c:	e8 08 f9 ff ff       	call   c0104989 <page2pa>
c0105081:	8b 15 e0 fe 19 c0    	mov    0xc019fee0,%edx
c0105087:	c1 e2 0c             	shl    $0xc,%edx
c010508a:	39 d0                	cmp    %edx,%eax
c010508c:	72 24                	jb     c01050b2 <basic_check+0x1c9>
c010508e:	c7 44 24 0c d5 df 10 	movl   $0xc010dfd5,0xc(%esp)
c0105095:	c0 
c0105096:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c010509d:	c0 
c010509e:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c01050a5:	00 
c01050a6:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c01050ad:	e8 a6 d1 ff ff       	call   c0102258 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c01050b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050b5:	89 04 24             	mov    %eax,(%esp)
c01050b8:	e8 cc f8 ff ff       	call   c0104989 <page2pa>
c01050bd:	8b 15 e0 fe 19 c0    	mov    0xc019fee0,%edx
c01050c3:	c1 e2 0c             	shl    $0xc,%edx
c01050c6:	39 d0                	cmp    %edx,%eax
c01050c8:	72 24                	jb     c01050ee <basic_check+0x205>
c01050ca:	c7 44 24 0c f2 df 10 	movl   $0xc010dff2,0xc(%esp)
c01050d1:	c0 
c01050d2:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c01050d9:	c0 
c01050da:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c01050e1:	00 
c01050e2:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c01050e9:	e8 6a d1 ff ff       	call   c0102258 <__panic>

    list_entry_t free_list_store = free_list;
c01050ee:	a1 b8 1f 1a c0       	mov    0xc01a1fb8,%eax
c01050f3:	8b 15 bc 1f 1a c0    	mov    0xc01a1fbc,%edx
c01050f9:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01050fc:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01050ff:	c7 45 e0 b8 1f 1a c0 	movl   $0xc01a1fb8,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105106:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105109:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010510c:	89 50 04             	mov    %edx,0x4(%eax)
c010510f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105112:	8b 50 04             	mov    0x4(%eax),%edx
c0105115:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105118:	89 10                	mov    %edx,(%eax)
c010511a:	c7 45 dc b8 1f 1a c0 	movl   $0xc01a1fb8,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0105121:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105124:	8b 40 04             	mov    0x4(%eax),%eax
c0105127:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010512a:	0f 94 c0             	sete   %al
c010512d:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0105130:	85 c0                	test   %eax,%eax
c0105132:	75 24                	jne    c0105158 <basic_check+0x26f>
c0105134:	c7 44 24 0c 0f e0 10 	movl   $0xc010e00f,0xc(%esp)
c010513b:	c0 
c010513c:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105143:	c0 
c0105144:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c010514b:	00 
c010514c:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105153:	e8 00 d1 ff ff       	call   c0102258 <__panic>

    unsigned int nr_free_store = nr_free;
c0105158:	a1 c0 1f 1a c0       	mov    0xc01a1fc0,%eax
c010515d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0105160:	c7 05 c0 1f 1a c0 00 	movl   $0x0,0xc01a1fc0
c0105167:	00 00 00 

    assert(alloc_page() == NULL);
c010516a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105171:	e8 74 13 00 00       	call   c01064ea <alloc_pages>
c0105176:	85 c0                	test   %eax,%eax
c0105178:	74 24                	je     c010519e <basic_check+0x2b5>
c010517a:	c7 44 24 0c 26 e0 10 	movl   $0xc010e026,0xc(%esp)
c0105181:	c0 
c0105182:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105189:	c0 
c010518a:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0105191:	00 
c0105192:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105199:	e8 ba d0 ff ff       	call   c0102258 <__panic>

    free_page(p0);
c010519e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01051a5:	00 
c01051a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01051a9:	89 04 24             	mov    %eax,(%esp)
c01051ac:	e8 a4 13 00 00       	call   c0106555 <free_pages>
    free_page(p1);
c01051b1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01051b8:	00 
c01051b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01051bc:	89 04 24             	mov    %eax,(%esp)
c01051bf:	e8 91 13 00 00       	call   c0106555 <free_pages>
    free_page(p2);
c01051c4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01051cb:	00 
c01051cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051cf:	89 04 24             	mov    %eax,(%esp)
c01051d2:	e8 7e 13 00 00       	call   c0106555 <free_pages>
    assert(nr_free == 3);
c01051d7:	a1 c0 1f 1a c0       	mov    0xc01a1fc0,%eax
c01051dc:	83 f8 03             	cmp    $0x3,%eax
c01051df:	74 24                	je     c0105205 <basic_check+0x31c>
c01051e1:	c7 44 24 0c 3b e0 10 	movl   $0xc010e03b,0xc(%esp)
c01051e8:	c0 
c01051e9:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c01051f0:	c0 
c01051f1:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c01051f8:	00 
c01051f9:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105200:	e8 53 d0 ff ff       	call   c0102258 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0105205:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010520c:	e8 d9 12 00 00       	call   c01064ea <alloc_pages>
c0105211:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105214:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105218:	75 24                	jne    c010523e <basic_check+0x355>
c010521a:	c7 44 24 0c 04 df 10 	movl   $0xc010df04,0xc(%esp)
c0105221:	c0 
c0105222:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105229:	c0 
c010522a:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0105231:	00 
c0105232:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105239:	e8 1a d0 ff ff       	call   c0102258 <__panic>
    assert((p1 = alloc_page()) != NULL);
c010523e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105245:	e8 a0 12 00 00       	call   c01064ea <alloc_pages>
c010524a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010524d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105251:	75 24                	jne    c0105277 <basic_check+0x38e>
c0105253:	c7 44 24 0c 20 df 10 	movl   $0xc010df20,0xc(%esp)
c010525a:	c0 
c010525b:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105262:	c0 
c0105263:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c010526a:	00 
c010526b:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105272:	e8 e1 cf ff ff       	call   c0102258 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0105277:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010527e:	e8 67 12 00 00       	call   c01064ea <alloc_pages>
c0105283:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105286:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010528a:	75 24                	jne    c01052b0 <basic_check+0x3c7>
c010528c:	c7 44 24 0c 3c df 10 	movl   $0xc010df3c,0xc(%esp)
c0105293:	c0 
c0105294:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c010529b:	c0 
c010529c:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c01052a3:	00 
c01052a4:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c01052ab:	e8 a8 cf ff ff       	call   c0102258 <__panic>

    assert(alloc_page() == NULL);
c01052b0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01052b7:	e8 2e 12 00 00       	call   c01064ea <alloc_pages>
c01052bc:	85 c0                	test   %eax,%eax
c01052be:	74 24                	je     c01052e4 <basic_check+0x3fb>
c01052c0:	c7 44 24 0c 26 e0 10 	movl   $0xc010e026,0xc(%esp)
c01052c7:	c0 
c01052c8:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c01052cf:	c0 
c01052d0:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c01052d7:	00 
c01052d8:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c01052df:	e8 74 cf ff ff       	call   c0102258 <__panic>

    free_page(p0);
c01052e4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01052eb:	00 
c01052ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01052ef:	89 04 24             	mov    %eax,(%esp)
c01052f2:	e8 5e 12 00 00       	call   c0106555 <free_pages>
c01052f7:	c7 45 d8 b8 1f 1a c0 	movl   $0xc01a1fb8,-0x28(%ebp)
c01052fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105301:	8b 40 04             	mov    0x4(%eax),%eax
c0105304:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0105307:	0f 94 c0             	sete   %al
c010530a:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c010530d:	85 c0                	test   %eax,%eax
c010530f:	74 24                	je     c0105335 <basic_check+0x44c>
c0105311:	c7 44 24 0c 48 e0 10 	movl   $0xc010e048,0xc(%esp)
c0105318:	c0 
c0105319:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105320:	c0 
c0105321:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0105328:	00 
c0105329:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105330:	e8 23 cf ff ff       	call   c0102258 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0105335:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010533c:	e8 a9 11 00 00       	call   c01064ea <alloc_pages>
c0105341:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105344:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105347:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010534a:	74 24                	je     c0105370 <basic_check+0x487>
c010534c:	c7 44 24 0c 60 e0 10 	movl   $0xc010e060,0xc(%esp)
c0105353:	c0 
c0105354:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c010535b:	c0 
c010535c:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0105363:	00 
c0105364:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c010536b:	e8 e8 ce ff ff       	call   c0102258 <__panic>
    assert(alloc_page() == NULL);
c0105370:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105377:	e8 6e 11 00 00       	call   c01064ea <alloc_pages>
c010537c:	85 c0                	test   %eax,%eax
c010537e:	74 24                	je     c01053a4 <basic_check+0x4bb>
c0105380:	c7 44 24 0c 26 e0 10 	movl   $0xc010e026,0xc(%esp)
c0105387:	c0 
c0105388:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c010538f:	c0 
c0105390:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0105397:	00 
c0105398:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c010539f:	e8 b4 ce ff ff       	call   c0102258 <__panic>

    assert(nr_free == 0);
c01053a4:	a1 c0 1f 1a c0       	mov    0xc01a1fc0,%eax
c01053a9:	85 c0                	test   %eax,%eax
c01053ab:	74 24                	je     c01053d1 <basic_check+0x4e8>
c01053ad:	c7 44 24 0c 79 e0 10 	movl   $0xc010e079,0xc(%esp)
c01053b4:	c0 
c01053b5:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c01053bc:	c0 
c01053bd:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01053c4:	00 
c01053c5:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c01053cc:	e8 87 ce ff ff       	call   c0102258 <__panic>
    free_list = free_list_store;
c01053d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01053d4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01053d7:	a3 b8 1f 1a c0       	mov    %eax,0xc01a1fb8
c01053dc:	89 15 bc 1f 1a c0    	mov    %edx,0xc01a1fbc
    nr_free = nr_free_store;
c01053e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01053e5:	a3 c0 1f 1a c0       	mov    %eax,0xc01a1fc0

    free_page(p);
c01053ea:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01053f1:	00 
c01053f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01053f5:	89 04 24             	mov    %eax,(%esp)
c01053f8:	e8 58 11 00 00       	call   c0106555 <free_pages>
    free_page(p1);
c01053fd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105404:	00 
c0105405:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105408:	89 04 24             	mov    %eax,(%esp)
c010540b:	e8 45 11 00 00       	call   c0106555 <free_pages>
    free_page(p2);
c0105410:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105417:	00 
c0105418:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010541b:	89 04 24             	mov    %eax,(%esp)
c010541e:	e8 32 11 00 00       	call   c0106555 <free_pages>
}
c0105423:	c9                   	leave  
c0105424:	c3                   	ret    

c0105425 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0105425:	55                   	push   %ebp
c0105426:	89 e5                	mov    %esp,%ebp
c0105428:	53                   	push   %ebx
c0105429:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c010542f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105436:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010543d:	c7 45 ec b8 1f 1a c0 	movl   $0xc01a1fb8,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0105444:	eb 6b                	jmp    c01054b1 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0105446:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105449:	83 e8 0c             	sub    $0xc,%eax
c010544c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c010544f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105452:	83 c0 04             	add    $0x4,%eax
c0105455:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010545c:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010545f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105462:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105465:	0f a3 10             	bt     %edx,(%eax)
c0105468:	19 c0                	sbb    %eax,%eax
c010546a:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c010546d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0105471:	0f 95 c0             	setne  %al
c0105474:	0f b6 c0             	movzbl %al,%eax
c0105477:	85 c0                	test   %eax,%eax
c0105479:	75 24                	jne    c010549f <default_check+0x7a>
c010547b:	c7 44 24 0c 86 e0 10 	movl   $0xc010e086,0xc(%esp)
c0105482:	c0 
c0105483:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c010548a:	c0 
c010548b:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c0105492:	00 
c0105493:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c010549a:	e8 b9 cd ff ff       	call   c0102258 <__panic>
        count ++, total += p->property;
c010549f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01054a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01054a6:	8b 50 08             	mov    0x8(%eax),%edx
c01054a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054ac:	01 d0                	add    %edx,%eax
c01054ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01054b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01054b4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01054b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01054ba:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01054bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01054c0:	81 7d ec b8 1f 1a c0 	cmpl   $0xc01a1fb8,-0x14(%ebp)
c01054c7:	0f 85 79 ff ff ff    	jne    c0105446 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01054cd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01054d0:	e8 b2 10 00 00       	call   c0106587 <nr_free_pages>
c01054d5:	39 c3                	cmp    %eax,%ebx
c01054d7:	74 24                	je     c01054fd <default_check+0xd8>
c01054d9:	c7 44 24 0c 96 e0 10 	movl   $0xc010e096,0xc(%esp)
c01054e0:	c0 
c01054e1:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c01054e8:	c0 
c01054e9:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c01054f0:	00 
c01054f1:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c01054f8:	e8 5b cd ff ff       	call   c0102258 <__panic>

    basic_check();
c01054fd:	e8 e7 f9 ff ff       	call   c0104ee9 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0105502:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0105509:	e8 dc 0f 00 00       	call   c01064ea <alloc_pages>
c010550e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0105511:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105515:	75 24                	jne    c010553b <default_check+0x116>
c0105517:	c7 44 24 0c af e0 10 	movl   $0xc010e0af,0xc(%esp)
c010551e:	c0 
c010551f:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105526:	c0 
c0105527:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c010552e:	00 
c010552f:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105536:	e8 1d cd ff ff       	call   c0102258 <__panic>
    assert(!PageProperty(p0));
c010553b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010553e:	83 c0 04             	add    $0x4,%eax
c0105541:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0105548:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010554b:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010554e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0105551:	0f a3 10             	bt     %edx,(%eax)
c0105554:	19 c0                	sbb    %eax,%eax
c0105556:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0105559:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010555d:	0f 95 c0             	setne  %al
c0105560:	0f b6 c0             	movzbl %al,%eax
c0105563:	85 c0                	test   %eax,%eax
c0105565:	74 24                	je     c010558b <default_check+0x166>
c0105567:	c7 44 24 0c ba e0 10 	movl   $0xc010e0ba,0xc(%esp)
c010556e:	c0 
c010556f:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105576:	c0 
c0105577:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010557e:	00 
c010557f:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105586:	e8 cd cc ff ff       	call   c0102258 <__panic>

    list_entry_t free_list_store = free_list;
c010558b:	a1 b8 1f 1a c0       	mov    0xc01a1fb8,%eax
c0105590:	8b 15 bc 1f 1a c0    	mov    0xc01a1fbc,%edx
c0105596:	89 45 80             	mov    %eax,-0x80(%ebp)
c0105599:	89 55 84             	mov    %edx,-0x7c(%ebp)
c010559c:	c7 45 b4 b8 1f 1a c0 	movl   $0xc01a1fb8,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01055a3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01055a6:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01055a9:	89 50 04             	mov    %edx,0x4(%eax)
c01055ac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01055af:	8b 50 04             	mov    0x4(%eax),%edx
c01055b2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01055b5:	89 10                	mov    %edx,(%eax)
c01055b7:	c7 45 b0 b8 1f 1a c0 	movl   $0xc01a1fb8,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01055be:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01055c1:	8b 40 04             	mov    0x4(%eax),%eax
c01055c4:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01055c7:	0f 94 c0             	sete   %al
c01055ca:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01055cd:	85 c0                	test   %eax,%eax
c01055cf:	75 24                	jne    c01055f5 <default_check+0x1d0>
c01055d1:	c7 44 24 0c 0f e0 10 	movl   $0xc010e00f,0xc(%esp)
c01055d8:	c0 
c01055d9:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c01055e0:	c0 
c01055e1:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c01055e8:	00 
c01055e9:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c01055f0:	e8 63 cc ff ff       	call   c0102258 <__panic>
    assert(alloc_page() == NULL);
c01055f5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01055fc:	e8 e9 0e 00 00       	call   c01064ea <alloc_pages>
c0105601:	85 c0                	test   %eax,%eax
c0105603:	74 24                	je     c0105629 <default_check+0x204>
c0105605:	c7 44 24 0c 26 e0 10 	movl   $0xc010e026,0xc(%esp)
c010560c:	c0 
c010560d:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105614:	c0 
c0105615:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010561c:	00 
c010561d:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105624:	e8 2f cc ff ff       	call   c0102258 <__panic>

    unsigned int nr_free_store = nr_free;
c0105629:	a1 c0 1f 1a c0       	mov    0xc01a1fc0,%eax
c010562e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0105631:	c7 05 c0 1f 1a c0 00 	movl   $0x0,0xc01a1fc0
c0105638:	00 00 00 

    free_pages(p0 + 2, 3);
c010563b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010563e:	83 c0 40             	add    $0x40,%eax
c0105641:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0105648:	00 
c0105649:	89 04 24             	mov    %eax,(%esp)
c010564c:	e8 04 0f 00 00       	call   c0106555 <free_pages>
    assert(alloc_pages(4) == NULL);
c0105651:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0105658:	e8 8d 0e 00 00       	call   c01064ea <alloc_pages>
c010565d:	85 c0                	test   %eax,%eax
c010565f:	74 24                	je     c0105685 <default_check+0x260>
c0105661:	c7 44 24 0c cc e0 10 	movl   $0xc010e0cc,0xc(%esp)
c0105668:	c0 
c0105669:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105670:	c0 
c0105671:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c0105678:	00 
c0105679:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105680:	e8 d3 cb ff ff       	call   c0102258 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0105685:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105688:	83 c0 40             	add    $0x40,%eax
c010568b:	83 c0 04             	add    $0x4,%eax
c010568e:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c0105695:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105698:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010569b:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010569e:	0f a3 10             	bt     %edx,(%eax)
c01056a1:	19 c0                	sbb    %eax,%eax
c01056a3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01056a6:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01056aa:	0f 95 c0             	setne  %al
c01056ad:	0f b6 c0             	movzbl %al,%eax
c01056b0:	85 c0                	test   %eax,%eax
c01056b2:	74 0e                	je     c01056c2 <default_check+0x29d>
c01056b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056b7:	83 c0 40             	add    $0x40,%eax
c01056ba:	8b 40 08             	mov    0x8(%eax),%eax
c01056bd:	83 f8 03             	cmp    $0x3,%eax
c01056c0:	74 24                	je     c01056e6 <default_check+0x2c1>
c01056c2:	c7 44 24 0c e4 e0 10 	movl   $0xc010e0e4,0xc(%esp)
c01056c9:	c0 
c01056ca:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c01056d1:	c0 
c01056d2:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c01056d9:	00 
c01056da:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c01056e1:	e8 72 cb ff ff       	call   c0102258 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c01056e6:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c01056ed:	e8 f8 0d 00 00       	call   c01064ea <alloc_pages>
c01056f2:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01056f5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01056f9:	75 24                	jne    c010571f <default_check+0x2fa>
c01056fb:	c7 44 24 0c 10 e1 10 	movl   $0xc010e110,0xc(%esp)
c0105702:	c0 
c0105703:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c010570a:	c0 
c010570b:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0105712:	00 
c0105713:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c010571a:	e8 39 cb ff ff       	call   c0102258 <__panic>
    assert(alloc_page() == NULL);
c010571f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105726:	e8 bf 0d 00 00       	call   c01064ea <alloc_pages>
c010572b:	85 c0                	test   %eax,%eax
c010572d:	74 24                	je     c0105753 <default_check+0x32e>
c010572f:	c7 44 24 0c 26 e0 10 	movl   $0xc010e026,0xc(%esp)
c0105736:	c0 
c0105737:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c010573e:	c0 
c010573f:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0105746:	00 
c0105747:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c010574e:	e8 05 cb ff ff       	call   c0102258 <__panic>
    assert(p0 + 2 == p1);
c0105753:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105756:	83 c0 40             	add    $0x40,%eax
c0105759:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010575c:	74 24                	je     c0105782 <default_check+0x35d>
c010575e:	c7 44 24 0c 2e e1 10 	movl   $0xc010e12e,0xc(%esp)
c0105765:	c0 
c0105766:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c010576d:	c0 
c010576e:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0105775:	00 
c0105776:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c010577d:	e8 d6 ca ff ff       	call   c0102258 <__panic>

    p2 = p0 + 1;
c0105782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105785:	83 c0 20             	add    $0x20,%eax
c0105788:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c010578b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105792:	00 
c0105793:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105796:	89 04 24             	mov    %eax,(%esp)
c0105799:	e8 b7 0d 00 00       	call   c0106555 <free_pages>
    free_pages(p1, 3);
c010579e:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01057a5:	00 
c01057a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01057a9:	89 04 24             	mov    %eax,(%esp)
c01057ac:	e8 a4 0d 00 00       	call   c0106555 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01057b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057b4:	83 c0 04             	add    $0x4,%eax
c01057b7:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01057be:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01057c1:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01057c4:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01057c7:	0f a3 10             	bt     %edx,(%eax)
c01057ca:	19 c0                	sbb    %eax,%eax
c01057cc:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c01057cf:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c01057d3:	0f 95 c0             	setne  %al
c01057d6:	0f b6 c0             	movzbl %al,%eax
c01057d9:	85 c0                	test   %eax,%eax
c01057db:	74 0b                	je     c01057e8 <default_check+0x3c3>
c01057dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057e0:	8b 40 08             	mov    0x8(%eax),%eax
c01057e3:	83 f8 01             	cmp    $0x1,%eax
c01057e6:	74 24                	je     c010580c <default_check+0x3e7>
c01057e8:	c7 44 24 0c 3c e1 10 	movl   $0xc010e13c,0xc(%esp)
c01057ef:	c0 
c01057f0:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c01057f7:	c0 
c01057f8:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c01057ff:	00 
c0105800:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105807:	e8 4c ca ff ff       	call   c0102258 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010580c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010580f:	83 c0 04             	add    $0x4,%eax
c0105812:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0105819:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010581c:	8b 45 90             	mov    -0x70(%ebp),%eax
c010581f:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0105822:	0f a3 10             	bt     %edx,(%eax)
c0105825:	19 c0                	sbb    %eax,%eax
c0105827:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010582a:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c010582e:	0f 95 c0             	setne  %al
c0105831:	0f b6 c0             	movzbl %al,%eax
c0105834:	85 c0                	test   %eax,%eax
c0105836:	74 0b                	je     c0105843 <default_check+0x41e>
c0105838:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010583b:	8b 40 08             	mov    0x8(%eax),%eax
c010583e:	83 f8 03             	cmp    $0x3,%eax
c0105841:	74 24                	je     c0105867 <default_check+0x442>
c0105843:	c7 44 24 0c 64 e1 10 	movl   $0xc010e164,0xc(%esp)
c010584a:	c0 
c010584b:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105852:	c0 
c0105853:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c010585a:	00 
c010585b:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105862:	e8 f1 c9 ff ff       	call   c0102258 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0105867:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010586e:	e8 77 0c 00 00       	call   c01064ea <alloc_pages>
c0105873:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105876:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105879:	83 e8 20             	sub    $0x20,%eax
c010587c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010587f:	74 24                	je     c01058a5 <default_check+0x480>
c0105881:	c7 44 24 0c 8a e1 10 	movl   $0xc010e18a,0xc(%esp)
c0105888:	c0 
c0105889:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105890:	c0 
c0105891:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c0105898:	00 
c0105899:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c01058a0:	e8 b3 c9 ff ff       	call   c0102258 <__panic>
    free_page(p0);
c01058a5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01058ac:	00 
c01058ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01058b0:	89 04 24             	mov    %eax,(%esp)
c01058b3:	e8 9d 0c 00 00       	call   c0106555 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01058b8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01058bf:	e8 26 0c 00 00       	call   c01064ea <alloc_pages>
c01058c4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01058c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01058ca:	83 c0 20             	add    $0x20,%eax
c01058cd:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01058d0:	74 24                	je     c01058f6 <default_check+0x4d1>
c01058d2:	c7 44 24 0c a8 e1 10 	movl   $0xc010e1a8,0xc(%esp)
c01058d9:	c0 
c01058da:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c01058e1:	c0 
c01058e2:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c01058e9:	00 
c01058ea:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c01058f1:	e8 62 c9 ff ff       	call   c0102258 <__panic>

    free_pages(p0, 2);
c01058f6:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01058fd:	00 
c01058fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105901:	89 04 24             	mov    %eax,(%esp)
c0105904:	e8 4c 0c 00 00       	call   c0106555 <free_pages>
    free_page(p2);
c0105909:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105910:	00 
c0105911:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105914:	89 04 24             	mov    %eax,(%esp)
c0105917:	e8 39 0c 00 00       	call   c0106555 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010591c:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0105923:	e8 c2 0b 00 00       	call   c01064ea <alloc_pages>
c0105928:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010592b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010592f:	75 24                	jne    c0105955 <default_check+0x530>
c0105931:	c7 44 24 0c c8 e1 10 	movl   $0xc010e1c8,0xc(%esp)
c0105938:	c0 
c0105939:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105940:	c0 
c0105941:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c0105948:	00 
c0105949:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105950:	e8 03 c9 ff ff       	call   c0102258 <__panic>
    assert(alloc_page() == NULL);
c0105955:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010595c:	e8 89 0b 00 00       	call   c01064ea <alloc_pages>
c0105961:	85 c0                	test   %eax,%eax
c0105963:	74 24                	je     c0105989 <default_check+0x564>
c0105965:	c7 44 24 0c 26 e0 10 	movl   $0xc010e026,0xc(%esp)
c010596c:	c0 
c010596d:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105974:	c0 
c0105975:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c010597c:	00 
c010597d:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105984:	e8 cf c8 ff ff       	call   c0102258 <__panic>

    assert(nr_free == 0);
c0105989:	a1 c0 1f 1a c0       	mov    0xc01a1fc0,%eax
c010598e:	85 c0                	test   %eax,%eax
c0105990:	74 24                	je     c01059b6 <default_check+0x591>
c0105992:	c7 44 24 0c 79 e0 10 	movl   $0xc010e079,0xc(%esp)
c0105999:	c0 
c010599a:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c01059a1:	c0 
c01059a2:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01059a9:	00 
c01059aa:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c01059b1:	e8 a2 c8 ff ff       	call   c0102258 <__panic>
    nr_free = nr_free_store;
c01059b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059b9:	a3 c0 1f 1a c0       	mov    %eax,0xc01a1fc0

    free_list = free_list_store;
c01059be:	8b 45 80             	mov    -0x80(%ebp),%eax
c01059c1:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01059c4:	a3 b8 1f 1a c0       	mov    %eax,0xc01a1fb8
c01059c9:	89 15 bc 1f 1a c0    	mov    %edx,0xc01a1fbc
    free_pages(p0, 5);
c01059cf:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01059d6:	00 
c01059d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01059da:	89 04 24             	mov    %eax,(%esp)
c01059dd:	e8 73 0b 00 00       	call   c0106555 <free_pages>

    le = &free_list;
c01059e2:	c7 45 ec b8 1f 1a c0 	movl   $0xc01a1fb8,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01059e9:	eb 1d                	jmp    c0105a08 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c01059eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059ee:	83 e8 0c             	sub    $0xc,%eax
c01059f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c01059f4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01059f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01059fb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01059fe:	8b 40 08             	mov    0x8(%eax),%eax
c0105a01:	29 c2                	sub    %eax,%edx
c0105a03:	89 d0                	mov    %edx,%eax
c0105a05:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105a08:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a0b:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105a0e:	8b 45 88             	mov    -0x78(%ebp),%eax
c0105a11:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0105a14:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105a17:	81 7d ec b8 1f 1a c0 	cmpl   $0xc01a1fb8,-0x14(%ebp)
c0105a1e:	75 cb                	jne    c01059eb <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0105a20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a24:	74 24                	je     c0105a4a <default_check+0x625>
c0105a26:	c7 44 24 0c e6 e1 10 	movl   $0xc010e1e6,0xc(%esp)
c0105a2d:	c0 
c0105a2e:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105a35:	c0 
c0105a36:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0105a3d:	00 
c0105a3e:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105a45:	e8 0e c8 ff ff       	call   c0102258 <__panic>
    assert(total == 0);
c0105a4a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105a4e:	74 24                	je     c0105a74 <default_check+0x64f>
c0105a50:	c7 44 24 0c f1 e1 10 	movl   $0xc010e1f1,0xc(%esp)
c0105a57:	c0 
c0105a58:	c7 44 24 08 b6 de 10 	movl   $0xc010deb6,0x8(%esp)
c0105a5f:	c0 
c0105a60:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c0105a67:	00 
c0105a68:	c7 04 24 cb de 10 c0 	movl   $0xc010decb,(%esp)
c0105a6f:	e8 e4 c7 ff ff       	call   c0102258 <__panic>
}
c0105a74:	81 c4 94 00 00 00    	add    $0x94,%esp
c0105a7a:	5b                   	pop    %ebx
c0105a7b:	5d                   	pop    %ebp
c0105a7c:	c3                   	ret    

c0105a7d <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0105a7d:	55                   	push   %ebp
c0105a7e:	89 e5                	mov    %esp,%ebp
c0105a80:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0105a83:	9c                   	pushf  
c0105a84:	58                   	pop    %eax
c0105a85:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0105a88:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0105a8b:	25 00 02 00 00       	and    $0x200,%eax
c0105a90:	85 c0                	test   %eax,%eax
c0105a92:	74 0c                	je     c0105aa0 <__intr_save+0x23>
        intr_disable();
c0105a94:	e8 17 da ff ff       	call   c01034b0 <intr_disable>
        return 1;
c0105a99:	b8 01 00 00 00       	mov    $0x1,%eax
c0105a9e:	eb 05                	jmp    c0105aa5 <__intr_save+0x28>
    }
    return 0;
c0105aa0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105aa5:	c9                   	leave  
c0105aa6:	c3                   	ret    

c0105aa7 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0105aa7:	55                   	push   %ebp
c0105aa8:	89 e5                	mov    %esp,%ebp
c0105aaa:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0105aad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105ab1:	74 05                	je     c0105ab8 <__intr_restore+0x11>
        intr_enable();
c0105ab3:	e8 f2 d9 ff ff       	call   c01034aa <intr_enable>
    }
}
c0105ab8:	c9                   	leave  
c0105ab9:	c3                   	ret    

c0105aba <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105aba:	55                   	push   %ebp
c0105abb:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105abd:	8b 55 08             	mov    0x8(%ebp),%edx
c0105ac0:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c0105ac5:	29 c2                	sub    %eax,%edx
c0105ac7:	89 d0                	mov    %edx,%eax
c0105ac9:	c1 f8 05             	sar    $0x5,%eax
}
c0105acc:	5d                   	pop    %ebp
c0105acd:	c3                   	ret    

c0105ace <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105ace:	55                   	push   %ebp
c0105acf:	89 e5                	mov    %esp,%ebp
c0105ad1:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0105ad4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ad7:	89 04 24             	mov    %eax,(%esp)
c0105ada:	e8 db ff ff ff       	call   c0105aba <page2ppn>
c0105adf:	c1 e0 0c             	shl    $0xc,%eax
}
c0105ae2:	c9                   	leave  
c0105ae3:	c3                   	ret    

c0105ae4 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0105ae4:	55                   	push   %ebp
c0105ae5:	89 e5                	mov    %esp,%ebp
c0105ae7:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0105aea:	8b 45 08             	mov    0x8(%ebp),%eax
c0105aed:	c1 e8 0c             	shr    $0xc,%eax
c0105af0:	89 c2                	mov    %eax,%edx
c0105af2:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c0105af7:	39 c2                	cmp    %eax,%edx
c0105af9:	72 1c                	jb     c0105b17 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0105afb:	c7 44 24 08 2c e2 10 	movl   $0xc010e22c,0x8(%esp)
c0105b02:	c0 
c0105b03:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0105b0a:	00 
c0105b0b:	c7 04 24 4b e2 10 c0 	movl   $0xc010e24b,(%esp)
c0105b12:	e8 41 c7 ff ff       	call   c0102258 <__panic>
    }
    return &pages[PPN(pa)];
c0105b17:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c0105b1c:	8b 55 08             	mov    0x8(%ebp),%edx
c0105b1f:	c1 ea 0c             	shr    $0xc,%edx
c0105b22:	c1 e2 05             	shl    $0x5,%edx
c0105b25:	01 d0                	add    %edx,%eax
}
c0105b27:	c9                   	leave  
c0105b28:	c3                   	ret    

c0105b29 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0105b29:	55                   	push   %ebp
c0105b2a:	89 e5                	mov    %esp,%ebp
c0105b2c:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0105b2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b32:	89 04 24             	mov    %eax,(%esp)
c0105b35:	e8 94 ff ff ff       	call   c0105ace <page2pa>
c0105b3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b40:	c1 e8 0c             	shr    $0xc,%eax
c0105b43:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105b46:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c0105b4b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0105b4e:	72 23                	jb     c0105b73 <page2kva+0x4a>
c0105b50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b53:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105b57:	c7 44 24 08 5c e2 10 	movl   $0xc010e25c,0x8(%esp)
c0105b5e:	c0 
c0105b5f:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0105b66:	00 
c0105b67:	c7 04 24 4b e2 10 c0 	movl   $0xc010e24b,(%esp)
c0105b6e:	e8 e5 c6 ff ff       	call   c0102258 <__panic>
c0105b73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b76:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0105b7b:	c9                   	leave  
c0105b7c:	c3                   	ret    

c0105b7d <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0105b7d:	55                   	push   %ebp
c0105b7e:	89 e5                	mov    %esp,%ebp
c0105b80:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0105b83:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b86:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105b89:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105b90:	77 23                	ja     c0105bb5 <kva2page+0x38>
c0105b92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b95:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105b99:	c7 44 24 08 80 e2 10 	movl   $0xc010e280,0x8(%esp)
c0105ba0:	c0 
c0105ba1:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0105ba8:	00 
c0105ba9:	c7 04 24 4b e2 10 c0 	movl   $0xc010e24b,(%esp)
c0105bb0:	e8 a3 c6 ff ff       	call   c0102258 <__panic>
c0105bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bb8:	05 00 00 00 40       	add    $0x40000000,%eax
c0105bbd:	89 04 24             	mov    %eax,(%esp)
c0105bc0:	e8 1f ff ff ff       	call   c0105ae4 <pa2page>
}
c0105bc5:	c9                   	leave  
c0105bc6:	c3                   	ret    

c0105bc7 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0105bc7:	55                   	push   %ebp
c0105bc8:	89 e5                	mov    %esp,%ebp
c0105bca:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c0105bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bd0:	ba 01 00 00 00       	mov    $0x1,%edx
c0105bd5:	89 c1                	mov    %eax,%ecx
c0105bd7:	d3 e2                	shl    %cl,%edx
c0105bd9:	89 d0                	mov    %edx,%eax
c0105bdb:	89 04 24             	mov    %eax,(%esp)
c0105bde:	e8 07 09 00 00       	call   c01064ea <alloc_pages>
c0105be3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0105be6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105bea:	75 07                	jne    c0105bf3 <__slob_get_free_pages+0x2c>
    return NULL;
c0105bec:	b8 00 00 00 00       	mov    $0x0,%eax
c0105bf1:	eb 0b                	jmp    c0105bfe <__slob_get_free_pages+0x37>
  return page2kva(page);
c0105bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bf6:	89 04 24             	mov    %eax,(%esp)
c0105bf9:	e8 2b ff ff ff       	call   c0105b29 <page2kva>
}
c0105bfe:	c9                   	leave  
c0105bff:	c3                   	ret    

c0105c00 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0105c00:	55                   	push   %ebp
c0105c01:	89 e5                	mov    %esp,%ebp
c0105c03:	53                   	push   %ebx
c0105c04:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0105c07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c0a:	ba 01 00 00 00       	mov    $0x1,%edx
c0105c0f:	89 c1                	mov    %eax,%ecx
c0105c11:	d3 e2                	shl    %cl,%edx
c0105c13:	89 d0                	mov    %edx,%eax
c0105c15:	89 c3                	mov    %eax,%ebx
c0105c17:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c1a:	89 04 24             	mov    %eax,(%esp)
c0105c1d:	e8 5b ff ff ff       	call   c0105b7d <kva2page>
c0105c22:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0105c26:	89 04 24             	mov    %eax,(%esp)
c0105c29:	e8 27 09 00 00       	call   c0106555 <free_pages>
}
c0105c2e:	83 c4 14             	add    $0x14,%esp
c0105c31:	5b                   	pop    %ebx
c0105c32:	5d                   	pop    %ebp
c0105c33:	c3                   	ret    

c0105c34 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0105c34:	55                   	push   %ebp
c0105c35:	89 e5                	mov    %esp,%ebp
c0105c37:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0105c3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c3d:	83 c0 08             	add    $0x8,%eax
c0105c40:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0105c45:	76 24                	jbe    c0105c6b <slob_alloc+0x37>
c0105c47:	c7 44 24 0c a4 e2 10 	movl   $0xc010e2a4,0xc(%esp)
c0105c4e:	c0 
c0105c4f:	c7 44 24 08 c3 e2 10 	movl   $0xc010e2c3,0x8(%esp)
c0105c56:	c0 
c0105c57:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0105c5e:	00 
c0105c5f:	c7 04 24 d8 e2 10 c0 	movl   $0xc010e2d8,(%esp)
c0105c66:	e8 ed c5 ff ff       	call   c0102258 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0105c6b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0105c72:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105c79:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c7c:	83 c0 07             	add    $0x7,%eax
c0105c7f:	c1 e8 03             	shr    $0x3,%eax
c0105c82:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0105c85:	e8 f3 fd ff ff       	call   c0105a7d <__intr_save>
c0105c8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0105c8d:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c0105c92:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0105c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c98:	8b 40 04             	mov    0x4(%eax),%eax
c0105c9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0105c9e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105ca2:	74 25                	je     c0105cc9 <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0105ca4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105ca7:	8b 45 10             	mov    0x10(%ebp),%eax
c0105caa:	01 d0                	add    %edx,%eax
c0105cac:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105caf:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cb2:	f7 d8                	neg    %eax
c0105cb4:	21 d0                	and    %edx,%eax
c0105cb6:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0105cb9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105cbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cbf:	29 c2                	sub    %eax,%edx
c0105cc1:	89 d0                	mov    %edx,%eax
c0105cc3:	c1 f8 03             	sar    $0x3,%eax
c0105cc6:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0105cc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ccc:	8b 00                	mov    (%eax),%eax
c0105cce:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105cd1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105cd4:	01 ca                	add    %ecx,%edx
c0105cd6:	39 d0                	cmp    %edx,%eax
c0105cd8:	0f 8c aa 00 00 00    	jl     c0105d88 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c0105cde:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0105ce2:	74 38                	je     c0105d1c <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0105ce4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ce7:	8b 00                	mov    (%eax),%eax
c0105ce9:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0105cec:	89 c2                	mov    %eax,%edx
c0105cee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105cf1:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0105cf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cf6:	8b 50 04             	mov    0x4(%eax),%edx
c0105cf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105cfc:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0105cff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d02:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105d05:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0105d08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d0b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105d0e:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0105d10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d13:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0105d16:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d19:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0105d1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d1f:	8b 00                	mov    (%eax),%eax
c0105d21:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105d24:	75 0e                	jne    c0105d34 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0105d26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d29:	8b 50 04             	mov    0x4(%eax),%edx
c0105d2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d2f:	89 50 04             	mov    %edx,0x4(%eax)
c0105d32:	eb 3c                	jmp    c0105d70 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0105d34:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105d37:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105d3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d41:	01 c2                	add    %eax,%edx
c0105d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d46:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0105d49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d4c:	8b 40 04             	mov    0x4(%eax),%eax
c0105d4f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105d52:	8b 12                	mov    (%edx),%edx
c0105d54:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0105d57:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0105d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d5c:	8b 40 04             	mov    0x4(%eax),%eax
c0105d5f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105d62:	8b 52 04             	mov    0x4(%edx),%edx
c0105d65:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0105d68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d6b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105d6e:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0105d70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d73:	a3 08 da 12 c0       	mov    %eax,0xc012da08
			spin_unlock_irqrestore(&slob_lock, flags);
c0105d78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105d7b:	89 04 24             	mov    %eax,(%esp)
c0105d7e:	e8 24 fd ff ff       	call   c0105aa7 <__intr_restore>
			return cur;
c0105d83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d86:	eb 7f                	jmp    c0105e07 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c0105d88:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c0105d8d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0105d90:	75 61                	jne    c0105df3 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0105d92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105d95:	89 04 24             	mov    %eax,(%esp)
c0105d98:	e8 0a fd ff ff       	call   c0105aa7 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0105d9d:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105da4:	75 07                	jne    c0105dad <slob_alloc+0x179>
				return 0;
c0105da6:	b8 00 00 00 00       	mov    $0x0,%eax
c0105dab:	eb 5a                	jmp    c0105e07 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0105dad:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105db4:	00 
c0105db5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105db8:	89 04 24             	mov    %eax,(%esp)
c0105dbb:	e8 07 fe ff ff       	call   c0105bc7 <__slob_get_free_pages>
c0105dc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0105dc3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105dc7:	75 07                	jne    c0105dd0 <slob_alloc+0x19c>
				return 0;
c0105dc9:	b8 00 00 00 00       	mov    $0x0,%eax
c0105dce:	eb 37                	jmp    c0105e07 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0105dd0:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0105dd7:	00 
c0105dd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ddb:	89 04 24             	mov    %eax,(%esp)
c0105dde:	e8 26 00 00 00       	call   c0105e09 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0105de3:	e8 95 fc ff ff       	call   c0105a7d <__intr_save>
c0105de8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0105deb:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c0105df0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0105df3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105df6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105df9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105dfc:	8b 40 04             	mov    0x4(%eax),%eax
c0105dff:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0105e02:	e9 97 fe ff ff       	jmp    c0105c9e <slob_alloc+0x6a>
}
c0105e07:	c9                   	leave  
c0105e08:	c3                   	ret    

c0105e09 <slob_free>:

static void slob_free(void *block, int size)
{
c0105e09:	55                   	push   %ebp
c0105e0a:	89 e5                	mov    %esp,%ebp
c0105e0c:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0105e0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e12:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0105e15:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105e19:	75 05                	jne    c0105e20 <slob_free+0x17>
		return;
c0105e1b:	e9 ff 00 00 00       	jmp    c0105f1f <slob_free+0x116>

	if (size)
c0105e20:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105e24:	74 10                	je     c0105e36 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0105e26:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e29:	83 c0 07             	add    $0x7,%eax
c0105e2c:	c1 e8 03             	shr    $0x3,%eax
c0105e2f:	89 c2                	mov    %eax,%edx
c0105e31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e34:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0105e36:	e8 42 fc ff ff       	call   c0105a7d <__intr_save>
c0105e3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0105e3e:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c0105e43:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105e46:	eb 27                	jmp    c0105e6f <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0105e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e4b:	8b 40 04             	mov    0x4(%eax),%eax
c0105e4e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105e51:	77 13                	ja     c0105e66 <slob_free+0x5d>
c0105e53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e56:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105e59:	77 27                	ja     c0105e82 <slob_free+0x79>
c0105e5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e5e:	8b 40 04             	mov    0x4(%eax),%eax
c0105e61:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105e64:	77 1c                	ja     c0105e82 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0105e66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e69:	8b 40 04             	mov    0x4(%eax),%eax
c0105e6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105e6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e72:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105e75:	76 d1                	jbe    c0105e48 <slob_free+0x3f>
c0105e77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e7a:	8b 40 04             	mov    0x4(%eax),%eax
c0105e7d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105e80:	76 c6                	jbe    c0105e48 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0105e82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e85:	8b 00                	mov    (%eax),%eax
c0105e87:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105e8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e91:	01 c2                	add    %eax,%edx
c0105e93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e96:	8b 40 04             	mov    0x4(%eax),%eax
c0105e99:	39 c2                	cmp    %eax,%edx
c0105e9b:	75 25                	jne    c0105ec2 <slob_free+0xb9>
		b->units += cur->next->units;
c0105e9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ea0:	8b 10                	mov    (%eax),%edx
c0105ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ea5:	8b 40 04             	mov    0x4(%eax),%eax
c0105ea8:	8b 00                	mov    (%eax),%eax
c0105eaa:	01 c2                	add    %eax,%edx
c0105eac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105eaf:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0105eb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105eb4:	8b 40 04             	mov    0x4(%eax),%eax
c0105eb7:	8b 50 04             	mov    0x4(%eax),%edx
c0105eba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ebd:	89 50 04             	mov    %edx,0x4(%eax)
c0105ec0:	eb 0c                	jmp    c0105ece <slob_free+0xc5>
	} else
		b->next = cur->next;
c0105ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ec5:	8b 50 04             	mov    0x4(%eax),%edx
c0105ec8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ecb:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0105ece:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ed1:	8b 00                	mov    (%eax),%eax
c0105ed3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105eda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105edd:	01 d0                	add    %edx,%eax
c0105edf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105ee2:	75 1f                	jne    c0105f03 <slob_free+0xfa>
		cur->units += b->units;
c0105ee4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ee7:	8b 10                	mov    (%eax),%edx
c0105ee9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105eec:	8b 00                	mov    (%eax),%eax
c0105eee:	01 c2                	add    %eax,%edx
c0105ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ef3:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0105ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ef8:	8b 50 04             	mov    0x4(%eax),%edx
c0105efb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105efe:	89 50 04             	mov    %edx,0x4(%eax)
c0105f01:	eb 09                	jmp    c0105f0c <slob_free+0x103>
	} else
		cur->next = b;
c0105f03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f06:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105f09:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0105f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f0f:	a3 08 da 12 c0       	mov    %eax,0xc012da08

	spin_unlock_irqrestore(&slob_lock, flags);
c0105f14:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f17:	89 04 24             	mov    %eax,(%esp)
c0105f1a:	e8 88 fb ff ff       	call   c0105aa7 <__intr_restore>
}
c0105f1f:	c9                   	leave  
c0105f20:	c3                   	ret    

c0105f21 <slob_init>:



void
slob_init(void) {
c0105f21:	55                   	push   %ebp
c0105f22:	89 e5                	mov    %esp,%ebp
c0105f24:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0105f27:	c7 04 24 ea e2 10 c0 	movl   $0xc010e2ea,(%esp)
c0105f2e:	e8 a3 b8 ff ff       	call   c01017d6 <cprintf>
}
c0105f33:	c9                   	leave  
c0105f34:	c3                   	ret    

c0105f35 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0105f35:	55                   	push   %ebp
c0105f36:	89 e5                	mov    %esp,%ebp
c0105f38:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0105f3b:	e8 e1 ff ff ff       	call   c0105f21 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0105f40:	c7 04 24 fe e2 10 c0 	movl   $0xc010e2fe,(%esp)
c0105f47:	e8 8a b8 ff ff       	call   c01017d6 <cprintf>
}
c0105f4c:	c9                   	leave  
c0105f4d:	c3                   	ret    

c0105f4e <slob_allocated>:

size_t
slob_allocated(void) {
c0105f4e:	55                   	push   %ebp
c0105f4f:	89 e5                	mov    %esp,%ebp
  return 0;
c0105f51:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105f56:	5d                   	pop    %ebp
c0105f57:	c3                   	ret    

c0105f58 <kallocated>:

size_t
kallocated(void) {
c0105f58:	55                   	push   %ebp
c0105f59:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0105f5b:	e8 ee ff ff ff       	call   c0105f4e <slob_allocated>
}
c0105f60:	5d                   	pop    %ebp
c0105f61:	c3                   	ret    

c0105f62 <find_order>:

static int find_order(int size)
{
c0105f62:	55                   	push   %ebp
c0105f63:	89 e5                	mov    %esp,%ebp
c0105f65:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0105f68:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0105f6f:	eb 07                	jmp    c0105f78 <find_order+0x16>
		order++;
c0105f71:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0105f75:	d1 7d 08             	sarl   0x8(%ebp)
c0105f78:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105f7f:	7f f0                	jg     c0105f71 <find_order+0xf>
		order++;
	return order;
c0105f81:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0105f84:	c9                   	leave  
c0105f85:	c3                   	ret    

c0105f86 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0105f86:	55                   	push   %ebp
c0105f87:	89 e5                	mov    %esp,%ebp
c0105f89:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0105f8c:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0105f93:	77 38                	ja     c0105fcd <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0105f95:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f98:	8d 50 08             	lea    0x8(%eax),%edx
c0105f9b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105fa2:	00 
c0105fa3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fa6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105faa:	89 14 24             	mov    %edx,(%esp)
c0105fad:	e8 82 fc ff ff       	call   c0105c34 <slob_alloc>
c0105fb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0105fb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105fb9:	74 08                	je     c0105fc3 <__kmalloc+0x3d>
c0105fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fbe:	83 c0 08             	add    $0x8,%eax
c0105fc1:	eb 05                	jmp    c0105fc8 <__kmalloc+0x42>
c0105fc3:	b8 00 00 00 00       	mov    $0x0,%eax
c0105fc8:	e9 a6 00 00 00       	jmp    c0106073 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0105fcd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105fd4:	00 
c0105fd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fd8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fdc:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0105fe3:	e8 4c fc ff ff       	call   c0105c34 <slob_alloc>
c0105fe8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0105feb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105fef:	75 07                	jne    c0105ff8 <__kmalloc+0x72>
		return 0;
c0105ff1:	b8 00 00 00 00       	mov    $0x0,%eax
c0105ff6:	eb 7b                	jmp    c0106073 <__kmalloc+0xed>

	bb->order = find_order(size);
c0105ff8:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ffb:	89 04 24             	mov    %eax,(%esp)
c0105ffe:	e8 5f ff ff ff       	call   c0105f62 <find_order>
c0106003:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106006:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0106008:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010600b:	8b 00                	mov    (%eax),%eax
c010600d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106011:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106014:	89 04 24             	mov    %eax,(%esp)
c0106017:	e8 ab fb ff ff       	call   c0105bc7 <__slob_get_free_pages>
c010601c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010601f:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0106022:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106025:	8b 40 04             	mov    0x4(%eax),%eax
c0106028:	85 c0                	test   %eax,%eax
c010602a:	74 2f                	je     c010605b <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c010602c:	e8 4c fa ff ff       	call   c0105a7d <__intr_save>
c0106031:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0106034:	8b 15 c4 fe 19 c0    	mov    0xc019fec4,%edx
c010603a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010603d:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0106040:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106043:	a3 c4 fe 19 c0       	mov    %eax,0xc019fec4
		spin_unlock_irqrestore(&block_lock, flags);
c0106048:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010604b:	89 04 24             	mov    %eax,(%esp)
c010604e:	e8 54 fa ff ff       	call   c0105aa7 <__intr_restore>
		return bb->pages;
c0106053:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106056:	8b 40 04             	mov    0x4(%eax),%eax
c0106059:	eb 18                	jmp    c0106073 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c010605b:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0106062:	00 
c0106063:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106066:	89 04 24             	mov    %eax,(%esp)
c0106069:	e8 9b fd ff ff       	call   c0105e09 <slob_free>
	return 0;
c010606e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106073:	c9                   	leave  
c0106074:	c3                   	ret    

c0106075 <kmalloc>:

void *
kmalloc(size_t size)
{
c0106075:	55                   	push   %ebp
c0106076:	89 e5                	mov    %esp,%ebp
c0106078:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c010607b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106082:	00 
c0106083:	8b 45 08             	mov    0x8(%ebp),%eax
c0106086:	89 04 24             	mov    %eax,(%esp)
c0106089:	e8 f8 fe ff ff       	call   c0105f86 <__kmalloc>
}
c010608e:	c9                   	leave  
c010608f:	c3                   	ret    

c0106090 <kfree>:


void kfree(void *block)
{
c0106090:	55                   	push   %ebp
c0106091:	89 e5                	mov    %esp,%ebp
c0106093:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0106096:	c7 45 f0 c4 fe 19 c0 	movl   $0xc019fec4,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010609d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01060a1:	75 05                	jne    c01060a8 <kfree+0x18>
		return;
c01060a3:	e9 a2 00 00 00       	jmp    c010614a <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01060a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01060ab:	25 ff 0f 00 00       	and    $0xfff,%eax
c01060b0:	85 c0                	test   %eax,%eax
c01060b2:	75 7f                	jne    c0106133 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c01060b4:	e8 c4 f9 ff ff       	call   c0105a7d <__intr_save>
c01060b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01060bc:	a1 c4 fe 19 c0       	mov    0xc019fec4,%eax
c01060c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01060c4:	eb 5c                	jmp    c0106122 <kfree+0x92>
			if (bb->pages == block) {
c01060c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060c9:	8b 40 04             	mov    0x4(%eax),%eax
c01060cc:	3b 45 08             	cmp    0x8(%ebp),%eax
c01060cf:	75 3f                	jne    c0106110 <kfree+0x80>
				*last = bb->next;
c01060d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060d4:	8b 50 08             	mov    0x8(%eax),%edx
c01060d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060da:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c01060dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060df:	89 04 24             	mov    %eax,(%esp)
c01060e2:	e8 c0 f9 ff ff       	call   c0105aa7 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c01060e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060ea:	8b 10                	mov    (%eax),%edx
c01060ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01060ef:	89 54 24 04          	mov    %edx,0x4(%esp)
c01060f3:	89 04 24             	mov    %eax,(%esp)
c01060f6:	e8 05 fb ff ff       	call   c0105c00 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c01060fb:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0106102:	00 
c0106103:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106106:	89 04 24             	mov    %eax,(%esp)
c0106109:	e8 fb fc ff ff       	call   c0105e09 <slob_free>
				return;
c010610e:	eb 3a                	jmp    c010614a <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0106110:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106113:	83 c0 08             	add    $0x8,%eax
c0106116:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106119:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010611c:	8b 40 08             	mov    0x8(%eax),%eax
c010611f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106122:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106126:	75 9e                	jne    c01060c6 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0106128:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010612b:	89 04 24             	mov    %eax,(%esp)
c010612e:	e8 74 f9 ff ff       	call   c0105aa7 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0106133:	8b 45 08             	mov    0x8(%ebp),%eax
c0106136:	83 e8 08             	sub    $0x8,%eax
c0106139:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106140:	00 
c0106141:	89 04 24             	mov    %eax,(%esp)
c0106144:	e8 c0 fc ff ff       	call   c0105e09 <slob_free>
	return;
c0106149:	90                   	nop
}
c010614a:	c9                   	leave  
c010614b:	c3                   	ret    

c010614c <ksize>:


unsigned int ksize(const void *block)
{
c010614c:	55                   	push   %ebp
c010614d:	89 e5                	mov    %esp,%ebp
c010614f:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0106152:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106156:	75 07                	jne    c010615f <ksize+0x13>
		return 0;
c0106158:	b8 00 00 00 00       	mov    $0x0,%eax
c010615d:	eb 6b                	jmp    c01061ca <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c010615f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106162:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106167:	85 c0                	test   %eax,%eax
c0106169:	75 54                	jne    c01061bf <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c010616b:	e8 0d f9 ff ff       	call   c0105a7d <__intr_save>
c0106170:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0106173:	a1 c4 fe 19 c0       	mov    0xc019fec4,%eax
c0106178:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010617b:	eb 31                	jmp    c01061ae <ksize+0x62>
			if (bb->pages == block) {
c010617d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106180:	8b 40 04             	mov    0x4(%eax),%eax
c0106183:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106186:	75 1d                	jne    c01061a5 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0106188:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010618b:	89 04 24             	mov    %eax,(%esp)
c010618e:	e8 14 f9 ff ff       	call   c0105aa7 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0106193:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106196:	8b 00                	mov    (%eax),%eax
c0106198:	ba 00 10 00 00       	mov    $0x1000,%edx
c010619d:	89 c1                	mov    %eax,%ecx
c010619f:	d3 e2                	shl    %cl,%edx
c01061a1:	89 d0                	mov    %edx,%eax
c01061a3:	eb 25                	jmp    c01061ca <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c01061a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061a8:	8b 40 08             	mov    0x8(%eax),%eax
c01061ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01061ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01061b2:	75 c9                	jne    c010617d <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c01061b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061b7:	89 04 24             	mov    %eax,(%esp)
c01061ba:	e8 e8 f8 ff ff       	call   c0105aa7 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c01061bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01061c2:	83 e8 08             	sub    $0x8,%eax
c01061c5:	8b 00                	mov    (%eax),%eax
c01061c7:	c1 e0 03             	shl    $0x3,%eax
}
c01061ca:	c9                   	leave  
c01061cb:	c3                   	ret    

c01061cc <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01061cc:	55                   	push   %ebp
c01061cd:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01061cf:	8b 55 08             	mov    0x8(%ebp),%edx
c01061d2:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c01061d7:	29 c2                	sub    %eax,%edx
c01061d9:	89 d0                	mov    %edx,%eax
c01061db:	c1 f8 05             	sar    $0x5,%eax
}
c01061de:	5d                   	pop    %ebp
c01061df:	c3                   	ret    

c01061e0 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01061e0:	55                   	push   %ebp
c01061e1:	89 e5                	mov    %esp,%ebp
c01061e3:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01061e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01061e9:	89 04 24             	mov    %eax,(%esp)
c01061ec:	e8 db ff ff ff       	call   c01061cc <page2ppn>
c01061f1:	c1 e0 0c             	shl    $0xc,%eax
}
c01061f4:	c9                   	leave  
c01061f5:	c3                   	ret    

c01061f6 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01061f6:	55                   	push   %ebp
c01061f7:	89 e5                	mov    %esp,%ebp
c01061f9:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01061fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01061ff:	c1 e8 0c             	shr    $0xc,%eax
c0106202:	89 c2                	mov    %eax,%edx
c0106204:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c0106209:	39 c2                	cmp    %eax,%edx
c010620b:	72 1c                	jb     c0106229 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010620d:	c7 44 24 08 1c e3 10 	movl   $0xc010e31c,0x8(%esp)
c0106214:	c0 
c0106215:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010621c:	00 
c010621d:	c7 04 24 3b e3 10 c0 	movl   $0xc010e33b,(%esp)
c0106224:	e8 2f c0 ff ff       	call   c0102258 <__panic>
    }
    return &pages[PPN(pa)];
c0106229:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c010622e:	8b 55 08             	mov    0x8(%ebp),%edx
c0106231:	c1 ea 0c             	shr    $0xc,%edx
c0106234:	c1 e2 05             	shl    $0x5,%edx
c0106237:	01 d0                	add    %edx,%eax
}
c0106239:	c9                   	leave  
c010623a:	c3                   	ret    

c010623b <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010623b:	55                   	push   %ebp
c010623c:	89 e5                	mov    %esp,%ebp
c010623e:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0106241:	8b 45 08             	mov    0x8(%ebp),%eax
c0106244:	89 04 24             	mov    %eax,(%esp)
c0106247:	e8 94 ff ff ff       	call   c01061e0 <page2pa>
c010624c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010624f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106252:	c1 e8 0c             	shr    $0xc,%eax
c0106255:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106258:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c010625d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0106260:	72 23                	jb     c0106285 <page2kva+0x4a>
c0106262:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106265:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106269:	c7 44 24 08 4c e3 10 	movl   $0xc010e34c,0x8(%esp)
c0106270:	c0 
c0106271:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0106278:	00 
c0106279:	c7 04 24 3b e3 10 c0 	movl   $0xc010e33b,(%esp)
c0106280:	e8 d3 bf ff ff       	call   c0102258 <__panic>
c0106285:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106288:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010628d:	c9                   	leave  
c010628e:	c3                   	ret    

c010628f <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c010628f:	55                   	push   %ebp
c0106290:	89 e5                	mov    %esp,%ebp
c0106292:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106295:	8b 45 08             	mov    0x8(%ebp),%eax
c0106298:	83 e0 01             	and    $0x1,%eax
c010629b:	85 c0                	test   %eax,%eax
c010629d:	75 1c                	jne    c01062bb <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c010629f:	c7 44 24 08 70 e3 10 	movl   $0xc010e370,0x8(%esp)
c01062a6:	c0 
c01062a7:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01062ae:	00 
c01062af:	c7 04 24 3b e3 10 c0 	movl   $0xc010e33b,(%esp)
c01062b6:	e8 9d bf ff ff       	call   c0102258 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01062bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01062be:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01062c3:	89 04 24             	mov    %eax,(%esp)
c01062c6:	e8 2b ff ff ff       	call   c01061f6 <pa2page>
}
c01062cb:	c9                   	leave  
c01062cc:	c3                   	ret    

c01062cd <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c01062cd:	55                   	push   %ebp
c01062ce:	89 e5                	mov    %esp,%ebp
c01062d0:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c01062d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01062d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01062db:	89 04 24             	mov    %eax,(%esp)
c01062de:	e8 13 ff ff ff       	call   c01061f6 <pa2page>
}
c01062e3:	c9                   	leave  
c01062e4:	c3                   	ret    

c01062e5 <page_ref>:

static inline int
page_ref(struct Page *page) {
c01062e5:	55                   	push   %ebp
c01062e6:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01062e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01062eb:	8b 00                	mov    (%eax),%eax
}
c01062ed:	5d                   	pop    %ebp
c01062ee:	c3                   	ret    

c01062ef <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01062ef:	55                   	push   %ebp
c01062f0:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01062f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01062f5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01062f8:	89 10                	mov    %edx,(%eax)
}
c01062fa:	5d                   	pop    %ebp
c01062fb:	c3                   	ret    

c01062fc <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c01062fc:	55                   	push   %ebp
c01062fd:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c01062ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0106302:	8b 00                	mov    (%eax),%eax
c0106304:	8d 50 01             	lea    0x1(%eax),%edx
c0106307:	8b 45 08             	mov    0x8(%ebp),%eax
c010630a:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010630c:	8b 45 08             	mov    0x8(%ebp),%eax
c010630f:	8b 00                	mov    (%eax),%eax
}
c0106311:	5d                   	pop    %ebp
c0106312:	c3                   	ret    

c0106313 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0106313:	55                   	push   %ebp
c0106314:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0106316:	8b 45 08             	mov    0x8(%ebp),%eax
c0106319:	8b 00                	mov    (%eax),%eax
c010631b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010631e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106321:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106323:	8b 45 08             	mov    0x8(%ebp),%eax
c0106326:	8b 00                	mov    (%eax),%eax
}
c0106328:	5d                   	pop    %ebp
c0106329:	c3                   	ret    

c010632a <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010632a:	55                   	push   %ebp
c010632b:	89 e5                	mov    %esp,%ebp
c010632d:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0106330:	9c                   	pushf  
c0106331:	58                   	pop    %eax
c0106332:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0106335:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0106338:	25 00 02 00 00       	and    $0x200,%eax
c010633d:	85 c0                	test   %eax,%eax
c010633f:	74 0c                	je     c010634d <__intr_save+0x23>
        intr_disable();
c0106341:	e8 6a d1 ff ff       	call   c01034b0 <intr_disable>
        return 1;
c0106346:	b8 01 00 00 00       	mov    $0x1,%eax
c010634b:	eb 05                	jmp    c0106352 <__intr_save+0x28>
    }
    return 0;
c010634d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106352:	c9                   	leave  
c0106353:	c3                   	ret    

c0106354 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0106354:	55                   	push   %ebp
c0106355:	89 e5                	mov    %esp,%ebp
c0106357:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010635a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010635e:	74 05                	je     c0106365 <__intr_restore+0x11>
        intr_enable();
c0106360:	e8 45 d1 ff ff       	call   c01034aa <intr_enable>
    }
}
c0106365:	c9                   	leave  
c0106366:	c3                   	ret    

c0106367 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0106367:	55                   	push   %ebp
c0106368:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c010636a:	8b 45 08             	mov    0x8(%ebp),%eax
c010636d:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0106370:	b8 23 00 00 00       	mov    $0x23,%eax
c0106375:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0106377:	b8 23 00 00 00       	mov    $0x23,%eax
c010637c:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c010637e:	b8 10 00 00 00       	mov    $0x10,%eax
c0106383:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0106385:	b8 10 00 00 00       	mov    $0x10,%eax
c010638a:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c010638c:	b8 10 00 00 00       	mov    $0x10,%eax
c0106391:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0106393:	ea 9a 63 10 c0 08 00 	ljmp   $0x8,$0xc010639a
}
c010639a:	5d                   	pop    %ebp
c010639b:	c3                   	ret    

c010639c <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c010639c:	55                   	push   %ebp
c010639d:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c010639f:	8b 45 08             	mov    0x8(%ebp),%eax
c01063a2:	a3 04 ff 19 c0       	mov    %eax,0xc019ff04
}
c01063a7:	5d                   	pop    %ebp
c01063a8:	c3                   	ret    

c01063a9 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c01063a9:	55                   	push   %ebp
c01063aa:	89 e5                	mov    %esp,%ebp
c01063ac:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c01063af:	b8 00 d0 12 c0       	mov    $0xc012d000,%eax
c01063b4:	89 04 24             	mov    %eax,(%esp)
c01063b7:	e8 e0 ff ff ff       	call   c010639c <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c01063bc:	66 c7 05 08 ff 19 c0 	movw   $0x10,0xc019ff08
c01063c3:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c01063c5:	66 c7 05 48 da 12 c0 	movw   $0x68,0xc012da48
c01063cc:	68 00 
c01063ce:	b8 00 ff 19 c0       	mov    $0xc019ff00,%eax
c01063d3:	66 a3 4a da 12 c0    	mov    %ax,0xc012da4a
c01063d9:	b8 00 ff 19 c0       	mov    $0xc019ff00,%eax
c01063de:	c1 e8 10             	shr    $0x10,%eax
c01063e1:	a2 4c da 12 c0       	mov    %al,0xc012da4c
c01063e6:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c01063ed:	83 e0 f0             	and    $0xfffffff0,%eax
c01063f0:	83 c8 09             	or     $0x9,%eax
c01063f3:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c01063f8:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c01063ff:	83 e0 ef             	and    $0xffffffef,%eax
c0106402:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0106407:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c010640e:	83 e0 9f             	and    $0xffffff9f,%eax
c0106411:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0106416:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c010641d:	83 c8 80             	or     $0xffffff80,%eax
c0106420:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0106425:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c010642c:	83 e0 f0             	and    $0xfffffff0,%eax
c010642f:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0106434:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c010643b:	83 e0 ef             	and    $0xffffffef,%eax
c010643e:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0106443:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c010644a:	83 e0 df             	and    $0xffffffdf,%eax
c010644d:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0106452:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c0106459:	83 c8 40             	or     $0x40,%eax
c010645c:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0106461:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c0106468:	83 e0 7f             	and    $0x7f,%eax
c010646b:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0106470:	b8 00 ff 19 c0       	mov    $0xc019ff00,%eax
c0106475:	c1 e8 18             	shr    $0x18,%eax
c0106478:	a2 4f da 12 c0       	mov    %al,0xc012da4f

    // reload all segment registers
    lgdt(&gdt_pd);
c010647d:	c7 04 24 50 da 12 c0 	movl   $0xc012da50,(%esp)
c0106484:	e8 de fe ff ff       	call   c0106367 <lgdt>
c0106489:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c010648f:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0106493:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0106496:	c9                   	leave  
c0106497:	c3                   	ret    

c0106498 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0106498:	55                   	push   %ebp
c0106499:	89 e5                	mov    %esp,%ebp
c010649b:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c010649e:	c7 05 c4 1f 1a c0 10 	movl   $0xc010e210,0xc01a1fc4
c01064a5:	e2 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c01064a8:	a1 c4 1f 1a c0       	mov    0xc01a1fc4,%eax
c01064ad:	8b 00                	mov    (%eax),%eax
c01064af:	89 44 24 04          	mov    %eax,0x4(%esp)
c01064b3:	c7 04 24 9c e3 10 c0 	movl   $0xc010e39c,(%esp)
c01064ba:	e8 17 b3 ff ff       	call   c01017d6 <cprintf>
    pmm_manager->init();
c01064bf:	a1 c4 1f 1a c0       	mov    0xc01a1fc4,%eax
c01064c4:	8b 40 04             	mov    0x4(%eax),%eax
c01064c7:	ff d0                	call   *%eax
}
c01064c9:	c9                   	leave  
c01064ca:	c3                   	ret    

c01064cb <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c01064cb:	55                   	push   %ebp
c01064cc:	89 e5                	mov    %esp,%ebp
c01064ce:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c01064d1:	a1 c4 1f 1a c0       	mov    0xc01a1fc4,%eax
c01064d6:	8b 40 08             	mov    0x8(%eax),%eax
c01064d9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01064dc:	89 54 24 04          	mov    %edx,0x4(%esp)
c01064e0:	8b 55 08             	mov    0x8(%ebp),%edx
c01064e3:	89 14 24             	mov    %edx,(%esp)
c01064e6:	ff d0                	call   *%eax
}
c01064e8:	c9                   	leave  
c01064e9:	c3                   	ret    

c01064ea <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c01064ea:	55                   	push   %ebp
c01064eb:	89 e5                	mov    %esp,%ebp
c01064ed:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c01064f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c01064f7:	e8 2e fe ff ff       	call   c010632a <__intr_save>
c01064fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c01064ff:	a1 c4 1f 1a c0       	mov    0xc01a1fc4,%eax
c0106504:	8b 40 0c             	mov    0xc(%eax),%eax
c0106507:	8b 55 08             	mov    0x8(%ebp),%edx
c010650a:	89 14 24             	mov    %edx,(%esp)
c010650d:	ff d0                	call   *%eax
c010650f:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0106512:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106515:	89 04 24             	mov    %eax,(%esp)
c0106518:	e8 37 fe ff ff       	call   c0106354 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c010651d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106521:	75 2d                	jne    c0106550 <alloc_pages+0x66>
c0106523:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0106527:	77 27                	ja     c0106550 <alloc_pages+0x66>
c0106529:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c010652e:	85 c0                	test   %eax,%eax
c0106530:	74 1e                	je     c0106550 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0106532:	8b 55 08             	mov    0x8(%ebp),%edx
c0106535:	a1 ac 20 1a c0       	mov    0xc01a20ac,%eax
c010653a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106541:	00 
c0106542:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106546:	89 04 24             	mov    %eax,(%esp)
c0106549:	e8 b6 1d 00 00       	call   c0108304 <swap_out>
    }
c010654e:	eb a7                	jmp    c01064f7 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0106550:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106553:	c9                   	leave  
c0106554:	c3                   	ret    

c0106555 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0106555:	55                   	push   %ebp
c0106556:	89 e5                	mov    %esp,%ebp
c0106558:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010655b:	e8 ca fd ff ff       	call   c010632a <__intr_save>
c0106560:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0106563:	a1 c4 1f 1a c0       	mov    0xc01a1fc4,%eax
c0106568:	8b 40 10             	mov    0x10(%eax),%eax
c010656b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010656e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106572:	8b 55 08             	mov    0x8(%ebp),%edx
c0106575:	89 14 24             	mov    %edx,(%esp)
c0106578:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c010657a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010657d:	89 04 24             	mov    %eax,(%esp)
c0106580:	e8 cf fd ff ff       	call   c0106354 <__intr_restore>
}
c0106585:	c9                   	leave  
c0106586:	c3                   	ret    

c0106587 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0106587:	55                   	push   %ebp
c0106588:	89 e5                	mov    %esp,%ebp
c010658a:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c010658d:	e8 98 fd ff ff       	call   c010632a <__intr_save>
c0106592:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0106595:	a1 c4 1f 1a c0       	mov    0xc01a1fc4,%eax
c010659a:	8b 40 14             	mov    0x14(%eax),%eax
c010659d:	ff d0                	call   *%eax
c010659f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01065a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065a5:	89 04 24             	mov    %eax,(%esp)
c01065a8:	e8 a7 fd ff ff       	call   c0106354 <__intr_restore>
    return ret;
c01065ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01065b0:	c9                   	leave  
c01065b1:	c3                   	ret    

c01065b2 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01065b2:	55                   	push   %ebp
c01065b3:	89 e5                	mov    %esp,%ebp
c01065b5:	57                   	push   %edi
c01065b6:	56                   	push   %esi
c01065b7:	53                   	push   %ebx
c01065b8:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01065be:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01065c5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01065cc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c01065d3:	c7 04 24 b3 e3 10 c0 	movl   $0xc010e3b3,(%esp)
c01065da:	e8 f7 b1 ff ff       	call   c01017d6 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01065df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01065e6:	e9 15 01 00 00       	jmp    c0106700 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01065eb:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01065ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01065f1:	89 d0                	mov    %edx,%eax
c01065f3:	c1 e0 02             	shl    $0x2,%eax
c01065f6:	01 d0                	add    %edx,%eax
c01065f8:	c1 e0 02             	shl    $0x2,%eax
c01065fb:	01 c8                	add    %ecx,%eax
c01065fd:	8b 50 08             	mov    0x8(%eax),%edx
c0106600:	8b 40 04             	mov    0x4(%eax),%eax
c0106603:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0106606:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0106609:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010660c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010660f:	89 d0                	mov    %edx,%eax
c0106611:	c1 e0 02             	shl    $0x2,%eax
c0106614:	01 d0                	add    %edx,%eax
c0106616:	c1 e0 02             	shl    $0x2,%eax
c0106619:	01 c8                	add    %ecx,%eax
c010661b:	8b 48 0c             	mov    0xc(%eax),%ecx
c010661e:	8b 58 10             	mov    0x10(%eax),%ebx
c0106621:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106624:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106627:	01 c8                	add    %ecx,%eax
c0106629:	11 da                	adc    %ebx,%edx
c010662b:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010662e:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0106631:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0106634:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106637:	89 d0                	mov    %edx,%eax
c0106639:	c1 e0 02             	shl    $0x2,%eax
c010663c:	01 d0                	add    %edx,%eax
c010663e:	c1 e0 02             	shl    $0x2,%eax
c0106641:	01 c8                	add    %ecx,%eax
c0106643:	83 c0 14             	add    $0x14,%eax
c0106646:	8b 00                	mov    (%eax),%eax
c0106648:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c010664e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0106651:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0106654:	83 c0 ff             	add    $0xffffffff,%eax
c0106657:	83 d2 ff             	adc    $0xffffffff,%edx
c010665a:	89 c6                	mov    %eax,%esi
c010665c:	89 d7                	mov    %edx,%edi
c010665e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0106661:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106664:	89 d0                	mov    %edx,%eax
c0106666:	c1 e0 02             	shl    $0x2,%eax
c0106669:	01 d0                	add    %edx,%eax
c010666b:	c1 e0 02             	shl    $0x2,%eax
c010666e:	01 c8                	add    %ecx,%eax
c0106670:	8b 48 0c             	mov    0xc(%eax),%ecx
c0106673:	8b 58 10             	mov    0x10(%eax),%ebx
c0106676:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010667c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0106680:	89 74 24 14          	mov    %esi,0x14(%esp)
c0106684:	89 7c 24 18          	mov    %edi,0x18(%esp)
c0106688:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010668b:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010668e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106692:	89 54 24 10          	mov    %edx,0x10(%esp)
c0106696:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010669a:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010669e:	c7 04 24 c0 e3 10 c0 	movl   $0xc010e3c0,(%esp)
c01066a5:	e8 2c b1 ff ff       	call   c01017d6 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01066aa:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01066ad:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01066b0:	89 d0                	mov    %edx,%eax
c01066b2:	c1 e0 02             	shl    $0x2,%eax
c01066b5:	01 d0                	add    %edx,%eax
c01066b7:	c1 e0 02             	shl    $0x2,%eax
c01066ba:	01 c8                	add    %ecx,%eax
c01066bc:	83 c0 14             	add    $0x14,%eax
c01066bf:	8b 00                	mov    (%eax),%eax
c01066c1:	83 f8 01             	cmp    $0x1,%eax
c01066c4:	75 36                	jne    c01066fc <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c01066c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01066c9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01066cc:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01066cf:	77 2b                	ja     c01066fc <page_init+0x14a>
c01066d1:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01066d4:	72 05                	jb     c01066db <page_init+0x129>
c01066d6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c01066d9:	73 21                	jae    c01066fc <page_init+0x14a>
c01066db:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01066df:	77 1b                	ja     c01066fc <page_init+0x14a>
c01066e1:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01066e5:	72 09                	jb     c01066f0 <page_init+0x13e>
c01066e7:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c01066ee:	77 0c                	ja     c01066fc <page_init+0x14a>
                maxpa = end;
c01066f0:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01066f3:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01066f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01066f9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01066fc:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0106700:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106703:	8b 00                	mov    (%eax),%eax
c0106705:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0106708:	0f 8f dd fe ff ff    	jg     c01065eb <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010670e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106712:	72 1d                	jb     c0106731 <page_init+0x17f>
c0106714:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106718:	77 09                	ja     c0106723 <page_init+0x171>
c010671a:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0106721:	76 0e                	jbe    c0106731 <page_init+0x17f>
        maxpa = KMEMSIZE;
c0106723:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c010672a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0106731:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106734:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106737:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010673b:	c1 ea 0c             	shr    $0xc,%edx
c010673e:	a3 e0 fe 19 c0       	mov    %eax,0xc019fee0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0106743:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c010674a:	b8 b8 20 1a c0       	mov    $0xc01a20b8,%eax
c010674f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0106752:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106755:	01 d0                	add    %edx,%eax
c0106757:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010675a:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010675d:	ba 00 00 00 00       	mov    $0x0,%edx
c0106762:	f7 75 ac             	divl   -0x54(%ebp)
c0106765:	89 d0                	mov    %edx,%eax
c0106767:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010676a:	29 c2                	sub    %eax,%edx
c010676c:	89 d0                	mov    %edx,%eax
c010676e:	a3 cc 1f 1a c0       	mov    %eax,0xc01a1fcc

    for (i = 0; i < npage; i ++) {
c0106773:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010677a:	eb 27                	jmp    c01067a3 <page_init+0x1f1>
        SetPageReserved(pages + i);
c010677c:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c0106781:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106784:	c1 e2 05             	shl    $0x5,%edx
c0106787:	01 d0                	add    %edx,%eax
c0106789:	83 c0 04             	add    $0x4,%eax
c010678c:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0106793:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106796:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106799:	8b 55 90             	mov    -0x70(%ebp),%edx
c010679c:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c010679f:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01067a3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01067a6:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c01067ab:	39 c2                	cmp    %eax,%edx
c01067ad:	72 cd                	jb     c010677c <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01067af:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c01067b4:	c1 e0 05             	shl    $0x5,%eax
c01067b7:	89 c2                	mov    %eax,%edx
c01067b9:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c01067be:	01 d0                	add    %edx,%eax
c01067c0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01067c3:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01067ca:	77 23                	ja     c01067ef <page_init+0x23d>
c01067cc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01067cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01067d3:	c7 44 24 08 f0 e3 10 	movl   $0xc010e3f0,0x8(%esp)
c01067da:	c0 
c01067db:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01067e2:	00 
c01067e3:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01067ea:	e8 69 ba ff ff       	call   c0102258 <__panic>
c01067ef:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01067f2:	05 00 00 00 40       	add    $0x40000000,%eax
c01067f7:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c01067fa:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0106801:	e9 74 01 00 00       	jmp    c010697a <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0106806:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0106809:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010680c:	89 d0                	mov    %edx,%eax
c010680e:	c1 e0 02             	shl    $0x2,%eax
c0106811:	01 d0                	add    %edx,%eax
c0106813:	c1 e0 02             	shl    $0x2,%eax
c0106816:	01 c8                	add    %ecx,%eax
c0106818:	8b 50 08             	mov    0x8(%eax),%edx
c010681b:	8b 40 04             	mov    0x4(%eax),%eax
c010681e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106821:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106824:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0106827:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010682a:	89 d0                	mov    %edx,%eax
c010682c:	c1 e0 02             	shl    $0x2,%eax
c010682f:	01 d0                	add    %edx,%eax
c0106831:	c1 e0 02             	shl    $0x2,%eax
c0106834:	01 c8                	add    %ecx,%eax
c0106836:	8b 48 0c             	mov    0xc(%eax),%ecx
c0106839:	8b 58 10             	mov    0x10(%eax),%ebx
c010683c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010683f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106842:	01 c8                	add    %ecx,%eax
c0106844:	11 da                	adc    %ebx,%edx
c0106846:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0106849:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c010684c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010684f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106852:	89 d0                	mov    %edx,%eax
c0106854:	c1 e0 02             	shl    $0x2,%eax
c0106857:	01 d0                	add    %edx,%eax
c0106859:	c1 e0 02             	shl    $0x2,%eax
c010685c:	01 c8                	add    %ecx,%eax
c010685e:	83 c0 14             	add    $0x14,%eax
c0106861:	8b 00                	mov    (%eax),%eax
c0106863:	83 f8 01             	cmp    $0x1,%eax
c0106866:	0f 85 0a 01 00 00    	jne    c0106976 <page_init+0x3c4>
            if (begin < freemem) {
c010686c:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010686f:	ba 00 00 00 00       	mov    $0x0,%edx
c0106874:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0106877:	72 17                	jb     c0106890 <page_init+0x2de>
c0106879:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010687c:	77 05                	ja     c0106883 <page_init+0x2d1>
c010687e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0106881:	76 0d                	jbe    c0106890 <page_init+0x2de>
                begin = freemem;
c0106883:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0106886:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106889:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0106890:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0106894:	72 1d                	jb     c01068b3 <page_init+0x301>
c0106896:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010689a:	77 09                	ja     c01068a5 <page_init+0x2f3>
c010689c:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01068a3:	76 0e                	jbe    c01068b3 <page_init+0x301>
                end = KMEMSIZE;
c01068a5:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01068ac:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01068b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01068b6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01068b9:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01068bc:	0f 87 b4 00 00 00    	ja     c0106976 <page_init+0x3c4>
c01068c2:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01068c5:	72 09                	jb     c01068d0 <page_init+0x31e>
c01068c7:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01068ca:	0f 83 a6 00 00 00    	jae    c0106976 <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c01068d0:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c01068d7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01068da:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01068dd:	01 d0                	add    %edx,%eax
c01068df:	83 e8 01             	sub    $0x1,%eax
c01068e2:	89 45 98             	mov    %eax,-0x68(%ebp)
c01068e5:	8b 45 98             	mov    -0x68(%ebp),%eax
c01068e8:	ba 00 00 00 00       	mov    $0x0,%edx
c01068ed:	f7 75 9c             	divl   -0x64(%ebp)
c01068f0:	89 d0                	mov    %edx,%eax
c01068f2:	8b 55 98             	mov    -0x68(%ebp),%edx
c01068f5:	29 c2                	sub    %eax,%edx
c01068f7:	89 d0                	mov    %edx,%eax
c01068f9:	ba 00 00 00 00       	mov    $0x0,%edx
c01068fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106901:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0106904:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106907:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010690a:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010690d:	ba 00 00 00 00       	mov    $0x0,%edx
c0106912:	89 c7                	mov    %eax,%edi
c0106914:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c010691a:	89 7d 80             	mov    %edi,-0x80(%ebp)
c010691d:	89 d0                	mov    %edx,%eax
c010691f:	83 e0 00             	and    $0x0,%eax
c0106922:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0106925:	8b 45 80             	mov    -0x80(%ebp),%eax
c0106928:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010692b:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010692e:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0106931:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106934:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106937:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010693a:	77 3a                	ja     c0106976 <page_init+0x3c4>
c010693c:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010693f:	72 05                	jb     c0106946 <page_init+0x394>
c0106941:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0106944:	73 30                	jae    c0106976 <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0106946:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0106949:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c010694c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010694f:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0106952:	29 c8                	sub    %ecx,%eax
c0106954:	19 da                	sbb    %ebx,%edx
c0106956:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010695a:	c1 ea 0c             	shr    $0xc,%edx
c010695d:	89 c3                	mov    %eax,%ebx
c010695f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106962:	89 04 24             	mov    %eax,(%esp)
c0106965:	e8 8c f8 ff ff       	call   c01061f6 <pa2page>
c010696a:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010696e:	89 04 24             	mov    %eax,(%esp)
c0106971:	e8 55 fb ff ff       	call   c01064cb <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0106976:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010697a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010697d:	8b 00                	mov    (%eax),%eax
c010697f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0106982:	0f 8f 7e fe ff ff    	jg     c0106806 <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0106988:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c010698e:	5b                   	pop    %ebx
c010698f:	5e                   	pop    %esi
c0106990:	5f                   	pop    %edi
c0106991:	5d                   	pop    %ebp
c0106992:	c3                   	ret    

c0106993 <enable_paging>:

static void
enable_paging(void) {
c0106993:	55                   	push   %ebp
c0106994:	89 e5                	mov    %esp,%ebp
c0106996:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c0106999:	a1 c8 1f 1a c0       	mov    0xc01a1fc8,%eax
c010699e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01069a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01069a4:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c01069a7:	0f 20 c0             	mov    %cr0,%eax
c01069aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c01069ad:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c01069b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c01069b3:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c01069ba:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c01069be:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01069c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c01069c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01069c7:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c01069ca:	c9                   	leave  
c01069cb:	c3                   	ret    

c01069cc <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01069cc:	55                   	push   %ebp
c01069cd:	89 e5                	mov    %esp,%ebp
c01069cf:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01069d2:	8b 45 14             	mov    0x14(%ebp),%eax
c01069d5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01069d8:	31 d0                	xor    %edx,%eax
c01069da:	25 ff 0f 00 00       	and    $0xfff,%eax
c01069df:	85 c0                	test   %eax,%eax
c01069e1:	74 24                	je     c0106a07 <boot_map_segment+0x3b>
c01069e3:	c7 44 24 0c 22 e4 10 	movl   $0xc010e422,0xc(%esp)
c01069ea:	c0 
c01069eb:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c01069f2:	c0 
c01069f3:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c01069fa:	00 
c01069fb:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0106a02:	e8 51 b8 ff ff       	call   c0102258 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0106a07:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0106a0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106a11:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106a16:	89 c2                	mov    %eax,%edx
c0106a18:	8b 45 10             	mov    0x10(%ebp),%eax
c0106a1b:	01 c2                	add    %eax,%edx
c0106a1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a20:	01 d0                	add    %edx,%eax
c0106a22:	83 e8 01             	sub    $0x1,%eax
c0106a25:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106a28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106a2b:	ba 00 00 00 00       	mov    $0x0,%edx
c0106a30:	f7 75 f0             	divl   -0x10(%ebp)
c0106a33:	89 d0                	mov    %edx,%eax
c0106a35:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106a38:	29 c2                	sub    %eax,%edx
c0106a3a:	89 d0                	mov    %edx,%eax
c0106a3c:	c1 e8 0c             	shr    $0xc,%eax
c0106a3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0106a42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106a45:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106a48:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106a4b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106a50:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0106a53:	8b 45 14             	mov    0x14(%ebp),%eax
c0106a56:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106a59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106a5c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106a61:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0106a64:	eb 6b                	jmp    c0106ad1 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0106a66:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0106a6d:	00 
c0106a6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106a71:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106a75:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a78:	89 04 24             	mov    %eax,(%esp)
c0106a7b:	e8 d1 01 00 00       	call   c0106c51 <get_pte>
c0106a80:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0106a83:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0106a87:	75 24                	jne    c0106aad <boot_map_segment+0xe1>
c0106a89:	c7 44 24 0c 4e e4 10 	movl   $0xc010e44e,0xc(%esp)
c0106a90:	c0 
c0106a91:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0106a98:	c0 
c0106a99:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0106aa0:	00 
c0106aa1:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0106aa8:	e8 ab b7 ff ff       	call   c0102258 <__panic>
        *ptep = pa | PTE_P | perm;
c0106aad:	8b 45 18             	mov    0x18(%ebp),%eax
c0106ab0:	8b 55 14             	mov    0x14(%ebp),%edx
c0106ab3:	09 d0                	or     %edx,%eax
c0106ab5:	83 c8 01             	or     $0x1,%eax
c0106ab8:	89 c2                	mov    %eax,%edx
c0106aba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106abd:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0106abf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106ac3:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0106aca:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0106ad1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ad5:	75 8f                	jne    c0106a66 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0106ad7:	c9                   	leave  
c0106ad8:	c3                   	ret    

c0106ad9 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0106ad9:	55                   	push   %ebp
c0106ada:	89 e5                	mov    %esp,%ebp
c0106adc:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0106adf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106ae6:	e8 ff f9 ff ff       	call   c01064ea <alloc_pages>
c0106aeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0106aee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106af2:	75 1c                	jne    c0106b10 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0106af4:	c7 44 24 08 5b e4 10 	movl   $0xc010e45b,0x8(%esp)
c0106afb:	c0 
c0106afc:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0106b03:	00 
c0106b04:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0106b0b:	e8 48 b7 ff ff       	call   c0102258 <__panic>
    }
    return page2kva(p);
c0106b10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b13:	89 04 24             	mov    %eax,(%esp)
c0106b16:	e8 20 f7 ff ff       	call   c010623b <page2kva>
}
c0106b1b:	c9                   	leave  
c0106b1c:	c3                   	ret    

c0106b1d <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0106b1d:	55                   	push   %ebp
c0106b1e:	89 e5                	mov    %esp,%ebp
c0106b20:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0106b23:	e8 70 f9 ff ff       	call   c0106498 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0106b28:	e8 85 fa ff ff       	call   c01065b2 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0106b2d:	e8 77 09 00 00       	call   c01074a9 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0106b32:	e8 a2 ff ff ff       	call   c0106ad9 <boot_alloc_page>
c0106b37:	a3 e4 fe 19 c0       	mov    %eax,0xc019fee4
    memset(boot_pgdir, 0, PGSIZE);
c0106b3c:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0106b41:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106b48:	00 
c0106b49:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106b50:	00 
c0106b51:	89 04 24             	mov    %eax,(%esp)
c0106b54:	e8 2c 66 00 00       	call   c010d185 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c0106b59:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0106b5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106b61:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0106b68:	77 23                	ja     c0106b8d <pmm_init+0x70>
c0106b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b6d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106b71:	c7 44 24 08 f0 e3 10 	movl   $0xc010e3f0,0x8(%esp)
c0106b78:	c0 
c0106b79:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0106b80:	00 
c0106b81:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0106b88:	e8 cb b6 ff ff       	call   c0102258 <__panic>
c0106b8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b90:	05 00 00 00 40       	add    $0x40000000,%eax
c0106b95:	a3 c8 1f 1a c0       	mov    %eax,0xc01a1fc8

    check_pgdir();
c0106b9a:	e8 28 09 00 00       	call   c01074c7 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0106b9f:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0106ba4:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0106baa:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0106baf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106bb2:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0106bb9:	77 23                	ja     c0106bde <pmm_init+0xc1>
c0106bbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106bbe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106bc2:	c7 44 24 08 f0 e3 10 	movl   $0xc010e3f0,0x8(%esp)
c0106bc9:	c0 
c0106bca:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0106bd1:	00 
c0106bd2:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0106bd9:	e8 7a b6 ff ff       	call   c0102258 <__panic>
c0106bde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106be1:	05 00 00 00 40       	add    $0x40000000,%eax
c0106be6:	83 c8 03             	or     $0x3,%eax
c0106be9:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0106beb:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0106bf0:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0106bf7:	00 
c0106bf8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106bff:	00 
c0106c00:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0106c07:	38 
c0106c08:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0106c0f:	c0 
c0106c10:	89 04 24             	mov    %eax,(%esp)
c0106c13:	e8 b4 fd ff ff       	call   c01069cc <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c0106c18:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0106c1d:	8b 15 e4 fe 19 c0    	mov    0xc019fee4,%edx
c0106c23:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c0106c29:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0106c2b:	e8 63 fd ff ff       	call   c0106993 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0106c30:	e8 74 f7 ff ff       	call   c01063a9 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c0106c35:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0106c3a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0106c40:	e8 1d 0f 00 00       	call   c0107b62 <check_boot_pgdir>

    print_pgdir();
c0106c45:	e8 a5 13 00 00       	call   c0107fef <print_pgdir>
    
    kmalloc_init();
c0106c4a:	e8 e6 f2 ff ff       	call   c0105f35 <kmalloc_init>

}
c0106c4f:	c9                   	leave  
c0106c50:	c3                   	ret    

c0106c51 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0106c51:	55                   	push   %ebp
c0106c52:	89 e5                	mov    %esp,%ebp
c0106c54:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c0106c57:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106c5a:	c1 e8 16             	shr    $0x16,%eax
c0106c5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106c64:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c67:	01 d0                	add    %edx,%eax
c0106c69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(*pdep & PTE_P)) {
c0106c6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c6f:	8b 00                	mov    (%eax),%eax
c0106c71:	83 e0 01             	and    $0x1,%eax
c0106c74:	85 c0                	test   %eax,%eax
c0106c76:	0f 85 c4 00 00 00    	jne    c0106d40 <get_pte+0xef>
        if (!create)
c0106c7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0106c80:	75 0a                	jne    c0106c8c <get_pte+0x3b>
            return NULL;
c0106c82:	b8 00 00 00 00       	mov    $0x0,%eax
c0106c87:	e9 10 01 00 00       	jmp    c0106d9c <get_pte+0x14b>
        struct Page* page;
        if (create && (page = alloc_pages(1)) == NULL)
c0106c8c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0106c90:	74 1f                	je     c0106cb1 <get_pte+0x60>
c0106c92:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106c99:	e8 4c f8 ff ff       	call   c01064ea <alloc_pages>
c0106c9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106ca1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ca5:	75 0a                	jne    c0106cb1 <get_pte+0x60>
            return NULL;
c0106ca7:	b8 00 00 00 00       	mov    $0x0,%eax
c0106cac:	e9 eb 00 00 00       	jmp    c0106d9c <get_pte+0x14b>
        set_page_ref(page, 1);
c0106cb1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106cb8:	00 
c0106cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106cbc:	89 04 24             	mov    %eax,(%esp)
c0106cbf:	e8 2b f6 ff ff       	call   c01062ef <set_page_ref>
        uintptr_t phia = page2pa(page);
c0106cc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106cc7:	89 04 24             	mov    %eax,(%esp)
c0106cca:	e8 11 f5 ff ff       	call   c01061e0 <page2pa>
c0106ccf:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(phia), 0, PGSIZE);
c0106cd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106cd5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106cd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106cdb:	c1 e8 0c             	shr    $0xc,%eax
c0106cde:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106ce1:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c0106ce6:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0106ce9:	72 23                	jb     c0106d0e <get_pte+0xbd>
c0106ceb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106cee:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106cf2:	c7 44 24 08 4c e3 10 	movl   $0xc010e34c,0x8(%esp)
c0106cf9:	c0 
c0106cfa:	c7 44 24 04 98 01 00 	movl   $0x198,0x4(%esp)
c0106d01:	00 
c0106d02:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0106d09:	e8 4a b5 ff ff       	call   c0102258 <__panic>
c0106d0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106d11:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106d16:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106d1d:	00 
c0106d1e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106d25:	00 
c0106d26:	89 04 24             	mov    %eax,(%esp)
c0106d29:	e8 57 64 00 00       	call   c010d185 <memset>
        *pdep = PDE_ADDR(phia) | PTE_U | PTE_W | PTE_P;
c0106d2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d31:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106d36:	83 c8 07             	or     $0x7,%eax
c0106d39:	89 c2                	mov    %eax,%edx
c0106d3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106d3e:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c0106d40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106d43:	8b 00                	mov    (%eax),%eax
c0106d45:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106d4a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0106d4d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106d50:	c1 e8 0c             	shr    $0xc,%eax
c0106d53:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106d56:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c0106d5b:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106d5e:	72 23                	jb     c0106d83 <get_pte+0x132>
c0106d60:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106d63:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106d67:	c7 44 24 08 4c e3 10 	movl   $0xc010e34c,0x8(%esp)
c0106d6e:	c0 
c0106d6f:	c7 44 24 04 9b 01 00 	movl   $0x19b,0x4(%esp)
c0106d76:	00 
c0106d77:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0106d7e:	e8 d5 b4 ff ff       	call   c0102258 <__panic>
c0106d83:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106d86:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106d8b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106d8e:	c1 ea 0c             	shr    $0xc,%edx
c0106d91:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0106d97:	c1 e2 02             	shl    $0x2,%edx
c0106d9a:	01 d0                	add    %edx,%eax
}
c0106d9c:	c9                   	leave  
c0106d9d:	c3                   	ret    

c0106d9e <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0106d9e:	55                   	push   %ebp
c0106d9f:	89 e5                	mov    %esp,%ebp
c0106da1:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0106da4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106dab:	00 
c0106dac:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106daf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106db3:	8b 45 08             	mov    0x8(%ebp),%eax
c0106db6:	89 04 24             	mov    %eax,(%esp)
c0106db9:	e8 93 fe ff ff       	call   c0106c51 <get_pte>
c0106dbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0106dc1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0106dc5:	74 08                	je     c0106dcf <get_page+0x31>
        *ptep_store = ptep;
c0106dc7:	8b 45 10             	mov    0x10(%ebp),%eax
c0106dca:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106dcd:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0106dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106dd3:	74 1b                	je     c0106df0 <get_page+0x52>
c0106dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106dd8:	8b 00                	mov    (%eax),%eax
c0106dda:	83 e0 01             	and    $0x1,%eax
c0106ddd:	85 c0                	test   %eax,%eax
c0106ddf:	74 0f                	je     c0106df0 <get_page+0x52>
        return pte2page(*ptep);
c0106de1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106de4:	8b 00                	mov    (%eax),%eax
c0106de6:	89 04 24             	mov    %eax,(%esp)
c0106de9:	e8 a1 f4 ff ff       	call   c010628f <pte2page>
c0106dee:	eb 05                	jmp    c0106df5 <get_page+0x57>
    }
    return NULL;
c0106df0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106df5:	c9                   	leave  
c0106df6:	c3                   	ret    

c0106df7 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0106df7:	55                   	push   %ebp
c0106df8:	89 e5                	mov    %esp,%ebp
c0106dfa:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0106dfd:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e00:	8b 00                	mov    (%eax),%eax
c0106e02:	83 e0 01             	and    $0x1,%eax
c0106e05:	85 c0                	test   %eax,%eax
c0106e07:	74 52                	je     c0106e5b <page_remove_pte+0x64>
        struct Page *page = pte2page(*ptep);
c0106e09:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e0c:	8b 00                	mov    (%eax),%eax
c0106e0e:	89 04 24             	mov    %eax,(%esp)
c0106e11:	e8 79 f4 ff ff       	call   c010628f <pte2page>
c0106e16:	89 45 f4             	mov    %eax,-0xc(%ebp)
        page_ref_dec(page);
c0106e19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e1c:	89 04 24             	mov    %eax,(%esp)
c0106e1f:	e8 ef f4 ff ff       	call   c0106313 <page_ref_dec>
        if(page->ref == 0) {
c0106e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e27:	8b 00                	mov    (%eax),%eax
c0106e29:	85 c0                	test   %eax,%eax
c0106e2b:	75 13                	jne    c0106e40 <page_remove_pte+0x49>
            free_page(page);
c0106e2d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106e34:	00 
c0106e35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e38:	89 04 24             	mov    %eax,(%esp)
c0106e3b:	e8 15 f7 ff ff       	call   c0106555 <free_pages>
        }
        *ptep = 0;
c0106e40:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0106e49:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106e4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e50:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e53:	89 04 24             	mov    %eax,(%esp)
c0106e56:	e8 1d 05 00 00       	call   c0107378 <tlb_invalidate>
    }
}
c0106e5b:	c9                   	leave  
c0106e5c:	c3                   	ret    

c0106e5d <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0106e5d:	55                   	push   %ebp
c0106e5e:	89 e5                	mov    %esp,%ebp
c0106e60:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0106e63:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106e66:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106e6b:	85 c0                	test   %eax,%eax
c0106e6d:	75 0c                	jne    c0106e7b <unmap_range+0x1e>
c0106e6f:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e72:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106e77:	85 c0                	test   %eax,%eax
c0106e79:	74 24                	je     c0106e9f <unmap_range+0x42>
c0106e7b:	c7 44 24 0c 74 e4 10 	movl   $0xc010e474,0xc(%esp)
c0106e82:	c0 
c0106e83:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0106e8a:	c0 
c0106e8b:	c7 44 24 04 d6 01 00 	movl   $0x1d6,0x4(%esp)
c0106e92:	00 
c0106e93:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0106e9a:	e8 b9 b3 ff ff       	call   c0102258 <__panic>
    assert(USER_ACCESS(start, end));
c0106e9f:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0106ea6:	76 11                	jbe    c0106eb9 <unmap_range+0x5c>
c0106ea8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106eab:	3b 45 10             	cmp    0x10(%ebp),%eax
c0106eae:	73 09                	jae    c0106eb9 <unmap_range+0x5c>
c0106eb0:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0106eb7:	76 24                	jbe    c0106edd <unmap_range+0x80>
c0106eb9:	c7 44 24 0c 9d e4 10 	movl   $0xc010e49d,0xc(%esp)
c0106ec0:	c0 
c0106ec1:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0106ec8:	c0 
c0106ec9:	c7 44 24 04 d7 01 00 	movl   $0x1d7,0x4(%esp)
c0106ed0:	00 
c0106ed1:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0106ed8:	e8 7b b3 ff ff       	call   c0102258 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0106edd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106ee4:	00 
c0106ee5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106ee8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106eec:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eef:	89 04 24             	mov    %eax,(%esp)
c0106ef2:	e8 5a fd ff ff       	call   c0106c51 <get_pte>
c0106ef7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0106efa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106efe:	75 18                	jne    c0106f18 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0106f00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f03:	05 00 00 40 00       	add    $0x400000,%eax
c0106f08:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106f0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f0e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0106f13:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0106f16:	eb 29                	jmp    c0106f41 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0106f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f1b:	8b 00                	mov    (%eax),%eax
c0106f1d:	85 c0                	test   %eax,%eax
c0106f1f:	74 19                	je     c0106f3a <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0106f21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f24:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106f28:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f2b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f32:	89 04 24             	mov    %eax,(%esp)
c0106f35:	e8 bd fe ff ff       	call   c0106df7 <page_remove_pte>
        }
        start += PGSIZE;
c0106f3a:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0106f41:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106f45:	74 08                	je     c0106f4f <unmap_range+0xf2>
c0106f47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f4a:	3b 45 10             	cmp    0x10(%ebp),%eax
c0106f4d:	72 8e                	jb     c0106edd <unmap_range+0x80>
}
c0106f4f:	c9                   	leave  
c0106f50:	c3                   	ret    

c0106f51 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0106f51:	55                   	push   %ebp
c0106f52:	89 e5                	mov    %esp,%ebp
c0106f54:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0106f57:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f5a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106f5f:	85 c0                	test   %eax,%eax
c0106f61:	75 0c                	jne    c0106f6f <exit_range+0x1e>
c0106f63:	8b 45 10             	mov    0x10(%ebp),%eax
c0106f66:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106f6b:	85 c0                	test   %eax,%eax
c0106f6d:	74 24                	je     c0106f93 <exit_range+0x42>
c0106f6f:	c7 44 24 0c 74 e4 10 	movl   $0xc010e474,0xc(%esp)
c0106f76:	c0 
c0106f77:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0106f7e:	c0 
c0106f7f:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
c0106f86:	00 
c0106f87:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0106f8e:	e8 c5 b2 ff ff       	call   c0102258 <__panic>
    assert(USER_ACCESS(start, end));
c0106f93:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0106f9a:	76 11                	jbe    c0106fad <exit_range+0x5c>
c0106f9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f9f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0106fa2:	73 09                	jae    c0106fad <exit_range+0x5c>
c0106fa4:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0106fab:	76 24                	jbe    c0106fd1 <exit_range+0x80>
c0106fad:	c7 44 24 0c 9d e4 10 	movl   $0xc010e49d,0xc(%esp)
c0106fb4:	c0 
c0106fb5:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0106fbc:	c0 
c0106fbd:	c7 44 24 04 e9 01 00 	movl   $0x1e9,0x4(%esp)
c0106fc4:	00 
c0106fc5:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0106fcc:	e8 87 b2 ff ff       	call   c0102258 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0106fd1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106fd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fda:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0106fdf:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0106fe2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106fe5:	c1 e8 16             	shr    $0x16,%eax
c0106fe8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0106feb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106fee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106ff5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ff8:	01 d0                	add    %edx,%eax
c0106ffa:	8b 00                	mov    (%eax),%eax
c0106ffc:	83 e0 01             	and    $0x1,%eax
c0106fff:	85 c0                	test   %eax,%eax
c0107001:	74 3e                	je     c0107041 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0107003:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107006:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010700d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107010:	01 d0                	add    %edx,%eax
c0107012:	8b 00                	mov    (%eax),%eax
c0107014:	89 04 24             	mov    %eax,(%esp)
c0107017:	e8 b1 f2 ff ff       	call   c01062cd <pde2page>
c010701c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107023:	00 
c0107024:	89 04 24             	mov    %eax,(%esp)
c0107027:	e8 29 f5 ff ff       	call   c0106555 <free_pages>
            pgdir[pde_idx] = 0;
c010702c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010702f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107036:	8b 45 08             	mov    0x8(%ebp),%eax
c0107039:	01 d0                	add    %edx,%eax
c010703b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0107041:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107048:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010704c:	74 08                	je     c0107056 <exit_range+0x105>
c010704e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107051:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107054:	72 8c                	jb     c0106fe2 <exit_range+0x91>
}
c0107056:	c9                   	leave  
c0107057:	c3                   	ret    

c0107058 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0107058:	55                   	push   %ebp
c0107059:	89 e5                	mov    %esp,%ebp
c010705b:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c010705e:	8b 45 10             	mov    0x10(%ebp),%eax
c0107061:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107066:	85 c0                	test   %eax,%eax
c0107068:	75 0c                	jne    c0107076 <copy_range+0x1e>
c010706a:	8b 45 14             	mov    0x14(%ebp),%eax
c010706d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107072:	85 c0                	test   %eax,%eax
c0107074:	74 24                	je     c010709a <copy_range+0x42>
c0107076:	c7 44 24 0c 74 e4 10 	movl   $0xc010e474,0xc(%esp)
c010707d:	c0 
c010707e:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107085:	c0 
c0107086:	c7 44 24 04 fe 01 00 	movl   $0x1fe,0x4(%esp)
c010708d:	00 
c010708e:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107095:	e8 be b1 ff ff       	call   c0102258 <__panic>
    assert(USER_ACCESS(start, end));
c010709a:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c01070a1:	76 11                	jbe    c01070b4 <copy_range+0x5c>
c01070a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01070a6:	3b 45 14             	cmp    0x14(%ebp),%eax
c01070a9:	73 09                	jae    c01070b4 <copy_range+0x5c>
c01070ab:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c01070b2:	76 24                	jbe    c01070d8 <copy_range+0x80>
c01070b4:	c7 44 24 0c 9d e4 10 	movl   $0xc010e49d,0xc(%esp)
c01070bb:	c0 
c01070bc:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c01070c3:	c0 
c01070c4:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
c01070cb:	00 
c01070cc:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01070d3:	e8 80 b1 ff ff       	call   c0102258 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c01070d8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01070df:	00 
c01070e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01070e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01070e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070ea:	89 04 24             	mov    %eax,(%esp)
c01070ed:	e8 5f fb ff ff       	call   c0106c51 <get_pte>
c01070f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c01070f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01070f9:	75 1b                	jne    c0107116 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c01070fb:	8b 45 10             	mov    0x10(%ebp),%eax
c01070fe:	05 00 00 40 00       	add    $0x400000,%eax
c0107103:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107106:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107109:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010710e:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0107111:	e9 4c 01 00 00       	jmp    c0107262 <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0107116:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107119:	8b 00                	mov    (%eax),%eax
c010711b:	83 e0 01             	and    $0x1,%eax
c010711e:	85 c0                	test   %eax,%eax
c0107120:	0f 84 35 01 00 00    	je     c010725b <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0107126:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010712d:	00 
c010712e:	8b 45 10             	mov    0x10(%ebp),%eax
c0107131:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107135:	8b 45 08             	mov    0x8(%ebp),%eax
c0107138:	89 04 24             	mov    %eax,(%esp)
c010713b:	e8 11 fb ff ff       	call   c0106c51 <get_pte>
c0107140:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107143:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107147:	75 0a                	jne    c0107153 <copy_range+0xfb>
                return -E_NO_MEM;
c0107149:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010714e:	e9 26 01 00 00       	jmp    c0107279 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0107153:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107156:	8b 00                	mov    (%eax),%eax
c0107158:	83 e0 07             	and    $0x7,%eax
c010715b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c010715e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107161:	8b 00                	mov    (%eax),%eax
c0107163:	89 04 24             	mov    %eax,(%esp)
c0107166:	e8 24 f1 ff ff       	call   c010628f <pte2page>
c010716b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c010716e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107175:	e8 70 f3 ff ff       	call   c01064ea <alloc_pages>
c010717a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c010717d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107181:	75 24                	jne    c01071a7 <copy_range+0x14f>
c0107183:	c7 44 24 0c b5 e4 10 	movl   $0xc010e4b5,0xc(%esp)
c010718a:	c0 
c010718b:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107192:	c0 
c0107193:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c010719a:	00 
c010719b:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01071a2:	e8 b1 b0 ff ff       	call   c0102258 <__panic>
        assert(npage!=NULL);
c01071a7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01071ab:	75 24                	jne    c01071d1 <copy_range+0x179>
c01071ad:	c7 44 24 0c c0 e4 10 	movl   $0xc010e4c0,0xc(%esp)
c01071b4:	c0 
c01071b5:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c01071bc:	c0 
c01071bd:	c7 44 24 04 13 02 00 	movl   $0x213,0x4(%esp)
c01071c4:	00 
c01071c5:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01071cc:	e8 87 b0 ff ff       	call   c0102258 <__panic>
        int ret=0;
c01071d1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
            void * src_kvaddr = page2kva(page);
c01071d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071db:	89 04 24             	mov    %eax,(%esp)
c01071de:	e8 58 f0 ff ff       	call   c010623b <page2kva>
c01071e3:	89 45 d8             	mov    %eax,-0x28(%ebp)
            void * dst_kvaddr = page2kva(npage);
c01071e6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01071e9:	89 04 24             	mov    %eax,(%esp)
c01071ec:	e8 4a f0 ff ff       	call   c010623b <page2kva>
c01071f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c01071f4:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01071fb:	00 
c01071fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01071ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107203:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107206:	89 04 24             	mov    %eax,(%esp)
c0107209:	e8 59 60 00 00       	call   c010d267 <memcpy>
        ret = page_insert(to, npage, start, perm);
c010720e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107211:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107215:	8b 45 10             	mov    0x10(%ebp),%eax
c0107218:	89 44 24 08          	mov    %eax,0x8(%esp)
c010721c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010721f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107223:	8b 45 08             	mov    0x8(%ebp),%eax
c0107226:	89 04 24             	mov    %eax,(%esp)
c0107229:	e8 91 00 00 00       	call   c01072bf <page_insert>
c010722e:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0107231:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107235:	74 24                	je     c010725b <copy_range+0x203>
c0107237:	c7 44 24 0c cc e4 10 	movl   $0xc010e4cc,0xc(%esp)
c010723e:	c0 
c010723f:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107246:	c0 
c0107247:	c7 44 24 04 27 02 00 	movl   $0x227,0x4(%esp)
c010724e:	00 
c010724f:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107256:	e8 fd af ff ff       	call   c0102258 <__panic>
        }
        start += PGSIZE;
c010725b:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0107262:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107266:	74 0c                	je     c0107274 <copy_range+0x21c>
c0107268:	8b 45 10             	mov    0x10(%ebp),%eax
c010726b:	3b 45 14             	cmp    0x14(%ebp),%eax
c010726e:	0f 82 64 fe ff ff    	jb     c01070d8 <copy_range+0x80>
    return 0;
c0107274:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107279:	c9                   	leave  
c010727a:	c3                   	ret    

c010727b <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c010727b:	55                   	push   %ebp
c010727c:	89 e5                	mov    %esp,%ebp
c010727e:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107281:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107288:	00 
c0107289:	8b 45 0c             	mov    0xc(%ebp),%eax
c010728c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107290:	8b 45 08             	mov    0x8(%ebp),%eax
c0107293:	89 04 24             	mov    %eax,(%esp)
c0107296:	e8 b6 f9 ff ff       	call   c0106c51 <get_pte>
c010729b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c010729e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01072a2:	74 19                	je     c01072bd <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c01072a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072a7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01072ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c01072ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01072b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01072b5:	89 04 24             	mov    %eax,(%esp)
c01072b8:	e8 3a fb ff ff       	call   c0106df7 <page_remove_pte>
    }
}
c01072bd:	c9                   	leave  
c01072be:	c3                   	ret    

c01072bf <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c01072bf:	55                   	push   %ebp
c01072c0:	89 e5                	mov    %esp,%ebp
c01072c2:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c01072c5:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01072cc:	00 
c01072cd:	8b 45 10             	mov    0x10(%ebp),%eax
c01072d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01072d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01072d7:	89 04 24             	mov    %eax,(%esp)
c01072da:	e8 72 f9 ff ff       	call   c0106c51 <get_pte>
c01072df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c01072e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01072e6:	75 0a                	jne    c01072f2 <page_insert+0x33>
        return -E_NO_MEM;
c01072e8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01072ed:	e9 84 00 00 00       	jmp    c0107376 <page_insert+0xb7>
    }
    page_ref_inc(page);
c01072f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01072f5:	89 04 24             	mov    %eax,(%esp)
c01072f8:	e8 ff ef ff ff       	call   c01062fc <page_ref_inc>
    if (*ptep & PTE_P) {
c01072fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107300:	8b 00                	mov    (%eax),%eax
c0107302:	83 e0 01             	and    $0x1,%eax
c0107305:	85 c0                	test   %eax,%eax
c0107307:	74 3e                	je     c0107347 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0107309:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010730c:	8b 00                	mov    (%eax),%eax
c010730e:	89 04 24             	mov    %eax,(%esp)
c0107311:	e8 79 ef ff ff       	call   c010628f <pte2page>
c0107316:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0107319:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010731c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010731f:	75 0d                	jne    c010732e <page_insert+0x6f>
            page_ref_dec(page);
c0107321:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107324:	89 04 24             	mov    %eax,(%esp)
c0107327:	e8 e7 ef ff ff       	call   c0106313 <page_ref_dec>
c010732c:	eb 19                	jmp    c0107347 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c010732e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107331:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107335:	8b 45 10             	mov    0x10(%ebp),%eax
c0107338:	89 44 24 04          	mov    %eax,0x4(%esp)
c010733c:	8b 45 08             	mov    0x8(%ebp),%eax
c010733f:	89 04 24             	mov    %eax,(%esp)
c0107342:	e8 b0 fa ff ff       	call   c0106df7 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0107347:	8b 45 0c             	mov    0xc(%ebp),%eax
c010734a:	89 04 24             	mov    %eax,(%esp)
c010734d:	e8 8e ee ff ff       	call   c01061e0 <page2pa>
c0107352:	0b 45 14             	or     0x14(%ebp),%eax
c0107355:	83 c8 01             	or     $0x1,%eax
c0107358:	89 c2                	mov    %eax,%edx
c010735a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010735d:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c010735f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107362:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107366:	8b 45 08             	mov    0x8(%ebp),%eax
c0107369:	89 04 24             	mov    %eax,(%esp)
c010736c:	e8 07 00 00 00       	call   c0107378 <tlb_invalidate>
    return 0;
c0107371:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107376:	c9                   	leave  
c0107377:	c3                   	ret    

c0107378 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0107378:	55                   	push   %ebp
c0107379:	89 e5                	mov    %esp,%ebp
c010737b:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c010737e:	0f 20 d8             	mov    %cr3,%eax
c0107381:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0107384:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0107387:	89 c2                	mov    %eax,%edx
c0107389:	8b 45 08             	mov    0x8(%ebp),%eax
c010738c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010738f:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0107396:	77 23                	ja     c01073bb <tlb_invalidate+0x43>
c0107398:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010739b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010739f:	c7 44 24 08 f0 e3 10 	movl   $0xc010e3f0,0x8(%esp)
c01073a6:	c0 
c01073a7:	c7 44 24 04 58 02 00 	movl   $0x258,0x4(%esp)
c01073ae:	00 
c01073af:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01073b6:	e8 9d ae ff ff       	call   c0102258 <__panic>
c01073bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073be:	05 00 00 00 40       	add    $0x40000000,%eax
c01073c3:	39 c2                	cmp    %eax,%edx
c01073c5:	75 0c                	jne    c01073d3 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c01073c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01073ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c01073cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01073d0:	0f 01 38             	invlpg (%eax)
    }
}
c01073d3:	c9                   	leave  
c01073d4:	c3                   	ret    

c01073d5 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c01073d5:	55                   	push   %ebp
c01073d6:	89 e5                	mov    %esp,%ebp
c01073d8:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c01073db:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01073e2:	e8 03 f1 ff ff       	call   c01064ea <alloc_pages>
c01073e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c01073ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01073ee:	0f 84 b0 00 00 00    	je     c01074a4 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c01073f4:	8b 45 10             	mov    0x10(%ebp),%eax
c01073f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01073fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01073fe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107402:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107405:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107409:	8b 45 08             	mov    0x8(%ebp),%eax
c010740c:	89 04 24             	mov    %eax,(%esp)
c010740f:	e8 ab fe ff ff       	call   c01072bf <page_insert>
c0107414:	85 c0                	test   %eax,%eax
c0107416:	74 1a                	je     c0107432 <pgdir_alloc_page+0x5d>
            free_page(page);
c0107418:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010741f:	00 
c0107420:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107423:	89 04 24             	mov    %eax,(%esp)
c0107426:	e8 2a f1 ff ff       	call   c0106555 <free_pages>
            return NULL;
c010742b:	b8 00 00 00 00       	mov    $0x0,%eax
c0107430:	eb 75                	jmp    c01074a7 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0107432:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c0107437:	85 c0                	test   %eax,%eax
c0107439:	74 69                	je     c01074a4 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c010743b:	a1 ac 20 1a c0       	mov    0xc01a20ac,%eax
c0107440:	85 c0                	test   %eax,%eax
c0107442:	74 60                	je     c01074a4 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0107444:	a1 ac 20 1a c0       	mov    0xc01a20ac,%eax
c0107449:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107450:	00 
c0107451:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107454:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107458:	8b 55 0c             	mov    0xc(%ebp),%edx
c010745b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010745f:	89 04 24             	mov    %eax,(%esp)
c0107462:	e8 51 0e 00 00       	call   c01082b8 <swap_map_swappable>
                page->pra_vaddr=la;
c0107467:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010746a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010746d:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0107470:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107473:	89 04 24             	mov    %eax,(%esp)
c0107476:	e8 6a ee ff ff       	call   c01062e5 <page_ref>
c010747b:	83 f8 01             	cmp    $0x1,%eax
c010747e:	74 24                	je     c01074a4 <pgdir_alloc_page+0xcf>
c0107480:	c7 44 24 0c d5 e4 10 	movl   $0xc010e4d5,0xc(%esp)
c0107487:	c0 
c0107488:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c010748f:	c0 
c0107490:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c0107497:	00 
c0107498:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c010749f:	e8 b4 ad ff ff       	call   c0102258 <__panic>
            }
        }

    }

    return page;
c01074a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01074a7:	c9                   	leave  
c01074a8:	c3                   	ret    

c01074a9 <check_alloc_page>:

static void
check_alloc_page(void) {
c01074a9:	55                   	push   %ebp
c01074aa:	89 e5                	mov    %esp,%ebp
c01074ac:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c01074af:	a1 c4 1f 1a c0       	mov    0xc01a1fc4,%eax
c01074b4:	8b 40 18             	mov    0x18(%eax),%eax
c01074b7:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c01074b9:	c7 04 24 ec e4 10 c0 	movl   $0xc010e4ec,(%esp)
c01074c0:	e8 11 a3 ff ff       	call   c01017d6 <cprintf>
}
c01074c5:	c9                   	leave  
c01074c6:	c3                   	ret    

c01074c7 <check_pgdir>:

static void
check_pgdir(void) {
c01074c7:	55                   	push   %ebp
c01074c8:	89 e5                	mov    %esp,%ebp
c01074ca:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c01074cd:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c01074d2:	3d 00 80 03 00       	cmp    $0x38000,%eax
c01074d7:	76 24                	jbe    c01074fd <check_pgdir+0x36>
c01074d9:	c7 44 24 0c 0b e5 10 	movl   $0xc010e50b,0xc(%esp)
c01074e0:	c0 
c01074e1:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c01074e8:	c0 
c01074e9:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c01074f0:	00 
c01074f1:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01074f8:	e8 5b ad ff ff       	call   c0102258 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c01074fd:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107502:	85 c0                	test   %eax,%eax
c0107504:	74 0e                	je     c0107514 <check_pgdir+0x4d>
c0107506:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c010750b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107510:	85 c0                	test   %eax,%eax
c0107512:	74 24                	je     c0107538 <check_pgdir+0x71>
c0107514:	c7 44 24 0c 28 e5 10 	movl   $0xc010e528,0xc(%esp)
c010751b:	c0 
c010751c:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107523:	c0 
c0107524:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c010752b:	00 
c010752c:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107533:	e8 20 ad ff ff       	call   c0102258 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0107538:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c010753d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107544:	00 
c0107545:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010754c:	00 
c010754d:	89 04 24             	mov    %eax,(%esp)
c0107550:	e8 49 f8 ff ff       	call   c0106d9e <get_page>
c0107555:	85 c0                	test   %eax,%eax
c0107557:	74 24                	je     c010757d <check_pgdir+0xb6>
c0107559:	c7 44 24 0c 60 e5 10 	movl   $0xc010e560,0xc(%esp)
c0107560:	c0 
c0107561:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107568:	c0 
c0107569:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c0107570:	00 
c0107571:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107578:	e8 db ac ff ff       	call   c0102258 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c010757d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107584:	e8 61 ef ff ff       	call   c01064ea <alloc_pages>
c0107589:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c010758c:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107591:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107598:	00 
c0107599:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01075a0:	00 
c01075a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01075a4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01075a8:	89 04 24             	mov    %eax,(%esp)
c01075ab:	e8 0f fd ff ff       	call   c01072bf <page_insert>
c01075b0:	85 c0                	test   %eax,%eax
c01075b2:	74 24                	je     c01075d8 <check_pgdir+0x111>
c01075b4:	c7 44 24 0c 88 e5 10 	movl   $0xc010e588,0xc(%esp)
c01075bb:	c0 
c01075bc:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c01075c3:	c0 
c01075c4:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c01075cb:	00 
c01075cc:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01075d3:	e8 80 ac ff ff       	call   c0102258 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c01075d8:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c01075dd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01075e4:	00 
c01075e5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01075ec:	00 
c01075ed:	89 04 24             	mov    %eax,(%esp)
c01075f0:	e8 5c f6 ff ff       	call   c0106c51 <get_pte>
c01075f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01075f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01075fc:	75 24                	jne    c0107622 <check_pgdir+0x15b>
c01075fe:	c7 44 24 0c b4 e5 10 	movl   $0xc010e5b4,0xc(%esp)
c0107605:	c0 
c0107606:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c010760d:	c0 
c010760e:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c0107615:	00 
c0107616:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c010761d:	e8 36 ac ff ff       	call   c0102258 <__panic>
    assert(pte2page(*ptep) == p1);
c0107622:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107625:	8b 00                	mov    (%eax),%eax
c0107627:	89 04 24             	mov    %eax,(%esp)
c010762a:	e8 60 ec ff ff       	call   c010628f <pte2page>
c010762f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107632:	74 24                	je     c0107658 <check_pgdir+0x191>
c0107634:	c7 44 24 0c e1 e5 10 	movl   $0xc010e5e1,0xc(%esp)
c010763b:	c0 
c010763c:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107643:	c0 
c0107644:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c010764b:	00 
c010764c:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107653:	e8 00 ac ff ff       	call   c0102258 <__panic>
    assert(page_ref(p1) == 1);
c0107658:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010765b:	89 04 24             	mov    %eax,(%esp)
c010765e:	e8 82 ec ff ff       	call   c01062e5 <page_ref>
c0107663:	83 f8 01             	cmp    $0x1,%eax
c0107666:	74 24                	je     c010768c <check_pgdir+0x1c5>
c0107668:	c7 44 24 0c f7 e5 10 	movl   $0xc010e5f7,0xc(%esp)
c010766f:	c0 
c0107670:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107677:	c0 
c0107678:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c010767f:	00 
c0107680:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107687:	e8 cc ab ff ff       	call   c0102258 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c010768c:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107691:	8b 00                	mov    (%eax),%eax
c0107693:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107698:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010769b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010769e:	c1 e8 0c             	shr    $0xc,%eax
c01076a1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01076a4:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c01076a9:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01076ac:	72 23                	jb     c01076d1 <check_pgdir+0x20a>
c01076ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076b1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01076b5:	c7 44 24 08 4c e3 10 	movl   $0xc010e34c,0x8(%esp)
c01076bc:	c0 
c01076bd:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c01076c4:	00 
c01076c5:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01076cc:	e8 87 ab ff ff       	call   c0102258 <__panic>
c01076d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076d4:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01076d9:	83 c0 04             	add    $0x4,%eax
c01076dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01076df:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c01076e4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01076eb:	00 
c01076ec:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01076f3:	00 
c01076f4:	89 04 24             	mov    %eax,(%esp)
c01076f7:	e8 55 f5 ff ff       	call   c0106c51 <get_pte>
c01076fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01076ff:	74 24                	je     c0107725 <check_pgdir+0x25e>
c0107701:	c7 44 24 0c 0c e6 10 	movl   $0xc010e60c,0xc(%esp)
c0107708:	c0 
c0107709:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107710:	c0 
c0107711:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c0107718:	00 
c0107719:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107720:	e8 33 ab ff ff       	call   c0102258 <__panic>

    p2 = alloc_page();
c0107725:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010772c:	e8 b9 ed ff ff       	call   c01064ea <alloc_pages>
c0107731:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0107734:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107739:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0107740:	00 
c0107741:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0107748:	00 
c0107749:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010774c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107750:	89 04 24             	mov    %eax,(%esp)
c0107753:	e8 67 fb ff ff       	call   c01072bf <page_insert>
c0107758:	85 c0                	test   %eax,%eax
c010775a:	74 24                	je     c0107780 <check_pgdir+0x2b9>
c010775c:	c7 44 24 0c 34 e6 10 	movl   $0xc010e634,0xc(%esp)
c0107763:	c0 
c0107764:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c010776b:	c0 
c010776c:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c0107773:	00 
c0107774:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c010777b:	e8 d8 aa ff ff       	call   c0102258 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0107780:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107785:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010778c:	00 
c010778d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107794:	00 
c0107795:	89 04 24             	mov    %eax,(%esp)
c0107798:	e8 b4 f4 ff ff       	call   c0106c51 <get_pte>
c010779d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01077a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01077a4:	75 24                	jne    c01077ca <check_pgdir+0x303>
c01077a6:	c7 44 24 0c 6c e6 10 	movl   $0xc010e66c,0xc(%esp)
c01077ad:	c0 
c01077ae:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c01077b5:	c0 
c01077b6:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c01077bd:	00 
c01077be:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01077c5:	e8 8e aa ff ff       	call   c0102258 <__panic>
    assert(*ptep & PTE_U);
c01077ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01077cd:	8b 00                	mov    (%eax),%eax
c01077cf:	83 e0 04             	and    $0x4,%eax
c01077d2:	85 c0                	test   %eax,%eax
c01077d4:	75 24                	jne    c01077fa <check_pgdir+0x333>
c01077d6:	c7 44 24 0c 9c e6 10 	movl   $0xc010e69c,0xc(%esp)
c01077dd:	c0 
c01077de:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c01077e5:	c0 
c01077e6:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c01077ed:	00 
c01077ee:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01077f5:	e8 5e aa ff ff       	call   c0102258 <__panic>
    assert(*ptep & PTE_W);
c01077fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01077fd:	8b 00                	mov    (%eax),%eax
c01077ff:	83 e0 02             	and    $0x2,%eax
c0107802:	85 c0                	test   %eax,%eax
c0107804:	75 24                	jne    c010782a <check_pgdir+0x363>
c0107806:	c7 44 24 0c aa e6 10 	movl   $0xc010e6aa,0xc(%esp)
c010780d:	c0 
c010780e:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107815:	c0 
c0107816:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c010781d:	00 
c010781e:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107825:	e8 2e aa ff ff       	call   c0102258 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c010782a:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c010782f:	8b 00                	mov    (%eax),%eax
c0107831:	83 e0 04             	and    $0x4,%eax
c0107834:	85 c0                	test   %eax,%eax
c0107836:	75 24                	jne    c010785c <check_pgdir+0x395>
c0107838:	c7 44 24 0c b8 e6 10 	movl   $0xc010e6b8,0xc(%esp)
c010783f:	c0 
c0107840:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107847:	c0 
c0107848:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c010784f:	00 
c0107850:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107857:	e8 fc a9 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p2) == 1);
c010785c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010785f:	89 04 24             	mov    %eax,(%esp)
c0107862:	e8 7e ea ff ff       	call   c01062e5 <page_ref>
c0107867:	83 f8 01             	cmp    $0x1,%eax
c010786a:	74 24                	je     c0107890 <check_pgdir+0x3c9>
c010786c:	c7 44 24 0c ce e6 10 	movl   $0xc010e6ce,0xc(%esp)
c0107873:	c0 
c0107874:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c010787b:	c0 
c010787c:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c0107883:	00 
c0107884:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c010788b:	e8 c8 a9 ff ff       	call   c0102258 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0107890:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107895:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010789c:	00 
c010789d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01078a4:	00 
c01078a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01078a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01078ac:	89 04 24             	mov    %eax,(%esp)
c01078af:	e8 0b fa ff ff       	call   c01072bf <page_insert>
c01078b4:	85 c0                	test   %eax,%eax
c01078b6:	74 24                	je     c01078dc <check_pgdir+0x415>
c01078b8:	c7 44 24 0c e0 e6 10 	movl   $0xc010e6e0,0xc(%esp)
c01078bf:	c0 
c01078c0:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c01078c7:	c0 
c01078c8:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c01078cf:	00 
c01078d0:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01078d7:	e8 7c a9 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p1) == 2);
c01078dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078df:	89 04 24             	mov    %eax,(%esp)
c01078e2:	e8 fe e9 ff ff       	call   c01062e5 <page_ref>
c01078e7:	83 f8 02             	cmp    $0x2,%eax
c01078ea:	74 24                	je     c0107910 <check_pgdir+0x449>
c01078ec:	c7 44 24 0c 0c e7 10 	movl   $0xc010e70c,0xc(%esp)
c01078f3:	c0 
c01078f4:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c01078fb:	c0 
c01078fc:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c0107903:	00 
c0107904:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c010790b:	e8 48 a9 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p2) == 0);
c0107910:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107913:	89 04 24             	mov    %eax,(%esp)
c0107916:	e8 ca e9 ff ff       	call   c01062e5 <page_ref>
c010791b:	85 c0                	test   %eax,%eax
c010791d:	74 24                	je     c0107943 <check_pgdir+0x47c>
c010791f:	c7 44 24 0c 1e e7 10 	movl   $0xc010e71e,0xc(%esp)
c0107926:	c0 
c0107927:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c010792e:	c0 
c010792f:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c0107936:	00 
c0107937:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c010793e:	e8 15 a9 ff ff       	call   c0102258 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0107943:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107948:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010794f:	00 
c0107950:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107957:	00 
c0107958:	89 04 24             	mov    %eax,(%esp)
c010795b:	e8 f1 f2 ff ff       	call   c0106c51 <get_pte>
c0107960:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107963:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107967:	75 24                	jne    c010798d <check_pgdir+0x4c6>
c0107969:	c7 44 24 0c 6c e6 10 	movl   $0xc010e66c,0xc(%esp)
c0107970:	c0 
c0107971:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107978:	c0 
c0107979:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c0107980:	00 
c0107981:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107988:	e8 cb a8 ff ff       	call   c0102258 <__panic>
    assert(pte2page(*ptep) == p1);
c010798d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107990:	8b 00                	mov    (%eax),%eax
c0107992:	89 04 24             	mov    %eax,(%esp)
c0107995:	e8 f5 e8 ff ff       	call   c010628f <pte2page>
c010799a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010799d:	74 24                	je     c01079c3 <check_pgdir+0x4fc>
c010799f:	c7 44 24 0c e1 e5 10 	movl   $0xc010e5e1,0xc(%esp)
c01079a6:	c0 
c01079a7:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c01079ae:	c0 
c01079af:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c01079b6:	00 
c01079b7:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01079be:	e8 95 a8 ff ff       	call   c0102258 <__panic>
    assert((*ptep & PTE_U) == 0);
c01079c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01079c6:	8b 00                	mov    (%eax),%eax
c01079c8:	83 e0 04             	and    $0x4,%eax
c01079cb:	85 c0                	test   %eax,%eax
c01079cd:	74 24                	je     c01079f3 <check_pgdir+0x52c>
c01079cf:	c7 44 24 0c 30 e7 10 	movl   $0xc010e730,0xc(%esp)
c01079d6:	c0 
c01079d7:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c01079de:	c0 
c01079df:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c01079e6:	00 
c01079e7:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01079ee:	e8 65 a8 ff ff       	call   c0102258 <__panic>

    page_remove(boot_pgdir, 0x0);
c01079f3:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c01079f8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01079ff:	00 
c0107a00:	89 04 24             	mov    %eax,(%esp)
c0107a03:	e8 73 f8 ff ff       	call   c010727b <page_remove>
    assert(page_ref(p1) == 1);
c0107a08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a0b:	89 04 24             	mov    %eax,(%esp)
c0107a0e:	e8 d2 e8 ff ff       	call   c01062e5 <page_ref>
c0107a13:	83 f8 01             	cmp    $0x1,%eax
c0107a16:	74 24                	je     c0107a3c <check_pgdir+0x575>
c0107a18:	c7 44 24 0c f7 e5 10 	movl   $0xc010e5f7,0xc(%esp)
c0107a1f:	c0 
c0107a20:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107a27:	c0 
c0107a28:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c0107a2f:	00 
c0107a30:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107a37:	e8 1c a8 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p2) == 0);
c0107a3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107a3f:	89 04 24             	mov    %eax,(%esp)
c0107a42:	e8 9e e8 ff ff       	call   c01062e5 <page_ref>
c0107a47:	85 c0                	test   %eax,%eax
c0107a49:	74 24                	je     c0107a6f <check_pgdir+0x5a8>
c0107a4b:	c7 44 24 0c 1e e7 10 	movl   $0xc010e71e,0xc(%esp)
c0107a52:	c0 
c0107a53:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107a5a:	c0 
c0107a5b:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c0107a62:	00 
c0107a63:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107a6a:	e8 e9 a7 ff ff       	call   c0102258 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0107a6f:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107a74:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107a7b:	00 
c0107a7c:	89 04 24             	mov    %eax,(%esp)
c0107a7f:	e8 f7 f7 ff ff       	call   c010727b <page_remove>
    assert(page_ref(p1) == 0);
c0107a84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a87:	89 04 24             	mov    %eax,(%esp)
c0107a8a:	e8 56 e8 ff ff       	call   c01062e5 <page_ref>
c0107a8f:	85 c0                	test   %eax,%eax
c0107a91:	74 24                	je     c0107ab7 <check_pgdir+0x5f0>
c0107a93:	c7 44 24 0c 45 e7 10 	movl   $0xc010e745,0xc(%esp)
c0107a9a:	c0 
c0107a9b:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107aa2:	c0 
c0107aa3:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c0107aaa:	00 
c0107aab:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107ab2:	e8 a1 a7 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p2) == 0);
c0107ab7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107aba:	89 04 24             	mov    %eax,(%esp)
c0107abd:	e8 23 e8 ff ff       	call   c01062e5 <page_ref>
c0107ac2:	85 c0                	test   %eax,%eax
c0107ac4:	74 24                	je     c0107aea <check_pgdir+0x623>
c0107ac6:	c7 44 24 0c 1e e7 10 	movl   $0xc010e71e,0xc(%esp)
c0107acd:	c0 
c0107ace:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107ad5:	c0 
c0107ad6:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c0107add:	00 
c0107ade:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107ae5:	e8 6e a7 ff ff       	call   c0102258 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0107aea:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107aef:	8b 00                	mov    (%eax),%eax
c0107af1:	89 04 24             	mov    %eax,(%esp)
c0107af4:	e8 d4 e7 ff ff       	call   c01062cd <pde2page>
c0107af9:	89 04 24             	mov    %eax,(%esp)
c0107afc:	e8 e4 e7 ff ff       	call   c01062e5 <page_ref>
c0107b01:	83 f8 01             	cmp    $0x1,%eax
c0107b04:	74 24                	je     c0107b2a <check_pgdir+0x663>
c0107b06:	c7 44 24 0c 58 e7 10 	movl   $0xc010e758,0xc(%esp)
c0107b0d:	c0 
c0107b0e:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107b15:	c0 
c0107b16:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c0107b1d:	00 
c0107b1e:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107b25:	e8 2e a7 ff ff       	call   c0102258 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0107b2a:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107b2f:	8b 00                	mov    (%eax),%eax
c0107b31:	89 04 24             	mov    %eax,(%esp)
c0107b34:	e8 94 e7 ff ff       	call   c01062cd <pde2page>
c0107b39:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107b40:	00 
c0107b41:	89 04 24             	mov    %eax,(%esp)
c0107b44:	e8 0c ea ff ff       	call   c0106555 <free_pages>
    boot_pgdir[0] = 0;
c0107b49:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107b4e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0107b54:	c7 04 24 7f e7 10 c0 	movl   $0xc010e77f,(%esp)
c0107b5b:	e8 76 9c ff ff       	call   c01017d6 <cprintf>
}
c0107b60:	c9                   	leave  
c0107b61:	c3                   	ret    

c0107b62 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0107b62:	55                   	push   %ebp
c0107b63:	89 e5                	mov    %esp,%ebp
c0107b65:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0107b68:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107b6f:	e9 ca 00 00 00       	jmp    c0107c3e <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0107b74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b77:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107b7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b7d:	c1 e8 0c             	shr    $0xc,%eax
c0107b80:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b83:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c0107b88:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0107b8b:	72 23                	jb     c0107bb0 <check_boot_pgdir+0x4e>
c0107b8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b90:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107b94:	c7 44 24 08 4c e3 10 	movl   $0xc010e34c,0x8(%esp)
c0107b9b:	c0 
c0107b9c:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0107ba3:	00 
c0107ba4:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107bab:	e8 a8 a6 ff ff       	call   c0102258 <__panic>
c0107bb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bb3:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107bb8:	89 c2                	mov    %eax,%edx
c0107bba:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107bbf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107bc6:	00 
c0107bc7:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107bcb:	89 04 24             	mov    %eax,(%esp)
c0107bce:	e8 7e f0 ff ff       	call   c0106c51 <get_pte>
c0107bd3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107bd6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0107bda:	75 24                	jne    c0107c00 <check_boot_pgdir+0x9e>
c0107bdc:	c7 44 24 0c 9c e7 10 	movl   $0xc010e79c,0xc(%esp)
c0107be3:	c0 
c0107be4:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107beb:	c0 
c0107bec:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0107bf3:	00 
c0107bf4:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107bfb:	e8 58 a6 ff ff       	call   c0102258 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0107c00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c03:	8b 00                	mov    (%eax),%eax
c0107c05:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107c0a:	89 c2                	mov    %eax,%edx
c0107c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c0f:	39 c2                	cmp    %eax,%edx
c0107c11:	74 24                	je     c0107c37 <check_boot_pgdir+0xd5>
c0107c13:	c7 44 24 0c d9 e7 10 	movl   $0xc010e7d9,0xc(%esp)
c0107c1a:	c0 
c0107c1b:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107c22:	c0 
c0107c23:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
c0107c2a:	00 
c0107c2b:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107c32:	e8 21 a6 ff ff       	call   c0102258 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0107c37:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0107c3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107c41:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c0107c46:	39 c2                	cmp    %eax,%edx
c0107c48:	0f 82 26 ff ff ff    	jb     c0107b74 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0107c4e:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107c53:	05 ac 0f 00 00       	add    $0xfac,%eax
c0107c58:	8b 00                	mov    (%eax),%eax
c0107c5a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107c5f:	89 c2                	mov    %eax,%edx
c0107c61:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107c66:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107c69:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0107c70:	77 23                	ja     c0107c95 <check_boot_pgdir+0x133>
c0107c72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107c75:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107c79:	c7 44 24 08 f0 e3 10 	movl   $0xc010e3f0,0x8(%esp)
c0107c80:	c0 
c0107c81:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0107c88:	00 
c0107c89:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107c90:	e8 c3 a5 ff ff       	call   c0102258 <__panic>
c0107c95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107c98:	05 00 00 00 40       	add    $0x40000000,%eax
c0107c9d:	39 c2                	cmp    %eax,%edx
c0107c9f:	74 24                	je     c0107cc5 <check_boot_pgdir+0x163>
c0107ca1:	c7 44 24 0c f0 e7 10 	movl   $0xc010e7f0,0xc(%esp)
c0107ca8:	c0 
c0107ca9:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107cb0:	c0 
c0107cb1:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0107cb8:	00 
c0107cb9:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107cc0:	e8 93 a5 ff ff       	call   c0102258 <__panic>

    assert(boot_pgdir[0] == 0);
c0107cc5:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107cca:	8b 00                	mov    (%eax),%eax
c0107ccc:	85 c0                	test   %eax,%eax
c0107cce:	74 24                	je     c0107cf4 <check_boot_pgdir+0x192>
c0107cd0:	c7 44 24 0c 24 e8 10 	movl   $0xc010e824,0xc(%esp)
c0107cd7:	c0 
c0107cd8:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107cdf:	c0 
c0107ce0:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c0107ce7:	00 
c0107ce8:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107cef:	e8 64 a5 ff ff       	call   c0102258 <__panic>

    struct Page *p;
    p = alloc_page();
c0107cf4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107cfb:	e8 ea e7 ff ff       	call   c01064ea <alloc_pages>
c0107d00:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0107d03:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107d08:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0107d0f:	00 
c0107d10:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0107d17:	00 
c0107d18:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107d1b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107d1f:	89 04 24             	mov    %eax,(%esp)
c0107d22:	e8 98 f5 ff ff       	call   c01072bf <page_insert>
c0107d27:	85 c0                	test   %eax,%eax
c0107d29:	74 24                	je     c0107d4f <check_boot_pgdir+0x1ed>
c0107d2b:	c7 44 24 0c 38 e8 10 	movl   $0xc010e838,0xc(%esp)
c0107d32:	c0 
c0107d33:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107d3a:	c0 
c0107d3b:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c0107d42:	00 
c0107d43:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107d4a:	e8 09 a5 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p) == 1);
c0107d4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107d52:	89 04 24             	mov    %eax,(%esp)
c0107d55:	e8 8b e5 ff ff       	call   c01062e5 <page_ref>
c0107d5a:	83 f8 01             	cmp    $0x1,%eax
c0107d5d:	74 24                	je     c0107d83 <check_boot_pgdir+0x221>
c0107d5f:	c7 44 24 0c 66 e8 10 	movl   $0xc010e866,0xc(%esp)
c0107d66:	c0 
c0107d67:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107d6e:	c0 
c0107d6f:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c0107d76:	00 
c0107d77:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107d7e:	e8 d5 a4 ff ff       	call   c0102258 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0107d83:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107d88:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0107d8f:	00 
c0107d90:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0107d97:	00 
c0107d98:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107d9b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107d9f:	89 04 24             	mov    %eax,(%esp)
c0107da2:	e8 18 f5 ff ff       	call   c01072bf <page_insert>
c0107da7:	85 c0                	test   %eax,%eax
c0107da9:	74 24                	je     c0107dcf <check_boot_pgdir+0x26d>
c0107dab:	c7 44 24 0c 78 e8 10 	movl   $0xc010e878,0xc(%esp)
c0107db2:	c0 
c0107db3:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107dba:	c0 
c0107dbb:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c0107dc2:	00 
c0107dc3:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107dca:	e8 89 a4 ff ff       	call   c0102258 <__panic>
    assert(page_ref(p) == 2);
c0107dcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107dd2:	89 04 24             	mov    %eax,(%esp)
c0107dd5:	e8 0b e5 ff ff       	call   c01062e5 <page_ref>
c0107dda:	83 f8 02             	cmp    $0x2,%eax
c0107ddd:	74 24                	je     c0107e03 <check_boot_pgdir+0x2a1>
c0107ddf:	c7 44 24 0c af e8 10 	movl   $0xc010e8af,0xc(%esp)
c0107de6:	c0 
c0107de7:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107dee:	c0 
c0107def:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0107df6:	00 
c0107df7:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107dfe:	e8 55 a4 ff ff       	call   c0102258 <__panic>

    const char *str = "ucore: Hello world!!";
c0107e03:	c7 45 dc c0 e8 10 c0 	movl   $0xc010e8c0,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0107e0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107e0d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107e11:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0107e18:	e8 91 50 00 00       	call   c010ceae <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0107e1d:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0107e24:	00 
c0107e25:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0107e2c:	e8 f6 50 00 00       	call   c010cf27 <strcmp>
c0107e31:	85 c0                	test   %eax,%eax
c0107e33:	74 24                	je     c0107e59 <check_boot_pgdir+0x2f7>
c0107e35:	c7 44 24 0c d8 e8 10 	movl   $0xc010e8d8,0xc(%esp)
c0107e3c:	c0 
c0107e3d:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107e44:	c0 
c0107e45:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c0107e4c:	00 
c0107e4d:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107e54:	e8 ff a3 ff ff       	call   c0102258 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0107e59:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107e5c:	89 04 24             	mov    %eax,(%esp)
c0107e5f:	e8 d7 e3 ff ff       	call   c010623b <page2kva>
c0107e64:	05 00 01 00 00       	add    $0x100,%eax
c0107e69:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0107e6c:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0107e73:	e8 de 4f 00 00       	call   c010ce56 <strlen>
c0107e78:	85 c0                	test   %eax,%eax
c0107e7a:	74 24                	je     c0107ea0 <check_boot_pgdir+0x33e>
c0107e7c:	c7 44 24 0c 10 e9 10 	movl   $0xc010e910,0xc(%esp)
c0107e83:	c0 
c0107e84:	c7 44 24 08 39 e4 10 	movl   $0xc010e439,0x8(%esp)
c0107e8b:	c0 
c0107e8c:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c0107e93:	00 
c0107e94:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c0107e9b:	e8 b8 a3 ff ff       	call   c0102258 <__panic>

    free_page(p);
c0107ea0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107ea7:	00 
c0107ea8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107eab:	89 04 24             	mov    %eax,(%esp)
c0107eae:	e8 a2 e6 ff ff       	call   c0106555 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0107eb3:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107eb8:	8b 00                	mov    (%eax),%eax
c0107eba:	89 04 24             	mov    %eax,(%esp)
c0107ebd:	e8 0b e4 ff ff       	call   c01062cd <pde2page>
c0107ec2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107ec9:	00 
c0107eca:	89 04 24             	mov    %eax,(%esp)
c0107ecd:	e8 83 e6 ff ff       	call   c0106555 <free_pages>
    boot_pgdir[0] = 0;
c0107ed2:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c0107ed7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0107edd:	c7 04 24 34 e9 10 c0 	movl   $0xc010e934,(%esp)
c0107ee4:	e8 ed 98 ff ff       	call   c01017d6 <cprintf>
}
c0107ee9:	c9                   	leave  
c0107eea:	c3                   	ret    

c0107eeb <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0107eeb:	55                   	push   %ebp
c0107eec:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0107eee:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ef1:	83 e0 04             	and    $0x4,%eax
c0107ef4:	85 c0                	test   %eax,%eax
c0107ef6:	74 07                	je     c0107eff <perm2str+0x14>
c0107ef8:	b8 75 00 00 00       	mov    $0x75,%eax
c0107efd:	eb 05                	jmp    c0107f04 <perm2str+0x19>
c0107eff:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0107f04:	a2 68 ff 19 c0       	mov    %al,0xc019ff68
    str[1] = 'r';
c0107f09:	c6 05 69 ff 19 c0 72 	movb   $0x72,0xc019ff69
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0107f10:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f13:	83 e0 02             	and    $0x2,%eax
c0107f16:	85 c0                	test   %eax,%eax
c0107f18:	74 07                	je     c0107f21 <perm2str+0x36>
c0107f1a:	b8 77 00 00 00       	mov    $0x77,%eax
c0107f1f:	eb 05                	jmp    c0107f26 <perm2str+0x3b>
c0107f21:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0107f26:	a2 6a ff 19 c0       	mov    %al,0xc019ff6a
    str[3] = '\0';
c0107f2b:	c6 05 6b ff 19 c0 00 	movb   $0x0,0xc019ff6b
    return str;
c0107f32:	b8 68 ff 19 c0       	mov    $0xc019ff68,%eax
}
c0107f37:	5d                   	pop    %ebp
c0107f38:	c3                   	ret    

c0107f39 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0107f39:	55                   	push   %ebp
c0107f3a:	89 e5                	mov    %esp,%ebp
c0107f3c:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0107f3f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f42:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107f45:	72 0a                	jb     c0107f51 <get_pgtable_items+0x18>
        return 0;
c0107f47:	b8 00 00 00 00       	mov    $0x0,%eax
c0107f4c:	e9 9c 00 00 00       	jmp    c0107fed <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0107f51:	eb 04                	jmp    c0107f57 <get_pgtable_items+0x1e>
        start ++;
c0107f53:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0107f57:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f5a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107f5d:	73 18                	jae    c0107f77 <get_pgtable_items+0x3e>
c0107f5f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f62:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107f69:	8b 45 14             	mov    0x14(%ebp),%eax
c0107f6c:	01 d0                	add    %edx,%eax
c0107f6e:	8b 00                	mov    (%eax),%eax
c0107f70:	83 e0 01             	and    $0x1,%eax
c0107f73:	85 c0                	test   %eax,%eax
c0107f75:	74 dc                	je     c0107f53 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0107f77:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f7a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107f7d:	73 69                	jae    c0107fe8 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0107f7f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0107f83:	74 08                	je     c0107f8d <get_pgtable_items+0x54>
            *left_store = start;
c0107f85:	8b 45 18             	mov    0x18(%ebp),%eax
c0107f88:	8b 55 10             	mov    0x10(%ebp),%edx
c0107f8b:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0107f8d:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f90:	8d 50 01             	lea    0x1(%eax),%edx
c0107f93:	89 55 10             	mov    %edx,0x10(%ebp)
c0107f96:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107f9d:	8b 45 14             	mov    0x14(%ebp),%eax
c0107fa0:	01 d0                	add    %edx,%eax
c0107fa2:	8b 00                	mov    (%eax),%eax
c0107fa4:	83 e0 07             	and    $0x7,%eax
c0107fa7:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0107faa:	eb 04                	jmp    c0107fb0 <get_pgtable_items+0x77>
            start ++;
c0107fac:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0107fb0:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fb3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fb6:	73 1d                	jae    c0107fd5 <get_pgtable_items+0x9c>
c0107fb8:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fbb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107fc2:	8b 45 14             	mov    0x14(%ebp),%eax
c0107fc5:	01 d0                	add    %edx,%eax
c0107fc7:	8b 00                	mov    (%eax),%eax
c0107fc9:	83 e0 07             	and    $0x7,%eax
c0107fcc:	89 c2                	mov    %eax,%edx
c0107fce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107fd1:	39 c2                	cmp    %eax,%edx
c0107fd3:	74 d7                	je     c0107fac <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0107fd5:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0107fd9:	74 08                	je     c0107fe3 <get_pgtable_items+0xaa>
            *right_store = start;
c0107fdb:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0107fde:	8b 55 10             	mov    0x10(%ebp),%edx
c0107fe1:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0107fe3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107fe6:	eb 05                	jmp    c0107fed <get_pgtable_items+0xb4>
    }
    return 0;
c0107fe8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107fed:	c9                   	leave  
c0107fee:	c3                   	ret    

c0107fef <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0107fef:	55                   	push   %ebp
c0107ff0:	89 e5                	mov    %esp,%ebp
c0107ff2:	57                   	push   %edi
c0107ff3:	56                   	push   %esi
c0107ff4:	53                   	push   %ebx
c0107ff5:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0107ff8:	c7 04 24 54 e9 10 c0 	movl   $0xc010e954,(%esp)
c0107fff:	e8 d2 97 ff ff       	call   c01017d6 <cprintf>
    size_t left, right = 0, perm;
c0108004:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c010800b:	e9 fa 00 00 00       	jmp    c010810a <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108010:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108013:	89 04 24             	mov    %eax,(%esp)
c0108016:	e8 d0 fe ff ff       	call   c0107eeb <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c010801b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010801e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108021:	29 d1                	sub    %edx,%ecx
c0108023:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108025:	89 d6                	mov    %edx,%esi
c0108027:	c1 e6 16             	shl    $0x16,%esi
c010802a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010802d:	89 d3                	mov    %edx,%ebx
c010802f:	c1 e3 16             	shl    $0x16,%ebx
c0108032:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108035:	89 d1                	mov    %edx,%ecx
c0108037:	c1 e1 16             	shl    $0x16,%ecx
c010803a:	8b 7d dc             	mov    -0x24(%ebp),%edi
c010803d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108040:	29 d7                	sub    %edx,%edi
c0108042:	89 fa                	mov    %edi,%edx
c0108044:	89 44 24 14          	mov    %eax,0x14(%esp)
c0108048:	89 74 24 10          	mov    %esi,0x10(%esp)
c010804c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108050:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108054:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108058:	c7 04 24 85 e9 10 c0 	movl   $0xc010e985,(%esp)
c010805f:	e8 72 97 ff ff       	call   c01017d6 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0108064:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108067:	c1 e0 0a             	shl    $0xa,%eax
c010806a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c010806d:	eb 54                	jmp    c01080c3 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c010806f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108072:	89 04 24             	mov    %eax,(%esp)
c0108075:	e8 71 fe ff ff       	call   c0107eeb <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c010807a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010807d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108080:	29 d1                	sub    %edx,%ecx
c0108082:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108084:	89 d6                	mov    %edx,%esi
c0108086:	c1 e6 0c             	shl    $0xc,%esi
c0108089:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010808c:	89 d3                	mov    %edx,%ebx
c010808e:	c1 e3 0c             	shl    $0xc,%ebx
c0108091:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108094:	c1 e2 0c             	shl    $0xc,%edx
c0108097:	89 d1                	mov    %edx,%ecx
c0108099:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c010809c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010809f:	29 d7                	sub    %edx,%edi
c01080a1:	89 fa                	mov    %edi,%edx
c01080a3:	89 44 24 14          	mov    %eax,0x14(%esp)
c01080a7:	89 74 24 10          	mov    %esi,0x10(%esp)
c01080ab:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01080af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01080b3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01080b7:	c7 04 24 a4 e9 10 c0 	movl   $0xc010e9a4,(%esp)
c01080be:	e8 13 97 ff ff       	call   c01017d6 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01080c3:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c01080c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01080cb:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01080ce:	89 ce                	mov    %ecx,%esi
c01080d0:	c1 e6 0a             	shl    $0xa,%esi
c01080d3:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01080d6:	89 cb                	mov    %ecx,%ebx
c01080d8:	c1 e3 0a             	shl    $0xa,%ebx
c01080db:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c01080de:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c01080e2:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c01080e5:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01080e9:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01080ed:	89 44 24 08          	mov    %eax,0x8(%esp)
c01080f1:	89 74 24 04          	mov    %esi,0x4(%esp)
c01080f5:	89 1c 24             	mov    %ebx,(%esp)
c01080f8:	e8 3c fe ff ff       	call   c0107f39 <get_pgtable_items>
c01080fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108100:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108104:	0f 85 65 ff ff ff    	jne    c010806f <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c010810a:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c010810f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108112:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0108115:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0108119:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c010811c:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0108120:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108124:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108128:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c010812f:	00 
c0108130:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108137:	e8 fd fd ff ff       	call   c0107f39 <get_pgtable_items>
c010813c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010813f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108143:	0f 85 c7 fe ff ff    	jne    c0108010 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0108149:	c7 04 24 c8 e9 10 c0 	movl   $0xc010e9c8,(%esp)
c0108150:	e8 81 96 ff ff       	call   c01017d6 <cprintf>
}
c0108155:	83 c4 4c             	add    $0x4c,%esp
c0108158:	5b                   	pop    %ebx
c0108159:	5e                   	pop    %esi
c010815a:	5f                   	pop    %edi
c010815b:	5d                   	pop    %ebp
c010815c:	c3                   	ret    

c010815d <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c010815d:	55                   	push   %ebp
c010815e:	89 e5                	mov    %esp,%ebp
c0108160:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0108163:	8b 45 08             	mov    0x8(%ebp),%eax
c0108166:	c1 e8 0c             	shr    $0xc,%eax
c0108169:	89 c2                	mov    %eax,%edx
c010816b:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c0108170:	39 c2                	cmp    %eax,%edx
c0108172:	72 1c                	jb     c0108190 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0108174:	c7 44 24 08 fc e9 10 	movl   $0xc010e9fc,0x8(%esp)
c010817b:	c0 
c010817c:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0108183:	00 
c0108184:	c7 04 24 1b ea 10 c0 	movl   $0xc010ea1b,(%esp)
c010818b:	e8 c8 a0 ff ff       	call   c0102258 <__panic>
    }
    return &pages[PPN(pa)];
c0108190:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c0108195:	8b 55 08             	mov    0x8(%ebp),%edx
c0108198:	c1 ea 0c             	shr    $0xc,%edx
c010819b:	c1 e2 05             	shl    $0x5,%edx
c010819e:	01 d0                	add    %edx,%eax
}
c01081a0:	c9                   	leave  
c01081a1:	c3                   	ret    

c01081a2 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c01081a2:	55                   	push   %ebp
c01081a3:	89 e5                	mov    %esp,%ebp
c01081a5:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c01081a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01081ab:	83 e0 01             	and    $0x1,%eax
c01081ae:	85 c0                	test   %eax,%eax
c01081b0:	75 1c                	jne    c01081ce <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c01081b2:	c7 44 24 08 2c ea 10 	movl   $0xc010ea2c,0x8(%esp)
c01081b9:	c0 
c01081ba:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01081c1:	00 
c01081c2:	c7 04 24 1b ea 10 c0 	movl   $0xc010ea1b,(%esp)
c01081c9:	e8 8a a0 ff ff       	call   c0102258 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01081ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01081d1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01081d6:	89 04 24             	mov    %eax,(%esp)
c01081d9:	e8 7f ff ff ff       	call   c010815d <pa2page>
}
c01081de:	c9                   	leave  
c01081df:	c3                   	ret    

c01081e0 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c01081e0:	55                   	push   %ebp
c01081e1:	89 e5                	mov    %esp,%ebp
c01081e3:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c01081e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01081e9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01081ee:	89 04 24             	mov    %eax,(%esp)
c01081f1:	e8 67 ff ff ff       	call   c010815d <pa2page>
}
c01081f6:	c9                   	leave  
c01081f7:	c3                   	ret    

c01081f8 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c01081f8:	55                   	push   %ebp
c01081f9:	89 e5                	mov    %esp,%ebp
c01081fb:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c01081fe:	e8 04 24 00 00       	call   c010a607 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0108203:	a1 7c 20 1a c0       	mov    0xc01a207c,%eax
c0108208:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c010820d:	76 0c                	jbe    c010821b <swap_init+0x23>
c010820f:	a1 7c 20 1a c0       	mov    0xc01a207c,%eax
c0108214:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0108219:	76 25                	jbe    c0108240 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c010821b:	a1 7c 20 1a c0       	mov    0xc01a207c,%eax
c0108220:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108224:	c7 44 24 08 4d ea 10 	movl   $0xc010ea4d,0x8(%esp)
c010822b:	c0 
c010822c:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0108233:	00 
c0108234:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c010823b:	e8 18 a0 ff ff       	call   c0102258 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0108240:	c7 05 74 ff 19 c0 60 	movl   $0xc012da60,0xc019ff74
c0108247:	da 12 c0 
     int r = sm->init();
c010824a:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c010824f:	8b 40 04             	mov    0x4(%eax),%eax
c0108252:	ff d0                	call   *%eax
c0108254:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0108257:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010825b:	75 26                	jne    c0108283 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c010825d:	c7 05 6c ff 19 c0 01 	movl   $0x1,0xc019ff6c
c0108264:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0108267:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c010826c:	8b 00                	mov    (%eax),%eax
c010826e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108272:	c7 04 24 77 ea 10 c0 	movl   $0xc010ea77,(%esp)
c0108279:	e8 58 95 ff ff       	call   c01017d6 <cprintf>
          check_swap();
c010827e:	e8 a4 04 00 00       	call   c0108727 <check_swap>
     }

     return r;
c0108283:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108286:	c9                   	leave  
c0108287:	c3                   	ret    

c0108288 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0108288:	55                   	push   %ebp
c0108289:	89 e5                	mov    %esp,%ebp
c010828b:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c010828e:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0108293:	8b 40 08             	mov    0x8(%eax),%eax
c0108296:	8b 55 08             	mov    0x8(%ebp),%edx
c0108299:	89 14 24             	mov    %edx,(%esp)
c010829c:	ff d0                	call   *%eax
}
c010829e:	c9                   	leave  
c010829f:	c3                   	ret    

c01082a0 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c01082a0:	55                   	push   %ebp
c01082a1:	89 e5                	mov    %esp,%ebp
c01082a3:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c01082a6:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c01082ab:	8b 40 0c             	mov    0xc(%eax),%eax
c01082ae:	8b 55 08             	mov    0x8(%ebp),%edx
c01082b1:	89 14 24             	mov    %edx,(%esp)
c01082b4:	ff d0                	call   *%eax
}
c01082b6:	c9                   	leave  
c01082b7:	c3                   	ret    

c01082b8 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01082b8:	55                   	push   %ebp
c01082b9:	89 e5                	mov    %esp,%ebp
c01082bb:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c01082be:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c01082c3:	8b 40 10             	mov    0x10(%eax),%eax
c01082c6:	8b 55 14             	mov    0x14(%ebp),%edx
c01082c9:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01082cd:	8b 55 10             	mov    0x10(%ebp),%edx
c01082d0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01082d4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01082d7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01082db:	8b 55 08             	mov    0x8(%ebp),%edx
c01082de:	89 14 24             	mov    %edx,(%esp)
c01082e1:	ff d0                	call   *%eax
}
c01082e3:	c9                   	leave  
c01082e4:	c3                   	ret    

c01082e5 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c01082e5:	55                   	push   %ebp
c01082e6:	89 e5                	mov    %esp,%ebp
c01082e8:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c01082eb:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c01082f0:	8b 40 14             	mov    0x14(%eax),%eax
c01082f3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01082f6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01082fa:	8b 55 08             	mov    0x8(%ebp),%edx
c01082fd:	89 14 24             	mov    %edx,(%esp)
c0108300:	ff d0                	call   *%eax
}
c0108302:	c9                   	leave  
c0108303:	c3                   	ret    

c0108304 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0108304:	55                   	push   %ebp
c0108305:	89 e5                	mov    %esp,%ebp
c0108307:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c010830a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108311:	e9 5a 01 00 00       	jmp    c0108470 <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0108316:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c010831b:	8b 40 18             	mov    0x18(%eax),%eax
c010831e:	8b 55 10             	mov    0x10(%ebp),%edx
c0108321:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108325:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0108328:	89 54 24 04          	mov    %edx,0x4(%esp)
c010832c:	8b 55 08             	mov    0x8(%ebp),%edx
c010832f:	89 14 24             	mov    %edx,(%esp)
c0108332:	ff d0                	call   *%eax
c0108334:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0108337:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010833b:	74 18                	je     c0108355 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c010833d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108340:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108344:	c7 04 24 8c ea 10 c0 	movl   $0xc010ea8c,(%esp)
c010834b:	e8 86 94 ff ff       	call   c01017d6 <cprintf>
c0108350:	e9 27 01 00 00       	jmp    c010847c <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0108355:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108358:	8b 40 1c             	mov    0x1c(%eax),%eax
c010835b:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c010835e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108361:	8b 40 0c             	mov    0xc(%eax),%eax
c0108364:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010836b:	00 
c010836c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010836f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108373:	89 04 24             	mov    %eax,(%esp)
c0108376:	e8 d6 e8 ff ff       	call   c0106c51 <get_pte>
c010837b:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c010837e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108381:	8b 00                	mov    (%eax),%eax
c0108383:	83 e0 01             	and    $0x1,%eax
c0108386:	85 c0                	test   %eax,%eax
c0108388:	75 24                	jne    c01083ae <swap_out+0xaa>
c010838a:	c7 44 24 0c b9 ea 10 	movl   $0xc010eab9,0xc(%esp)
c0108391:	c0 
c0108392:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108399:	c0 
c010839a:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c01083a1:	00 
c01083a2:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c01083a9:	e8 aa 9e ff ff       	call   c0102258 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c01083ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01083b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01083b4:	8b 52 1c             	mov    0x1c(%edx),%edx
c01083b7:	c1 ea 0c             	shr    $0xc,%edx
c01083ba:	83 c2 01             	add    $0x1,%edx
c01083bd:	c1 e2 08             	shl    $0x8,%edx
c01083c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083c4:	89 14 24             	mov    %edx,(%esp)
c01083c7:	e8 f5 22 00 00       	call   c010a6c1 <swapfs_write>
c01083cc:	85 c0                	test   %eax,%eax
c01083ce:	74 34                	je     c0108404 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c01083d0:	c7 04 24 e3 ea 10 c0 	movl   $0xc010eae3,(%esp)
c01083d7:	e8 fa 93 ff ff       	call   c01017d6 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c01083dc:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c01083e1:	8b 40 10             	mov    0x10(%eax),%eax
c01083e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01083e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01083ee:	00 
c01083ef:	89 54 24 08          	mov    %edx,0x8(%esp)
c01083f3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01083f6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01083fa:	8b 55 08             	mov    0x8(%ebp),%edx
c01083fd:	89 14 24             	mov    %edx,(%esp)
c0108400:	ff d0                	call   *%eax
c0108402:	eb 68                	jmp    c010846c <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0108404:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108407:	8b 40 1c             	mov    0x1c(%eax),%eax
c010840a:	c1 e8 0c             	shr    $0xc,%eax
c010840d:	83 c0 01             	add    $0x1,%eax
c0108410:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108414:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108417:	89 44 24 08          	mov    %eax,0x8(%esp)
c010841b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010841e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108422:	c7 04 24 fc ea 10 c0 	movl   $0xc010eafc,(%esp)
c0108429:	e8 a8 93 ff ff       	call   c01017d6 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c010842e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108431:	8b 40 1c             	mov    0x1c(%eax),%eax
c0108434:	c1 e8 0c             	shr    $0xc,%eax
c0108437:	83 c0 01             	add    $0x1,%eax
c010843a:	c1 e0 08             	shl    $0x8,%eax
c010843d:	89 c2                	mov    %eax,%edx
c010843f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108442:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0108444:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108447:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010844e:	00 
c010844f:	89 04 24             	mov    %eax,(%esp)
c0108452:	e8 fe e0 ff ff       	call   c0106555 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0108457:	8b 45 08             	mov    0x8(%ebp),%eax
c010845a:	8b 40 0c             	mov    0xc(%eax),%eax
c010845d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108460:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108464:	89 04 24             	mov    %eax,(%esp)
c0108467:	e8 0c ef ff ff       	call   c0107378 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c010846c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108470:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108473:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108476:	0f 85 9a fe ff ff    	jne    c0108316 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c010847c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010847f:	c9                   	leave  
c0108480:	c3                   	ret    

c0108481 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0108481:	55                   	push   %ebp
c0108482:	89 e5                	mov    %esp,%ebp
c0108484:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0108487:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010848e:	e8 57 e0 ff ff       	call   c01064ea <alloc_pages>
c0108493:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0108496:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010849a:	75 24                	jne    c01084c0 <swap_in+0x3f>
c010849c:	c7 44 24 0c 3c eb 10 	movl   $0xc010eb3c,0xc(%esp)
c01084a3:	c0 
c01084a4:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c01084ab:	c0 
c01084ac:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01084b3:	00 
c01084b4:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c01084bb:	e8 98 9d ff ff       	call   c0102258 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c01084c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01084c3:	8b 40 0c             	mov    0xc(%eax),%eax
c01084c6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01084cd:	00 
c01084ce:	8b 55 0c             	mov    0xc(%ebp),%edx
c01084d1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084d5:	89 04 24             	mov    %eax,(%esp)
c01084d8:	e8 74 e7 ff ff       	call   c0106c51 <get_pte>
c01084dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01084e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084e3:	8b 00                	mov    (%eax),%eax
c01084e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01084e8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084ec:	89 04 24             	mov    %eax,(%esp)
c01084ef:	e8 5b 21 00 00       	call   c010a64f <swapfs_read>
c01084f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01084f7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01084fb:	74 2a                	je     c0108527 <swap_in+0xa6>
     {
        assert(r!=0);
c01084fd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108501:	75 24                	jne    c0108527 <swap_in+0xa6>
c0108503:	c7 44 24 0c 49 eb 10 	movl   $0xc010eb49,0xc(%esp)
c010850a:	c0 
c010850b:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108512:	c0 
c0108513:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c010851a:	00 
c010851b:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108522:	e8 31 9d ff ff       	call   c0102258 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0108527:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010852a:	8b 00                	mov    (%eax),%eax
c010852c:	c1 e8 08             	shr    $0x8,%eax
c010852f:	89 c2                	mov    %eax,%edx
c0108531:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108534:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108538:	89 54 24 04          	mov    %edx,0x4(%esp)
c010853c:	c7 04 24 50 eb 10 c0 	movl   $0xc010eb50,(%esp)
c0108543:	e8 8e 92 ff ff       	call   c01017d6 <cprintf>
     *ptr_result=result;
c0108548:	8b 45 10             	mov    0x10(%ebp),%eax
c010854b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010854e:	89 10                	mov    %edx,(%eax)
     return 0;
c0108550:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108555:	c9                   	leave  
c0108556:	c3                   	ret    

c0108557 <check_content_set>:



static inline void
check_content_set(void)
{
c0108557:	55                   	push   %ebp
c0108558:	89 e5                	mov    %esp,%ebp
c010855a:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c010855d:	b8 00 10 00 00       	mov    $0x1000,%eax
c0108562:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0108565:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c010856a:	83 f8 01             	cmp    $0x1,%eax
c010856d:	74 24                	je     c0108593 <check_content_set+0x3c>
c010856f:	c7 44 24 0c 8e eb 10 	movl   $0xc010eb8e,0xc(%esp)
c0108576:	c0 
c0108577:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c010857e:	c0 
c010857f:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0108586:	00 
c0108587:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c010858e:	e8 c5 9c ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0108593:	b8 10 10 00 00       	mov    $0x1010,%eax
c0108598:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010859b:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c01085a0:	83 f8 01             	cmp    $0x1,%eax
c01085a3:	74 24                	je     c01085c9 <check_content_set+0x72>
c01085a5:	c7 44 24 0c 8e eb 10 	movl   $0xc010eb8e,0xc(%esp)
c01085ac:	c0 
c01085ad:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c01085b4:	c0 
c01085b5:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01085bc:	00 
c01085bd:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c01085c4:	e8 8f 9c ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01085c9:	b8 00 20 00 00       	mov    $0x2000,%eax
c01085ce:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01085d1:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c01085d6:	83 f8 02             	cmp    $0x2,%eax
c01085d9:	74 24                	je     c01085ff <check_content_set+0xa8>
c01085db:	c7 44 24 0c 9d eb 10 	movl   $0xc010eb9d,0xc(%esp)
c01085e2:	c0 
c01085e3:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c01085ea:	c0 
c01085eb:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c01085f2:	00 
c01085f3:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c01085fa:	e8 59 9c ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01085ff:	b8 10 20 00 00       	mov    $0x2010,%eax
c0108604:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0108607:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c010860c:	83 f8 02             	cmp    $0x2,%eax
c010860f:	74 24                	je     c0108635 <check_content_set+0xde>
c0108611:	c7 44 24 0c 9d eb 10 	movl   $0xc010eb9d,0xc(%esp)
c0108618:	c0 
c0108619:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108620:	c0 
c0108621:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0108628:	00 
c0108629:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108630:	e8 23 9c ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0108635:	b8 00 30 00 00       	mov    $0x3000,%eax
c010863a:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010863d:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c0108642:	83 f8 03             	cmp    $0x3,%eax
c0108645:	74 24                	je     c010866b <check_content_set+0x114>
c0108647:	c7 44 24 0c ac eb 10 	movl   $0xc010ebac,0xc(%esp)
c010864e:	c0 
c010864f:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108656:	c0 
c0108657:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010865e:	00 
c010865f:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108666:	e8 ed 9b ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c010866b:	b8 10 30 00 00       	mov    $0x3010,%eax
c0108670:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0108673:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c0108678:	83 f8 03             	cmp    $0x3,%eax
c010867b:	74 24                	je     c01086a1 <check_content_set+0x14a>
c010867d:	c7 44 24 0c ac eb 10 	movl   $0xc010ebac,0xc(%esp)
c0108684:	c0 
c0108685:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c010868c:	c0 
c010868d:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0108694:	00 
c0108695:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c010869c:	e8 b7 9b ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01086a1:	b8 00 40 00 00       	mov    $0x4000,%eax
c01086a6:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01086a9:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c01086ae:	83 f8 04             	cmp    $0x4,%eax
c01086b1:	74 24                	je     c01086d7 <check_content_set+0x180>
c01086b3:	c7 44 24 0c bb eb 10 	movl   $0xc010ebbb,0xc(%esp)
c01086ba:	c0 
c01086bb:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c01086c2:	c0 
c01086c3:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c01086ca:	00 
c01086cb:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c01086d2:	e8 81 9b ff ff       	call   c0102258 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c01086d7:	b8 10 40 00 00       	mov    $0x4010,%eax
c01086dc:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01086df:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c01086e4:	83 f8 04             	cmp    $0x4,%eax
c01086e7:	74 24                	je     c010870d <check_content_set+0x1b6>
c01086e9:	c7 44 24 0c bb eb 10 	movl   $0xc010ebbb,0xc(%esp)
c01086f0:	c0 
c01086f1:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c01086f8:	c0 
c01086f9:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0108700:	00 
c0108701:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108708:	e8 4b 9b ff ff       	call   c0102258 <__panic>
}
c010870d:	c9                   	leave  
c010870e:	c3                   	ret    

c010870f <check_content_access>:

static inline int
check_content_access(void)
{
c010870f:	55                   	push   %ebp
c0108710:	89 e5                	mov    %esp,%ebp
c0108712:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0108715:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c010871a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010871d:	ff d0                	call   *%eax
c010871f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0108722:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108725:	c9                   	leave  
c0108726:	c3                   	ret    

c0108727 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0108727:	55                   	push   %ebp
c0108728:	89 e5                	mov    %esp,%ebp
c010872a:	53                   	push   %ebx
c010872b:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c010872e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108735:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c010873c:	c7 45 e8 b8 1f 1a c0 	movl   $0xc01a1fb8,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0108743:	eb 6b                	jmp    c01087b0 <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0108745:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108748:	83 e8 0c             	sub    $0xc,%eax
c010874b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c010874e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108751:	83 c0 04             	add    $0x4,%eax
c0108754:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c010875b:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010875e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0108761:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0108764:	0f a3 10             	bt     %edx,(%eax)
c0108767:	19 c0                	sbb    %eax,%eax
c0108769:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c010876c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108770:	0f 95 c0             	setne  %al
c0108773:	0f b6 c0             	movzbl %al,%eax
c0108776:	85 c0                	test   %eax,%eax
c0108778:	75 24                	jne    c010879e <check_swap+0x77>
c010877a:	c7 44 24 0c ca eb 10 	movl   $0xc010ebca,0xc(%esp)
c0108781:	c0 
c0108782:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108789:	c0 
c010878a:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0108791:	00 
c0108792:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108799:	e8 ba 9a ff ff       	call   c0102258 <__panic>
        count ++, total += p->property;
c010879e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01087a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01087a5:	8b 50 08             	mov    0x8(%eax),%edx
c01087a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01087ab:	01 d0                	add    %edx,%eax
c01087ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01087b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087b3:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01087b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01087b9:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01087bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01087bf:	81 7d e8 b8 1f 1a c0 	cmpl   $0xc01a1fb8,-0x18(%ebp)
c01087c6:	0f 85 79 ff ff ff    	jne    c0108745 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c01087cc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01087cf:	e8 b3 dd ff ff       	call   c0106587 <nr_free_pages>
c01087d4:	39 c3                	cmp    %eax,%ebx
c01087d6:	74 24                	je     c01087fc <check_swap+0xd5>
c01087d8:	c7 44 24 0c da eb 10 	movl   $0xc010ebda,0xc(%esp)
c01087df:	c0 
c01087e0:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c01087e7:	c0 
c01087e8:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01087ef:	00 
c01087f0:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c01087f7:	e8 5c 9a ff ff       	call   c0102258 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c01087fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01087ff:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108803:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108806:	89 44 24 04          	mov    %eax,0x4(%esp)
c010880a:	c7 04 24 f4 eb 10 c0 	movl   $0xc010ebf4,(%esp)
c0108811:	e8 c0 8f ff ff       	call   c01017d6 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0108816:	e8 6e 0b 00 00       	call   c0109389 <mm_create>
c010881b:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c010881e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108822:	75 24                	jne    c0108848 <check_swap+0x121>
c0108824:	c7 44 24 0c 1a ec 10 	movl   $0xc010ec1a,0xc(%esp)
c010882b:	c0 
c010882c:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108833:	c0 
c0108834:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c010883b:	00 
c010883c:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108843:	e8 10 9a ff ff       	call   c0102258 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0108848:	a1 ac 20 1a c0       	mov    0xc01a20ac,%eax
c010884d:	85 c0                	test   %eax,%eax
c010884f:	74 24                	je     c0108875 <check_swap+0x14e>
c0108851:	c7 44 24 0c 25 ec 10 	movl   $0xc010ec25,0xc(%esp)
c0108858:	c0 
c0108859:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108860:	c0 
c0108861:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0108868:	00 
c0108869:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108870:	e8 e3 99 ff ff       	call   c0102258 <__panic>

     check_mm_struct = mm;
c0108875:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108878:	a3 ac 20 1a c0       	mov    %eax,0xc01a20ac

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c010887d:	8b 15 e4 fe 19 c0    	mov    0xc019fee4,%edx
c0108883:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108886:	89 50 0c             	mov    %edx,0xc(%eax)
c0108889:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010888c:	8b 40 0c             	mov    0xc(%eax),%eax
c010888f:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c0108892:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108895:	8b 00                	mov    (%eax),%eax
c0108897:	85 c0                	test   %eax,%eax
c0108899:	74 24                	je     c01088bf <check_swap+0x198>
c010889b:	c7 44 24 0c 3d ec 10 	movl   $0xc010ec3d,0xc(%esp)
c01088a2:	c0 
c01088a3:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c01088aa:	c0 
c01088ab:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01088b2:	00 
c01088b3:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c01088ba:	e8 99 99 ff ff       	call   c0102258 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c01088bf:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c01088c6:	00 
c01088c7:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c01088ce:	00 
c01088cf:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01088d6:	e8 47 0b 00 00       	call   c0109422 <vma_create>
c01088db:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01088de:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01088e2:	75 24                	jne    c0108908 <check_swap+0x1e1>
c01088e4:	c7 44 24 0c 4b ec 10 	movl   $0xc010ec4b,0xc(%esp)
c01088eb:	c0 
c01088ec:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c01088f3:	c0 
c01088f4:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c01088fb:	00 
c01088fc:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108903:	e8 50 99 ff ff       	call   c0102258 <__panic>

     insert_vma_struct(mm, vma);
c0108908:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010890b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010890f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108912:	89 04 24             	mov    %eax,(%esp)
c0108915:	e8 98 0c 00 00       	call   c01095b2 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c010891a:	c7 04 24 58 ec 10 c0 	movl   $0xc010ec58,(%esp)
c0108921:	e8 b0 8e ff ff       	call   c01017d6 <cprintf>
     pte_t *temp_ptep=NULL;
c0108926:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c010892d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108930:	8b 40 0c             	mov    0xc(%eax),%eax
c0108933:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010893a:	00 
c010893b:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0108942:	00 
c0108943:	89 04 24             	mov    %eax,(%esp)
c0108946:	e8 06 e3 ff ff       	call   c0106c51 <get_pte>
c010894b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c010894e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0108952:	75 24                	jne    c0108978 <check_swap+0x251>
c0108954:	c7 44 24 0c 8c ec 10 	movl   $0xc010ec8c,0xc(%esp)
c010895b:	c0 
c010895c:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108963:	c0 
c0108964:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010896b:	00 
c010896c:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108973:	e8 e0 98 ff ff       	call   c0102258 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0108978:	c7 04 24 a0 ec 10 c0 	movl   $0xc010eca0,(%esp)
c010897f:	e8 52 8e ff ff       	call   c01017d6 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108984:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010898b:	e9 a3 00 00 00       	jmp    c0108a33 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c0108990:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108997:	e8 4e db ff ff       	call   c01064ea <alloc_pages>
c010899c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010899f:	89 04 95 e0 1f 1a c0 	mov    %eax,-0x3fe5e020(,%edx,4)
          assert(check_rp[i] != NULL );
c01089a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01089a9:	8b 04 85 e0 1f 1a c0 	mov    -0x3fe5e020(,%eax,4),%eax
c01089b0:	85 c0                	test   %eax,%eax
c01089b2:	75 24                	jne    c01089d8 <check_swap+0x2b1>
c01089b4:	c7 44 24 0c c4 ec 10 	movl   $0xc010ecc4,0xc(%esp)
c01089bb:	c0 
c01089bc:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c01089c3:	c0 
c01089c4:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01089cb:	00 
c01089cc:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c01089d3:	e8 80 98 ff ff       	call   c0102258 <__panic>
          assert(!PageProperty(check_rp[i]));
c01089d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01089db:	8b 04 85 e0 1f 1a c0 	mov    -0x3fe5e020(,%eax,4),%eax
c01089e2:	83 c0 04             	add    $0x4,%eax
c01089e5:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c01089ec:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01089ef:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01089f2:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01089f5:	0f a3 10             	bt     %edx,(%eax)
c01089f8:	19 c0                	sbb    %eax,%eax
c01089fa:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c01089fd:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0108a01:	0f 95 c0             	setne  %al
c0108a04:	0f b6 c0             	movzbl %al,%eax
c0108a07:	85 c0                	test   %eax,%eax
c0108a09:	74 24                	je     c0108a2f <check_swap+0x308>
c0108a0b:	c7 44 24 0c d8 ec 10 	movl   $0xc010ecd8,0xc(%esp)
c0108a12:	c0 
c0108a13:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108a1a:	c0 
c0108a1b:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0108a22:	00 
c0108a23:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108a2a:	e8 29 98 ff ff       	call   c0102258 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108a2f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108a33:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108a37:	0f 8e 53 ff ff ff    	jle    c0108990 <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0108a3d:	a1 b8 1f 1a c0       	mov    0xc01a1fb8,%eax
c0108a42:	8b 15 bc 1f 1a c0    	mov    0xc01a1fbc,%edx
c0108a48:	89 45 98             	mov    %eax,-0x68(%ebp)
c0108a4b:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0108a4e:	c7 45 a8 b8 1f 1a c0 	movl   $0xc01a1fb8,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108a55:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0108a58:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0108a5b:	89 50 04             	mov    %edx,0x4(%eax)
c0108a5e:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0108a61:	8b 50 04             	mov    0x4(%eax),%edx
c0108a64:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0108a67:	89 10                	mov    %edx,(%eax)
c0108a69:	c7 45 a4 b8 1f 1a c0 	movl   $0xc01a1fb8,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0108a70:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0108a73:	8b 40 04             	mov    0x4(%eax),%eax
c0108a76:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0108a79:	0f 94 c0             	sete   %al
c0108a7c:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0108a7f:	85 c0                	test   %eax,%eax
c0108a81:	75 24                	jne    c0108aa7 <check_swap+0x380>
c0108a83:	c7 44 24 0c f3 ec 10 	movl   $0xc010ecf3,0xc(%esp)
c0108a8a:	c0 
c0108a8b:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108a92:	c0 
c0108a93:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0108a9a:	00 
c0108a9b:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108aa2:	e8 b1 97 ff ff       	call   c0102258 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0108aa7:	a1 c0 1f 1a c0       	mov    0xc01a1fc0,%eax
c0108aac:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c0108aaf:	c7 05 c0 1f 1a c0 00 	movl   $0x0,0xc01a1fc0
c0108ab6:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108ab9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108ac0:	eb 1e                	jmp    c0108ae0 <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0108ac2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ac5:	8b 04 85 e0 1f 1a c0 	mov    -0x3fe5e020(,%eax,4),%eax
c0108acc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108ad3:	00 
c0108ad4:	89 04 24             	mov    %eax,(%esp)
c0108ad7:	e8 79 da ff ff       	call   c0106555 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108adc:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108ae0:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108ae4:	7e dc                	jle    c0108ac2 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0108ae6:	a1 c0 1f 1a c0       	mov    0xc01a1fc0,%eax
c0108aeb:	83 f8 04             	cmp    $0x4,%eax
c0108aee:	74 24                	je     c0108b14 <check_swap+0x3ed>
c0108af0:	c7 44 24 0c 0c ed 10 	movl   $0xc010ed0c,0xc(%esp)
c0108af7:	c0 
c0108af8:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108aff:	c0 
c0108b00:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0108b07:	00 
c0108b08:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108b0f:	e8 44 97 ff ff       	call   c0102258 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0108b14:	c7 04 24 30 ed 10 c0 	movl   $0xc010ed30,(%esp)
c0108b1b:	e8 b6 8c ff ff       	call   c01017d6 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0108b20:	c7 05 78 ff 19 c0 00 	movl   $0x0,0xc019ff78
c0108b27:	00 00 00 
     
     check_content_set();
c0108b2a:	e8 28 fa ff ff       	call   c0108557 <check_content_set>
     assert( nr_free == 0);         
c0108b2f:	a1 c0 1f 1a c0       	mov    0xc01a1fc0,%eax
c0108b34:	85 c0                	test   %eax,%eax
c0108b36:	74 24                	je     c0108b5c <check_swap+0x435>
c0108b38:	c7 44 24 0c 57 ed 10 	movl   $0xc010ed57,0xc(%esp)
c0108b3f:	c0 
c0108b40:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108b47:	c0 
c0108b48:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0108b4f:	00 
c0108b50:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108b57:	e8 fc 96 ff ff       	call   c0102258 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0108b5c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108b63:	eb 26                	jmp    c0108b8b <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0108b65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108b68:	c7 04 85 00 20 1a c0 	movl   $0xffffffff,-0x3fe5e000(,%eax,4)
c0108b6f:	ff ff ff ff 
c0108b73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108b76:	8b 14 85 00 20 1a c0 	mov    -0x3fe5e000(,%eax,4),%edx
c0108b7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108b80:	89 14 85 40 20 1a c0 	mov    %edx,-0x3fe5dfc0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0108b87:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108b8b:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0108b8f:	7e d4                	jle    c0108b65 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108b91:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108b98:	e9 eb 00 00 00       	jmp    c0108c88 <check_swap+0x561>
         check_ptep[i]=0;
c0108b9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ba0:	c7 04 85 94 20 1a c0 	movl   $0x0,-0x3fe5df6c(,%eax,4)
c0108ba7:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0108bab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108bae:	83 c0 01             	add    $0x1,%eax
c0108bb1:	c1 e0 0c             	shl    $0xc,%eax
c0108bb4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108bbb:	00 
c0108bbc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bc0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108bc3:	89 04 24             	mov    %eax,(%esp)
c0108bc6:	e8 86 e0 ff ff       	call   c0106c51 <get_pte>
c0108bcb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108bce:	89 04 95 94 20 1a c0 	mov    %eax,-0x3fe5df6c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0108bd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108bd8:	8b 04 85 94 20 1a c0 	mov    -0x3fe5df6c(,%eax,4),%eax
c0108bdf:	85 c0                	test   %eax,%eax
c0108be1:	75 24                	jne    c0108c07 <check_swap+0x4e0>
c0108be3:	c7 44 24 0c 64 ed 10 	movl   $0xc010ed64,0xc(%esp)
c0108bea:	c0 
c0108beb:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108bf2:	c0 
c0108bf3:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0108bfa:	00 
c0108bfb:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108c02:	e8 51 96 ff ff       	call   c0102258 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0108c07:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c0a:	8b 04 85 94 20 1a c0 	mov    -0x3fe5df6c(,%eax,4),%eax
c0108c11:	8b 00                	mov    (%eax),%eax
c0108c13:	89 04 24             	mov    %eax,(%esp)
c0108c16:	e8 87 f5 ff ff       	call   c01081a2 <pte2page>
c0108c1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108c1e:	8b 14 95 e0 1f 1a c0 	mov    -0x3fe5e020(,%edx,4),%edx
c0108c25:	39 d0                	cmp    %edx,%eax
c0108c27:	74 24                	je     c0108c4d <check_swap+0x526>
c0108c29:	c7 44 24 0c 7c ed 10 	movl   $0xc010ed7c,0xc(%esp)
c0108c30:	c0 
c0108c31:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108c38:	c0 
c0108c39:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0108c40:	00 
c0108c41:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108c48:	e8 0b 96 ff ff       	call   c0102258 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0108c4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c50:	8b 04 85 94 20 1a c0 	mov    -0x3fe5df6c(,%eax,4),%eax
c0108c57:	8b 00                	mov    (%eax),%eax
c0108c59:	83 e0 01             	and    $0x1,%eax
c0108c5c:	85 c0                	test   %eax,%eax
c0108c5e:	75 24                	jne    c0108c84 <check_swap+0x55d>
c0108c60:	c7 44 24 0c a4 ed 10 	movl   $0xc010eda4,0xc(%esp)
c0108c67:	c0 
c0108c68:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108c6f:	c0 
c0108c70:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0108c77:	00 
c0108c78:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108c7f:	e8 d4 95 ff ff       	call   c0102258 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108c84:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108c88:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108c8c:	0f 8e 0b ff ff ff    	jle    c0108b9d <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0108c92:	c7 04 24 c0 ed 10 c0 	movl   $0xc010edc0,(%esp)
c0108c99:	e8 38 8b ff ff       	call   c01017d6 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0108c9e:	e8 6c fa ff ff       	call   c010870f <check_content_access>
c0108ca3:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c0108ca6:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108caa:	74 24                	je     c0108cd0 <check_swap+0x5a9>
c0108cac:	c7 44 24 0c e6 ed 10 	movl   $0xc010ede6,0xc(%esp)
c0108cb3:	c0 
c0108cb4:	c7 44 24 08 ce ea 10 	movl   $0xc010eace,0x8(%esp)
c0108cbb:	c0 
c0108cbc:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0108cc3:	00 
c0108cc4:	c7 04 24 68 ea 10 c0 	movl   $0xc010ea68,(%esp)
c0108ccb:	e8 88 95 ff ff       	call   c0102258 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108cd0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0108cd7:	eb 1e                	jmp    c0108cf7 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0108cd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108cdc:	8b 04 85 e0 1f 1a c0 	mov    -0x3fe5e020(,%eax,4),%eax
c0108ce3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108cea:	00 
c0108ceb:	89 04 24             	mov    %eax,(%esp)
c0108cee:	e8 62 d8 ff ff       	call   c0106555 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0108cf3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0108cf7:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0108cfb:	7e dc                	jle    c0108cd9 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0108cfd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d00:	8b 00                	mov    (%eax),%eax
c0108d02:	89 04 24             	mov    %eax,(%esp)
c0108d05:	e8 d6 f4 ff ff       	call   c01081e0 <pde2page>
c0108d0a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108d11:	00 
c0108d12:	89 04 24             	mov    %eax,(%esp)
c0108d15:	e8 3b d8 ff ff       	call   c0106555 <free_pages>
     pgdir[0] = 0;
c0108d1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d1d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0108d23:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108d26:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0108d2d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108d30:	89 04 24             	mov    %eax,(%esp)
c0108d33:	e8 aa 09 00 00       	call   c01096e2 <mm_destroy>
     check_mm_struct = NULL;
c0108d38:	c7 05 ac 20 1a c0 00 	movl   $0x0,0xc01a20ac
c0108d3f:	00 00 00 
     
     nr_free = nr_free_store;
c0108d42:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108d45:	a3 c0 1f 1a c0       	mov    %eax,0xc01a1fc0
     free_list = free_list_store;
c0108d4a:	8b 45 98             	mov    -0x68(%ebp),%eax
c0108d4d:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0108d50:	a3 b8 1f 1a c0       	mov    %eax,0xc01a1fb8
c0108d55:	89 15 bc 1f 1a c0    	mov    %edx,0xc01a1fbc

     
     le = &free_list;
c0108d5b:	c7 45 e8 b8 1f 1a c0 	movl   $0xc01a1fb8,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0108d62:	eb 1d                	jmp    c0108d81 <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0108d64:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d67:	83 e8 0c             	sub    $0xc,%eax
c0108d6a:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0108d6d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108d71:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108d74:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108d77:	8b 40 08             	mov    0x8(%eax),%eax
c0108d7a:	29 c2                	sub    %eax,%edx
c0108d7c:	89 d0                	mov    %edx,%eax
c0108d7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108d81:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d84:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108d87:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0108d8a:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0108d8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108d90:	81 7d e8 b8 1f 1a c0 	cmpl   $0xc01a1fb8,-0x18(%ebp)
c0108d97:	75 cb                	jne    c0108d64 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0108d99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108d9c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108da0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108da3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108da7:	c7 04 24 ed ed 10 c0 	movl   $0xc010eded,(%esp)
c0108dae:	e8 23 8a ff ff       	call   c01017d6 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0108db3:	c7 04 24 07 ee 10 c0 	movl   $0xc010ee07,(%esp)
c0108dba:	e8 17 8a ff ff       	call   c01017d6 <cprintf>
}
c0108dbf:	83 c4 74             	add    $0x74,%esp
c0108dc2:	5b                   	pop    %ebx
c0108dc3:	5d                   	pop    %ebp
c0108dc4:	c3                   	ret    

c0108dc5 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0108dc5:	55                   	push   %ebp
c0108dc6:	89 e5                	mov    %esp,%ebp
c0108dc8:	83 ec 10             	sub    $0x10,%esp
c0108dcb:	c7 45 fc a4 20 1a c0 	movl   $0xc01a20a4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108dd2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108dd5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108dd8:	89 50 04             	mov    %edx,0x4(%eax)
c0108ddb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108dde:	8b 50 04             	mov    0x4(%eax),%edx
c0108de1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108de4:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0108de6:	8b 45 08             	mov    0x8(%ebp),%eax
c0108de9:	c7 40 14 a4 20 1a c0 	movl   $0xc01a20a4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0108df0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108df5:	c9                   	leave  
c0108df6:	c3                   	ret    

c0108df7 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0108df7:	55                   	push   %ebp
c0108df8:	89 e5                	mov    %esp,%ebp
c0108dfa:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0108dfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e00:	8b 40 14             	mov    0x14(%eax),%eax
c0108e03:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0108e06:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e09:	83 c0 14             	add    $0x14,%eax
c0108e0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0108e0f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108e13:	74 06                	je     c0108e1b <_fifo_map_swappable+0x24>
c0108e15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108e19:	75 24                	jne    c0108e3f <_fifo_map_swappable+0x48>
c0108e1b:	c7 44 24 0c 20 ee 10 	movl   $0xc010ee20,0xc(%esp)
c0108e22:	c0 
c0108e23:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0108e2a:	c0 
c0108e2b:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0108e32:	00 
c0108e33:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c0108e3a:	e8 19 94 ff ff       	call   c0102258 <__panic>
c0108e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e42:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108e45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e48:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0108e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e4e:	8b 00                	mov    (%eax),%eax
c0108e50:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108e53:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0108e56:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108e59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e5c:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108e5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108e62:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108e65:	89 10                	mov    %edx,(%eax)
c0108e67:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108e6a:	8b 10                	mov    (%eax),%edx
c0108e6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108e6f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108e72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e75:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108e78:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108e7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e7e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108e81:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: 2012012617*/
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
	list_add_before(head, entry);
	return 0;
c0108e83:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108e88:	c9                   	leave  
c0108e89:	c3                   	ret    

c0108e8a <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0108e8a:	55                   	push   %ebp
c0108e8b:	89 e5                	mov    %esp,%ebp
c0108e8d:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0108e90:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e93:	8b 40 14             	mov    0x14(%eax),%eax
c0108e96:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0108e99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108e9d:	75 24                	jne    c0108ec3 <_fifo_swap_out_victim+0x39>
c0108e9f:	c7 44 24 0c 67 ee 10 	movl   $0xc010ee67,0xc(%esp)
c0108ea6:	c0 
c0108ea7:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0108eae:	c0 
c0108eaf:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0108eb6:	00 
c0108eb7:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c0108ebe:	e8 95 93 ff ff       	call   c0102258 <__panic>
     assert(in_tick==0);
c0108ec3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108ec7:	74 24                	je     c0108eed <_fifo_swap_out_victim+0x63>
c0108ec9:	c7 44 24 0c 74 ee 10 	movl   $0xc010ee74,0xc(%esp)
c0108ed0:	c0 
c0108ed1:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0108ed8:	c0 
c0108ed9:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0108ee0:	00 
c0108ee1:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c0108ee8:	e8 6b 93 ff ff       	call   c0102258 <__panic>
c0108eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ef0:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ef6:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: 2012012617*/
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     list_entry_t *le = list_next(head);
c0108ef9:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0108efc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108eff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108f02:	75 24                	jne    c0108f28 <_fifo_swap_out_victim+0x9e>
c0108f04:	c7 44 24 0c 7f ee 10 	movl   $0xc010ee7f,0xc(%esp)
c0108f0b:	c0 
c0108f0c:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0108f13:	c0 
c0108f14:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c0108f1b:	00 
c0108f1c:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c0108f23:	e8 30 93 ff ff       	call   c0102258 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0108f28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108f2b:	83 e8 14             	sub    $0x14,%eax
c0108f2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108f31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108f34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0108f37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f3a:	8b 40 04             	mov    0x4(%eax),%eax
c0108f3d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108f40:	8b 12                	mov    (%edx),%edx
c0108f42:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0108f45:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108f48:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108f4b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108f4e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108f51:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108f54:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108f57:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0108f59:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108f5d:	75 24                	jne    c0108f83 <_fifo_swap_out_victim+0xf9>
c0108f5f:	c7 44 24 0c 88 ee 10 	movl   $0xc010ee88,0xc(%esp)
c0108f66:	c0 
c0108f67:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0108f6e:	c0 
c0108f6f:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
c0108f76:	00 
c0108f77:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c0108f7e:	e8 d5 92 ff ff       	call   c0102258 <__panic>
     *ptr_page = p;
c0108f83:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108f86:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108f89:	89 10                	mov    %edx,(%eax)
     return 0;
c0108f8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108f90:	c9                   	leave  
c0108f91:	c3                   	ret    

c0108f92 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0108f92:	55                   	push   %ebp
c0108f93:	89 e5                	mov    %esp,%ebp
c0108f95:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0108f98:	c7 04 24 94 ee 10 c0 	movl   $0xc010ee94,(%esp)
c0108f9f:	e8 32 88 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0108fa4:	b8 00 30 00 00       	mov    $0x3000,%eax
c0108fa9:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0108fac:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c0108fb1:	83 f8 04             	cmp    $0x4,%eax
c0108fb4:	74 24                	je     c0108fda <_fifo_check_swap+0x48>
c0108fb6:	c7 44 24 0c ba ee 10 	movl   $0xc010eeba,0xc(%esp)
c0108fbd:	c0 
c0108fbe:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0108fc5:	c0 
c0108fc6:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0108fcd:	00 
c0108fce:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c0108fd5:	e8 7e 92 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0108fda:	c7 04 24 cc ee 10 c0 	movl   $0xc010eecc,(%esp)
c0108fe1:	e8 f0 87 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0108fe6:	b8 00 10 00 00       	mov    $0x1000,%eax
c0108feb:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0108fee:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c0108ff3:	83 f8 04             	cmp    $0x4,%eax
c0108ff6:	74 24                	je     c010901c <_fifo_check_swap+0x8a>
c0108ff8:	c7 44 24 0c ba ee 10 	movl   $0xc010eeba,0xc(%esp)
c0108fff:	c0 
c0109000:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0109007:	c0 
c0109008:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c010900f:	00 
c0109010:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c0109017:	e8 3c 92 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c010901c:	c7 04 24 f4 ee 10 c0 	movl   $0xc010eef4,(%esp)
c0109023:	e8 ae 87 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0109028:	b8 00 40 00 00       	mov    $0x4000,%eax
c010902d:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0109030:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c0109035:	83 f8 04             	cmp    $0x4,%eax
c0109038:	74 24                	je     c010905e <_fifo_check_swap+0xcc>
c010903a:	c7 44 24 0c ba ee 10 	movl   $0xc010eeba,0xc(%esp)
c0109041:	c0 
c0109042:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0109049:	c0 
c010904a:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0109051:	00 
c0109052:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c0109059:	e8 fa 91 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010905e:	c7 04 24 1c ef 10 c0 	movl   $0xc010ef1c,(%esp)
c0109065:	e8 6c 87 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010906a:	b8 00 20 00 00       	mov    $0x2000,%eax
c010906f:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0109072:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c0109077:	83 f8 04             	cmp    $0x4,%eax
c010907a:	74 24                	je     c01090a0 <_fifo_check_swap+0x10e>
c010907c:	c7 44 24 0c ba ee 10 	movl   $0xc010eeba,0xc(%esp)
c0109083:	c0 
c0109084:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c010908b:	c0 
c010908c:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0109093:	00 
c0109094:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c010909b:	e8 b8 91 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c01090a0:	c7 04 24 44 ef 10 c0 	movl   $0xc010ef44,(%esp)
c01090a7:	e8 2a 87 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c01090ac:	b8 00 50 00 00       	mov    $0x5000,%eax
c01090b1:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c01090b4:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c01090b9:	83 f8 05             	cmp    $0x5,%eax
c01090bc:	74 24                	je     c01090e2 <_fifo_check_swap+0x150>
c01090be:	c7 44 24 0c 6a ef 10 	movl   $0xc010ef6a,0xc(%esp)
c01090c5:	c0 
c01090c6:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c01090cd:	c0 
c01090ce:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c01090d5:	00 
c01090d6:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c01090dd:	e8 76 91 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01090e2:	c7 04 24 1c ef 10 c0 	movl   $0xc010ef1c,(%esp)
c01090e9:	e8 e8 86 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c01090ee:	b8 00 20 00 00       	mov    $0x2000,%eax
c01090f3:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c01090f6:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c01090fb:	83 f8 05             	cmp    $0x5,%eax
c01090fe:	74 24                	je     c0109124 <_fifo_check_swap+0x192>
c0109100:	c7 44 24 0c 6a ef 10 	movl   $0xc010ef6a,0xc(%esp)
c0109107:	c0 
c0109108:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c010910f:	c0 
c0109110:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0109117:	00 
c0109118:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c010911f:	e8 34 91 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0109124:	c7 04 24 cc ee 10 c0 	movl   $0xc010eecc,(%esp)
c010912b:	e8 a6 86 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0109130:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109135:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0109138:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c010913d:	83 f8 06             	cmp    $0x6,%eax
c0109140:	74 24                	je     c0109166 <_fifo_check_swap+0x1d4>
c0109142:	c7 44 24 0c 79 ef 10 	movl   $0xc010ef79,0xc(%esp)
c0109149:	c0 
c010914a:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0109151:	c0 
c0109152:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0109159:	00 
c010915a:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c0109161:	e8 f2 90 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0109166:	c7 04 24 1c ef 10 c0 	movl   $0xc010ef1c,(%esp)
c010916d:	e8 64 86 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0109172:	b8 00 20 00 00       	mov    $0x2000,%eax
c0109177:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c010917a:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c010917f:	83 f8 07             	cmp    $0x7,%eax
c0109182:	74 24                	je     c01091a8 <_fifo_check_swap+0x216>
c0109184:	c7 44 24 0c 88 ef 10 	movl   $0xc010ef88,0xc(%esp)
c010918b:	c0 
c010918c:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0109193:	c0 
c0109194:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c010919b:	00 
c010919c:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c01091a3:	e8 b0 90 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c01091a8:	c7 04 24 94 ee 10 c0 	movl   $0xc010ee94,(%esp)
c01091af:	e8 22 86 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c01091b4:	b8 00 30 00 00       	mov    $0x3000,%eax
c01091b9:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c01091bc:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c01091c1:	83 f8 08             	cmp    $0x8,%eax
c01091c4:	74 24                	je     c01091ea <_fifo_check_swap+0x258>
c01091c6:	c7 44 24 0c 97 ef 10 	movl   $0xc010ef97,0xc(%esp)
c01091cd:	c0 
c01091ce:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c01091d5:	c0 
c01091d6:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c01091dd:	00 
c01091de:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c01091e5:	e8 6e 90 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c01091ea:	c7 04 24 f4 ee 10 c0 	movl   $0xc010eef4,(%esp)
c01091f1:	e8 e0 85 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c01091f6:	b8 00 40 00 00       	mov    $0x4000,%eax
c01091fb:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c01091fe:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c0109203:	83 f8 09             	cmp    $0x9,%eax
c0109206:	74 24                	je     c010922c <_fifo_check_swap+0x29a>
c0109208:	c7 44 24 0c a6 ef 10 	movl   $0xc010efa6,0xc(%esp)
c010920f:	c0 
c0109210:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0109217:	c0 
c0109218:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c010921f:	00 
c0109220:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c0109227:	e8 2c 90 ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c010922c:	c7 04 24 44 ef 10 c0 	movl   $0xc010ef44,(%esp)
c0109233:	e8 9e 85 ff ff       	call   c01017d6 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0109238:	b8 00 50 00 00       	mov    $0x5000,%eax
c010923d:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0109240:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c0109245:	83 f8 0a             	cmp    $0xa,%eax
c0109248:	74 24                	je     c010926e <_fifo_check_swap+0x2dc>
c010924a:	c7 44 24 0c b5 ef 10 	movl   $0xc010efb5,0xc(%esp)
c0109251:	c0 
c0109252:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0109259:	c0 
c010925a:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c0109261:	00 
c0109262:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c0109269:	e8 ea 8f ff ff       	call   c0102258 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c010926e:	c7 04 24 cc ee 10 c0 	movl   $0xc010eecc,(%esp)
c0109275:	e8 5c 85 ff ff       	call   c01017d6 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c010927a:	b8 00 10 00 00       	mov    $0x1000,%eax
c010927f:	0f b6 00             	movzbl (%eax),%eax
c0109282:	3c 0a                	cmp    $0xa,%al
c0109284:	74 24                	je     c01092aa <_fifo_check_swap+0x318>
c0109286:	c7 44 24 0c c8 ef 10 	movl   $0xc010efc8,0xc(%esp)
c010928d:	c0 
c010928e:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c0109295:	c0 
c0109296:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010929d:	00 
c010929e:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c01092a5:	e8 ae 8f ff ff       	call   c0102258 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c01092aa:	b8 00 10 00 00       	mov    $0x1000,%eax
c01092af:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c01092b2:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c01092b7:	83 f8 0b             	cmp    $0xb,%eax
c01092ba:	74 24                	je     c01092e0 <_fifo_check_swap+0x34e>
c01092bc:	c7 44 24 0c e9 ef 10 	movl   $0xc010efe9,0xc(%esp)
c01092c3:	c0 
c01092c4:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c01092cb:	c0 
c01092cc:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c01092d3:	00 
c01092d4:	c7 04 24 53 ee 10 c0 	movl   $0xc010ee53,(%esp)
c01092db:	e8 78 8f ff ff       	call   c0102258 <__panic>
    return 0;
c01092e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01092e5:	c9                   	leave  
c01092e6:	c3                   	ret    

c01092e7 <_fifo_init>:


static int
_fifo_init(void)
{
c01092e7:	55                   	push   %ebp
c01092e8:	89 e5                	mov    %esp,%ebp
    return 0;
c01092ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01092ef:	5d                   	pop    %ebp
c01092f0:	c3                   	ret    

c01092f1 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c01092f1:	55                   	push   %ebp
c01092f2:	89 e5                	mov    %esp,%ebp
    return 0;
c01092f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01092f9:	5d                   	pop    %ebp
c01092fa:	c3                   	ret    

c01092fb <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c01092fb:	55                   	push   %ebp
c01092fc:	89 e5                	mov    %esp,%ebp
c01092fe:	b8 00 00 00 00       	mov    $0x0,%eax
c0109303:	5d                   	pop    %ebp
c0109304:	c3                   	ret    

c0109305 <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c0109305:	55                   	push   %ebp
c0109306:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c0109308:	8b 45 08             	mov    0x8(%ebp),%eax
c010930b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0109311:	5d                   	pop    %ebp
c0109312:	c3                   	ret    

c0109313 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0109313:	55                   	push   %ebp
c0109314:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0109316:	8b 45 08             	mov    0x8(%ebp),%eax
c0109319:	8b 40 18             	mov    0x18(%eax),%eax
}
c010931c:	5d                   	pop    %ebp
c010931d:	c3                   	ret    

c010931e <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c010931e:	55                   	push   %ebp
c010931f:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0109321:	8b 45 08             	mov    0x8(%ebp),%eax
c0109324:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109327:	89 50 18             	mov    %edx,0x18(%eax)
}
c010932a:	5d                   	pop    %ebp
c010932b:	c3                   	ret    

c010932c <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c010932c:	55                   	push   %ebp
c010932d:	89 e5                	mov    %esp,%ebp
c010932f:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0109332:	8b 45 08             	mov    0x8(%ebp),%eax
c0109335:	c1 e8 0c             	shr    $0xc,%eax
c0109338:	89 c2                	mov    %eax,%edx
c010933a:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c010933f:	39 c2                	cmp    %eax,%edx
c0109341:	72 1c                	jb     c010935f <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0109343:	c7 44 24 08 0c f0 10 	movl   $0xc010f00c,0x8(%esp)
c010934a:	c0 
c010934b:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0109352:	00 
c0109353:	c7 04 24 2b f0 10 c0 	movl   $0xc010f02b,(%esp)
c010935a:	e8 f9 8e ff ff       	call   c0102258 <__panic>
    }
    return &pages[PPN(pa)];
c010935f:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c0109364:	8b 55 08             	mov    0x8(%ebp),%edx
c0109367:	c1 ea 0c             	shr    $0xc,%edx
c010936a:	c1 e2 05             	shl    $0x5,%edx
c010936d:	01 d0                	add    %edx,%eax
}
c010936f:	c9                   	leave  
c0109370:	c3                   	ret    

c0109371 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0109371:	55                   	push   %ebp
c0109372:	89 e5                	mov    %esp,%ebp
c0109374:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0109377:	8b 45 08             	mov    0x8(%ebp),%eax
c010937a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010937f:	89 04 24             	mov    %eax,(%esp)
c0109382:	e8 a5 ff ff ff       	call   c010932c <pa2page>
}
c0109387:	c9                   	leave  
c0109388:	c3                   	ret    

c0109389 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0109389:	55                   	push   %ebp
c010938a:	89 e5                	mov    %esp,%ebp
c010938c:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c010938f:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0109396:	e8 da cc ff ff       	call   c0106075 <kmalloc>
c010939b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c010939e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01093a2:	74 79                	je     c010941d <mm_create+0x94>
        list_init(&(mm->mmap_list));
c01093a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01093aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01093b0:	89 50 04             	mov    %edx,0x4(%eax)
c01093b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093b6:	8b 50 04             	mov    0x4(%eax),%edx
c01093b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093bc:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c01093be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093c1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c01093c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093cb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c01093d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093d5:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c01093dc:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c01093e1:	85 c0                	test   %eax,%eax
c01093e3:	74 0d                	je     c01093f2 <mm_create+0x69>
c01093e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093e8:	89 04 24             	mov    %eax,(%esp)
c01093eb:	e8 98 ee ff ff       	call   c0108288 <swap_init_mm>
c01093f0:	eb 0a                	jmp    c01093fc <mm_create+0x73>
        else mm->sm_priv = NULL;
c01093f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093f5:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c01093fc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109403:	00 
c0109404:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109407:	89 04 24             	mov    %eax,(%esp)
c010940a:	e8 0f ff ff ff       	call   c010931e <set_mm_count>
        lock_init(&(mm->mm_lock));
c010940f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109412:	83 c0 1c             	add    $0x1c,%eax
c0109415:	89 04 24             	mov    %eax,(%esp)
c0109418:	e8 e8 fe ff ff       	call   c0109305 <lock_init>
    }    
    return mm;
c010941d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109420:	c9                   	leave  
c0109421:	c3                   	ret    

c0109422 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0109422:	55                   	push   %ebp
c0109423:	89 e5                	mov    %esp,%ebp
c0109425:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0109428:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010942f:	e8 41 cc ff ff       	call   c0106075 <kmalloc>
c0109434:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0109437:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010943b:	74 1b                	je     c0109458 <vma_create+0x36>
        vma->vm_start = vm_start;
c010943d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109440:	8b 55 08             	mov    0x8(%ebp),%edx
c0109443:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0109446:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109449:	8b 55 0c             	mov    0xc(%ebp),%edx
c010944c:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c010944f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109452:	8b 55 10             	mov    0x10(%ebp),%edx
c0109455:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0109458:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010945b:	c9                   	leave  
c010945c:	c3                   	ret    

c010945d <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c010945d:	55                   	push   %ebp
c010945e:	89 e5                	mov    %esp,%ebp
c0109460:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0109463:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c010946a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010946e:	0f 84 95 00 00 00    	je     c0109509 <find_vma+0xac>
        vma = mm->mmap_cache;
c0109474:	8b 45 08             	mov    0x8(%ebp),%eax
c0109477:	8b 40 08             	mov    0x8(%eax),%eax
c010947a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c010947d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0109481:	74 16                	je     c0109499 <find_vma+0x3c>
c0109483:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109486:	8b 40 04             	mov    0x4(%eax),%eax
c0109489:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010948c:	77 0b                	ja     c0109499 <find_vma+0x3c>
c010948e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109491:	8b 40 08             	mov    0x8(%eax),%eax
c0109494:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109497:	77 61                	ja     c01094fa <find_vma+0x9d>
                bool found = 0;
c0109499:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c01094a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01094a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01094a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c01094ac:	eb 28                	jmp    c01094d6 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c01094ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094b1:	83 e8 10             	sub    $0x10,%eax
c01094b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c01094b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01094ba:	8b 40 04             	mov    0x4(%eax),%eax
c01094bd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01094c0:	77 14                	ja     c01094d6 <find_vma+0x79>
c01094c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01094c5:	8b 40 08             	mov    0x8(%eax),%eax
c01094c8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01094cb:	76 09                	jbe    c01094d6 <find_vma+0x79>
                        found = 1;
c01094cd:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c01094d4:	eb 17                	jmp    c01094ed <find_vma+0x90>
c01094d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01094dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01094df:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c01094e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01094e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094e8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01094eb:	75 c1                	jne    c01094ae <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c01094ed:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01094f1:	75 07                	jne    c01094fa <find_vma+0x9d>
                    vma = NULL;
c01094f3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c01094fa:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01094fe:	74 09                	je     c0109509 <find_vma+0xac>
            mm->mmap_cache = vma;
c0109500:	8b 45 08             	mov    0x8(%ebp),%eax
c0109503:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109506:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0109509:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010950c:	c9                   	leave  
c010950d:	c3                   	ret    

c010950e <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c010950e:	55                   	push   %ebp
c010950f:	89 e5                	mov    %esp,%ebp
c0109511:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0109514:	8b 45 08             	mov    0x8(%ebp),%eax
c0109517:	8b 50 04             	mov    0x4(%eax),%edx
c010951a:	8b 45 08             	mov    0x8(%ebp),%eax
c010951d:	8b 40 08             	mov    0x8(%eax),%eax
c0109520:	39 c2                	cmp    %eax,%edx
c0109522:	72 24                	jb     c0109548 <check_vma_overlap+0x3a>
c0109524:	c7 44 24 0c 39 f0 10 	movl   $0xc010f039,0xc(%esp)
c010952b:	c0 
c010952c:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109533:	c0 
c0109534:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010953b:	00 
c010953c:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109543:	e8 10 8d ff ff       	call   c0102258 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0109548:	8b 45 08             	mov    0x8(%ebp),%eax
c010954b:	8b 50 08             	mov    0x8(%eax),%edx
c010954e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109551:	8b 40 04             	mov    0x4(%eax),%eax
c0109554:	39 c2                	cmp    %eax,%edx
c0109556:	76 24                	jbe    c010957c <check_vma_overlap+0x6e>
c0109558:	c7 44 24 0c 7c f0 10 	movl   $0xc010f07c,0xc(%esp)
c010955f:	c0 
c0109560:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109567:	c0 
c0109568:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010956f:	00 
c0109570:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109577:	e8 dc 8c ff ff       	call   c0102258 <__panic>
    assert(next->vm_start < next->vm_end);
c010957c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010957f:	8b 50 04             	mov    0x4(%eax),%edx
c0109582:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109585:	8b 40 08             	mov    0x8(%eax),%eax
c0109588:	39 c2                	cmp    %eax,%edx
c010958a:	72 24                	jb     c01095b0 <check_vma_overlap+0xa2>
c010958c:	c7 44 24 0c 9b f0 10 	movl   $0xc010f09b,0xc(%esp)
c0109593:	c0 
c0109594:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c010959b:	c0 
c010959c:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c01095a3:	00 
c01095a4:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01095ab:	e8 a8 8c ff ff       	call   c0102258 <__panic>
}
c01095b0:	c9                   	leave  
c01095b1:	c3                   	ret    

c01095b2 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01095b2:	55                   	push   %ebp
c01095b3:	89 e5                	mov    %esp,%ebp
c01095b5:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c01095b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095bb:	8b 50 04             	mov    0x4(%eax),%edx
c01095be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095c1:	8b 40 08             	mov    0x8(%eax),%eax
c01095c4:	39 c2                	cmp    %eax,%edx
c01095c6:	72 24                	jb     c01095ec <insert_vma_struct+0x3a>
c01095c8:	c7 44 24 0c b9 f0 10 	movl   $0xc010f0b9,0xc(%esp)
c01095cf:	c0 
c01095d0:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01095d7:	c0 
c01095d8:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01095df:	00 
c01095e0:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01095e7:	e8 6c 8c ff ff       	call   c0102258 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01095ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01095ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c01095f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01095f5:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c01095f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01095fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01095fe:	eb 21                	jmp    c0109621 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0109600:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109603:	83 e8 10             	sub    $0x10,%eax
c0109606:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0109609:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010960c:	8b 50 04             	mov    0x4(%eax),%edx
c010960f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109612:	8b 40 04             	mov    0x4(%eax),%eax
c0109615:	39 c2                	cmp    %eax,%edx
c0109617:	76 02                	jbe    c010961b <insert_vma_struct+0x69>
                break;
c0109619:	eb 1d                	jmp    c0109638 <insert_vma_struct+0x86>
            }
            le_prev = le;
c010961b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010961e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109621:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109624:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0109627:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010962a:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010962d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109630:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109633:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109636:	75 c8                	jne    c0109600 <insert_vma_struct+0x4e>
c0109638:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010963b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010963e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109641:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0109644:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0109647:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010964a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010964d:	74 15                	je     c0109664 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c010964f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109652:	8d 50 f0             	lea    -0x10(%eax),%edx
c0109655:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109658:	89 44 24 04          	mov    %eax,0x4(%esp)
c010965c:	89 14 24             	mov    %edx,(%esp)
c010965f:	e8 aa fe ff ff       	call   c010950e <check_vma_overlap>
    }
    if (le_next != list) {
c0109664:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109667:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010966a:	74 15                	je     c0109681 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c010966c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010966f:	83 e8 10             	sub    $0x10,%eax
c0109672:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109676:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109679:	89 04 24             	mov    %eax,(%esp)
c010967c:	e8 8d fe ff ff       	call   c010950e <check_vma_overlap>
    }

    vma->vm_mm = mm;
c0109681:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109684:	8b 55 08             	mov    0x8(%ebp),%edx
c0109687:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0109689:	8b 45 0c             	mov    0xc(%ebp),%eax
c010968c:	8d 50 10             	lea    0x10(%eax),%edx
c010968f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109692:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0109695:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109698:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010969b:	8b 40 04             	mov    0x4(%eax),%eax
c010969e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01096a1:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01096a4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01096a7:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01096aa:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01096ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01096b0:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01096b3:	89 10                	mov    %edx,(%eax)
c01096b5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01096b8:	8b 10                	mov    (%eax),%edx
c01096ba:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01096bd:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01096c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01096c3:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01096c6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01096c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01096cc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01096cf:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01096d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01096d4:	8b 40 10             	mov    0x10(%eax),%eax
c01096d7:	8d 50 01             	lea    0x1(%eax),%edx
c01096da:	8b 45 08             	mov    0x8(%ebp),%eax
c01096dd:	89 50 10             	mov    %edx,0x10(%eax)
}
c01096e0:	c9                   	leave  
c01096e1:	c3                   	ret    

c01096e2 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01096e2:	55                   	push   %ebp
c01096e3:	89 e5                	mov    %esp,%ebp
c01096e5:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c01096e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01096eb:	89 04 24             	mov    %eax,(%esp)
c01096ee:	e8 20 fc ff ff       	call   c0109313 <mm_count>
c01096f3:	85 c0                	test   %eax,%eax
c01096f5:	74 24                	je     c010971b <mm_destroy+0x39>
c01096f7:	c7 44 24 0c d5 f0 10 	movl   $0xc010f0d5,0xc(%esp)
c01096fe:	c0 
c01096ff:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109706:	c0 
c0109707:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010970e:	00 
c010970f:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109716:	e8 3d 8b ff ff       	call   c0102258 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010971b:	8b 45 08             	mov    0x8(%ebp),%eax
c010971e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0109721:	eb 36                	jmp    c0109759 <mm_destroy+0x77>
c0109723:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109726:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109729:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010972c:	8b 40 04             	mov    0x4(%eax),%eax
c010972f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109732:	8b 12                	mov    (%edx),%edx
c0109734:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109737:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010973a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010973d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109740:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109743:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109746:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109749:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c010974b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010974e:	83 e8 10             	sub    $0x10,%eax
c0109751:	89 04 24             	mov    %eax,(%esp)
c0109754:	e8 37 c9 ff ff       	call   c0106090 <kfree>
c0109759:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010975c:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010975f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109762:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0109765:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109768:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010976b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010976e:	75 b3                	jne    c0109723 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0109770:	8b 45 08             	mov    0x8(%ebp),%eax
c0109773:	89 04 24             	mov    %eax,(%esp)
c0109776:	e8 15 c9 ff ff       	call   c0106090 <kfree>
    mm=NULL;
c010977b:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0109782:	c9                   	leave  
c0109783:	c3                   	ret    

c0109784 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0109784:	55                   	push   %ebp
c0109785:	89 e5                	mov    %esp,%ebp
c0109787:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c010978a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010978d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109790:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109793:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109798:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010979b:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01097a2:	8b 45 10             	mov    0x10(%ebp),%eax
c01097a5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01097a8:	01 c2                	add    %eax,%edx
c01097aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01097ad:	01 d0                	add    %edx,%eax
c01097af:	83 e8 01             	sub    $0x1,%eax
c01097b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01097b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01097b8:	ba 00 00 00 00       	mov    $0x0,%edx
c01097bd:	f7 75 e8             	divl   -0x18(%ebp)
c01097c0:	89 d0                	mov    %edx,%eax
c01097c2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01097c5:	29 c2                	sub    %eax,%edx
c01097c7:	89 d0                	mov    %edx,%eax
c01097c9:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01097cc:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c01097d3:	76 11                	jbe    c01097e6 <mm_map+0x62>
c01097d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01097d8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01097db:	73 09                	jae    c01097e6 <mm_map+0x62>
c01097dd:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01097e4:	76 0a                	jbe    c01097f0 <mm_map+0x6c>
        return -E_INVAL;
c01097e6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01097eb:	e9 ae 00 00 00       	jmp    c010989e <mm_map+0x11a>
    }

    assert(mm != NULL);
c01097f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01097f4:	75 24                	jne    c010981a <mm_map+0x96>
c01097f6:	c7 44 24 0c e7 f0 10 	movl   $0xc010f0e7,0xc(%esp)
c01097fd:	c0 
c01097fe:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109805:	c0 
c0109806:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c010980d:	00 
c010980e:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109815:	e8 3e 8a ff ff       	call   c0102258 <__panic>

    int ret = -E_INVAL;
c010981a:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0109821:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109824:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109828:	8b 45 08             	mov    0x8(%ebp),%eax
c010982b:	89 04 24             	mov    %eax,(%esp)
c010982e:	e8 2a fc ff ff       	call   c010945d <find_vma>
c0109833:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109836:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010983a:	74 0d                	je     c0109849 <mm_map+0xc5>
c010983c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010983f:	8b 40 04             	mov    0x4(%eax),%eax
c0109842:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0109845:	73 02                	jae    c0109849 <mm_map+0xc5>
        goto out;
c0109847:	eb 52                	jmp    c010989b <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c0109849:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0109850:	8b 45 14             	mov    0x14(%ebp),%eax
c0109853:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109857:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010985a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010985e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109861:	89 04 24             	mov    %eax,(%esp)
c0109864:	e8 b9 fb ff ff       	call   c0109422 <vma_create>
c0109869:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010986c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0109870:	75 02                	jne    c0109874 <mm_map+0xf0>
        goto out;
c0109872:	eb 27                	jmp    c010989b <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c0109874:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109877:	89 44 24 04          	mov    %eax,0x4(%esp)
c010987b:	8b 45 08             	mov    0x8(%ebp),%eax
c010987e:	89 04 24             	mov    %eax,(%esp)
c0109881:	e8 2c fd ff ff       	call   c01095b2 <insert_vma_struct>
    if (vma_store != NULL) {
c0109886:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010988a:	74 08                	je     c0109894 <mm_map+0x110>
        *vma_store = vma;
c010988c:	8b 45 18             	mov    0x18(%ebp),%eax
c010988f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109892:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0109894:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c010989b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010989e:	c9                   	leave  
c010989f:	c3                   	ret    

c01098a0 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c01098a0:	55                   	push   %ebp
c01098a1:	89 e5                	mov    %esp,%ebp
c01098a3:	56                   	push   %esi
c01098a4:	53                   	push   %ebx
c01098a5:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c01098a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01098ac:	74 06                	je     c01098b4 <dup_mmap+0x14>
c01098ae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01098b2:	75 24                	jne    c01098d8 <dup_mmap+0x38>
c01098b4:	c7 44 24 0c f2 f0 10 	movl   $0xc010f0f2,0xc(%esp)
c01098bb:	c0 
c01098bc:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01098c3:	c0 
c01098c4:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01098cb:	00 
c01098cc:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01098d3:	e8 80 89 ff ff       	call   c0102258 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01098d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098db:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01098de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01098e4:	e9 92 00 00 00       	jmp    c010997b <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01098e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098ec:	83 e8 10             	sub    $0x10,%eax
c01098ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01098f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098f5:	8b 48 0c             	mov    0xc(%eax),%ecx
c01098f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098fb:	8b 50 08             	mov    0x8(%eax),%edx
c01098fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109901:	8b 40 04             	mov    0x4(%eax),%eax
c0109904:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0109908:	89 54 24 04          	mov    %edx,0x4(%esp)
c010990c:	89 04 24             	mov    %eax,(%esp)
c010990f:	e8 0e fb ff ff       	call   c0109422 <vma_create>
c0109914:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0109917:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010991b:	75 07                	jne    c0109924 <dup_mmap+0x84>
            return -E_NO_MEM;
c010991d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109922:	eb 76                	jmp    c010999a <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0109924:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109927:	89 44 24 04          	mov    %eax,0x4(%esp)
c010992b:	8b 45 08             	mov    0x8(%ebp),%eax
c010992e:	89 04 24             	mov    %eax,(%esp)
c0109931:	e8 7c fc ff ff       	call   c01095b2 <insert_vma_struct>

        bool share = 0;
c0109936:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c010993d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109940:	8b 58 08             	mov    0x8(%eax),%ebx
c0109943:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109946:	8b 48 04             	mov    0x4(%eax),%ecx
c0109949:	8b 45 0c             	mov    0xc(%ebp),%eax
c010994c:	8b 50 0c             	mov    0xc(%eax),%edx
c010994f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109952:	8b 40 0c             	mov    0xc(%eax),%eax
c0109955:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0109958:	89 74 24 10          	mov    %esi,0x10(%esp)
c010995c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0109960:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0109964:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109968:	89 04 24             	mov    %eax,(%esp)
c010996b:	e8 e8 d6 ff ff       	call   c0107058 <copy_range>
c0109970:	85 c0                	test   %eax,%eax
c0109972:	74 07                	je     c010997b <dup_mmap+0xdb>
            return -E_NO_MEM;
c0109974:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109979:	eb 1f                	jmp    c010999a <dup_mmap+0xfa>
c010997b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010997e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109981:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109984:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0109986:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109989:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010998c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010998f:	0f 85 54 ff ff ff    	jne    c01098e9 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0109995:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010999a:	83 c4 40             	add    $0x40,%esp
c010999d:	5b                   	pop    %ebx
c010999e:	5e                   	pop    %esi
c010999f:	5d                   	pop    %ebp
c01099a0:	c3                   	ret    

c01099a1 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01099a1:	55                   	push   %ebp
c01099a2:	89 e5                	mov    %esp,%ebp
c01099a4:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01099a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01099ab:	74 0f                	je     c01099bc <exit_mmap+0x1b>
c01099ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b0:	89 04 24             	mov    %eax,(%esp)
c01099b3:	e8 5b f9 ff ff       	call   c0109313 <mm_count>
c01099b8:	85 c0                	test   %eax,%eax
c01099ba:	74 24                	je     c01099e0 <exit_mmap+0x3f>
c01099bc:	c7 44 24 0c 10 f1 10 	movl   $0xc010f110,0xc(%esp)
c01099c3:	c0 
c01099c4:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c01099cb:	c0 
c01099cc:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01099d3:	00 
c01099d4:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c01099db:	e8 78 88 ff ff       	call   c0102258 <__panic>
    pde_t *pgdir = mm->pgdir;
c01099e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01099e3:	8b 40 0c             	mov    0xc(%eax),%eax
c01099e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01099e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01099ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01099f5:	eb 28                	jmp    c0109a1f <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c01099f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099fa:	83 e8 10             	sub    $0x10,%eax
c01099fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0109a00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a03:	8b 50 08             	mov    0x8(%eax),%edx
c0109a06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a09:	8b 40 04             	mov    0x4(%eax),%eax
c0109a0c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109a10:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a17:	89 04 24             	mov    %eax,(%esp)
c0109a1a:	e8 3e d4 ff ff       	call   c0106e5d <unmap_range>
c0109a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a22:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109a25:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109a28:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0109a2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a31:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109a34:	75 c1                	jne    c01099f7 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0109a36:	eb 28                	jmp    c0109a60 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0109a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a3b:	83 e8 10             	sub    $0x10,%eax
c0109a3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0109a41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109a44:	8b 50 08             	mov    0x8(%eax),%edx
c0109a47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109a4a:	8b 40 04             	mov    0x4(%eax),%eax
c0109a4d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109a51:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a58:	89 04 24             	mov    %eax,(%esp)
c0109a5b:	e8 f1 d4 ff ff       	call   c0106f51 <exit_range>
c0109a60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a63:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109a66:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109a69:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0109a6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a72:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109a75:	75 c1                	jne    c0109a38 <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0109a77:	c9                   	leave  
c0109a78:	c3                   	ret    

c0109a79 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0109a79:	55                   	push   %ebp
c0109a7a:	89 e5                	mov    %esp,%ebp
c0109a7c:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0109a7f:	8b 45 10             	mov    0x10(%ebp),%eax
c0109a82:	8b 55 18             	mov    0x18(%ebp),%edx
c0109a85:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a89:	8b 55 14             	mov    0x14(%ebp),%edx
c0109a8c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109a90:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a94:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a97:	89 04 24             	mov    %eax,(%esp)
c0109a9a:	e8 c7 09 00 00       	call   c010a466 <user_mem_check>
c0109a9f:	85 c0                	test   %eax,%eax
c0109aa1:	75 07                	jne    c0109aaa <copy_from_user+0x31>
        return 0;
c0109aa3:	b8 00 00 00 00       	mov    $0x0,%eax
c0109aa8:	eb 1e                	jmp    c0109ac8 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0109aaa:	8b 45 14             	mov    0x14(%ebp),%eax
c0109aad:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109ab1:	8b 45 10             	mov    0x10(%ebp),%eax
c0109ab4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ab8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109abb:	89 04 24             	mov    %eax,(%esp)
c0109abe:	e8 a4 37 00 00       	call   c010d267 <memcpy>
    return 1;
c0109ac3:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0109ac8:	c9                   	leave  
c0109ac9:	c3                   	ret    

c0109aca <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0109aca:	55                   	push   %ebp
c0109acb:	89 e5                	mov    %esp,%ebp
c0109acd:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0109ad0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ad3:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109ada:	00 
c0109adb:	8b 55 14             	mov    0x14(%ebp),%edx
c0109ade:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109ae2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ae6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae9:	89 04 24             	mov    %eax,(%esp)
c0109aec:	e8 75 09 00 00       	call   c010a466 <user_mem_check>
c0109af1:	85 c0                	test   %eax,%eax
c0109af3:	75 07                	jne    c0109afc <copy_to_user+0x32>
        return 0;
c0109af5:	b8 00 00 00 00       	mov    $0x0,%eax
c0109afa:	eb 1e                	jmp    c0109b1a <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0109afc:	8b 45 14             	mov    0x14(%ebp),%eax
c0109aff:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b03:	8b 45 10             	mov    0x10(%ebp),%eax
c0109b06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b0a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b0d:	89 04 24             	mov    %eax,(%esp)
c0109b10:	e8 52 37 00 00       	call   c010d267 <memcpy>
    return 1;
c0109b15:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0109b1a:	c9                   	leave  
c0109b1b:	c3                   	ret    

c0109b1c <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0109b1c:	55                   	push   %ebp
c0109b1d:	89 e5                	mov    %esp,%ebp
c0109b1f:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0109b22:	e8 02 00 00 00       	call   c0109b29 <check_vmm>
}
c0109b27:	c9                   	leave  
c0109b28:	c3                   	ret    

c0109b29 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0109b29:	55                   	push   %ebp
c0109b2a:	89 e5                	mov    %esp,%ebp
c0109b2c:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0109b2f:	e8 53 ca ff ff       	call   c0106587 <nr_free_pages>
c0109b34:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0109b37:	e8 13 00 00 00       	call   c0109b4f <check_vma_struct>
    check_pgfault();
c0109b3c:	e8 a7 04 00 00       	call   c0109fe8 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0109b41:	c7 04 24 30 f1 10 c0 	movl   $0xc010f130,(%esp)
c0109b48:	e8 89 7c ff ff       	call   c01017d6 <cprintf>
}
c0109b4d:	c9                   	leave  
c0109b4e:	c3                   	ret    

c0109b4f <check_vma_struct>:

static void
check_vma_struct(void) {
c0109b4f:	55                   	push   %ebp
c0109b50:	89 e5                	mov    %esp,%ebp
c0109b52:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0109b55:	e8 2d ca ff ff       	call   c0106587 <nr_free_pages>
c0109b5a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0109b5d:	e8 27 f8 ff ff       	call   c0109389 <mm_create>
c0109b62:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0109b65:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0109b69:	75 24                	jne    c0109b8f <check_vma_struct+0x40>
c0109b6b:	c7 44 24 0c e7 f0 10 	movl   $0xc010f0e7,0xc(%esp)
c0109b72:	c0 
c0109b73:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109b7a:	c0 
c0109b7b:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0109b82:	00 
c0109b83:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109b8a:	e8 c9 86 ff ff       	call   c0102258 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0109b8f:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0109b96:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109b99:	89 d0                	mov    %edx,%eax
c0109b9b:	c1 e0 02             	shl    $0x2,%eax
c0109b9e:	01 d0                	add    %edx,%eax
c0109ba0:	01 c0                	add    %eax,%eax
c0109ba2:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0109ba5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ba8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109bab:	eb 70                	jmp    c0109c1d <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0109bad:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109bb0:	89 d0                	mov    %edx,%eax
c0109bb2:	c1 e0 02             	shl    $0x2,%eax
c0109bb5:	01 d0                	add    %edx,%eax
c0109bb7:	83 c0 02             	add    $0x2,%eax
c0109bba:	89 c1                	mov    %eax,%ecx
c0109bbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109bbf:	89 d0                	mov    %edx,%eax
c0109bc1:	c1 e0 02             	shl    $0x2,%eax
c0109bc4:	01 d0                	add    %edx,%eax
c0109bc6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109bcd:	00 
c0109bce:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0109bd2:	89 04 24             	mov    %eax,(%esp)
c0109bd5:	e8 48 f8 ff ff       	call   c0109422 <vma_create>
c0109bda:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0109bdd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0109be1:	75 24                	jne    c0109c07 <check_vma_struct+0xb8>
c0109be3:	c7 44 24 0c 48 f1 10 	movl   $0xc010f148,0xc(%esp)
c0109bea:	c0 
c0109beb:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109bf2:	c0 
c0109bf3:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c0109bfa:	00 
c0109bfb:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109c02:	e8 51 86 ff ff       	call   c0102258 <__panic>
        insert_vma_struct(mm, vma);
c0109c07:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109c0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c11:	89 04 24             	mov    %eax,(%esp)
c0109c14:	e8 99 f9 ff ff       	call   c01095b2 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0109c19:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0109c1d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c21:	7f 8a                	jg     c0109bad <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0109c23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109c26:	83 c0 01             	add    $0x1,%eax
c0109c29:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109c2c:	eb 70                	jmp    c0109c9e <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0109c2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109c31:	89 d0                	mov    %edx,%eax
c0109c33:	c1 e0 02             	shl    $0x2,%eax
c0109c36:	01 d0                	add    %edx,%eax
c0109c38:	83 c0 02             	add    $0x2,%eax
c0109c3b:	89 c1                	mov    %eax,%ecx
c0109c3d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109c40:	89 d0                	mov    %edx,%eax
c0109c42:	c1 e0 02             	shl    $0x2,%eax
c0109c45:	01 d0                	add    %edx,%eax
c0109c47:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109c4e:	00 
c0109c4f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0109c53:	89 04 24             	mov    %eax,(%esp)
c0109c56:	e8 c7 f7 ff ff       	call   c0109422 <vma_create>
c0109c5b:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0109c5e:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0109c62:	75 24                	jne    c0109c88 <check_vma_struct+0x139>
c0109c64:	c7 44 24 0c 48 f1 10 	movl   $0xc010f148,0xc(%esp)
c0109c6b:	c0 
c0109c6c:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109c73:	c0 
c0109c74:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0109c7b:	00 
c0109c7c:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109c83:	e8 d0 85 ff ff       	call   c0102258 <__panic>
        insert_vma_struct(mm, vma);
c0109c88:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109c8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c92:	89 04 24             	mov    %eax,(%esp)
c0109c95:	e8 18 f9 ff ff       	call   c01095b2 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0109c9a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109c9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ca1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0109ca4:	7e 88                	jle    c0109c2e <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0109ca6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ca9:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0109cac:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0109caf:	8b 40 04             	mov    0x4(%eax),%eax
c0109cb2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0109cb5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0109cbc:	e9 97 00 00 00       	jmp    c0109d58 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0109cc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109cc4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109cc7:	75 24                	jne    c0109ced <check_vma_struct+0x19e>
c0109cc9:	c7 44 24 0c 54 f1 10 	movl   $0xc010f154,0xc(%esp)
c0109cd0:	c0 
c0109cd1:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109cd8:	c0 
c0109cd9:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0109ce0:	00 
c0109ce1:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109ce8:	e8 6b 85 ff ff       	call   c0102258 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0109ced:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cf0:	83 e8 10             	sub    $0x10,%eax
c0109cf3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0109cf6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109cf9:	8b 48 04             	mov    0x4(%eax),%ecx
c0109cfc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109cff:	89 d0                	mov    %edx,%eax
c0109d01:	c1 e0 02             	shl    $0x2,%eax
c0109d04:	01 d0                	add    %edx,%eax
c0109d06:	39 c1                	cmp    %eax,%ecx
c0109d08:	75 17                	jne    c0109d21 <check_vma_struct+0x1d2>
c0109d0a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109d0d:	8b 48 08             	mov    0x8(%eax),%ecx
c0109d10:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109d13:	89 d0                	mov    %edx,%eax
c0109d15:	c1 e0 02             	shl    $0x2,%eax
c0109d18:	01 d0                	add    %edx,%eax
c0109d1a:	83 c0 02             	add    $0x2,%eax
c0109d1d:	39 c1                	cmp    %eax,%ecx
c0109d1f:	74 24                	je     c0109d45 <check_vma_struct+0x1f6>
c0109d21:	c7 44 24 0c 6c f1 10 	movl   $0xc010f16c,0xc(%esp)
c0109d28:	c0 
c0109d29:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109d30:	c0 
c0109d31:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0109d38:	00 
c0109d39:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109d40:	e8 13 85 ff ff       	call   c0102258 <__panic>
c0109d45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d48:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0109d4b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109d4e:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0109d51:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0109d54:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d5b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0109d5e:	0f 8e 5d ff ff ff    	jle    c0109cc1 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0109d64:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0109d6b:	e9 cd 01 00 00       	jmp    c0109f3d <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0109d70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d73:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d77:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d7a:	89 04 24             	mov    %eax,(%esp)
c0109d7d:	e8 db f6 ff ff       	call   c010945d <find_vma>
c0109d82:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0109d85:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0109d89:	75 24                	jne    c0109daf <check_vma_struct+0x260>
c0109d8b:	c7 44 24 0c a1 f1 10 	movl   $0xc010f1a1,0xc(%esp)
c0109d92:	c0 
c0109d93:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109d9a:	c0 
c0109d9b:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0109da2:	00 
c0109da3:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109daa:	e8 a9 84 ff ff       	call   c0102258 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0109daf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109db2:	83 c0 01             	add    $0x1,%eax
c0109db5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109db9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109dbc:	89 04 24             	mov    %eax,(%esp)
c0109dbf:	e8 99 f6 ff ff       	call   c010945d <find_vma>
c0109dc4:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0109dc7:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0109dcb:	75 24                	jne    c0109df1 <check_vma_struct+0x2a2>
c0109dcd:	c7 44 24 0c ae f1 10 	movl   $0xc010f1ae,0xc(%esp)
c0109dd4:	c0 
c0109dd5:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109ddc:	c0 
c0109ddd:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0109de4:	00 
c0109de5:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109dec:	e8 67 84 ff ff       	call   c0102258 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0109df1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109df4:	83 c0 02             	add    $0x2,%eax
c0109df7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109dfb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109dfe:	89 04 24             	mov    %eax,(%esp)
c0109e01:	e8 57 f6 ff ff       	call   c010945d <find_vma>
c0109e06:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c0109e09:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0109e0d:	74 24                	je     c0109e33 <check_vma_struct+0x2e4>
c0109e0f:	c7 44 24 0c bb f1 10 	movl   $0xc010f1bb,0xc(%esp)
c0109e16:	c0 
c0109e17:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109e1e:	c0 
c0109e1f:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0109e26:	00 
c0109e27:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109e2e:	e8 25 84 ff ff       	call   c0102258 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0109e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e36:	83 c0 03             	add    $0x3,%eax
c0109e39:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e40:	89 04 24             	mov    %eax,(%esp)
c0109e43:	e8 15 f6 ff ff       	call   c010945d <find_vma>
c0109e48:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0109e4b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0109e4f:	74 24                	je     c0109e75 <check_vma_struct+0x326>
c0109e51:	c7 44 24 0c c8 f1 10 	movl   $0xc010f1c8,0xc(%esp)
c0109e58:	c0 
c0109e59:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109e60:	c0 
c0109e61:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0109e68:	00 
c0109e69:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109e70:	e8 e3 83 ff ff       	call   c0102258 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0109e75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e78:	83 c0 04             	add    $0x4,%eax
c0109e7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e82:	89 04 24             	mov    %eax,(%esp)
c0109e85:	e8 d3 f5 ff ff       	call   c010945d <find_vma>
c0109e8a:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0109e8d:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0109e91:	74 24                	je     c0109eb7 <check_vma_struct+0x368>
c0109e93:	c7 44 24 0c d5 f1 10 	movl   $0xc010f1d5,0xc(%esp)
c0109e9a:	c0 
c0109e9b:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109ea2:	c0 
c0109ea3:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0109eaa:	00 
c0109eab:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109eb2:	e8 a1 83 ff ff       	call   c0102258 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0109eb7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109eba:	8b 50 04             	mov    0x4(%eax),%edx
c0109ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ec0:	39 c2                	cmp    %eax,%edx
c0109ec2:	75 10                	jne    c0109ed4 <check_vma_struct+0x385>
c0109ec4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109ec7:	8b 50 08             	mov    0x8(%eax),%edx
c0109eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ecd:	83 c0 02             	add    $0x2,%eax
c0109ed0:	39 c2                	cmp    %eax,%edx
c0109ed2:	74 24                	je     c0109ef8 <check_vma_struct+0x3a9>
c0109ed4:	c7 44 24 0c e4 f1 10 	movl   $0xc010f1e4,0xc(%esp)
c0109edb:	c0 
c0109edc:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109ee3:	c0 
c0109ee4:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0109eeb:	00 
c0109eec:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109ef3:	e8 60 83 ff ff       	call   c0102258 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0109ef8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109efb:	8b 50 04             	mov    0x4(%eax),%edx
c0109efe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f01:	39 c2                	cmp    %eax,%edx
c0109f03:	75 10                	jne    c0109f15 <check_vma_struct+0x3c6>
c0109f05:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109f08:	8b 50 08             	mov    0x8(%eax),%edx
c0109f0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f0e:	83 c0 02             	add    $0x2,%eax
c0109f11:	39 c2                	cmp    %eax,%edx
c0109f13:	74 24                	je     c0109f39 <check_vma_struct+0x3ea>
c0109f15:	c7 44 24 0c 14 f2 10 	movl   $0xc010f214,0xc(%esp)
c0109f1c:	c0 
c0109f1d:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109f24:	c0 
c0109f25:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0109f2c:	00 
c0109f2d:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109f34:	e8 1f 83 ff ff       	call   c0102258 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0109f39:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0109f3d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109f40:	89 d0                	mov    %edx,%eax
c0109f42:	c1 e0 02             	shl    $0x2,%eax
c0109f45:	01 d0                	add    %edx,%eax
c0109f47:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109f4a:	0f 8d 20 fe ff ff    	jge    c0109d70 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0109f50:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0109f57:	eb 70                	jmp    c0109fc9 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0109f59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f60:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109f63:	89 04 24             	mov    %eax,(%esp)
c0109f66:	e8 f2 f4 ff ff       	call   c010945d <find_vma>
c0109f6b:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0109f6e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0109f72:	74 27                	je     c0109f9b <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0109f74:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109f77:	8b 50 08             	mov    0x8(%eax),%edx
c0109f7a:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109f7d:	8b 40 04             	mov    0x4(%eax),%eax
c0109f80:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109f84:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f8f:	c7 04 24 44 f2 10 c0 	movl   $0xc010f244,(%esp)
c0109f96:	e8 3b 78 ff ff       	call   c01017d6 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0109f9b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0109f9f:	74 24                	je     c0109fc5 <check_vma_struct+0x476>
c0109fa1:	c7 44 24 0c 69 f2 10 	movl   $0xc010f269,0xc(%esp)
c0109fa8:	c0 
c0109fa9:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c0109fb0:	c0 
c0109fb1:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0109fb8:	00 
c0109fb9:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0109fc0:	e8 93 82 ff ff       	call   c0102258 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0109fc5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0109fc9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fcd:	79 8a                	jns    c0109f59 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0109fcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109fd2:	89 04 24             	mov    %eax,(%esp)
c0109fd5:	e8 08 f7 ff ff       	call   c01096e2 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0109fda:	c7 04 24 80 f2 10 c0 	movl   $0xc010f280,(%esp)
c0109fe1:	e8 f0 77 ff ff       	call   c01017d6 <cprintf>
}
c0109fe6:	c9                   	leave  
c0109fe7:	c3                   	ret    

c0109fe8 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0109fe8:	55                   	push   %ebp
c0109fe9:	89 e5                	mov    %esp,%ebp
c0109feb:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0109fee:	e8 94 c5 ff ff       	call   c0106587 <nr_free_pages>
c0109ff3:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0109ff6:	e8 8e f3 ff ff       	call   c0109389 <mm_create>
c0109ffb:	a3 ac 20 1a c0       	mov    %eax,0xc01a20ac
    assert(check_mm_struct != NULL);
c010a000:	a1 ac 20 1a c0       	mov    0xc01a20ac,%eax
c010a005:	85 c0                	test   %eax,%eax
c010a007:	75 24                	jne    c010a02d <check_pgfault+0x45>
c010a009:	c7 44 24 0c 9f f2 10 	movl   $0xc010f29f,0xc(%esp)
c010a010:	c0 
c010a011:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c010a018:	c0 
c010a019:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c010a020:	00 
c010a021:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c010a028:	e8 2b 82 ff ff       	call   c0102258 <__panic>

    struct mm_struct *mm = check_mm_struct;
c010a02d:	a1 ac 20 1a c0       	mov    0xc01a20ac,%eax
c010a032:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c010a035:	8b 15 e4 fe 19 c0    	mov    0xc019fee4,%edx
c010a03b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a03e:	89 50 0c             	mov    %edx,0xc(%eax)
c010a041:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a044:	8b 40 0c             	mov    0xc(%eax),%eax
c010a047:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c010a04a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a04d:	8b 00                	mov    (%eax),%eax
c010a04f:	85 c0                	test   %eax,%eax
c010a051:	74 24                	je     c010a077 <check_pgfault+0x8f>
c010a053:	c7 44 24 0c b7 f2 10 	movl   $0xc010f2b7,0xc(%esp)
c010a05a:	c0 
c010a05b:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c010a062:	c0 
c010a063:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c010a06a:	00 
c010a06b:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c010a072:	e8 e1 81 ff ff       	call   c0102258 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c010a077:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c010a07e:	00 
c010a07f:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c010a086:	00 
c010a087:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010a08e:	e8 8f f3 ff ff       	call   c0109422 <vma_create>
c010a093:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c010a096:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010a09a:	75 24                	jne    c010a0c0 <check_pgfault+0xd8>
c010a09c:	c7 44 24 0c 48 f1 10 	movl   $0xc010f148,0xc(%esp)
c010a0a3:	c0 
c010a0a4:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c010a0ab:	c0 
c010a0ac:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c010a0b3:	00 
c010a0b4:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c010a0bb:	e8 98 81 ff ff       	call   c0102258 <__panic>

    insert_vma_struct(mm, vma);
c010a0c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a0c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a0ca:	89 04 24             	mov    %eax,(%esp)
c010a0cd:	e8 e0 f4 ff ff       	call   c01095b2 <insert_vma_struct>

    uintptr_t addr = 0x100;
c010a0d2:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c010a0d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a0dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a0e3:	89 04 24             	mov    %eax,(%esp)
c010a0e6:	e8 72 f3 ff ff       	call   c010945d <find_vma>
c010a0eb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010a0ee:	74 24                	je     c010a114 <check_pgfault+0x12c>
c010a0f0:	c7 44 24 0c c5 f2 10 	movl   $0xc010f2c5,0xc(%esp)
c010a0f7:	c0 
c010a0f8:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c010a0ff:	c0 
c010a100:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c010a107:	00 
c010a108:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c010a10f:	e8 44 81 ff ff       	call   c0102258 <__panic>

    int i, sum = 0;
c010a114:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c010a11b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a122:	eb 17                	jmp    c010a13b <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c010a124:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a127:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a12a:	01 d0                	add    %edx,%eax
c010a12c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a12f:	88 10                	mov    %dl,(%eax)
        sum += i;
c010a131:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a134:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c010a137:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a13b:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010a13f:	7e e3                	jle    c010a124 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010a141:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a148:	eb 15                	jmp    c010a15f <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c010a14a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a14d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a150:	01 d0                	add    %edx,%eax
c010a152:	0f b6 00             	movzbl (%eax),%eax
c010a155:	0f be c0             	movsbl %al,%eax
c010a158:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010a15b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a15f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010a163:	7e e5                	jle    c010a14a <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c010a165:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a169:	74 24                	je     c010a18f <check_pgfault+0x1a7>
c010a16b:	c7 44 24 0c df f2 10 	movl   $0xc010f2df,0xc(%esp)
c010a172:	c0 
c010a173:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c010a17a:	c0 
c010a17b:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c010a182:	00 
c010a183:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c010a18a:	e8 c9 80 ff ff       	call   c0102258 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c010a18f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a192:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a195:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a198:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a19d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1a4:	89 04 24             	mov    %eax,(%esp)
c010a1a7:	e8 cf d0 ff ff       	call   c010727b <page_remove>
    free_page(pde2page(pgdir[0]));
c010a1ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1af:	8b 00                	mov    (%eax),%eax
c010a1b1:	89 04 24             	mov    %eax,(%esp)
c010a1b4:	e8 b8 f1 ff ff       	call   c0109371 <pde2page>
c010a1b9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010a1c0:	00 
c010a1c1:	89 04 24             	mov    %eax,(%esp)
c010a1c4:	e8 8c c3 ff ff       	call   c0106555 <free_pages>
    pgdir[0] = 0;
c010a1c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1cc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c010a1d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a1d5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c010a1dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a1df:	89 04 24             	mov    %eax,(%esp)
c010a1e2:	e8 fb f4 ff ff       	call   c01096e2 <mm_destroy>
    check_mm_struct = NULL;
c010a1e7:	c7 05 ac 20 1a c0 00 	movl   $0x0,0xc01a20ac
c010a1ee:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c010a1f1:	e8 91 c3 ff ff       	call   c0106587 <nr_free_pages>
c010a1f6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010a1f9:	74 24                	je     c010a21f <check_pgfault+0x237>
c010a1fb:	c7 44 24 0c e8 f2 10 	movl   $0xc010f2e8,0xc(%esp)
c010a202:	c0 
c010a203:	c7 44 24 08 57 f0 10 	movl   $0xc010f057,0x8(%esp)
c010a20a:	c0 
c010a20b:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c010a212:	00 
c010a213:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c010a21a:	e8 39 80 ff ff       	call   c0102258 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c010a21f:	c7 04 24 0f f3 10 c0 	movl   $0xc010f30f,(%esp)
c010a226:	e8 ab 75 ff ff       	call   c01017d6 <cprintf>
}
c010a22b:	c9                   	leave  
c010a22c:	c3                   	ret    

c010a22d <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c010a22d:	55                   	push   %ebp
c010a22e:	89 e5                	mov    %esp,%ebp
c010a230:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c010a233:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c010a23a:	8b 45 10             	mov    0x10(%ebp),%eax
c010a23d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a241:	8b 45 08             	mov    0x8(%ebp),%eax
c010a244:	89 04 24             	mov    %eax,(%esp)
c010a247:	e8 11 f2 ff ff       	call   c010945d <find_vma>
c010a24c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c010a24f:	a1 78 ff 19 c0       	mov    0xc019ff78,%eax
c010a254:	83 c0 01             	add    $0x1,%eax
c010a257:	a3 78 ff 19 c0       	mov    %eax,0xc019ff78
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c010a25c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a260:	74 0b                	je     c010a26d <do_pgfault+0x40>
c010a262:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a265:	8b 40 04             	mov    0x4(%eax),%eax
c010a268:	3b 45 10             	cmp    0x10(%ebp),%eax
c010a26b:	76 18                	jbe    c010a285 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c010a26d:	8b 45 10             	mov    0x10(%ebp),%eax
c010a270:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a274:	c7 04 24 2c f3 10 c0 	movl   $0xc010f32c,(%esp)
c010a27b:	e8 56 75 ff ff       	call   c01017d6 <cprintf>
        goto failed;
c010a280:	e9 dc 01 00 00       	jmp    c010a461 <do_pgfault+0x234>
    }
    //check the error_code
    switch (error_code & 3) {
c010a285:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a288:	83 e0 03             	and    $0x3,%eax
c010a28b:	85 c0                	test   %eax,%eax
c010a28d:	74 36                	je     c010a2c5 <do_pgfault+0x98>
c010a28f:	83 f8 01             	cmp    $0x1,%eax
c010a292:	74 20                	je     c010a2b4 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c010a294:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a297:	8b 40 0c             	mov    0xc(%eax),%eax
c010a29a:	83 e0 02             	and    $0x2,%eax
c010a29d:	85 c0                	test   %eax,%eax
c010a29f:	75 11                	jne    c010a2b2 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c010a2a1:	c7 04 24 5c f3 10 c0 	movl   $0xc010f35c,(%esp)
c010a2a8:	e8 29 75 ff ff       	call   c01017d6 <cprintf>
            goto failed;
c010a2ad:	e9 af 01 00 00       	jmp    c010a461 <do_pgfault+0x234>
        }
        break;
c010a2b2:	eb 2f                	jmp    c010a2e3 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c010a2b4:	c7 04 24 bc f3 10 c0 	movl   $0xc010f3bc,(%esp)
c010a2bb:	e8 16 75 ff ff       	call   c01017d6 <cprintf>
        goto failed;
c010a2c0:	e9 9c 01 00 00       	jmp    c010a461 <do_pgfault+0x234>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c010a2c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2c8:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2cb:	83 e0 05             	and    $0x5,%eax
c010a2ce:	85 c0                	test   %eax,%eax
c010a2d0:	75 11                	jne    c010a2e3 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c010a2d2:	c7 04 24 f4 f3 10 c0 	movl   $0xc010f3f4,(%esp)
c010a2d9:	e8 f8 74 ff ff       	call   c01017d6 <cprintf>
            goto failed;
c010a2de:	e9 7e 01 00 00       	jmp    c010a461 <do_pgfault+0x234>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c010a2e3:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c010a2ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2ed:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2f0:	83 e0 02             	and    $0x2,%eax
c010a2f3:	85 c0                	test   %eax,%eax
c010a2f5:	74 04                	je     c010a2fb <do_pgfault+0xce>
        perm |= PTE_W;
c010a2f7:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c010a2fb:	8b 45 10             	mov    0x10(%ebp),%eax
c010a2fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a301:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a304:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a309:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c010a30c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c010a313:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
   }
#endif
    ptep = get_pte(mm->pgdir, addr, 1);
c010a31a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a31d:	8b 40 0c             	mov    0xc(%eax),%eax
c010a320:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010a327:	00 
c010a328:	8b 55 10             	mov    0x10(%ebp),%edx
c010a32b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a32f:	89 04 24             	mov    %eax,(%esp)
c010a332:	e8 1a c9 ff ff       	call   c0106c51 <get_pte>
c010a337:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (ptep == NULL) {
c010a33a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a33e:	75 11                	jne    c010a351 <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c010a340:	c7 04 24 57 f4 10 c0 	movl   $0xc010f457,(%esp)
c010a347:	e8 8a 74 ff ff       	call   c01017d6 <cprintf>
        goto failed;
c010a34c:	e9 10 01 00 00       	jmp    c010a461 <do_pgfault+0x234>
    }

    if (*ptep == 0) {
c010a351:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a354:	8b 00                	mov    (%eax),%eax
c010a356:	85 c0                	test   %eax,%eax
c010a358:	75 3b                	jne    c010a395 <do_pgfault+0x168>
        struct Page* page = pgdir_alloc_page(mm->pgdir, addr, perm);
c010a35a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a35d:	8b 40 0c             	mov    0xc(%eax),%eax
c010a360:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a363:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a367:	8b 55 10             	mov    0x10(%ebp),%edx
c010a36a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a36e:	89 04 24             	mov    %eax,(%esp)
c010a371:	e8 5f d0 ff ff       	call   c01073d5 <pgdir_alloc_page>
c010a376:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (page == NULL) {
c010a379:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010a37d:	75 11                	jne    c010a390 <do_pgfault+0x163>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c010a37f:	c7 04 24 78 f4 10 c0 	movl   $0xc010f478,(%esp)
c010a386:	e8 4b 74 ff ff       	call   c01017d6 <cprintf>
            goto failed;
c010a38b:	e9 d1 00 00 00       	jmp    c010a461 <do_pgfault+0x234>
c010a390:	e9 c5 00 00 00       	jmp    c010a45a <do_pgfault+0x22d>
        }
    }

    else {
        if(swap_init_ok) {
c010a395:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c010a39a:	85 c0                	test   %eax,%eax
c010a39c:	0f 84 a1 00 00 00    	je     c010a443 <do_pgfault+0x216>
            struct Page *page = NULL;
c010a3a2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            ret = swap_in(mm, addr, &page);
c010a3a9:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a3ac:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a3b0:	8b 45 10             	mov    0x10(%ebp),%eax
c010a3b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a3b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3ba:	89 04 24             	mov    %eax,(%esp)
c010a3bd:	e8 bf e0 ff ff       	call   c0108481 <swap_in>
c010a3c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (ret != 0) {
c010a3c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a3c9:	74 11                	je     c010a3dc <do_pgfault+0x1af>
                cprintf("swap_in in do_pgfault failed\n");
c010a3cb:	c7 04 24 9f f4 10 c0 	movl   $0xc010f49f,(%esp)
c010a3d2:	e8 ff 73 ff ff       	call   c01017d6 <cprintf>
                goto failed;
c010a3d7:	e9 85 00 00 00       	jmp    c010a461 <do_pgfault+0x234>
            }
            ret = page_insert(mm->pgdir, page, addr, perm);
c010a3dc:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a3df:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3e2:	8b 40 0c             	mov    0xc(%eax),%eax
c010a3e5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a3e8:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010a3ec:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010a3ef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010a3f3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a3f7:	89 04 24             	mov    %eax,(%esp)
c010a3fa:	e8 c0 ce ff ff       	call   c01072bf <page_insert>
c010a3ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (ret != 0) {
c010a402:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a406:	74 0f                	je     c010a417 <do_pgfault+0x1ea>
                cprintf("page_insert in do_pgfault failed\n");
c010a408:	c7 04 24 c0 f4 10 c0 	movl   $0xc010f4c0,(%esp)
c010a40f:	e8 c2 73 ff ff       	call   c01017d6 <cprintf>
                goto failed;
c010a414:	90                   	nop
c010a415:	eb 4a                	jmp    c010a461 <do_pgfault+0x234>
            }
            swap_map_swappable(mm, addr, page, 1);
c010a417:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a41a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a421:	00 
c010a422:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a426:	8b 45 10             	mov    0x10(%ebp),%eax
c010a429:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a42d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a430:	89 04 24             	mov    %eax,(%esp)
c010a433:	e8 80 de ff ff       	call   c01082b8 <swap_map_swappable>
            page->pra_vaddr = addr;
c010a438:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a43b:	8b 55 10             	mov    0x10(%ebp),%edx
c010a43e:	89 50 1c             	mov    %edx,0x1c(%eax)
c010a441:	eb 17                	jmp    c010a45a <do_pgfault+0x22d>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c010a443:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a446:	8b 00                	mov    (%eax),%eax
c010a448:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a44c:	c7 04 24 e4 f4 10 c0 	movl   $0xc010f4e4,(%esp)
c010a453:	e8 7e 73 ff ff       	call   c01017d6 <cprintf>
            goto failed;
c010a458:	eb 07                	jmp    c010a461 <do_pgfault+0x234>
        }
   }
   ret = 0;
c010a45a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c010a461:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a464:	c9                   	leave  
c010a465:	c3                   	ret    

c010a466 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010a466:	55                   	push   %ebp
c010a467:	89 e5                	mov    %esp,%ebp
c010a469:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a46c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a470:	0f 84 e0 00 00 00    	je     c010a556 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c010a476:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010a47d:	76 1c                	jbe    c010a49b <user_mem_check+0x35>
c010a47f:	8b 45 10             	mov    0x10(%ebp),%eax
c010a482:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a485:	01 d0                	add    %edx,%eax
c010a487:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a48a:	76 0f                	jbe    c010a49b <user_mem_check+0x35>
c010a48c:	8b 45 10             	mov    0x10(%ebp),%eax
c010a48f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a492:	01 d0                	add    %edx,%eax
c010a494:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c010a499:	76 0a                	jbe    c010a4a5 <user_mem_check+0x3f>
            return 0;
c010a49b:	b8 00 00 00 00       	mov    $0x0,%eax
c010a4a0:	e9 e2 00 00 00       	jmp    c010a587 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c010a4a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a4a8:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a4ab:	8b 45 10             	mov    0x10(%ebp),%eax
c010a4ae:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a4b1:	01 d0                	add    %edx,%eax
c010a4b3:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c010a4b6:	e9 88 00 00 00       	jmp    c010a543 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c010a4bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a4be:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a4c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4c5:	89 04 24             	mov    %eax,(%esp)
c010a4c8:	e8 90 ef ff ff       	call   c010945d <find_vma>
c010a4cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a4d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a4d4:	74 0b                	je     c010a4e1 <user_mem_check+0x7b>
c010a4d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4d9:	8b 40 04             	mov    0x4(%eax),%eax
c010a4dc:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a4df:	76 0a                	jbe    c010a4eb <user_mem_check+0x85>
                return 0;
c010a4e1:	b8 00 00 00 00       	mov    $0x0,%eax
c010a4e6:	e9 9c 00 00 00       	jmp    c010a587 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c010a4eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4ee:	8b 50 0c             	mov    0xc(%eax),%edx
c010a4f1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a4f5:	74 07                	je     c010a4fe <user_mem_check+0x98>
c010a4f7:	b8 02 00 00 00       	mov    $0x2,%eax
c010a4fc:	eb 05                	jmp    c010a503 <user_mem_check+0x9d>
c010a4fe:	b8 01 00 00 00       	mov    $0x1,%eax
c010a503:	21 d0                	and    %edx,%eax
c010a505:	85 c0                	test   %eax,%eax
c010a507:	75 07                	jne    c010a510 <user_mem_check+0xaa>
                return 0;
c010a509:	b8 00 00 00 00       	mov    $0x0,%eax
c010a50e:	eb 77                	jmp    c010a587 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c010a510:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a514:	74 24                	je     c010a53a <user_mem_check+0xd4>
c010a516:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a519:	8b 40 0c             	mov    0xc(%eax),%eax
c010a51c:	83 e0 08             	and    $0x8,%eax
c010a51f:	85 c0                	test   %eax,%eax
c010a521:	74 17                	je     c010a53a <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010a523:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a526:	8b 40 04             	mov    0x4(%eax),%eax
c010a529:	05 00 10 00 00       	add    $0x1000,%eax
c010a52e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a531:	76 07                	jbe    c010a53a <user_mem_check+0xd4>
                    return 0;
c010a533:	b8 00 00 00 00       	mov    $0x0,%eax
c010a538:	eb 4d                	jmp    c010a587 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c010a53a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a53d:	8b 40 08             	mov    0x8(%eax),%eax
c010a540:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c010a543:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a546:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a549:	0f 82 6c ff ff ff    	jb     c010a4bb <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c010a54f:	b8 01 00 00 00       	mov    $0x1,%eax
c010a554:	eb 31                	jmp    c010a587 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010a556:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c010a55d:	76 23                	jbe    c010a582 <user_mem_check+0x11c>
c010a55f:	8b 45 10             	mov    0x10(%ebp),%eax
c010a562:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a565:	01 d0                	add    %edx,%eax
c010a567:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a56a:	76 16                	jbe    c010a582 <user_mem_check+0x11c>
c010a56c:	8b 45 10             	mov    0x10(%ebp),%eax
c010a56f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a572:	01 d0                	add    %edx,%eax
c010a574:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010a579:	77 07                	ja     c010a582 <user_mem_check+0x11c>
c010a57b:	b8 01 00 00 00       	mov    $0x1,%eax
c010a580:	eb 05                	jmp    c010a587 <user_mem_check+0x121>
c010a582:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a587:	c9                   	leave  
c010a588:	c3                   	ret    

c010a589 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a589:	55                   	push   %ebp
c010a58a:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a58c:	8b 55 08             	mov    0x8(%ebp),%edx
c010a58f:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c010a594:	29 c2                	sub    %eax,%edx
c010a596:	89 d0                	mov    %edx,%eax
c010a598:	c1 f8 05             	sar    $0x5,%eax
}
c010a59b:	5d                   	pop    %ebp
c010a59c:	c3                   	ret    

c010a59d <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a59d:	55                   	push   %ebp
c010a59e:	89 e5                	mov    %esp,%ebp
c010a5a0:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a5a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5a6:	89 04 24             	mov    %eax,(%esp)
c010a5a9:	e8 db ff ff ff       	call   c010a589 <page2ppn>
c010a5ae:	c1 e0 0c             	shl    $0xc,%eax
}
c010a5b1:	c9                   	leave  
c010a5b2:	c3                   	ret    

c010a5b3 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010a5b3:	55                   	push   %ebp
c010a5b4:	89 e5                	mov    %esp,%ebp
c010a5b6:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a5b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5bc:	89 04 24             	mov    %eax,(%esp)
c010a5bf:	e8 d9 ff ff ff       	call   c010a59d <page2pa>
c010a5c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a5c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5ca:	c1 e8 0c             	shr    $0xc,%eax
c010a5cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a5d0:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c010a5d5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a5d8:	72 23                	jb     c010a5fd <page2kva+0x4a>
c010a5da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5dd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a5e1:	c7 44 24 08 0c f5 10 	movl   $0xc010f50c,0x8(%esp)
c010a5e8:	c0 
c010a5e9:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a5f0:	00 
c010a5f1:	c7 04 24 2f f5 10 c0 	movl   $0xc010f52f,(%esp)
c010a5f8:	e8 5b 7c ff ff       	call   c0102258 <__panic>
c010a5fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a600:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a605:	c9                   	leave  
c010a606:	c3                   	ret    

c010a607 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010a607:	55                   	push   %ebp
c010a608:	89 e5                	mov    %esp,%ebp
c010a60a:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010a60d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a614:	e8 8f 89 ff ff       	call   c0102fa8 <ide_device_valid>
c010a619:	85 c0                	test   %eax,%eax
c010a61b:	75 1c                	jne    c010a639 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010a61d:	c7 44 24 08 3d f5 10 	movl   $0xc010f53d,0x8(%esp)
c010a624:	c0 
c010a625:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010a62c:	00 
c010a62d:	c7 04 24 57 f5 10 c0 	movl   $0xc010f557,(%esp)
c010a634:	e8 1f 7c ff ff       	call   c0102258 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010a639:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a640:	e8 a2 89 ff ff       	call   c0102fe7 <ide_device_size>
c010a645:	c1 e8 03             	shr    $0x3,%eax
c010a648:	a3 7c 20 1a c0       	mov    %eax,0xc01a207c
}
c010a64d:	c9                   	leave  
c010a64e:	c3                   	ret    

c010a64f <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010a64f:	55                   	push   %ebp
c010a650:	89 e5                	mov    %esp,%ebp
c010a652:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a655:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a658:	89 04 24             	mov    %eax,(%esp)
c010a65b:	e8 53 ff ff ff       	call   c010a5b3 <page2kva>
c010a660:	8b 55 08             	mov    0x8(%ebp),%edx
c010a663:	c1 ea 08             	shr    $0x8,%edx
c010a666:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a669:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a66d:	74 0b                	je     c010a67a <swapfs_read+0x2b>
c010a66f:	8b 15 7c 20 1a c0    	mov    0xc01a207c,%edx
c010a675:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a678:	72 23                	jb     c010a69d <swapfs_read+0x4e>
c010a67a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a67d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a681:	c7 44 24 08 68 f5 10 	movl   $0xc010f568,0x8(%esp)
c010a688:	c0 
c010a689:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a690:	00 
c010a691:	c7 04 24 57 f5 10 c0 	movl   $0xc010f557,(%esp)
c010a698:	e8 bb 7b ff ff       	call   c0102258 <__panic>
c010a69d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6a0:	c1 e2 03             	shl    $0x3,%edx
c010a6a3:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a6aa:	00 
c010a6ab:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a6af:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a6b3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a6ba:	e8 67 89 ff ff       	call   c0103026 <ide_read_secs>
}
c010a6bf:	c9                   	leave  
c010a6c0:	c3                   	ret    

c010a6c1 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010a6c1:	55                   	push   %ebp
c010a6c2:	89 e5                	mov    %esp,%ebp
c010a6c4:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a6c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6ca:	89 04 24             	mov    %eax,(%esp)
c010a6cd:	e8 e1 fe ff ff       	call   c010a5b3 <page2kva>
c010a6d2:	8b 55 08             	mov    0x8(%ebp),%edx
c010a6d5:	c1 ea 08             	shr    $0x8,%edx
c010a6d8:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a6db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a6df:	74 0b                	je     c010a6ec <swapfs_write+0x2b>
c010a6e1:	8b 15 7c 20 1a c0    	mov    0xc01a207c,%edx
c010a6e7:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a6ea:	72 23                	jb     c010a70f <swapfs_write+0x4e>
c010a6ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a6f3:	c7 44 24 08 68 f5 10 	movl   $0xc010f568,0x8(%esp)
c010a6fa:	c0 
c010a6fb:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010a702:	00 
c010a703:	c7 04 24 57 f5 10 c0 	movl   $0xc010f557,(%esp)
c010a70a:	e8 49 7b ff ff       	call   c0102258 <__panic>
c010a70f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a712:	c1 e2 03             	shl    $0x3,%edx
c010a715:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a71c:	00 
c010a71d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a721:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a725:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a72c:	e8 37 8b ff ff       	call   c0103268 <ide_write_secs>
}
c010a731:	c9                   	leave  
c010a732:	c3                   	ret    

c010a733 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010a733:	52                   	push   %edx
    call *%ebx              # call fn
c010a734:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010a736:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010a737:	e8 79 0c 00 00       	call   c010b3b5 <do_exit>

c010a73c <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c010a73c:	55                   	push   %ebp
c010a73d:	89 e5                	mov    %esp,%ebp
c010a73f:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c010a742:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a745:	8b 45 08             	mov    0x8(%ebp),%eax
c010a748:	0f ab 02             	bts    %eax,(%edx)
c010a74b:	19 c0                	sbb    %eax,%eax
c010a74d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c010a750:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010a754:	0f 95 c0             	setne  %al
c010a757:	0f b6 c0             	movzbl %al,%eax
}
c010a75a:	c9                   	leave  
c010a75b:	c3                   	ret    

c010a75c <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c010a75c:	55                   	push   %ebp
c010a75d:	89 e5                	mov    %esp,%ebp
c010a75f:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c010a762:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a765:	8b 45 08             	mov    0x8(%ebp),%eax
c010a768:	0f b3 02             	btr    %eax,(%edx)
c010a76b:	19 c0                	sbb    %eax,%eax
c010a76d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c010a770:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010a774:	0f 95 c0             	setne  %al
c010a777:	0f b6 c0             	movzbl %al,%eax
}
c010a77a:	c9                   	leave  
c010a77b:	c3                   	ret    

c010a77c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a77c:	55                   	push   %ebp
c010a77d:	89 e5                	mov    %esp,%ebp
c010a77f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a782:	9c                   	pushf  
c010a783:	58                   	pop    %eax
c010a784:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a787:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a78a:	25 00 02 00 00       	and    $0x200,%eax
c010a78f:	85 c0                	test   %eax,%eax
c010a791:	74 0c                	je     c010a79f <__intr_save+0x23>
        intr_disable();
c010a793:	e8 18 8d ff ff       	call   c01034b0 <intr_disable>
        return 1;
c010a798:	b8 01 00 00 00       	mov    $0x1,%eax
c010a79d:	eb 05                	jmp    c010a7a4 <__intr_save+0x28>
    }
    return 0;
c010a79f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a7a4:	c9                   	leave  
c010a7a5:	c3                   	ret    

c010a7a6 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a7a6:	55                   	push   %ebp
c010a7a7:	89 e5                	mov    %esp,%ebp
c010a7a9:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a7ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a7b0:	74 05                	je     c010a7b7 <__intr_restore+0x11>
        intr_enable();
c010a7b2:	e8 f3 8c ff ff       	call   c01034aa <intr_enable>
    }
}
c010a7b7:	c9                   	leave  
c010a7b8:	c3                   	ret    

c010a7b9 <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c010a7b9:	55                   	push   %ebp
c010a7ba:	89 e5                	mov    %esp,%ebp
c010a7bc:	83 ec 08             	sub    $0x8,%esp
    return !test_and_set_bit(0, lock);
c010a7bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7c6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010a7cd:	e8 6a ff ff ff       	call   c010a73c <test_and_set_bit>
c010a7d2:	85 c0                	test   %eax,%eax
c010a7d4:	0f 94 c0             	sete   %al
c010a7d7:	0f b6 c0             	movzbl %al,%eax
}
c010a7da:	c9                   	leave  
c010a7db:	c3                   	ret    

c010a7dc <lock>:

static inline void
lock(lock_t *lock) {
c010a7dc:	55                   	push   %ebp
c010a7dd:	89 e5                	mov    %esp,%ebp
c010a7df:	83 ec 18             	sub    $0x18,%esp
    while (!try_lock(lock)) {
c010a7e2:	eb 05                	jmp    c010a7e9 <lock+0xd>
        schedule();
c010a7e4:	e8 31 1c 00 00       	call   c010c41a <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c010a7e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7ec:	89 04 24             	mov    %eax,(%esp)
c010a7ef:	e8 c5 ff ff ff       	call   c010a7b9 <try_lock>
c010a7f4:	85 c0                	test   %eax,%eax
c010a7f6:	74 ec                	je     c010a7e4 <lock+0x8>
        schedule();
    }
}
c010a7f8:	c9                   	leave  
c010a7f9:	c3                   	ret    

c010a7fa <unlock>:

static inline void
unlock(lock_t *lock) {
c010a7fa:	55                   	push   %ebp
c010a7fb:	89 e5                	mov    %esp,%ebp
c010a7fd:	83 ec 18             	sub    $0x18,%esp
    if (!test_and_clear_bit(0, lock)) {
c010a800:	8b 45 08             	mov    0x8(%ebp),%eax
c010a803:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a807:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010a80e:	e8 49 ff ff ff       	call   c010a75c <test_and_clear_bit>
c010a813:	85 c0                	test   %eax,%eax
c010a815:	75 1c                	jne    c010a833 <unlock+0x39>
        panic("Unlock failed.\n");
c010a817:	c7 44 24 08 88 f5 10 	movl   $0xc010f588,0x8(%esp)
c010a81e:	c0 
c010a81f:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c010a826:	00 
c010a827:	c7 04 24 98 f5 10 c0 	movl   $0xc010f598,(%esp)
c010a82e:	e8 25 7a ff ff       	call   c0102258 <__panic>
    }
}
c010a833:	c9                   	leave  
c010a834:	c3                   	ret    

c010a835 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a835:	55                   	push   %ebp
c010a836:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a838:	8b 55 08             	mov    0x8(%ebp),%edx
c010a83b:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c010a840:	29 c2                	sub    %eax,%edx
c010a842:	89 d0                	mov    %edx,%eax
c010a844:	c1 f8 05             	sar    $0x5,%eax
}
c010a847:	5d                   	pop    %ebp
c010a848:	c3                   	ret    

c010a849 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a849:	55                   	push   %ebp
c010a84a:	89 e5                	mov    %esp,%ebp
c010a84c:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a84f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a852:	89 04 24             	mov    %eax,(%esp)
c010a855:	e8 db ff ff ff       	call   c010a835 <page2ppn>
c010a85a:	c1 e0 0c             	shl    $0xc,%eax
}
c010a85d:	c9                   	leave  
c010a85e:	c3                   	ret    

c010a85f <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010a85f:	55                   	push   %ebp
c010a860:	89 e5                	mov    %esp,%ebp
c010a862:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010a865:	8b 45 08             	mov    0x8(%ebp),%eax
c010a868:	c1 e8 0c             	shr    $0xc,%eax
c010a86b:	89 c2                	mov    %eax,%edx
c010a86d:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c010a872:	39 c2                	cmp    %eax,%edx
c010a874:	72 1c                	jb     c010a892 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010a876:	c7 44 24 08 ac f5 10 	movl   $0xc010f5ac,0x8(%esp)
c010a87d:	c0 
c010a87e:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010a885:	00 
c010a886:	c7 04 24 cb f5 10 c0 	movl   $0xc010f5cb,(%esp)
c010a88d:	e8 c6 79 ff ff       	call   c0102258 <__panic>
    }
    return &pages[PPN(pa)];
c010a892:	a1 cc 1f 1a c0       	mov    0xc01a1fcc,%eax
c010a897:	8b 55 08             	mov    0x8(%ebp),%edx
c010a89a:	c1 ea 0c             	shr    $0xc,%edx
c010a89d:	c1 e2 05             	shl    $0x5,%edx
c010a8a0:	01 d0                	add    %edx,%eax
}
c010a8a2:	c9                   	leave  
c010a8a3:	c3                   	ret    

c010a8a4 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010a8a4:	55                   	push   %ebp
c010a8a5:	89 e5                	mov    %esp,%ebp
c010a8a7:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a8aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8ad:	89 04 24             	mov    %eax,(%esp)
c010a8b0:	e8 94 ff ff ff       	call   c010a849 <page2pa>
c010a8b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8bb:	c1 e8 0c             	shr    $0xc,%eax
c010a8be:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a8c1:	a1 e0 fe 19 c0       	mov    0xc019fee0,%eax
c010a8c6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a8c9:	72 23                	jb     c010a8ee <page2kva+0x4a>
c010a8cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8ce:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a8d2:	c7 44 24 08 dc f5 10 	movl   $0xc010f5dc,0x8(%esp)
c010a8d9:	c0 
c010a8da:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a8e1:	00 
c010a8e2:	c7 04 24 cb f5 10 c0 	movl   $0xc010f5cb,(%esp)
c010a8e9:	e8 6a 79 ff ff       	call   c0102258 <__panic>
c010a8ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8f1:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a8f6:	c9                   	leave  
c010a8f7:	c3                   	ret    

c010a8f8 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010a8f8:	55                   	push   %ebp
c010a8f9:	89 e5                	mov    %esp,%ebp
c010a8fb:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a8fe:	8b 45 08             	mov    0x8(%ebp),%eax
c010a901:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a904:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a90b:	77 23                	ja     c010a930 <kva2page+0x38>
c010a90d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a910:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a914:	c7 44 24 08 00 f6 10 	movl   $0xc010f600,0x8(%esp)
c010a91b:	c0 
c010a91c:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a923:	00 
c010a924:	c7 04 24 cb f5 10 c0 	movl   $0xc010f5cb,(%esp)
c010a92b:	e8 28 79 ff ff       	call   c0102258 <__panic>
c010a930:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a933:	05 00 00 00 40       	add    $0x40000000,%eax
c010a938:	89 04 24             	mov    %eax,(%esp)
c010a93b:	e8 1f ff ff ff       	call   c010a85f <pa2page>
}
c010a940:	c9                   	leave  
c010a941:	c3                   	ret    

c010a942 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a942:	55                   	push   %ebp
c010a943:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a945:	8b 45 08             	mov    0x8(%ebp),%eax
c010a948:	8b 40 18             	mov    0x18(%eax),%eax
c010a94b:	8d 50 01             	lea    0x1(%eax),%edx
c010a94e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a951:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a954:	8b 45 08             	mov    0x8(%ebp),%eax
c010a957:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a95a:	5d                   	pop    %ebp
c010a95b:	c3                   	ret    

c010a95c <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a95c:	55                   	push   %ebp
c010a95d:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a95f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a962:	8b 40 18             	mov    0x18(%eax),%eax
c010a965:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a968:	8b 45 08             	mov    0x8(%ebp),%eax
c010a96b:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a96e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a971:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a974:	5d                   	pop    %ebp
c010a975:	c3                   	ret    

c010a976 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a976:	55                   	push   %ebp
c010a977:	89 e5                	mov    %esp,%ebp
c010a979:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a97c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a980:	74 0e                	je     c010a990 <lock_mm+0x1a>
        lock(&(mm->mm_lock));
c010a982:	8b 45 08             	mov    0x8(%ebp),%eax
c010a985:	83 c0 1c             	add    $0x1c,%eax
c010a988:	89 04 24             	mov    %eax,(%esp)
c010a98b:	e8 4c fe ff ff       	call   c010a7dc <lock>
    }
}
c010a990:	c9                   	leave  
c010a991:	c3                   	ret    

c010a992 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a992:	55                   	push   %ebp
c010a993:	89 e5                	mov    %esp,%ebp
c010a995:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a998:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a99c:	74 0e                	je     c010a9ac <unlock_mm+0x1a>
        unlock(&(mm->mm_lock));
c010a99e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9a1:	83 c0 1c             	add    $0x1c,%eax
c010a9a4:	89 04 24             	mov    %eax,(%esp)
c010a9a7:	e8 4e fe ff ff       	call   c010a7fa <unlock>
    }
}
c010a9ac:	c9                   	leave  
c010a9ad:	c3                   	ret    

c010a9ae <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a9ae:	55                   	push   %ebp
c010a9af:	89 e5                	mov    %esp,%ebp
c010a9b1:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a9b4:	c7 04 24 7c 00 00 00 	movl   $0x7c,(%esp)
c010a9bb:	e8 b5 b6 ff ff       	call   c0106075 <kmalloc>
c010a9c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a9c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9c7:	0f 84 cd 00 00 00    	je     c010aa9a <alloc_proc+0xec>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
        proc->state = PROC_UNINIT;
c010a9cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9d0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010a9d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9d9:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010a9e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9e3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010a9ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9ed:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010a9f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9f7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010a9fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa01:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010aa08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa0b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010aa12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa15:	83 c0 1c             	add    $0x1c,%eax
c010aa18:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010aa1f:	00 
c010aa20:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aa27:	00 
c010aa28:	89 04 24             	mov    %eax,(%esp)
c010aa2b:	e8 55 27 00 00       	call   c010d185 <memset>
        proc->tf = NULL;
c010aa30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa33:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010aa3a:	8b 15 c8 1f 1a c0    	mov    0xc01a1fc8,%edx
c010aa40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa43:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010aa46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa49:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010aa50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa53:	83 c0 48             	add    $0x48,%eax
c010aa56:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c010aa5d:	00 
c010aa5e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aa65:	00 
c010aa66:	89 04 24             	mov    %eax,(%esp)
c010aa69:	e8 17 27 00 00       	call   c010d185 <memset>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
        proc->wait_state = 0;
c010aa6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa71:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
        proc->cptr = proc->yptr = proc->optr = NULL;
c010aa78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa7b:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
c010aa82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa85:	8b 50 78             	mov    0x78(%eax),%edx
c010aa88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa8b:	89 50 74             	mov    %edx,0x74(%eax)
c010aa8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa91:	8b 50 74             	mov    0x74(%eax),%edx
c010aa94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa97:	89 50 70             	mov    %edx,0x70(%eax)
    }
    return proc;
c010aa9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aa9d:	c9                   	leave  
c010aa9e:	c3                   	ret    

c010aa9f <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010aa9f:	55                   	push   %ebp
c010aaa0:	89 e5                	mov    %esp,%ebp
c010aaa2:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010aaa5:	8b 45 08             	mov    0x8(%ebp),%eax
c010aaa8:	83 c0 48             	add    $0x48,%eax
c010aaab:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010aab2:	00 
c010aab3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aaba:	00 
c010aabb:	89 04 24             	mov    %eax,(%esp)
c010aabe:	e8 c2 26 00 00       	call   c010d185 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010aac3:	8b 45 08             	mov    0x8(%ebp),%eax
c010aac6:	8d 50 48             	lea    0x48(%eax),%edx
c010aac9:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c010aad0:	00 
c010aad1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aad4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aad8:	89 14 24             	mov    %edx,(%esp)
c010aadb:	e8 87 27 00 00       	call   c010d267 <memcpy>
}
c010aae0:	c9                   	leave  
c010aae1:	c3                   	ret    

c010aae2 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010aae2:	55                   	push   %ebp
c010aae3:	89 e5                	mov    %esp,%ebp
c010aae5:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010aae8:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010aaef:	00 
c010aaf0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aaf7:	00 
c010aaf8:	c7 04 24 a4 1f 1a c0 	movl   $0xc01a1fa4,(%esp)
c010aaff:	e8 81 26 00 00       	call   c010d185 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010ab04:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab07:	83 c0 48             	add    $0x48,%eax
c010ab0a:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c010ab11:	00 
c010ab12:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab16:	c7 04 24 a4 1f 1a c0 	movl   $0xc01a1fa4,(%esp)
c010ab1d:	e8 45 27 00 00       	call   c010d267 <memcpy>
}
c010ab22:	c9                   	leave  
c010ab23:	c3                   	ret    

c010ab24 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010ab24:	55                   	push   %ebp
c010ab25:	89 e5                	mov    %esp,%ebp
c010ab27:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010ab2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab2d:	83 c0 58             	add    $0x58,%eax
c010ab30:	c7 45 fc b0 20 1a c0 	movl   $0xc01a20b0,-0x4(%ebp)
c010ab37:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010ab3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ab3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab40:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ab43:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010ab46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab49:	8b 40 04             	mov    0x4(%eax),%eax
c010ab4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ab4f:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010ab52:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ab55:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010ab58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010ab5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab5e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ab61:	89 10                	mov    %edx,(%eax)
c010ab63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab66:	8b 10                	mov    (%eax),%edx
c010ab68:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ab6b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010ab6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab71:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ab74:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010ab77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab7a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ab7d:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010ab7f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab82:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010ab89:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab8c:	8b 40 14             	mov    0x14(%eax),%eax
c010ab8f:	8b 50 70             	mov    0x70(%eax),%edx
c010ab92:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab95:	89 50 78             	mov    %edx,0x78(%eax)
c010ab98:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab9b:	8b 40 78             	mov    0x78(%eax),%eax
c010ab9e:	85 c0                	test   %eax,%eax
c010aba0:	74 0c                	je     c010abae <set_links+0x8a>
        proc->optr->yptr = proc;
c010aba2:	8b 45 08             	mov    0x8(%ebp),%eax
c010aba5:	8b 40 78             	mov    0x78(%eax),%eax
c010aba8:	8b 55 08             	mov    0x8(%ebp),%edx
c010abab:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c010abae:	8b 45 08             	mov    0x8(%ebp),%eax
c010abb1:	8b 40 14             	mov    0x14(%eax),%eax
c010abb4:	8b 55 08             	mov    0x8(%ebp),%edx
c010abb7:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c010abba:	a1 a0 1f 1a c0       	mov    0xc01a1fa0,%eax
c010abbf:	83 c0 01             	add    $0x1,%eax
c010abc2:	a3 a0 1f 1a c0       	mov    %eax,0xc01a1fa0
}
c010abc7:	c9                   	leave  
c010abc8:	c3                   	ret    

c010abc9 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010abc9:	55                   	push   %ebp
c010abca:	89 e5                	mov    %esp,%ebp
c010abcc:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010abcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010abd2:	83 c0 58             	add    $0x58,%eax
c010abd5:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010abd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010abdb:	8b 40 04             	mov    0x4(%eax),%eax
c010abde:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010abe1:	8b 12                	mov    (%edx),%edx
c010abe3:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010abe6:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010abe9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010abec:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010abef:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010abf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abf5:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010abf8:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010abfa:	8b 45 08             	mov    0x8(%ebp),%eax
c010abfd:	8b 40 78             	mov    0x78(%eax),%eax
c010ac00:	85 c0                	test   %eax,%eax
c010ac02:	74 0f                	je     c010ac13 <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c010ac04:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac07:	8b 40 78             	mov    0x78(%eax),%eax
c010ac0a:	8b 55 08             	mov    0x8(%ebp),%edx
c010ac0d:	8b 52 74             	mov    0x74(%edx),%edx
c010ac10:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c010ac13:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac16:	8b 40 74             	mov    0x74(%eax),%eax
c010ac19:	85 c0                	test   %eax,%eax
c010ac1b:	74 11                	je     c010ac2e <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c010ac1d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac20:	8b 40 74             	mov    0x74(%eax),%eax
c010ac23:	8b 55 08             	mov    0x8(%ebp),%edx
c010ac26:	8b 52 78             	mov    0x78(%edx),%edx
c010ac29:	89 50 78             	mov    %edx,0x78(%eax)
c010ac2c:	eb 0f                	jmp    c010ac3d <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c010ac2e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac31:	8b 40 14             	mov    0x14(%eax),%eax
c010ac34:	8b 55 08             	mov    0x8(%ebp),%edx
c010ac37:	8b 52 78             	mov    0x78(%edx),%edx
c010ac3a:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c010ac3d:	a1 a0 1f 1a c0       	mov    0xc01a1fa0,%eax
c010ac42:	83 e8 01             	sub    $0x1,%eax
c010ac45:	a3 a0 1f 1a c0       	mov    %eax,0xc01a1fa0
}
c010ac4a:	c9                   	leave  
c010ac4b:	c3                   	ret    

c010ac4c <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010ac4c:	55                   	push   %ebp
c010ac4d:	89 e5                	mov    %esp,%ebp
c010ac4f:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010ac52:	c7 45 f8 b0 20 1a c0 	movl   $0xc01a20b0,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010ac59:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c010ac5e:	83 c0 01             	add    $0x1,%eax
c010ac61:	a3 80 da 12 c0       	mov    %eax,0xc012da80
c010ac66:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c010ac6b:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010ac70:	7e 0c                	jle    c010ac7e <get_pid+0x32>
        last_pid = 1;
c010ac72:	c7 05 80 da 12 c0 01 	movl   $0x1,0xc012da80
c010ac79:	00 00 00 
        goto inside;
c010ac7c:	eb 13                	jmp    c010ac91 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010ac7e:	8b 15 80 da 12 c0    	mov    0xc012da80,%edx
c010ac84:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c010ac89:	39 c2                	cmp    %eax,%edx
c010ac8b:	0f 8c ac 00 00 00    	jl     c010ad3d <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010ac91:	c7 05 84 da 12 c0 00 	movl   $0x2000,0xc012da84
c010ac98:	20 00 00 
    repeat:
        le = list;
c010ac9b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ac9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010aca1:	eb 7f                	jmp    c010ad22 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010aca3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010aca6:	83 e8 58             	sub    $0x58,%eax
c010aca9:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010acac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acaf:	8b 50 04             	mov    0x4(%eax),%edx
c010acb2:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c010acb7:	39 c2                	cmp    %eax,%edx
c010acb9:	75 3e                	jne    c010acf9 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010acbb:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c010acc0:	83 c0 01             	add    $0x1,%eax
c010acc3:	a3 80 da 12 c0       	mov    %eax,0xc012da80
c010acc8:	8b 15 80 da 12 c0    	mov    0xc012da80,%edx
c010acce:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c010acd3:	39 c2                	cmp    %eax,%edx
c010acd5:	7c 4b                	jl     c010ad22 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010acd7:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c010acdc:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010ace1:	7e 0a                	jle    c010aced <get_pid+0xa1>
                        last_pid = 1;
c010ace3:	c7 05 80 da 12 c0 01 	movl   $0x1,0xc012da80
c010acea:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010aced:	c7 05 84 da 12 c0 00 	movl   $0x2000,0xc012da84
c010acf4:	20 00 00 
                    goto repeat;
c010acf7:	eb a2                	jmp    c010ac9b <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010acf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acfc:	8b 50 04             	mov    0x4(%eax),%edx
c010acff:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c010ad04:	39 c2                	cmp    %eax,%edx
c010ad06:	7e 1a                	jle    c010ad22 <get_pid+0xd6>
c010ad08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad0b:	8b 50 04             	mov    0x4(%eax),%edx
c010ad0e:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c010ad13:	39 c2                	cmp    %eax,%edx
c010ad15:	7d 0b                	jge    c010ad22 <get_pid+0xd6>
                next_safe = proc->pid;
c010ad17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad1a:	8b 40 04             	mov    0x4(%eax),%eax
c010ad1d:	a3 84 da 12 c0       	mov    %eax,0xc012da84
c010ad22:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ad25:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ad28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad2b:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010ad2e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010ad31:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ad34:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010ad37:	0f 85 66 ff ff ff    	jne    c010aca3 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010ad3d:	a1 80 da 12 c0       	mov    0xc012da80,%eax
}
c010ad42:	c9                   	leave  
c010ad43:	c3                   	ret    

c010ad44 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010ad44:	55                   	push   %ebp
c010ad45:	89 e5                	mov    %esp,%ebp
c010ad47:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010ad4a:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010ad4f:	39 45 08             	cmp    %eax,0x8(%ebp)
c010ad52:	74 63                	je     c010adb7 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010ad54:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010ad59:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010ad62:	e8 15 fa ff ff       	call   c010a77c <__intr_save>
c010ad67:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010ad6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad6d:	a3 88 ff 19 c0       	mov    %eax,0xc019ff88
            load_esp0(next->kstack + KSTACKSIZE);
c010ad72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad75:	8b 40 0c             	mov    0xc(%eax),%eax
c010ad78:	05 00 20 00 00       	add    $0x2000,%eax
c010ad7d:	89 04 24             	mov    %eax,(%esp)
c010ad80:	e8 17 b6 ff ff       	call   c010639c <load_esp0>
            lcr3(next->cr3);
c010ad85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad88:	8b 40 40             	mov    0x40(%eax),%eax
c010ad8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010ad8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad91:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010ad94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad97:	8d 50 1c             	lea    0x1c(%eax),%edx
c010ad9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad9d:	83 c0 1c             	add    $0x1c,%eax
c010ada0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ada4:	89 04 24             	mov    %eax,(%esp)
c010ada7:	e8 76 15 00 00       	call   c010c322 <switch_to>
        }
        local_intr_restore(intr_flag);
c010adac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adaf:	89 04 24             	mov    %eax,(%esp)
c010adb2:	e8 ef f9 ff ff       	call   c010a7a6 <__intr_restore>
    }
}
c010adb7:	c9                   	leave  
c010adb8:	c3                   	ret    

c010adb9 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010adb9:	55                   	push   %ebp
c010adba:	89 e5                	mov    %esp,%ebp
c010adbc:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010adbf:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010adc4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010adc7:	89 04 24             	mov    %eax,(%esp)
c010adca:	e8 2d 91 ff ff       	call   c0103efc <forkrets>
}
c010adcf:	c9                   	leave  
c010add0:	c3                   	ret    

c010add1 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010add1:	55                   	push   %ebp
c010add2:	89 e5                	mov    %esp,%ebp
c010add4:	53                   	push   %ebx
c010add5:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010add8:	8b 45 08             	mov    0x8(%ebp),%eax
c010addb:	8d 58 60             	lea    0x60(%eax),%ebx
c010adde:	8b 45 08             	mov    0x8(%ebp),%eax
c010ade1:	8b 40 04             	mov    0x4(%eax),%eax
c010ade4:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010adeb:	00 
c010adec:	89 04 24             	mov    %eax,(%esp)
c010adef:	e8 e4 18 00 00       	call   c010c6d8 <hash32>
c010adf4:	c1 e0 03             	shl    $0x3,%eax
c010adf7:	05 a0 ff 19 c0       	add    $0xc019ffa0,%eax
c010adfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010adff:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010ae02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae05:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ae08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae0b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010ae0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae11:	8b 40 04             	mov    0x4(%eax),%eax
c010ae14:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ae17:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010ae1a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ae1d:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010ae20:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010ae23:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ae26:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ae29:	89 10                	mov    %edx,(%eax)
c010ae2b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ae2e:	8b 10                	mov    (%eax),%edx
c010ae30:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ae33:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010ae36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ae39:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010ae3c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010ae3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ae42:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010ae45:	89 10                	mov    %edx,(%eax)
}
c010ae47:	83 c4 34             	add    $0x34,%esp
c010ae4a:	5b                   	pop    %ebx
c010ae4b:	5d                   	pop    %ebp
c010ae4c:	c3                   	ret    

c010ae4d <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010ae4d:	55                   	push   %ebp
c010ae4e:	89 e5                	mov    %esp,%ebp
c010ae50:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010ae53:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae56:	83 c0 60             	add    $0x60,%eax
c010ae59:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010ae5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ae5f:	8b 40 04             	mov    0x4(%eax),%eax
c010ae62:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ae65:	8b 12                	mov    (%edx),%edx
c010ae67:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010ae6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010ae6d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ae70:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ae73:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ae76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae79:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010ae7c:	89 10                	mov    %edx,(%eax)
}
c010ae7e:	c9                   	leave  
c010ae7f:	c3                   	ret    

c010ae80 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010ae80:	55                   	push   %ebp
c010ae81:	89 e5                	mov    %esp,%ebp
c010ae83:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010ae86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ae8a:	7e 5f                	jle    c010aeeb <find_proc+0x6b>
c010ae8c:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010ae93:	7f 56                	jg     c010aeeb <find_proc+0x6b>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010ae95:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae98:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010ae9f:	00 
c010aea0:	89 04 24             	mov    %eax,(%esp)
c010aea3:	e8 30 18 00 00       	call   c010c6d8 <hash32>
c010aea8:	c1 e0 03             	shl    $0x3,%eax
c010aeab:	05 a0 ff 19 c0       	add    $0xc019ffa0,%eax
c010aeb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aeb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010aeb9:	eb 19                	jmp    c010aed4 <find_proc+0x54>
            struct proc_struct *proc = le2proc(le, hash_link);
c010aebb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aebe:	83 e8 60             	sub    $0x60,%eax
c010aec1:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010aec4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aec7:	8b 40 04             	mov    0x4(%eax),%eax
c010aeca:	3b 45 08             	cmp    0x8(%ebp),%eax
c010aecd:	75 05                	jne    c010aed4 <find_proc+0x54>
                return proc;
c010aecf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aed2:	eb 1c                	jmp    c010aef0 <find_proc+0x70>
c010aed4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aed7:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010aeda:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aedd:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010aee0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aee6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010aee9:	75 d0                	jne    c010aebb <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010aeeb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aef0:	c9                   	leave  
c010aef1:	c3                   	ret    

c010aef2 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010aef2:	55                   	push   %ebp
c010aef3:	89 e5                	mov    %esp,%ebp
c010aef5:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010aef8:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010aeff:	00 
c010af00:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010af07:	00 
c010af08:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010af0b:	89 04 24             	mov    %eax,(%esp)
c010af0e:	e8 72 22 00 00       	call   c010d185 <memset>
    tf.tf_cs = KERNEL_CS;
c010af13:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010af19:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010af1f:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010af23:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010af27:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010af2b:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010af2f:	8b 45 08             	mov    0x8(%ebp),%eax
c010af32:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010af35:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af38:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010af3b:	b8 33 a7 10 c0       	mov    $0xc010a733,%eax
c010af40:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010af43:	8b 45 10             	mov    0x10(%ebp),%eax
c010af46:	80 cc 01             	or     $0x1,%ah
c010af49:	89 c2                	mov    %eax,%edx
c010af4b:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010af4e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010af52:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010af59:	00 
c010af5a:	89 14 24             	mov    %edx,(%esp)
c010af5d:	e8 25 03 00 00       	call   c010b287 <do_fork>
}
c010af62:	c9                   	leave  
c010af63:	c3                   	ret    

c010af64 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010af64:	55                   	push   %ebp
c010af65:	89 e5                	mov    %esp,%ebp
c010af67:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010af6a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010af71:	e8 74 b5 ff ff       	call   c01064ea <alloc_pages>
c010af76:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010af79:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af7d:	74 1a                	je     c010af99 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010af7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af82:	89 04 24             	mov    %eax,(%esp)
c010af85:	e8 1a f9 ff ff       	call   c010a8a4 <page2kva>
c010af8a:	89 c2                	mov    %eax,%edx
c010af8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010af8f:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010af92:	b8 00 00 00 00       	mov    $0x0,%eax
c010af97:	eb 05                	jmp    c010af9e <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010af99:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010af9e:	c9                   	leave  
c010af9f:	c3                   	ret    

c010afa0 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010afa0:	55                   	push   %ebp
c010afa1:	89 e5                	mov    %esp,%ebp
c010afa3:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010afa6:	8b 45 08             	mov    0x8(%ebp),%eax
c010afa9:	8b 40 0c             	mov    0xc(%eax),%eax
c010afac:	89 04 24             	mov    %eax,(%esp)
c010afaf:	e8 44 f9 ff ff       	call   c010a8f8 <kva2page>
c010afb4:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010afbb:	00 
c010afbc:	89 04 24             	mov    %eax,(%esp)
c010afbf:	e8 91 b5 ff ff       	call   c0106555 <free_pages>
}
c010afc4:	c9                   	leave  
c010afc5:	c3                   	ret    

c010afc6 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010afc6:	55                   	push   %ebp
c010afc7:	89 e5                	mov    %esp,%ebp
c010afc9:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010afcc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010afd3:	e8 12 b5 ff ff       	call   c01064ea <alloc_pages>
c010afd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010afdb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010afdf:	75 0a                	jne    c010afeb <setup_pgdir+0x25>
        return -E_NO_MEM;
c010afe1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010afe6:	e9 80 00 00 00       	jmp    c010b06b <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010afeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afee:	89 04 24             	mov    %eax,(%esp)
c010aff1:	e8 ae f8 ff ff       	call   c010a8a4 <page2kva>
c010aff6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010aff9:	a1 e4 fe 19 c0       	mov    0xc019fee4,%eax
c010affe:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010b005:	00 
c010b006:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b00a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b00d:	89 04 24             	mov    %eax,(%esp)
c010b010:	e8 52 22 00 00       	call   c010d267 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010b015:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b018:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010b01e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b021:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b024:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010b02b:	77 23                	ja     c010b050 <setup_pgdir+0x8a>
c010b02d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b030:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b034:	c7 44 24 08 00 f6 10 	movl   $0xc010f600,0x8(%esp)
c010b03b:	c0 
c010b03c:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c010b043:	00 
c010b044:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010b04b:	e8 08 72 ff ff       	call   c0102258 <__panic>
c010b050:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b053:	05 00 00 00 40       	add    $0x40000000,%eax
c010b058:	83 c8 03             	or     $0x3,%eax
c010b05b:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010b05d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b060:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b063:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010b066:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b06b:	c9                   	leave  
c010b06c:	c3                   	ret    

c010b06d <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010b06d:	55                   	push   %ebp
c010b06e:	89 e5                	mov    %esp,%ebp
c010b070:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010b073:	8b 45 08             	mov    0x8(%ebp),%eax
c010b076:	8b 40 0c             	mov    0xc(%eax),%eax
c010b079:	89 04 24             	mov    %eax,(%esp)
c010b07c:	e8 77 f8 ff ff       	call   c010a8f8 <kva2page>
c010b081:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b088:	00 
c010b089:	89 04 24             	mov    %eax,(%esp)
c010b08c:	e8 c4 b4 ff ff       	call   c0106555 <free_pages>
}
c010b091:	c9                   	leave  
c010b092:	c3                   	ret    

c010b093 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010b093:	55                   	push   %ebp
c010b094:	89 e5                	mov    %esp,%ebp
c010b096:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010b099:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b09e:	8b 40 18             	mov    0x18(%eax),%eax
c010b0a1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010b0a4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b0a8:	75 0a                	jne    c010b0b4 <copy_mm+0x21>
        return 0;
c010b0aa:	b8 00 00 00 00       	mov    $0x0,%eax
c010b0af:	e9 f9 00 00 00       	jmp    c010b1ad <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010b0b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0b7:	25 00 01 00 00       	and    $0x100,%eax
c010b0bc:	85 c0                	test   %eax,%eax
c010b0be:	74 08                	je     c010b0c8 <copy_mm+0x35>
        mm = oldmm;
c010b0c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010b0c6:	eb 78                	jmp    c010b140 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010b0c8:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010b0cf:	e8 b5 e2 ff ff       	call   c0109389 <mm_create>
c010b0d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b0db:	75 05                	jne    c010b0e2 <copy_mm+0x4f>
        goto bad_mm;
c010b0dd:	e9 c8 00 00 00       	jmp    c010b1aa <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010b0e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0e5:	89 04 24             	mov    %eax,(%esp)
c010b0e8:	e8 d9 fe ff ff       	call   c010afc6 <setup_pgdir>
c010b0ed:	85 c0                	test   %eax,%eax
c010b0ef:	74 05                	je     c010b0f6 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010b0f1:	e9 a9 00 00 00       	jmp    c010b19f <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010b0f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0f9:	89 04 24             	mov    %eax,(%esp)
c010b0fc:	e8 75 f8 ff ff       	call   c010a976 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010b101:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b104:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b108:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b10b:	89 04 24             	mov    %eax,(%esp)
c010b10e:	e8 8d e7 ff ff       	call   c01098a0 <dup_mmap>
c010b113:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010b116:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b119:	89 04 24             	mov    %eax,(%esp)
c010b11c:	e8 71 f8 ff ff       	call   c010a992 <unlock_mm>

    if (ret != 0) {
c010b121:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b125:	74 19                	je     c010b140 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010b127:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010b128:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b12b:	89 04 24             	mov    %eax,(%esp)
c010b12e:	e8 6e e8 ff ff       	call   c01099a1 <exit_mmap>
    put_pgdir(mm);
c010b133:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b136:	89 04 24             	mov    %eax,(%esp)
c010b139:	e8 2f ff ff ff       	call   c010b06d <put_pgdir>
c010b13e:	eb 5f                	jmp    c010b19f <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010b140:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b143:	89 04 24             	mov    %eax,(%esp)
c010b146:	e8 f7 f7 ff ff       	call   c010a942 <mm_count_inc>
    proc->mm = mm;
c010b14b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b14e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b151:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010b154:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b157:	8b 40 0c             	mov    0xc(%eax),%eax
c010b15a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b15d:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010b164:	77 23                	ja     c010b189 <copy_mm+0xf6>
c010b166:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b169:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b16d:	c7 44 24 08 00 f6 10 	movl   $0xc010f600,0x8(%esp)
c010b174:	c0 
c010b175:	c7 44 24 04 5d 01 00 	movl   $0x15d,0x4(%esp)
c010b17c:	00 
c010b17d:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010b184:	e8 cf 70 ff ff       	call   c0102258 <__panic>
c010b189:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b18c:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010b192:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b195:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010b198:	b8 00 00 00 00       	mov    $0x0,%eax
c010b19d:	eb 0e                	jmp    c010b1ad <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b19f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1a2:	89 04 24             	mov    %eax,(%esp)
c010b1a5:	e8 38 e5 ff ff       	call   c01096e2 <mm_destroy>
bad_mm:
    return ret;
c010b1aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010b1ad:	c9                   	leave  
c010b1ae:	c3                   	ret    

c010b1af <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010b1af:	55                   	push   %ebp
c010b1b0:	89 e5                	mov    %esp,%ebp
c010b1b2:	57                   	push   %edi
c010b1b3:	56                   	push   %esi
c010b1b4:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010b1b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1b8:	8b 40 0c             	mov    0xc(%eax),%eax
c010b1bb:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010b1c0:	89 c2                	mov    %eax,%edx
c010b1c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1c5:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010b1c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1cb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b1ce:	8b 55 10             	mov    0x10(%ebp),%edx
c010b1d1:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010b1d6:	89 c1                	mov    %eax,%ecx
c010b1d8:	83 e1 01             	and    $0x1,%ecx
c010b1db:	85 c9                	test   %ecx,%ecx
c010b1dd:	74 0e                	je     c010b1ed <copy_thread+0x3e>
c010b1df:	0f b6 0a             	movzbl (%edx),%ecx
c010b1e2:	88 08                	mov    %cl,(%eax)
c010b1e4:	83 c0 01             	add    $0x1,%eax
c010b1e7:	83 c2 01             	add    $0x1,%edx
c010b1ea:	83 eb 01             	sub    $0x1,%ebx
c010b1ed:	89 c1                	mov    %eax,%ecx
c010b1ef:	83 e1 02             	and    $0x2,%ecx
c010b1f2:	85 c9                	test   %ecx,%ecx
c010b1f4:	74 0f                	je     c010b205 <copy_thread+0x56>
c010b1f6:	0f b7 0a             	movzwl (%edx),%ecx
c010b1f9:	66 89 08             	mov    %cx,(%eax)
c010b1fc:	83 c0 02             	add    $0x2,%eax
c010b1ff:	83 c2 02             	add    $0x2,%edx
c010b202:	83 eb 02             	sub    $0x2,%ebx
c010b205:	89 d9                	mov    %ebx,%ecx
c010b207:	c1 e9 02             	shr    $0x2,%ecx
c010b20a:	89 c7                	mov    %eax,%edi
c010b20c:	89 d6                	mov    %edx,%esi
c010b20e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b210:	89 f2                	mov    %esi,%edx
c010b212:	89 f8                	mov    %edi,%eax
c010b214:	b9 00 00 00 00       	mov    $0x0,%ecx
c010b219:	89 de                	mov    %ebx,%esi
c010b21b:	83 e6 02             	and    $0x2,%esi
c010b21e:	85 f6                	test   %esi,%esi
c010b220:	74 0b                	je     c010b22d <copy_thread+0x7e>
c010b222:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010b226:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010b22a:	83 c1 02             	add    $0x2,%ecx
c010b22d:	83 e3 01             	and    $0x1,%ebx
c010b230:	85 db                	test   %ebx,%ebx
c010b232:	74 07                	je     c010b23b <copy_thread+0x8c>
c010b234:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010b238:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010b23b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b23e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b241:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010b248:	8b 45 08             	mov    0x8(%ebp),%eax
c010b24b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b24e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b251:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010b254:	8b 45 08             	mov    0x8(%ebp),%eax
c010b257:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b25a:	8b 55 08             	mov    0x8(%ebp),%edx
c010b25d:	8b 52 3c             	mov    0x3c(%edx),%edx
c010b260:	8b 52 40             	mov    0x40(%edx),%edx
c010b263:	80 ce 02             	or     $0x2,%dh
c010b266:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010b269:	ba b9 ad 10 c0       	mov    $0xc010adb9,%edx
c010b26e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b271:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010b274:	8b 45 08             	mov    0x8(%ebp),%eax
c010b277:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b27a:	89 c2                	mov    %eax,%edx
c010b27c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b27f:	89 50 20             	mov    %edx,0x20(%eax)
}
c010b282:	5b                   	pop    %ebx
c010b283:	5e                   	pop    %esi
c010b284:	5f                   	pop    %edi
c010b285:	5d                   	pop    %ebp
c010b286:	c3                   	ret    

c010b287 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010b287:	55                   	push   %ebp
c010b288:	89 e5                	mov    %esp,%ebp
c010b28a:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010b28d:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010b294:	a1 a0 1f 1a c0       	mov    0xc01a1fa0,%eax
c010b299:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010b29e:	7e 05                	jle    c010b2a5 <do_fork+0x1e>
        goto fork_out;
c010b2a0:	e9 fc 00 00 00       	jmp    c010b3a1 <do_fork+0x11a>
    }
    ret = -E_NO_MEM;
c010b2a5:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */

    proc = alloc_proc();
c010b2ac:	e8 fd f6 ff ff       	call   c010a9ae <alloc_proc>
c010b2b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL)
c010b2b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b2b8:	75 05                	jne    c010b2bf <do_fork+0x38>
        goto fork_out;
c010b2ba:	e9 e2 00 00 00       	jmp    c010b3a1 <do_fork+0x11a>

    int ret2;
    ret2 = setup_kstack(proc);
c010b2bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2c2:	89 04 24             	mov    %eax,(%esp)
c010b2c5:	e8 9a fc ff ff       	call   c010af64 <setup_kstack>
c010b2ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ret2 != 0)
c010b2cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b2d1:	74 05                	je     c010b2d8 <do_fork+0x51>
        goto bad_fork_cleanup_proc;
c010b2d3:	e9 ce 00 00 00       	jmp    c010b3a6 <do_fork+0x11f>

    ret2 = copy_mm(clone_flags, proc);
c010b2d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2db:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b2df:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2e2:	89 04 24             	mov    %eax,(%esp)
c010b2e5:	e8 a9 fd ff ff       	call   c010b093 <copy_mm>
c010b2ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ret2 != 0)
c010b2ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b2f1:	74 11                	je     c010b304 <do_fork+0x7d>
        goto bad_fork_cleanup_kstack;
c010b2f3:	90                   	nop

fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010b2f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2f7:	89 04 24             	mov    %eax,(%esp)
c010b2fa:	e8 a1 fc ff ff       	call   c010afa0 <put_kstack>
c010b2ff:	e9 a2 00 00 00       	jmp    c010b3a6 <do_fork+0x11f>

    ret2 = copy_mm(clone_flags, proc);
    if (ret2 != 0)
        goto bad_fork_cleanup_kstack;

    copy_thread(proc, stack, tf);
c010b304:	8b 45 10             	mov    0x10(%ebp),%eax
c010b307:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b30b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b30e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b312:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b315:	89 04 24             	mov    %eax,(%esp)
c010b318:	e8 92 fe ff ff       	call   c010b1af <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c010b31d:	e8 5a f4 ff ff       	call   c010a77c <__intr_save>
c010b322:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        proc->pid = get_pid();
c010b325:	e8 22 f9 ff ff       	call   c010ac4c <get_pid>
c010b32a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b32d:	89 42 04             	mov    %eax,0x4(%edx)
        proc->parent = current;
c010b330:	8b 15 88 ff 19 c0    	mov    0xc019ff88,%edx
c010b336:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b339:	89 50 14             	mov    %edx,0x14(%eax)
        assert(current->wait_state == 0);
c010b33c:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b341:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b344:	85 c0                	test   %eax,%eax
c010b346:	74 24                	je     c010b36c <do_fork+0xe5>
c010b348:	c7 44 24 0c 38 f6 10 	movl   $0xc010f638,0xc(%esp)
c010b34f:	c0 
c010b350:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010b357:	c0 
c010b358:	c7 44 24 04 b9 01 00 	movl   $0x1b9,0x4(%esp)
c010b35f:	00 
c010b360:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010b367:	e8 ec 6e ff ff       	call   c0102258 <__panic>

        set_links(proc);
c010b36c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b36f:	89 04 24             	mov    %eax,(%esp)
c010b372:	e8 ad f7 ff ff       	call   c010ab24 <set_links>
        hash_proc(proc);
c010b377:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b37a:	89 04 24             	mov    %eax,(%esp)
c010b37d:	e8 4f fa ff ff       	call   c010add1 <hash_proc>
    }
    local_intr_restore(intr_flag);
c010b382:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b385:	89 04 24             	mov    %eax,(%esp)
c010b388:	e8 19 f4 ff ff       	call   c010a7a6 <__intr_restore>

    wakeup_proc(proc);
c010b38d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b390:	89 04 24             	mov    %eax,(%esp)
c010b393:	e8 fe 0f 00 00       	call   c010c396 <wakeup_proc>

    ret = proc->pid;
c010b398:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b39b:	8b 40 04             	mov    0x4(%eax),%eax
c010b39e:	89 45 f4             	mov    %eax,-0xc(%ebp)

fork_out:
    return ret;
c010b3a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3a4:	eb 0d                	jmp    c010b3b3 <do_fork+0x12c>

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010b3a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3a9:	89 04 24             	mov    %eax,(%esp)
c010b3ac:	e8 df ac ff ff       	call   c0106090 <kfree>
    goto fork_out;
c010b3b1:	eb ee                	jmp    c010b3a1 <do_fork+0x11a>
}
c010b3b3:	c9                   	leave  
c010b3b4:	c3                   	ret    

c010b3b5 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010b3b5:	55                   	push   %ebp
c010b3b6:	89 e5                	mov    %esp,%ebp
c010b3b8:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010b3bb:	8b 15 88 ff 19 c0    	mov    0xc019ff88,%edx
c010b3c1:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010b3c6:	39 c2                	cmp    %eax,%edx
c010b3c8:	75 1c                	jne    c010b3e6 <do_exit+0x31>
        panic("idleproc exit.\n");
c010b3ca:	c7 44 24 08 66 f6 10 	movl   $0xc010f666,0x8(%esp)
c010b3d1:	c0 
c010b3d2:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c010b3d9:	00 
c010b3da:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010b3e1:	e8 72 6e ff ff       	call   c0102258 <__panic>
    }
    if (current == initproc) {
c010b3e6:	8b 15 88 ff 19 c0    	mov    0xc019ff88,%edx
c010b3ec:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010b3f1:	39 c2                	cmp    %eax,%edx
c010b3f3:	75 1c                	jne    c010b411 <do_exit+0x5c>
        panic("initproc exit.\n");
c010b3f5:	c7 44 24 08 76 f6 10 	movl   $0xc010f676,0x8(%esp)
c010b3fc:	c0 
c010b3fd:	c7 44 24 04 d8 01 00 	movl   $0x1d8,0x4(%esp)
c010b404:	00 
c010b405:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010b40c:	e8 47 6e ff ff       	call   c0102258 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010b411:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b416:	8b 40 18             	mov    0x18(%eax),%eax
c010b419:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010b41c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b420:	74 4a                	je     c010b46c <do_exit+0xb7>
        lcr3(boot_cr3);
c010b422:	a1 c8 1f 1a c0       	mov    0xc01a1fc8,%eax
c010b427:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b42a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b42d:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b430:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b433:	89 04 24             	mov    %eax,(%esp)
c010b436:	e8 21 f5 ff ff       	call   c010a95c <mm_count_dec>
c010b43b:	85 c0                	test   %eax,%eax
c010b43d:	75 21                	jne    c010b460 <do_exit+0xab>
            exit_mmap(mm);
c010b43f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b442:	89 04 24             	mov    %eax,(%esp)
c010b445:	e8 57 e5 ff ff       	call   c01099a1 <exit_mmap>
            put_pgdir(mm);
c010b44a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b44d:	89 04 24             	mov    %eax,(%esp)
c010b450:	e8 18 fc ff ff       	call   c010b06d <put_pgdir>
            mm_destroy(mm);
c010b455:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b458:	89 04 24             	mov    %eax,(%esp)
c010b45b:	e8 82 e2 ff ff       	call   c01096e2 <mm_destroy>
        }
        current->mm = NULL;
c010b460:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b465:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010b46c:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b471:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010b477:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b47c:	8b 55 08             	mov    0x8(%ebp),%edx
c010b47f:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010b482:	e8 f5 f2 ff ff       	call   c010a77c <__intr_save>
c010b487:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010b48a:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b48f:	8b 40 14             	mov    0x14(%eax),%eax
c010b492:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010b495:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b498:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b49b:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b4a0:	75 10                	jne    c010b4b2 <do_exit+0xfd>
            wakeup_proc(proc);
c010b4a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4a5:	89 04 24             	mov    %eax,(%esp)
c010b4a8:	e8 e9 0e 00 00       	call   c010c396 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010b4ad:	e9 8b 00 00 00       	jmp    c010b53d <do_exit+0x188>
c010b4b2:	e9 86 00 00 00       	jmp    c010b53d <do_exit+0x188>
            proc = current->cptr;
c010b4b7:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b4bc:	8b 40 70             	mov    0x70(%eax),%eax
c010b4bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010b4c2:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b4c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b4ca:	8b 52 78             	mov    0x78(%edx),%edx
c010b4cd:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c010b4d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4d3:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c010b4da:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010b4df:	8b 50 70             	mov    0x70(%eax),%edx
c010b4e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4e5:	89 50 78             	mov    %edx,0x78(%eax)
c010b4e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4eb:	8b 40 78             	mov    0x78(%eax),%eax
c010b4ee:	85 c0                	test   %eax,%eax
c010b4f0:	74 0e                	je     c010b500 <do_exit+0x14b>
                initproc->cptr->yptr = proc;
c010b4f2:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010b4f7:	8b 40 70             	mov    0x70(%eax),%eax
c010b4fa:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b4fd:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c010b500:	8b 15 84 ff 19 c0    	mov    0xc019ff84,%edx
c010b506:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b509:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010b50c:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010b511:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b514:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010b517:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b51a:	8b 00                	mov    (%eax),%eax
c010b51c:	83 f8 03             	cmp    $0x3,%eax
c010b51f:	75 1c                	jne    c010b53d <do_exit+0x188>
                if (initproc->wait_state == WT_CHILD) {
c010b521:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010b526:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b529:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b52e:	75 0d                	jne    c010b53d <do_exit+0x188>
                    wakeup_proc(initproc);
c010b530:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010b535:	89 04 24             	mov    %eax,(%esp)
c010b538:	e8 59 0e 00 00       	call   c010c396 <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010b53d:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b542:	8b 40 70             	mov    0x70(%eax),%eax
c010b545:	85 c0                	test   %eax,%eax
c010b547:	0f 85 6a ff ff ff    	jne    c010b4b7 <do_exit+0x102>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010b54d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b550:	89 04 24             	mov    %eax,(%esp)
c010b553:	e8 4e f2 ff ff       	call   c010a7a6 <__intr_restore>
    
    schedule();
c010b558:	e8 bd 0e 00 00       	call   c010c41a <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010b55d:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b562:	8b 40 04             	mov    0x4(%eax),%eax
c010b565:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b569:	c7 44 24 08 88 f6 10 	movl   $0xc010f688,0x8(%esp)
c010b570:	c0 
c010b571:	c7 44 24 04 04 02 00 	movl   $0x204,0x4(%esp)
c010b578:	00 
c010b579:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010b580:	e8 d3 6c ff ff       	call   c0102258 <__panic>

c010b585 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010b585:	55                   	push   %ebp
c010b586:	89 e5                	mov    %esp,%ebp
c010b588:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010b58b:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010b590:	8b 40 18             	mov    0x18(%eax),%eax
c010b593:	85 c0                	test   %eax,%eax
c010b595:	74 1c                	je     c010b5b3 <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010b597:	c7 44 24 08 a8 f6 10 	movl   $0xc010f6a8,0x8(%esp)
c010b59e:	c0 
c010b59f:	c7 44 24 04 0e 02 00 	movl   $0x20e,0x4(%esp)
c010b5a6:	00 
c010b5a7:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010b5ae:	e8 a5 6c ff ff       	call   c0102258 <__panic>
    }

    int ret = -E_NO_MEM;
c010b5b3:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010b5ba:	e8 ca dd ff ff       	call   c0109389 <mm_create>
c010b5bf:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b5c2:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b5c6:	75 06                	jne    c010b5ce <load_icode+0x49>
        goto bad_mm;
c010b5c8:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010b5c9:	e9 ef 05 00 00       	jmp    c010bbbd <load_icode+0x638>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010b5ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b5d1:	89 04 24             	mov    %eax,(%esp)
c010b5d4:	e8 ed f9 ff ff       	call   c010afc6 <setup_pgdir>
c010b5d9:	85 c0                	test   %eax,%eax
c010b5db:	74 05                	je     c010b5e2 <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010b5dd:	e9 f6 05 00 00       	jmp    c010bbd8 <load_icode+0x653>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010b5e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5e5:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010b5e8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b5eb:	8b 50 1c             	mov    0x1c(%eax),%edx
c010b5ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5f1:	01 d0                	add    %edx,%eax
c010b5f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010b5f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b5f9:	8b 00                	mov    (%eax),%eax
c010b5fb:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010b600:	74 0c                	je     c010b60e <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010b602:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010b609:	e9 bf 05 00 00       	jmp    c010bbcd <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010b60e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b611:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010b615:	0f b7 c0             	movzwl %ax,%eax
c010b618:	c1 e0 05             	shl    $0x5,%eax
c010b61b:	89 c2                	mov    %eax,%edx
c010b61d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b620:	01 d0                	add    %edx,%eax
c010b622:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010b625:	e9 13 03 00 00       	jmp    c010b93d <load_icode+0x3b8>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010b62a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b62d:	8b 00                	mov    (%eax),%eax
c010b62f:	83 f8 01             	cmp    $0x1,%eax
c010b632:	74 05                	je     c010b639 <load_icode+0xb4>
            continue ;
c010b634:	e9 00 03 00 00       	jmp    c010b939 <load_icode+0x3b4>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010b639:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b63c:	8b 50 10             	mov    0x10(%eax),%edx
c010b63f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b642:	8b 40 14             	mov    0x14(%eax),%eax
c010b645:	39 c2                	cmp    %eax,%edx
c010b647:	76 0c                	jbe    c010b655 <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010b649:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010b650:	e9 6d 05 00 00       	jmp    c010bbc2 <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010b655:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b658:	8b 40 10             	mov    0x10(%eax),%eax
c010b65b:	85 c0                	test   %eax,%eax
c010b65d:	75 05                	jne    c010b664 <load_icode+0xdf>
            continue ;
c010b65f:	e9 d5 02 00 00       	jmp    c010b939 <load_icode+0x3b4>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010b664:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010b66b:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010b672:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b675:	8b 40 18             	mov    0x18(%eax),%eax
c010b678:	83 e0 01             	and    $0x1,%eax
c010b67b:	85 c0                	test   %eax,%eax
c010b67d:	74 04                	je     c010b683 <load_icode+0xfe>
c010b67f:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010b683:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b686:	8b 40 18             	mov    0x18(%eax),%eax
c010b689:	83 e0 02             	and    $0x2,%eax
c010b68c:	85 c0                	test   %eax,%eax
c010b68e:	74 04                	je     c010b694 <load_icode+0x10f>
c010b690:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010b694:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b697:	8b 40 18             	mov    0x18(%eax),%eax
c010b69a:	83 e0 04             	and    $0x4,%eax
c010b69d:	85 c0                	test   %eax,%eax
c010b69f:	74 04                	je     c010b6a5 <load_icode+0x120>
c010b6a1:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010b6a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6a8:	83 e0 02             	and    $0x2,%eax
c010b6ab:	85 c0                	test   %eax,%eax
c010b6ad:	74 04                	je     c010b6b3 <load_icode+0x12e>
c010b6af:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010b6b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6b6:	8b 50 14             	mov    0x14(%eax),%edx
c010b6b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6bc:	8b 40 08             	mov    0x8(%eax),%eax
c010b6bf:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b6c6:	00 
c010b6c7:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010b6ca:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b6ce:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b6d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b6d9:	89 04 24             	mov    %eax,(%esp)
c010b6dc:	e8 a3 e0 ff ff       	call   c0109784 <mm_map>
c010b6e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b6e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b6e8:	74 05                	je     c010b6ef <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010b6ea:	e9 d3 04 00 00       	jmp    c010bbc2 <load_icode+0x63d>
        }
        unsigned char *from = binary + ph->p_offset;
c010b6ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6f2:	8b 50 04             	mov    0x4(%eax),%edx
c010b6f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6f8:	01 d0                	add    %edx,%eax
c010b6fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010b6fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b700:	8b 40 08             	mov    0x8(%eax),%eax
c010b703:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b706:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b709:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010b70c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b70f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010b714:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010b717:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010b71e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b721:	8b 50 08             	mov    0x8(%eax),%edx
c010b724:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b727:	8b 40 10             	mov    0x10(%eax),%eax
c010b72a:	01 d0                	add    %edx,%eax
c010b72c:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b72f:	e9 90 00 00 00       	jmp    c010b7c4 <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b734:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b737:	8b 40 0c             	mov    0xc(%eax),%eax
c010b73a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b73d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b741:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b744:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b748:	89 04 24             	mov    %eax,(%esp)
c010b74b:	e8 85 bc ff ff       	call   c01073d5 <pgdir_alloc_page>
c010b750:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b753:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b757:	75 05                	jne    c010b75e <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010b759:	e9 64 04 00 00       	jmp    c010bbc2 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b75e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b761:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b764:	29 c2                	sub    %eax,%edx
c010b766:	89 d0                	mov    %edx,%eax
c010b768:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b76b:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b770:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b773:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b776:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b77d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b780:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b783:	73 0d                	jae    c010b792 <load_icode+0x20d>
                size -= la - end;
c010b785:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b788:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b78b:	29 c2                	sub    %eax,%edx
c010b78d:	89 d0                	mov    %edx,%eax
c010b78f:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010b792:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b795:	89 04 24             	mov    %eax,(%esp)
c010b798:	e8 07 f1 ff ff       	call   c010a8a4 <page2kva>
c010b79d:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b7a0:	01 c2                	add    %eax,%edx
c010b7a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b7a5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b7a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b7ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7b0:	89 14 24             	mov    %edx,(%esp)
c010b7b3:	e8 af 1a 00 00       	call   c010d267 <memcpy>
            start += size, from += size;
c010b7b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b7bb:	01 45 d8             	add    %eax,-0x28(%ebp)
c010b7be:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b7c1:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b7c4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b7c7:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b7ca:	0f 82 64 ff ff ff    	jb     c010b734 <load_icode+0x1af>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010b7d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7d3:	8b 50 08             	mov    0x8(%eax),%edx
c010b7d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7d9:	8b 40 14             	mov    0x14(%eax),%eax
c010b7dc:	01 d0                	add    %edx,%eax
c010b7de:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010b7e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b7e4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b7e7:	0f 83 b0 00 00 00    	jae    c010b89d <load_icode+0x318>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010b7ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b7f0:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b7f3:	75 05                	jne    c010b7fa <load_icode+0x275>
                continue ;
c010b7f5:	e9 3f 01 00 00       	jmp    c010b939 <load_icode+0x3b4>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010b7fa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b7fd:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b800:	29 c2                	sub    %eax,%edx
c010b802:	89 d0                	mov    %edx,%eax
c010b804:	05 00 10 00 00       	add    $0x1000,%eax
c010b809:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b80c:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b811:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b814:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010b817:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b81a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b81d:	73 0d                	jae    c010b82c <load_icode+0x2a7>
                size -= la - end;
c010b81f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b822:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b825:	29 c2                	sub    %eax,%edx
c010b827:	89 d0                	mov    %edx,%eax
c010b829:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b82c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b82f:	89 04 24             	mov    %eax,(%esp)
c010b832:	e8 6d f0 ff ff       	call   c010a8a4 <page2kva>
c010b837:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b83a:	01 c2                	add    %eax,%edx
c010b83c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b83f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b843:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b84a:	00 
c010b84b:	89 14 24             	mov    %edx,(%esp)
c010b84e:	e8 32 19 00 00       	call   c010d185 <memset>
            start += size;
c010b853:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b856:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010b859:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b85c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b85f:	73 08                	jae    c010b869 <load_icode+0x2e4>
c010b861:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b864:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b867:	74 34                	je     c010b89d <load_icode+0x318>
c010b869:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b86c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b86f:	72 08                	jb     c010b879 <load_icode+0x2f4>
c010b871:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b874:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b877:	74 24                	je     c010b89d <load_icode+0x318>
c010b879:	c7 44 24 0c d0 f6 10 	movl   $0xc010f6d0,0xc(%esp)
c010b880:	c0 
c010b881:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010b888:	c0 
c010b889:	c7 44 24 04 60 02 00 	movl   $0x260,0x4(%esp)
c010b890:	00 
c010b891:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010b898:	e8 bb 69 ff ff       	call   c0102258 <__panic>
        }
        while (start < end) {
c010b89d:	e9 8b 00 00 00       	jmp    c010b92d <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b8a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b8a5:	8b 40 0c             	mov    0xc(%eax),%eax
c010b8a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b8ab:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b8af:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b8b2:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b8b6:	89 04 24             	mov    %eax,(%esp)
c010b8b9:	e8 17 bb ff ff       	call   c01073d5 <pgdir_alloc_page>
c010b8be:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b8c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b8c5:	75 05                	jne    c010b8cc <load_icode+0x347>
                goto bad_cleanup_mmap;
c010b8c7:	e9 f6 02 00 00       	jmp    c010bbc2 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b8cc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b8cf:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b8d2:	29 c2                	sub    %eax,%edx
c010b8d4:	89 d0                	mov    %edx,%eax
c010b8d6:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b8d9:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b8de:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b8e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b8e4:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b8eb:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b8ee:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b8f1:	73 0d                	jae    c010b900 <load_icode+0x37b>
                size -= la - end;
c010b8f3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b8f6:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b8f9:	29 c2                	sub    %eax,%edx
c010b8fb:	89 d0                	mov    %edx,%eax
c010b8fd:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b900:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b903:	89 04 24             	mov    %eax,(%esp)
c010b906:	e8 99 ef ff ff       	call   c010a8a4 <page2kva>
c010b90b:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b90e:	01 c2                	add    %eax,%edx
c010b910:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b913:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b917:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b91e:	00 
c010b91f:	89 14 24             	mov    %edx,(%esp)
c010b922:	e8 5e 18 00 00       	call   c010d185 <memset>
            start += size;
c010b927:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b92a:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010b92d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b930:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b933:	0f 82 69 ff ff ff    	jb     c010b8a2 <load_icode+0x31d>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010b939:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b93d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b940:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b943:	0f 82 e1 fc ff ff    	jb     c010b62a <load_icode+0xa5>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b949:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b950:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b957:	00 
c010b958:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b95b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b95f:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010b966:	00 
c010b967:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010b96e:	af 
c010b96f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b972:	89 04 24             	mov    %eax,(%esp)
c010b975:	e8 0a de ff ff       	call   c0109784 <mm_map>
c010b97a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b97d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b981:	74 05                	je     c010b988 <load_icode+0x403>
        goto bad_cleanup_mmap;
c010b983:	e9 3a 02 00 00       	jmp    c010bbc2 <load_icode+0x63d>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b988:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b98b:	8b 40 0c             	mov    0xc(%eax),%eax
c010b98e:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b995:	00 
c010b996:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010b99d:	af 
c010b99e:	89 04 24             	mov    %eax,(%esp)
c010b9a1:	e8 2f ba ff ff       	call   c01073d5 <pgdir_alloc_page>
c010b9a6:	85 c0                	test   %eax,%eax
c010b9a8:	75 24                	jne    c010b9ce <load_icode+0x449>
c010b9aa:	c7 44 24 0c 0c f7 10 	movl   $0xc010f70c,0xc(%esp)
c010b9b1:	c0 
c010b9b2:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010b9b9:	c0 
c010b9ba:	c7 44 24 04 73 02 00 	movl   $0x273,0x4(%esp)
c010b9c1:	00 
c010b9c2:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010b9c9:	e8 8a 68 ff ff       	call   c0102258 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b9ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b9d1:	8b 40 0c             	mov    0xc(%eax),%eax
c010b9d4:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b9db:	00 
c010b9dc:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010b9e3:	af 
c010b9e4:	89 04 24             	mov    %eax,(%esp)
c010b9e7:	e8 e9 b9 ff ff       	call   c01073d5 <pgdir_alloc_page>
c010b9ec:	85 c0                	test   %eax,%eax
c010b9ee:	75 24                	jne    c010ba14 <load_icode+0x48f>
c010b9f0:	c7 44 24 0c 50 f7 10 	movl   $0xc010f750,0xc(%esp)
c010b9f7:	c0 
c010b9f8:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010b9ff:	c0 
c010ba00:	c7 44 24 04 74 02 00 	movl   $0x274,0x4(%esp)
c010ba07:	00 
c010ba08:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010ba0f:	e8 44 68 ff ff       	call   c0102258 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010ba14:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba17:	8b 40 0c             	mov    0xc(%eax),%eax
c010ba1a:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010ba21:	00 
c010ba22:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010ba29:	af 
c010ba2a:	89 04 24             	mov    %eax,(%esp)
c010ba2d:	e8 a3 b9 ff ff       	call   c01073d5 <pgdir_alloc_page>
c010ba32:	85 c0                	test   %eax,%eax
c010ba34:	75 24                	jne    c010ba5a <load_icode+0x4d5>
c010ba36:	c7 44 24 0c 94 f7 10 	movl   $0xc010f794,0xc(%esp)
c010ba3d:	c0 
c010ba3e:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010ba45:	c0 
c010ba46:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
c010ba4d:	00 
c010ba4e:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010ba55:	e8 fe 67 ff ff       	call   c0102258 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010ba5a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba5d:	8b 40 0c             	mov    0xc(%eax),%eax
c010ba60:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010ba67:	00 
c010ba68:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010ba6f:	af 
c010ba70:	89 04 24             	mov    %eax,(%esp)
c010ba73:	e8 5d b9 ff ff       	call   c01073d5 <pgdir_alloc_page>
c010ba78:	85 c0                	test   %eax,%eax
c010ba7a:	75 24                	jne    c010baa0 <load_icode+0x51b>
c010ba7c:	c7 44 24 0c d8 f7 10 	movl   $0xc010f7d8,0xc(%esp)
c010ba83:	c0 
c010ba84:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010ba8b:	c0 
c010ba8c:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
c010ba93:	00 
c010ba94:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010ba9b:	e8 b8 67 ff ff       	call   c0102258 <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010baa0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010baa3:	89 04 24             	mov    %eax,(%esp)
c010baa6:	e8 97 ee ff ff       	call   c010a942 <mm_count_inc>
    current->mm = mm;
c010baab:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010bab0:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010bab3:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010bab6:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010babb:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010babe:	8b 52 0c             	mov    0xc(%edx),%edx
c010bac1:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010bac4:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010bacb:	77 23                	ja     c010baf0 <load_icode+0x56b>
c010bacd:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010bad0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bad4:	c7 44 24 08 00 f6 10 	movl   $0xc010f600,0x8(%esp)
c010badb:	c0 
c010badc:	c7 44 24 04 7b 02 00 	movl   $0x27b,0x4(%esp)
c010bae3:	00 
c010bae4:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010baeb:	e8 68 67 ff ff       	call   c0102258 <__panic>
c010baf0:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010baf3:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010baf9:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010bafc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010baff:	8b 40 0c             	mov    0xc(%eax),%eax
c010bb02:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010bb05:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010bb0c:	77 23                	ja     c010bb31 <load_icode+0x5ac>
c010bb0e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010bb11:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bb15:	c7 44 24 08 00 f6 10 	movl   $0xc010f600,0x8(%esp)
c010bb1c:	c0 
c010bb1d:	c7 44 24 04 7c 02 00 	movl   $0x27c,0x4(%esp)
c010bb24:	00 
c010bb25:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010bb2c:	e8 27 67 ff ff       	call   c0102258 <__panic>
c010bb31:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010bb34:	05 00 00 00 40       	add    $0x40000000,%eax
c010bb39:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010bb3c:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010bb3f:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010bb42:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010bb47:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bb4a:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010bb4d:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010bb54:	00 
c010bb55:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bb5c:	00 
c010bb5d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bb60:	89 04 24             	mov    %eax,(%esp)
c010bb63:	e8 1d 16 00 00       	call   c010d185 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010bb68:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bb6b:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010bb71:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bb74:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010bb7a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bb7d:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010bb81:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bb84:	66 89 50 28          	mov    %dx,0x28(%eax)
c010bb88:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bb8b:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010bb8f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bb92:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010bb96:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bb99:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010bba0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010bba3:	8b 50 18             	mov    0x18(%eax),%edx
c010bba6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bba9:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010bbac:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bbaf:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)

    ret = 0;
c010bbb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010bbbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbc0:	eb 23                	jmp    c010bbe5 <load_icode+0x660>
bad_cleanup_mmap:
    exit_mmap(mm);
c010bbc2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bbc5:	89 04 24             	mov    %eax,(%esp)
c010bbc8:	e8 d4 dd ff ff       	call   c01099a1 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010bbcd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bbd0:	89 04 24             	mov    %eax,(%esp)
c010bbd3:	e8 95 f4 ff ff       	call   c010b06d <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010bbd8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bbdb:	89 04 24             	mov    %eax,(%esp)
c010bbde:	e8 ff da ff ff       	call   c01096e2 <mm_destroy>
bad_mm:
    goto out;
c010bbe3:	eb d8                	jmp    c010bbbd <load_icode+0x638>
}
c010bbe5:	c9                   	leave  
c010bbe6:	c3                   	ret    

c010bbe7 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010bbe7:	55                   	push   %ebp
c010bbe8:	89 e5                	mov    %esp,%ebp
c010bbea:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bbed:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010bbf2:	8b 40 18             	mov    0x18(%eax),%eax
c010bbf5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010bbf8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbfb:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010bc02:	00 
c010bc03:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bc06:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bc0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc11:	89 04 24             	mov    %eax,(%esp)
c010bc14:	e8 4d e8 ff ff       	call   c010a466 <user_mem_check>
c010bc19:	85 c0                	test   %eax,%eax
c010bc1b:	75 0a                	jne    c010bc27 <do_execve+0x40>
        return -E_INVAL;
c010bc1d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bc22:	e9 f4 00 00 00       	jmp    c010bd1b <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010bc27:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c010bc2b:	76 07                	jbe    c010bc34 <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010bc2d:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010bc34:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010bc3b:	00 
c010bc3c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bc43:	00 
c010bc44:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010bc47:	89 04 24             	mov    %eax,(%esp)
c010bc4a:	e8 36 15 00 00       	call   c010d185 <memset>
    memcpy(local_name, name, len);
c010bc4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc52:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bc56:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc59:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc5d:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010bc60:	89 04 24             	mov    %eax,(%esp)
c010bc63:	e8 ff 15 00 00       	call   c010d267 <memcpy>

    if (mm != NULL) {
c010bc68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc6c:	74 4a                	je     c010bcb8 <do_execve+0xd1>
        lcr3(boot_cr3);
c010bc6e:	a1 c8 1f 1a c0       	mov    0xc01a1fc8,%eax
c010bc73:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bc76:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc79:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010bc7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc7f:	89 04 24             	mov    %eax,(%esp)
c010bc82:	e8 d5 ec ff ff       	call   c010a95c <mm_count_dec>
c010bc87:	85 c0                	test   %eax,%eax
c010bc89:	75 21                	jne    c010bcac <do_execve+0xc5>
            exit_mmap(mm);
c010bc8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc8e:	89 04 24             	mov    %eax,(%esp)
c010bc91:	e8 0b dd ff ff       	call   c01099a1 <exit_mmap>
            put_pgdir(mm);
c010bc96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc99:	89 04 24             	mov    %eax,(%esp)
c010bc9c:	e8 cc f3 ff ff       	call   c010b06d <put_pgdir>
            mm_destroy(mm);
c010bca1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bca4:	89 04 24             	mov    %eax,(%esp)
c010bca7:	e8 36 da ff ff       	call   c01096e2 <mm_destroy>
        }
        current->mm = NULL;
c010bcac:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010bcb1:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010bcb8:	8b 45 14             	mov    0x14(%ebp),%eax
c010bcbb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bcbf:	8b 45 10             	mov    0x10(%ebp),%eax
c010bcc2:	89 04 24             	mov    %eax,(%esp)
c010bcc5:	e8 bb f8 ff ff       	call   c010b585 <load_icode>
c010bcca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bccd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bcd1:	74 2f                	je     c010bd02 <do_execve+0x11b>
        goto execve_exit;
c010bcd3:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010bcd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcd7:	89 04 24             	mov    %eax,(%esp)
c010bcda:	e8 d6 f6 ff ff       	call   c010b3b5 <do_exit>
    panic("already exit: %e.\n", ret);
c010bcdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bce2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bce6:	c7 44 24 08 1b f8 10 	movl   $0xc010f81b,0x8(%esp)
c010bced:	c0 
c010bcee:	c7 44 24 04 bf 02 00 	movl   $0x2bf,0x4(%esp)
c010bcf5:	00 
c010bcf6:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010bcfd:	e8 56 65 ff ff       	call   c0102258 <__panic>
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010bd02:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010bd07:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010bd0a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bd0e:	89 04 24             	mov    %eax,(%esp)
c010bd11:	e8 89 ed ff ff       	call   c010aa9f <set_proc_name>
    return 0;
c010bd16:	b8 00 00 00 00       	mov    $0x0,%eax

execve_exit:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
c010bd1b:	c9                   	leave  
c010bd1c:	c3                   	ret    

c010bd1d <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010bd1d:	55                   	push   %ebp
c010bd1e:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010bd20:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010bd25:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010bd2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bd31:	5d                   	pop    %ebp
c010bd32:	c3                   	ret    

c010bd33 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010bd33:	55                   	push   %ebp
c010bd34:	89 e5                	mov    %esp,%ebp
c010bd36:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010bd39:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010bd3e:	8b 40 18             	mov    0x18(%eax),%eax
c010bd41:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010bd44:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bd48:	74 30                	je     c010bd7a <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010bd4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd4d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bd54:	00 
c010bd55:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010bd5c:	00 
c010bd5d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd64:	89 04 24             	mov    %eax,(%esp)
c010bd67:	e8 fa e6 ff ff       	call   c010a466 <user_mem_check>
c010bd6c:	85 c0                	test   %eax,%eax
c010bd6e:	75 0a                	jne    c010bd7a <do_wait+0x47>
            return -E_INVAL;
c010bd70:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bd75:	e9 4b 01 00 00       	jmp    c010bec5 <do_wait+0x192>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010bd7a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010bd81:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bd85:	74 39                	je     c010bdc0 <do_wait+0x8d>
        proc = find_proc(pid);
c010bd87:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd8a:	89 04 24             	mov    %eax,(%esp)
c010bd8d:	e8 ee f0 ff ff       	call   c010ae80 <find_proc>
c010bd92:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010bd95:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd99:	74 54                	je     c010bdef <do_wait+0xbc>
c010bd9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd9e:	8b 50 14             	mov    0x14(%eax),%edx
c010bda1:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010bda6:	39 c2                	cmp    %eax,%edx
c010bda8:	75 45                	jne    c010bdef <do_wait+0xbc>
            haskid = 1;
c010bdaa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bdb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdb4:	8b 00                	mov    (%eax),%eax
c010bdb6:	83 f8 03             	cmp    $0x3,%eax
c010bdb9:	75 34                	jne    c010bdef <do_wait+0xbc>
                goto found;
c010bdbb:	e9 80 00 00 00       	jmp    c010be40 <do_wait+0x10d>
            }
        }
    }
    else {
        proc = current->cptr;
c010bdc0:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010bdc5:	8b 40 70             	mov    0x70(%eax),%eax
c010bdc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010bdcb:	eb 1c                	jmp    c010bde9 <do_wait+0xb6>
            haskid = 1;
c010bdcd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bdd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdd7:	8b 00                	mov    (%eax),%eax
c010bdd9:	83 f8 03             	cmp    $0x3,%eax
c010bddc:	75 02                	jne    c010bde0 <do_wait+0xad>
                goto found;
c010bdde:	eb 60                	jmp    c010be40 <do_wait+0x10d>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010bde0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bde3:	8b 40 78             	mov    0x78(%eax),%eax
c010bde6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bde9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bded:	75 de                	jne    c010bdcd <do_wait+0x9a>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010bdef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bdf3:	74 41                	je     c010be36 <do_wait+0x103>
        current->state = PROC_SLEEPING;
c010bdf5:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010bdfa:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010be00:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010be05:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010be0c:	e8 09 06 00 00       	call   c010c41a <schedule>
        if (current->flags & PF_EXITING) {
c010be11:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010be16:	8b 40 44             	mov    0x44(%eax),%eax
c010be19:	83 e0 01             	and    $0x1,%eax
c010be1c:	85 c0                	test   %eax,%eax
c010be1e:	74 11                	je     c010be31 <do_wait+0xfe>
            do_exit(-E_KILLED);
c010be20:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010be27:	e8 89 f5 ff ff       	call   c010b3b5 <do_exit>
        }
        goto repeat;
c010be2c:	e9 49 ff ff ff       	jmp    c010bd7a <do_wait+0x47>
c010be31:	e9 44 ff ff ff       	jmp    c010bd7a <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010be36:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010be3b:	e9 85 00 00 00       	jmp    c010bec5 <do_wait+0x192>

found:
    if (proc == idleproc || proc == initproc) {
c010be40:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010be45:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010be48:	74 0a                	je     c010be54 <do_wait+0x121>
c010be4a:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010be4f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010be52:	75 1c                	jne    c010be70 <do_wait+0x13d>
        panic("wait idleproc or initproc.\n");
c010be54:	c7 44 24 08 2e f8 10 	movl   $0xc010f82e,0x8(%esp)
c010be5b:	c0 
c010be5c:	c7 44 24 04 f8 02 00 	movl   $0x2f8,0x4(%esp)
c010be63:	00 
c010be64:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010be6b:	e8 e8 63 ff ff       	call   c0102258 <__panic>
    }
    if (code_store != NULL) {
c010be70:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010be74:	74 0b                	je     c010be81 <do_wait+0x14e>
        *code_store = proc->exit_code;
c010be76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be79:	8b 50 68             	mov    0x68(%eax),%edx
c010be7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be7f:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010be81:	e8 f6 e8 ff ff       	call   c010a77c <__intr_save>
c010be86:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010be89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be8c:	89 04 24             	mov    %eax,(%esp)
c010be8f:	e8 b9 ef ff ff       	call   c010ae4d <unhash_proc>
        remove_links(proc);
c010be94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be97:	89 04 24             	mov    %eax,(%esp)
c010be9a:	e8 2a ed ff ff       	call   c010abc9 <remove_links>
    }
    local_intr_restore(intr_flag);
c010be9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bea2:	89 04 24             	mov    %eax,(%esp)
c010bea5:	e8 fc e8 ff ff       	call   c010a7a6 <__intr_restore>
    put_kstack(proc);
c010beaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bead:	89 04 24             	mov    %eax,(%esp)
c010beb0:	e8 eb f0 ff ff       	call   c010afa0 <put_kstack>
    kfree(proc);
c010beb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010beb8:	89 04 24             	mov    %eax,(%esp)
c010bebb:	e8 d0 a1 ff ff       	call   c0106090 <kfree>
    return 0;
c010bec0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bec5:	c9                   	leave  
c010bec6:	c3                   	ret    

c010bec7 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010bec7:	55                   	push   %ebp
c010bec8:	89 e5                	mov    %esp,%ebp
c010beca:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010becd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bed0:	89 04 24             	mov    %eax,(%esp)
c010bed3:	e8 a8 ef ff ff       	call   c010ae80 <find_proc>
c010bed8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bedb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bedf:	74 41                	je     c010bf22 <do_kill+0x5b>
        if (!(proc->flags & PF_EXITING)) {
c010bee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bee4:	8b 40 44             	mov    0x44(%eax),%eax
c010bee7:	83 e0 01             	and    $0x1,%eax
c010beea:	85 c0                	test   %eax,%eax
c010beec:	75 2d                	jne    c010bf1b <do_kill+0x54>
            proc->flags |= PF_EXITING;
c010beee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bef1:	8b 40 44             	mov    0x44(%eax),%eax
c010bef4:	83 c8 01             	or     $0x1,%eax
c010bef7:	89 c2                	mov    %eax,%edx
c010bef9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010befc:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010beff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf02:	8b 40 6c             	mov    0x6c(%eax),%eax
c010bf05:	85 c0                	test   %eax,%eax
c010bf07:	79 0b                	jns    c010bf14 <do_kill+0x4d>
                wakeup_proc(proc);
c010bf09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf0c:	89 04 24             	mov    %eax,(%esp)
c010bf0f:	e8 82 04 00 00       	call   c010c396 <wakeup_proc>
            }
            return 0;
c010bf14:	b8 00 00 00 00       	mov    $0x0,%eax
c010bf19:	eb 0c                	jmp    c010bf27 <do_kill+0x60>
        }
        return -E_KILLED;
c010bf1b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010bf20:	eb 05                	jmp    c010bf27 <do_kill+0x60>
    }
    return -E_INVAL;
c010bf22:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010bf27:	c9                   	leave  
c010bf28:	c3                   	ret    

c010bf29 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010bf29:	55                   	push   %ebp
c010bf2a:	89 e5                	mov    %esp,%ebp
c010bf2c:	57                   	push   %edi
c010bf2d:	56                   	push   %esi
c010bf2e:	53                   	push   %ebx
c010bf2f:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010bf32:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf35:	89 04 24             	mov    %eax,(%esp)
c010bf38:	e8 19 0f 00 00       	call   c010ce56 <strlen>
c010bf3d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010bf40:	b8 04 00 00 00       	mov    $0x4,%eax
c010bf45:	8b 55 08             	mov    0x8(%ebp),%edx
c010bf48:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010bf4b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010bf4e:	8b 75 10             	mov    0x10(%ebp),%esi
c010bf51:	89 f7                	mov    %esi,%edi
c010bf53:	cd 80                	int    $0x80
c010bf55:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010bf58:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010bf5b:	83 c4 2c             	add    $0x2c,%esp
c010bf5e:	5b                   	pop    %ebx
c010bf5f:	5e                   	pop    %esi
c010bf60:	5f                   	pop    %edi
c010bf61:	5d                   	pop    %ebp
c010bf62:	c3                   	ret    

c010bf63 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010bf63:	55                   	push   %ebp
c010bf64:	89 e5                	mov    %esp,%ebp
c010bf66:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010bf69:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010bf6e:	8b 40 04             	mov    0x4(%eax),%eax
c010bf71:	c7 44 24 08 4a f8 10 	movl   $0xc010f84a,0x8(%esp)
c010bf78:	c0 
c010bf79:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf7d:	c7 04 24 54 f8 10 c0 	movl   $0xc010f854,(%esp)
c010bf84:	e8 4d 58 ff ff       	call   c01017d6 <cprintf>
c010bf89:	b8 e2 78 00 00       	mov    $0x78e2,%eax
c010bf8e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf92:	c7 44 24 04 79 28 16 	movl   $0xc0162879,0x4(%esp)
c010bf99:	c0 
c010bf9a:	c7 04 24 4a f8 10 c0 	movl   $0xc010f84a,(%esp)
c010bfa1:	e8 83 ff ff ff       	call   c010bf29 <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010bfa6:	c7 44 24 08 7b f8 10 	movl   $0xc010f87b,0x8(%esp)
c010bfad:	c0 
c010bfae:	c7 44 24 04 41 03 00 	movl   $0x341,0x4(%esp)
c010bfb5:	00 
c010bfb6:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010bfbd:	e8 96 62 ff ff       	call   c0102258 <__panic>

c010bfc2 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010bfc2:	55                   	push   %ebp
c010bfc3:	89 e5                	mov    %esp,%ebp
c010bfc5:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010bfc8:	e8 ba a5 ff ff       	call   c0106587 <nr_free_pages>
c010bfcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010bfd0:	e8 83 9f ff ff       	call   c0105f58 <kallocated>
c010bfd5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010bfd8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bfdf:	00 
c010bfe0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bfe7:	00 
c010bfe8:	c7 04 24 63 bf 10 c0 	movl   $0xc010bf63,(%esp)
c010bfef:	e8 fe ee ff ff       	call   c010aef2 <kernel_thread>
c010bff4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010bff7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bffb:	7f 1c                	jg     c010c019 <init_main+0x57>
        panic("create user_main failed.\n");
c010bffd:	c7 44 24 08 95 f8 10 	movl   $0xc010f895,0x8(%esp)
c010c004:	c0 
c010c005:	c7 44 24 04 4c 03 00 	movl   $0x34c,0x4(%esp)
c010c00c:	00 
c010c00d:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010c014:	e8 3f 62 ff ff       	call   c0102258 <__panic>
    }

    while (do_wait(0, NULL) == 0) {
c010c019:	eb 05                	jmp    c010c020 <init_main+0x5e>
        schedule();
c010c01b:	e8 fa 03 00 00       	call   c010c41a <schedule>
    int pid = kernel_thread(user_main, NULL, 0);
    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010c020:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c027:	00 
c010c028:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c02f:	e8 ff fc ff ff       	call   c010bd33 <do_wait>
c010c034:	85 c0                	test   %eax,%eax
c010c036:	74 e3                	je     c010c01b <init_main+0x59>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010c038:	c7 04 24 b0 f8 10 c0 	movl   $0xc010f8b0,(%esp)
c010c03f:	e8 92 57 ff ff       	call   c01017d6 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010c044:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010c049:	8b 40 70             	mov    0x70(%eax),%eax
c010c04c:	85 c0                	test   %eax,%eax
c010c04e:	75 18                	jne    c010c068 <init_main+0xa6>
c010c050:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010c055:	8b 40 74             	mov    0x74(%eax),%eax
c010c058:	85 c0                	test   %eax,%eax
c010c05a:	75 0c                	jne    c010c068 <init_main+0xa6>
c010c05c:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010c061:	8b 40 78             	mov    0x78(%eax),%eax
c010c064:	85 c0                	test   %eax,%eax
c010c066:	74 24                	je     c010c08c <init_main+0xca>
c010c068:	c7 44 24 0c d4 f8 10 	movl   $0xc010f8d4,0xc(%esp)
c010c06f:	c0 
c010c070:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010c077:	c0 
c010c078:	c7 44 24 04 54 03 00 	movl   $0x354,0x4(%esp)
c010c07f:	00 
c010c080:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010c087:	e8 cc 61 ff ff       	call   c0102258 <__panic>
    assert(nr_process == 2);
c010c08c:	a1 a0 1f 1a c0       	mov    0xc01a1fa0,%eax
c010c091:	83 f8 02             	cmp    $0x2,%eax
c010c094:	74 24                	je     c010c0ba <init_main+0xf8>
c010c096:	c7 44 24 0c 1f f9 10 	movl   $0xc010f91f,0xc(%esp)
c010c09d:	c0 
c010c09e:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010c0a5:	c0 
c010c0a6:	c7 44 24 04 55 03 00 	movl   $0x355,0x4(%esp)
c010c0ad:	00 
c010c0ae:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010c0b5:	e8 9e 61 ff ff       	call   c0102258 <__panic>
c010c0ba:	c7 45 e8 b0 20 1a c0 	movl   $0xc01a20b0,-0x18(%ebp)
c010c0c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0c4:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010c0c7:	8b 15 84 ff 19 c0    	mov    0xc019ff84,%edx
c010c0cd:	83 c2 58             	add    $0x58,%edx
c010c0d0:	39 d0                	cmp    %edx,%eax
c010c0d2:	74 24                	je     c010c0f8 <init_main+0x136>
c010c0d4:	c7 44 24 0c 30 f9 10 	movl   $0xc010f930,0xc(%esp)
c010c0db:	c0 
c010c0dc:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010c0e3:	c0 
c010c0e4:	c7 44 24 04 56 03 00 	movl   $0x356,0x4(%esp)
c010c0eb:	00 
c010c0ec:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010c0f3:	e8 60 61 ff ff       	call   c0102258 <__panic>
c010c0f8:	c7 45 e4 b0 20 1a c0 	movl   $0xc01a20b0,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010c0ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c102:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010c104:	8b 15 84 ff 19 c0    	mov    0xc019ff84,%edx
c010c10a:	83 c2 58             	add    $0x58,%edx
c010c10d:	39 d0                	cmp    %edx,%eax
c010c10f:	74 24                	je     c010c135 <init_main+0x173>
c010c111:	c7 44 24 0c 60 f9 10 	movl   $0xc010f960,0xc(%esp)
c010c118:	c0 
c010c119:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010c120:	c0 
c010c121:	c7 44 24 04 57 03 00 	movl   $0x357,0x4(%esp)
c010c128:	00 
c010c129:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010c130:	e8 23 61 ff ff       	call   c0102258 <__panic>

    cprintf("init check memory pass.\n");
c010c135:	c7 04 24 90 f9 10 c0 	movl   $0xc010f990,(%esp)
c010c13c:	e8 95 56 ff ff       	call   c01017d6 <cprintf>
    return 0;
c010c141:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c146:	c9                   	leave  
c010c147:	c3                   	ret    

c010c148 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010c148:	55                   	push   %ebp
c010c149:	89 e5                	mov    %esp,%ebp
c010c14b:	83 ec 28             	sub    $0x28,%esp
c010c14e:	c7 45 ec b0 20 1a c0 	movl   $0xc01a20b0,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c155:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c158:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c15b:	89 50 04             	mov    %edx,0x4(%eax)
c010c15e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c161:	8b 50 04             	mov    0x4(%eax),%edx
c010c164:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c167:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c169:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010c170:	eb 26                	jmp    c010c198 <proc_init+0x50>
        list_init(hash_list + i);
c010c172:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c175:	c1 e0 03             	shl    $0x3,%eax
c010c178:	05 a0 ff 19 c0       	add    $0xc019ffa0,%eax
c010c17d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c180:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c183:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c186:	89 50 04             	mov    %edx,0x4(%eax)
c010c189:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c18c:	8b 50 04             	mov    0x4(%eax),%edx
c010c18f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c192:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c194:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010c198:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010c19f:	7e d1                	jle    c010c172 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010c1a1:	e8 08 e8 ff ff       	call   c010a9ae <alloc_proc>
c010c1a6:	a3 80 ff 19 c0       	mov    %eax,0xc019ff80
c010c1ab:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010c1b0:	85 c0                	test   %eax,%eax
c010c1b2:	75 1c                	jne    c010c1d0 <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010c1b4:	c7 44 24 08 a9 f9 10 	movl   $0xc010f9a9,0x8(%esp)
c010c1bb:	c0 
c010c1bc:	c7 44 24 04 69 03 00 	movl   $0x369,0x4(%esp)
c010c1c3:	00 
c010c1c4:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010c1cb:	e8 88 60 ff ff       	call   c0102258 <__panic>
    }

    idleproc->pid = 0;
c010c1d0:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010c1d5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010c1dc:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010c1e1:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010c1e7:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010c1ec:	ba 00 b0 12 c0       	mov    $0xc012b000,%edx
c010c1f1:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010c1f4:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010c1f9:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010c200:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010c205:	c7 44 24 04 c1 f9 10 	movl   $0xc010f9c1,0x4(%esp)
c010c20c:	c0 
c010c20d:	89 04 24             	mov    %eax,(%esp)
c010c210:	e8 8a e8 ff ff       	call   c010aa9f <set_proc_name>
    nr_process ++;
c010c215:	a1 a0 1f 1a c0       	mov    0xc01a1fa0,%eax
c010c21a:	83 c0 01             	add    $0x1,%eax
c010c21d:	a3 a0 1f 1a c0       	mov    %eax,0xc01a1fa0

    current = idleproc;
c010c222:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010c227:	a3 88 ff 19 c0       	mov    %eax,0xc019ff88

    int pid = kernel_thread(init_main, NULL, 0);
c010c22c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010c233:	00 
c010c234:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c23b:	00 
c010c23c:	c7 04 24 c2 bf 10 c0 	movl   $0xc010bfc2,(%esp)
c010c243:	e8 aa ec ff ff       	call   c010aef2 <kernel_thread>
c010c248:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010c24b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c24f:	7f 1c                	jg     c010c26d <proc_init+0x125>
        panic("create init_main failed.\n");
c010c251:	c7 44 24 08 c6 f9 10 	movl   $0xc010f9c6,0x8(%esp)
c010c258:	c0 
c010c259:	c7 44 24 04 77 03 00 	movl   $0x377,0x4(%esp)
c010c260:	00 
c010c261:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010c268:	e8 eb 5f ff ff       	call   c0102258 <__panic>
    }

    initproc = find_proc(pid);
c010c26d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c270:	89 04 24             	mov    %eax,(%esp)
c010c273:	e8 08 ec ff ff       	call   c010ae80 <find_proc>
c010c278:	a3 84 ff 19 c0       	mov    %eax,0xc019ff84
    set_proc_name(initproc, "init");
c010c27d:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010c282:	c7 44 24 04 e0 f9 10 	movl   $0xc010f9e0,0x4(%esp)
c010c289:	c0 
c010c28a:	89 04 24             	mov    %eax,(%esp)
c010c28d:	e8 0d e8 ff ff       	call   c010aa9f <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010c292:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010c297:	85 c0                	test   %eax,%eax
c010c299:	74 0c                	je     c010c2a7 <proc_init+0x15f>
c010c29b:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010c2a0:	8b 40 04             	mov    0x4(%eax),%eax
c010c2a3:	85 c0                	test   %eax,%eax
c010c2a5:	74 24                	je     c010c2cb <proc_init+0x183>
c010c2a7:	c7 44 24 0c e8 f9 10 	movl   $0xc010f9e8,0xc(%esp)
c010c2ae:	c0 
c010c2af:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010c2b6:	c0 
c010c2b7:	c7 44 24 04 7d 03 00 	movl   $0x37d,0x4(%esp)
c010c2be:	00 
c010c2bf:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010c2c6:	e8 8d 5f ff ff       	call   c0102258 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010c2cb:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010c2d0:	85 c0                	test   %eax,%eax
c010c2d2:	74 0d                	je     c010c2e1 <proc_init+0x199>
c010c2d4:	a1 84 ff 19 c0       	mov    0xc019ff84,%eax
c010c2d9:	8b 40 04             	mov    0x4(%eax),%eax
c010c2dc:	83 f8 01             	cmp    $0x1,%eax
c010c2df:	74 24                	je     c010c305 <proc_init+0x1bd>
c010c2e1:	c7 44 24 0c 10 fa 10 	movl   $0xc010fa10,0xc(%esp)
c010c2e8:	c0 
c010c2e9:	c7 44 24 08 51 f6 10 	movl   $0xc010f651,0x8(%esp)
c010c2f0:	c0 
c010c2f1:	c7 44 24 04 7e 03 00 	movl   $0x37e,0x4(%esp)
c010c2f8:	00 
c010c2f9:	c7 04 24 24 f6 10 c0 	movl   $0xc010f624,(%esp)
c010c300:	e8 53 5f ff ff       	call   c0102258 <__panic>
}
c010c305:	c9                   	leave  
c010c306:	c3                   	ret    

c010c307 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010c307:	55                   	push   %ebp
c010c308:	89 e5                	mov    %esp,%ebp
c010c30a:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010c30d:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010c312:	8b 40 10             	mov    0x10(%eax),%eax
c010c315:	85 c0                	test   %eax,%eax
c010c317:	74 07                	je     c010c320 <cpu_idle+0x19>
            schedule();
c010c319:	e8 fc 00 00 00       	call   c010c41a <schedule>
        }
    }
c010c31e:	eb ed                	jmp    c010c30d <cpu_idle+0x6>
c010c320:	eb eb                	jmp    c010c30d <cpu_idle+0x6>

c010c322 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010c322:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010c326:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010c328:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010c32b:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010c32e:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010c331:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010c334:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010c337:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010c33a:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010c33d:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010c341:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010c344:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010c347:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010c34a:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010c34d:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010c350:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010c353:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010c356:	ff 30                	pushl  (%eax)

    ret
c010c358:	c3                   	ret    

c010c359 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010c359:	55                   	push   %ebp
c010c35a:	89 e5                	mov    %esp,%ebp
c010c35c:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010c35f:	9c                   	pushf  
c010c360:	58                   	pop    %eax
c010c361:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010c364:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010c367:	25 00 02 00 00       	and    $0x200,%eax
c010c36c:	85 c0                	test   %eax,%eax
c010c36e:	74 0c                	je     c010c37c <__intr_save+0x23>
        intr_disable();
c010c370:	e8 3b 71 ff ff       	call   c01034b0 <intr_disable>
        return 1;
c010c375:	b8 01 00 00 00       	mov    $0x1,%eax
c010c37a:	eb 05                	jmp    c010c381 <__intr_save+0x28>
    }
    return 0;
c010c37c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c381:	c9                   	leave  
c010c382:	c3                   	ret    

c010c383 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010c383:	55                   	push   %ebp
c010c384:	89 e5                	mov    %esp,%ebp
c010c386:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010c389:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c38d:	74 05                	je     c010c394 <__intr_restore+0x11>
        intr_enable();
c010c38f:	e8 16 71 ff ff       	call   c01034aa <intr_enable>
    }
}
c010c394:	c9                   	leave  
c010c395:	c3                   	ret    

c010c396 <wakeup_proc>:
#include <proc.h>
#include <sched.h>
#include <assert.h>

void
wakeup_proc(struct proc_struct *proc) {
c010c396:	55                   	push   %ebp
c010c397:	89 e5                	mov    %esp,%ebp
c010c399:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010c39c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c39f:	8b 00                	mov    (%eax),%eax
c010c3a1:	83 f8 03             	cmp    $0x3,%eax
c010c3a4:	75 24                	jne    c010c3ca <wakeup_proc+0x34>
c010c3a6:	c7 44 24 0c 37 fa 10 	movl   $0xc010fa37,0xc(%esp)
c010c3ad:	c0 
c010c3ae:	c7 44 24 08 52 fa 10 	movl   $0xc010fa52,0x8(%esp)
c010c3b5:	c0 
c010c3b6:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
c010c3bd:	00 
c010c3be:	c7 04 24 67 fa 10 c0 	movl   $0xc010fa67,(%esp)
c010c3c5:	e8 8e 5e ff ff       	call   c0102258 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010c3ca:	e8 8a ff ff ff       	call   c010c359 <__intr_save>
c010c3cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010c3d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3d5:	8b 00                	mov    (%eax),%eax
c010c3d7:	83 f8 02             	cmp    $0x2,%eax
c010c3da:	74 15                	je     c010c3f1 <wakeup_proc+0x5b>
            proc->state = PROC_RUNNABLE;
c010c3dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3df:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010c3e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3e8:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
c010c3ef:	eb 1c                	jmp    c010c40d <wakeup_proc+0x77>
        }
        else {
            warn("wakeup runnable process.\n");
c010c3f1:	c7 44 24 08 7d fa 10 	movl   $0xc010fa7d,0x8(%esp)
c010c3f8:	c0 
c010c3f9:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
c010c400:	00 
c010c401:	c7 04 24 67 fa 10 c0 	movl   $0xc010fa67,(%esp)
c010c408:	e8 b7 5e ff ff       	call   c01022c4 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010c40d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c410:	89 04 24             	mov    %eax,(%esp)
c010c413:	e8 6b ff ff ff       	call   c010c383 <__intr_restore>
}
c010c418:	c9                   	leave  
c010c419:	c3                   	ret    

c010c41a <schedule>:

void
schedule(void) {
c010c41a:	55                   	push   %ebp
c010c41b:	89 e5                	mov    %esp,%ebp
c010c41d:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    list_entry_t *le, *last;
    struct proc_struct *next = NULL;
c010c420:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    local_intr_save(intr_flag);
c010c427:	e8 2d ff ff ff       	call   c010c359 <__intr_save>
c010c42c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        current->need_resched = 0;
c010c42f:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010c434:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        last = (current == idleproc) ? &proc_list : &(current->list_link);
c010c43b:	8b 15 88 ff 19 c0    	mov    0xc019ff88,%edx
c010c441:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010c446:	39 c2                	cmp    %eax,%edx
c010c448:	74 0a                	je     c010c454 <schedule+0x3a>
c010c44a:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010c44f:	83 c0 58             	add    $0x58,%eax
c010c452:	eb 05                	jmp    c010c459 <schedule+0x3f>
c010c454:	b8 b0 20 1a c0       	mov    $0xc01a20b0,%eax
c010c459:	89 45 e8             	mov    %eax,-0x18(%ebp)
        le = last;
c010c45c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c45f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c462:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c465:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c468:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c46b:	8b 40 04             	mov    0x4(%eax),%eax
        do {
            if ((le = list_next(le)) != &proc_list) {
c010c46e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c471:	81 7d f4 b0 20 1a c0 	cmpl   $0xc01a20b0,-0xc(%ebp)
c010c478:	74 15                	je     c010c48f <schedule+0x75>
                next = le2proc(le, list_link);
c010c47a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c47d:	83 e8 58             	sub    $0x58,%eax
c010c480:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (next->state == PROC_RUNNABLE) {
c010c483:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c486:	8b 00                	mov    (%eax),%eax
c010c488:	83 f8 02             	cmp    $0x2,%eax
c010c48b:	75 02                	jne    c010c48f <schedule+0x75>
                    break;
c010c48d:	eb 08                	jmp    c010c497 <schedule+0x7d>
                }
            }
        } while (le != last);
c010c48f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c492:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010c495:	75 cb                	jne    c010c462 <schedule+0x48>
        if (next == NULL || next->state != PROC_RUNNABLE) {
c010c497:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c49b:	74 0a                	je     c010c4a7 <schedule+0x8d>
c010c49d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4a0:	8b 00                	mov    (%eax),%eax
c010c4a2:	83 f8 02             	cmp    $0x2,%eax
c010c4a5:	74 08                	je     c010c4af <schedule+0x95>
            next = idleproc;
c010c4a7:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010c4ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        next->runs ++;
c010c4af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4b2:	8b 40 08             	mov    0x8(%eax),%eax
c010c4b5:	8d 50 01             	lea    0x1(%eax),%edx
c010c4b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4bb:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010c4be:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010c4c3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c4c6:	74 0b                	je     c010c4d3 <schedule+0xb9>
            proc_run(next);
c010c4c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4cb:	89 04 24             	mov    %eax,(%esp)
c010c4ce:	e8 71 e8 ff ff       	call   c010ad44 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010c4d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4d6:	89 04 24             	mov    %eax,(%esp)
c010c4d9:	e8 a5 fe ff ff       	call   c010c383 <__intr_restore>
}
c010c4de:	c9                   	leave  
c010c4df:	c3                   	ret    

c010c4e0 <sys_exit>:
#include <stdio.h>
#include <pmm.h>
#include <assert.h>

static int
sys_exit(uint32_t arg[]) {
c010c4e0:	55                   	push   %ebp
c010c4e1:	89 e5                	mov    %esp,%ebp
c010c4e3:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010c4e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4e9:	8b 00                	mov    (%eax),%eax
c010c4eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010c4ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4f1:	89 04 24             	mov    %eax,(%esp)
c010c4f4:	e8 bc ee ff ff       	call   c010b3b5 <do_exit>
}
c010c4f9:	c9                   	leave  
c010c4fa:	c3                   	ret    

c010c4fb <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010c4fb:	55                   	push   %ebp
c010c4fc:	89 e5                	mov    %esp,%ebp
c010c4fe:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010c501:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010c506:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c509:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010c50c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c50f:	8b 40 44             	mov    0x44(%eax),%eax
c010c512:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010c515:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c518:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c51c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c51f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c523:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c52a:	e8 58 ed ff ff       	call   c010b287 <do_fork>
}
c010c52f:	c9                   	leave  
c010c530:	c3                   	ret    

c010c531 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010c531:	55                   	push   %ebp
c010c532:	89 e5                	mov    %esp,%ebp
c010c534:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c537:	8b 45 08             	mov    0x8(%ebp),%eax
c010c53a:	8b 00                	mov    (%eax),%eax
c010c53c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010c53f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c542:	83 c0 04             	add    $0x4,%eax
c010c545:	8b 00                	mov    (%eax),%eax
c010c547:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010c54a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c54d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c551:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c554:	89 04 24             	mov    %eax,(%esp)
c010c557:	e8 d7 f7 ff ff       	call   c010bd33 <do_wait>
}
c010c55c:	c9                   	leave  
c010c55d:	c3                   	ret    

c010c55e <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010c55e:	55                   	push   %ebp
c010c55f:	89 e5                	mov    %esp,%ebp
c010c561:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010c564:	8b 45 08             	mov    0x8(%ebp),%eax
c010c567:	8b 00                	mov    (%eax),%eax
c010c569:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010c56c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c56f:	8b 40 04             	mov    0x4(%eax),%eax
c010c572:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010c575:	8b 45 08             	mov    0x8(%ebp),%eax
c010c578:	83 c0 08             	add    $0x8,%eax
c010c57b:	8b 00                	mov    (%eax),%eax
c010c57d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010c580:	8b 45 08             	mov    0x8(%ebp),%eax
c010c583:	8b 40 0c             	mov    0xc(%eax),%eax
c010c586:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010c589:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c58c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c590:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c593:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c597:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c59a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c59e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5a1:	89 04 24             	mov    %eax,(%esp)
c010c5a4:	e8 3e f6 ff ff       	call   c010bbe7 <do_execve>
}
c010c5a9:	c9                   	leave  
c010c5aa:	c3                   	ret    

c010c5ab <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010c5ab:	55                   	push   %ebp
c010c5ac:	89 e5                	mov    %esp,%ebp
c010c5ae:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010c5b1:	e8 67 f7 ff ff       	call   c010bd1d <do_yield>
}
c010c5b6:	c9                   	leave  
c010c5b7:	c3                   	ret    

c010c5b8 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010c5b8:	55                   	push   %ebp
c010c5b9:	89 e5                	mov    %esp,%ebp
c010c5bb:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c5be:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5c1:	8b 00                	mov    (%eax),%eax
c010c5c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010c5c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5c9:	89 04 24             	mov    %eax,(%esp)
c010c5cc:	e8 f6 f8 ff ff       	call   c010bec7 <do_kill>
}
c010c5d1:	c9                   	leave  
c010c5d2:	c3                   	ret    

c010c5d3 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010c5d3:	55                   	push   %ebp
c010c5d4:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010c5d6:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010c5db:	8b 40 04             	mov    0x4(%eax),%eax
}
c010c5de:	5d                   	pop    %ebp
c010c5df:	c3                   	ret    

c010c5e0 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010c5e0:	55                   	push   %ebp
c010c5e1:	89 e5                	mov    %esp,%ebp
c010c5e3:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010c5e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5e9:	8b 00                	mov    (%eax),%eax
c010c5eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010c5ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5f1:	89 04 24             	mov    %eax,(%esp)
c010c5f4:	e8 03 52 ff ff       	call   c01017fc <cputchar>
    return 0;
c010c5f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c5fe:	c9                   	leave  
c010c5ff:	c3                   	ret    

c010c600 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010c600:	55                   	push   %ebp
c010c601:	89 e5                	mov    %esp,%ebp
c010c603:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010c606:	e8 e4 b9 ff ff       	call   c0107fef <print_pgdir>
    return 0;
c010c60b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c610:	c9                   	leave  
c010c611:	c3                   	ret    

c010c612 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010c612:	55                   	push   %ebp
c010c613:	89 e5                	mov    %esp,%ebp
c010c615:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010c618:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010c61d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c620:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010c623:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c626:	8b 40 1c             	mov    0x1c(%eax),%eax
c010c629:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010c62c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c630:	78 5e                	js     c010c690 <syscall+0x7e>
c010c632:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c635:	83 f8 1f             	cmp    $0x1f,%eax
c010c638:	77 56                	ja     c010c690 <syscall+0x7e>
        if (syscalls[num] != NULL) {
c010c63a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c63d:	8b 04 85 a0 da 12 c0 	mov    -0x3fed2560(,%eax,4),%eax
c010c644:	85 c0                	test   %eax,%eax
c010c646:	74 48                	je     c010c690 <syscall+0x7e>
            arg[0] = tf->tf_regs.reg_edx;
c010c648:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c64b:	8b 40 14             	mov    0x14(%eax),%eax
c010c64e:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010c651:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c654:	8b 40 18             	mov    0x18(%eax),%eax
c010c657:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010c65a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c65d:	8b 40 10             	mov    0x10(%eax),%eax
c010c660:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010c663:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c666:	8b 00                	mov    (%eax),%eax
c010c668:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010c66b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c66e:	8b 40 04             	mov    0x4(%eax),%eax
c010c671:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010c674:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c677:	8b 04 85 a0 da 12 c0 	mov    -0x3fed2560(,%eax,4),%eax
c010c67e:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010c681:	89 14 24             	mov    %edx,(%esp)
c010c684:	ff d0                	call   *%eax
c010c686:	89 c2                	mov    %eax,%edx
c010c688:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c68b:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010c68e:	eb 46                	jmp    c010c6d6 <syscall+0xc4>
        }
    }
    print_trapframe(tf);
c010c690:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c693:	89 04 24             	mov    %eax,(%esp)
c010c696:	e8 d2 71 ff ff       	call   c010386d <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010c69b:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010c6a0:	8d 50 48             	lea    0x48(%eax),%edx
c010c6a3:	a1 88 ff 19 c0       	mov    0xc019ff88,%eax
c010c6a8:	8b 40 04             	mov    0x4(%eax),%eax
c010c6ab:	89 54 24 14          	mov    %edx,0x14(%esp)
c010c6af:	89 44 24 10          	mov    %eax,0x10(%esp)
c010c6b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6b6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c6ba:	c7 44 24 08 98 fa 10 	movl   $0xc010fa98,0x8(%esp)
c010c6c1:	c0 
c010c6c2:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c010c6c9:	00 
c010c6ca:	c7 04 24 c4 fa 10 c0 	movl   $0xc010fac4,(%esp)
c010c6d1:	e8 82 5b ff ff       	call   c0102258 <__panic>
            num, current->pid, current->name);
}
c010c6d6:	c9                   	leave  
c010c6d7:	c3                   	ret    

c010c6d8 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010c6d8:	55                   	push   %ebp
c010c6d9:	89 e5                	mov    %esp,%ebp
c010c6db:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010c6de:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6e1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010c6e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010c6ea:	b8 20 00 00 00       	mov    $0x20,%eax
c010c6ef:	2b 45 0c             	sub    0xc(%ebp),%eax
c010c6f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c6f5:	89 c1                	mov    %eax,%ecx
c010c6f7:	d3 ea                	shr    %cl,%edx
c010c6f9:	89 d0                	mov    %edx,%eax
}
c010c6fb:	c9                   	leave  
c010c6fc:	c3                   	ret    

c010c6fd <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010c6fd:	55                   	push   %ebp
c010c6fe:	89 e5                	mov    %esp,%ebp
c010c700:	83 ec 58             	sub    $0x58,%esp
c010c703:	8b 45 10             	mov    0x10(%ebp),%eax
c010c706:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c709:	8b 45 14             	mov    0x14(%ebp),%eax
c010c70c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010c70f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c712:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c715:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c718:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010c71b:	8b 45 18             	mov    0x18(%ebp),%eax
c010c71e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c721:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c724:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c727:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c72a:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c72d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c730:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c733:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c737:	74 1c                	je     c010c755 <printnum+0x58>
c010c739:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c73c:	ba 00 00 00 00       	mov    $0x0,%edx
c010c741:	f7 75 e4             	divl   -0x1c(%ebp)
c010c744:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010c747:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c74a:	ba 00 00 00 00       	mov    $0x0,%edx
c010c74f:	f7 75 e4             	divl   -0x1c(%ebp)
c010c752:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c755:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c758:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c75b:	f7 75 e4             	divl   -0x1c(%ebp)
c010c75e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c761:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010c764:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c767:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c76a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c76d:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c770:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c773:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010c776:	8b 45 18             	mov    0x18(%ebp),%eax
c010c779:	ba 00 00 00 00       	mov    $0x0,%edx
c010c77e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c781:	77 56                	ja     c010c7d9 <printnum+0xdc>
c010c783:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c786:	72 05                	jb     c010c78d <printnum+0x90>
c010c788:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010c78b:	77 4c                	ja     c010c7d9 <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010c78d:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010c790:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c793:	8b 45 20             	mov    0x20(%ebp),%eax
c010c796:	89 44 24 18          	mov    %eax,0x18(%esp)
c010c79a:	89 54 24 14          	mov    %edx,0x14(%esp)
c010c79e:	8b 45 18             	mov    0x18(%ebp),%eax
c010c7a1:	89 44 24 10          	mov    %eax,0x10(%esp)
c010c7a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c7ab:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c7af:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010c7b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c7ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7bd:	89 04 24             	mov    %eax,(%esp)
c010c7c0:	e8 38 ff ff ff       	call   c010c6fd <printnum>
c010c7c5:	eb 1c                	jmp    c010c7e3 <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010c7c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c7ce:	8b 45 20             	mov    0x20(%ebp),%eax
c010c7d1:	89 04 24             	mov    %eax,(%esp)
c010c7d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7d7:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010c7d9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010c7dd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010c7e1:	7f e4                	jg     c010c7c7 <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010c7e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c7e6:	05 e4 fb 10 c0       	add    $0xc010fbe4,%eax
c010c7eb:	0f b6 00             	movzbl (%eax),%eax
c010c7ee:	0f be c0             	movsbl %al,%eax
c010c7f1:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c7f4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c7f8:	89 04 24             	mov    %eax,(%esp)
c010c7fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7fe:	ff d0                	call   *%eax
}
c010c800:	c9                   	leave  
c010c801:	c3                   	ret    

c010c802 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010c802:	55                   	push   %ebp
c010c803:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c805:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c809:	7e 14                	jle    c010c81f <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010c80b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c80e:	8b 00                	mov    (%eax),%eax
c010c810:	8d 48 08             	lea    0x8(%eax),%ecx
c010c813:	8b 55 08             	mov    0x8(%ebp),%edx
c010c816:	89 0a                	mov    %ecx,(%edx)
c010c818:	8b 50 04             	mov    0x4(%eax),%edx
c010c81b:	8b 00                	mov    (%eax),%eax
c010c81d:	eb 30                	jmp    c010c84f <getuint+0x4d>
    }
    else if (lflag) {
c010c81f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c823:	74 16                	je     c010c83b <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010c825:	8b 45 08             	mov    0x8(%ebp),%eax
c010c828:	8b 00                	mov    (%eax),%eax
c010c82a:	8d 48 04             	lea    0x4(%eax),%ecx
c010c82d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c830:	89 0a                	mov    %ecx,(%edx)
c010c832:	8b 00                	mov    (%eax),%eax
c010c834:	ba 00 00 00 00       	mov    $0x0,%edx
c010c839:	eb 14                	jmp    c010c84f <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010c83b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c83e:	8b 00                	mov    (%eax),%eax
c010c840:	8d 48 04             	lea    0x4(%eax),%ecx
c010c843:	8b 55 08             	mov    0x8(%ebp),%edx
c010c846:	89 0a                	mov    %ecx,(%edx)
c010c848:	8b 00                	mov    (%eax),%eax
c010c84a:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010c84f:	5d                   	pop    %ebp
c010c850:	c3                   	ret    

c010c851 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010c851:	55                   	push   %ebp
c010c852:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c854:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c858:	7e 14                	jle    c010c86e <getint+0x1d>
        return va_arg(*ap, long long);
c010c85a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c85d:	8b 00                	mov    (%eax),%eax
c010c85f:	8d 48 08             	lea    0x8(%eax),%ecx
c010c862:	8b 55 08             	mov    0x8(%ebp),%edx
c010c865:	89 0a                	mov    %ecx,(%edx)
c010c867:	8b 50 04             	mov    0x4(%eax),%edx
c010c86a:	8b 00                	mov    (%eax),%eax
c010c86c:	eb 28                	jmp    c010c896 <getint+0x45>
    }
    else if (lflag) {
c010c86e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c872:	74 12                	je     c010c886 <getint+0x35>
        return va_arg(*ap, long);
c010c874:	8b 45 08             	mov    0x8(%ebp),%eax
c010c877:	8b 00                	mov    (%eax),%eax
c010c879:	8d 48 04             	lea    0x4(%eax),%ecx
c010c87c:	8b 55 08             	mov    0x8(%ebp),%edx
c010c87f:	89 0a                	mov    %ecx,(%edx)
c010c881:	8b 00                	mov    (%eax),%eax
c010c883:	99                   	cltd   
c010c884:	eb 10                	jmp    c010c896 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010c886:	8b 45 08             	mov    0x8(%ebp),%eax
c010c889:	8b 00                	mov    (%eax),%eax
c010c88b:	8d 48 04             	lea    0x4(%eax),%ecx
c010c88e:	8b 55 08             	mov    0x8(%ebp),%edx
c010c891:	89 0a                	mov    %ecx,(%edx)
c010c893:	8b 00                	mov    (%eax),%eax
c010c895:	99                   	cltd   
    }
}
c010c896:	5d                   	pop    %ebp
c010c897:	c3                   	ret    

c010c898 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010c898:	55                   	push   %ebp
c010c899:	89 e5                	mov    %esp,%ebp
c010c89b:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010c89e:	8d 45 14             	lea    0x14(%ebp),%eax
c010c8a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010c8a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c8ab:	8b 45 10             	mov    0x10(%ebp),%eax
c010c8ae:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c8b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c8b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8bc:	89 04 24             	mov    %eax,(%esp)
c010c8bf:	e8 02 00 00 00       	call   c010c8c6 <vprintfmt>
    va_end(ap);
}
c010c8c4:	c9                   	leave  
c010c8c5:	c3                   	ret    

c010c8c6 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010c8c6:	55                   	push   %ebp
c010c8c7:	89 e5                	mov    %esp,%ebp
c010c8c9:	56                   	push   %esi
c010c8ca:	53                   	push   %ebx
c010c8cb:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c8ce:	eb 18                	jmp    c010c8e8 <vprintfmt+0x22>
            if (ch == '\0') {
c010c8d0:	85 db                	test   %ebx,%ebx
c010c8d2:	75 05                	jne    c010c8d9 <vprintfmt+0x13>
                return;
c010c8d4:	e9 d1 03 00 00       	jmp    c010ccaa <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010c8d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c8dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8e0:	89 1c 24             	mov    %ebx,(%esp)
c010c8e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8e6:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c8e8:	8b 45 10             	mov    0x10(%ebp),%eax
c010c8eb:	8d 50 01             	lea    0x1(%eax),%edx
c010c8ee:	89 55 10             	mov    %edx,0x10(%ebp)
c010c8f1:	0f b6 00             	movzbl (%eax),%eax
c010c8f4:	0f b6 d8             	movzbl %al,%ebx
c010c8f7:	83 fb 25             	cmp    $0x25,%ebx
c010c8fa:	75 d4                	jne    c010c8d0 <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010c8fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010c900:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010c907:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c90a:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010c90d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c914:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c917:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010c91a:	8b 45 10             	mov    0x10(%ebp),%eax
c010c91d:	8d 50 01             	lea    0x1(%eax),%edx
c010c920:	89 55 10             	mov    %edx,0x10(%ebp)
c010c923:	0f b6 00             	movzbl (%eax),%eax
c010c926:	0f b6 d8             	movzbl %al,%ebx
c010c929:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010c92c:	83 f8 55             	cmp    $0x55,%eax
c010c92f:	0f 87 44 03 00 00    	ja     c010cc79 <vprintfmt+0x3b3>
c010c935:	8b 04 85 08 fc 10 c0 	mov    -0x3fef03f8(,%eax,4),%eax
c010c93c:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010c93e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010c942:	eb d6                	jmp    c010c91a <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010c944:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010c948:	eb d0                	jmp    c010c91a <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010c94a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010c951:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c954:	89 d0                	mov    %edx,%eax
c010c956:	c1 e0 02             	shl    $0x2,%eax
c010c959:	01 d0                	add    %edx,%eax
c010c95b:	01 c0                	add    %eax,%eax
c010c95d:	01 d8                	add    %ebx,%eax
c010c95f:	83 e8 30             	sub    $0x30,%eax
c010c962:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010c965:	8b 45 10             	mov    0x10(%ebp),%eax
c010c968:	0f b6 00             	movzbl (%eax),%eax
c010c96b:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010c96e:	83 fb 2f             	cmp    $0x2f,%ebx
c010c971:	7e 0b                	jle    c010c97e <vprintfmt+0xb8>
c010c973:	83 fb 39             	cmp    $0x39,%ebx
c010c976:	7f 06                	jg     c010c97e <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010c978:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010c97c:	eb d3                	jmp    c010c951 <vprintfmt+0x8b>
            goto process_precision;
c010c97e:	eb 33                	jmp    c010c9b3 <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010c980:	8b 45 14             	mov    0x14(%ebp),%eax
c010c983:	8d 50 04             	lea    0x4(%eax),%edx
c010c986:	89 55 14             	mov    %edx,0x14(%ebp)
c010c989:	8b 00                	mov    (%eax),%eax
c010c98b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010c98e:	eb 23                	jmp    c010c9b3 <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010c990:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c994:	79 0c                	jns    c010c9a2 <vprintfmt+0xdc>
                width = 0;
c010c996:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010c99d:	e9 78 ff ff ff       	jmp    c010c91a <vprintfmt+0x54>
c010c9a2:	e9 73 ff ff ff       	jmp    c010c91a <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010c9a7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010c9ae:	e9 67 ff ff ff       	jmp    c010c91a <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010c9b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c9b7:	79 12                	jns    c010c9cb <vprintfmt+0x105>
                width = precision, precision = -1;
c010c9b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c9bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c9bf:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010c9c6:	e9 4f ff ff ff       	jmp    c010c91a <vprintfmt+0x54>
c010c9cb:	e9 4a ff ff ff       	jmp    c010c91a <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010c9d0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010c9d4:	e9 41 ff ff ff       	jmp    c010c91a <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010c9d9:	8b 45 14             	mov    0x14(%ebp),%eax
c010c9dc:	8d 50 04             	lea    0x4(%eax),%edx
c010c9df:	89 55 14             	mov    %edx,0x14(%ebp)
c010c9e2:	8b 00                	mov    (%eax),%eax
c010c9e4:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c9e7:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c9eb:	89 04 24             	mov    %eax,(%esp)
c010c9ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9f1:	ff d0                	call   *%eax
            break;
c010c9f3:	e9 ac 02 00 00       	jmp    c010cca4 <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010c9f8:	8b 45 14             	mov    0x14(%ebp),%eax
c010c9fb:	8d 50 04             	lea    0x4(%eax),%edx
c010c9fe:	89 55 14             	mov    %edx,0x14(%ebp)
c010ca01:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010ca03:	85 db                	test   %ebx,%ebx
c010ca05:	79 02                	jns    c010ca09 <vprintfmt+0x143>
                err = -err;
c010ca07:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010ca09:	83 fb 18             	cmp    $0x18,%ebx
c010ca0c:	7f 0b                	jg     c010ca19 <vprintfmt+0x153>
c010ca0e:	8b 34 9d 80 fb 10 c0 	mov    -0x3fef0480(,%ebx,4),%esi
c010ca15:	85 f6                	test   %esi,%esi
c010ca17:	75 23                	jne    c010ca3c <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010ca19:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010ca1d:	c7 44 24 08 f5 fb 10 	movl   $0xc010fbf5,0x8(%esp)
c010ca24:	c0 
c010ca25:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca28:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca2f:	89 04 24             	mov    %eax,(%esp)
c010ca32:	e8 61 fe ff ff       	call   c010c898 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010ca37:	e9 68 02 00 00       	jmp    c010cca4 <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010ca3c:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010ca40:	c7 44 24 08 fe fb 10 	movl   $0xc010fbfe,0x8(%esp)
c010ca47:	c0 
c010ca48:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca4f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca52:	89 04 24             	mov    %eax,(%esp)
c010ca55:	e8 3e fe ff ff       	call   c010c898 <printfmt>
            }
            break;
c010ca5a:	e9 45 02 00 00       	jmp    c010cca4 <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010ca5f:	8b 45 14             	mov    0x14(%ebp),%eax
c010ca62:	8d 50 04             	lea    0x4(%eax),%edx
c010ca65:	89 55 14             	mov    %edx,0x14(%ebp)
c010ca68:	8b 30                	mov    (%eax),%esi
c010ca6a:	85 f6                	test   %esi,%esi
c010ca6c:	75 05                	jne    c010ca73 <vprintfmt+0x1ad>
                p = "(null)";
c010ca6e:	be 01 fc 10 c0       	mov    $0xc010fc01,%esi
            }
            if (width > 0 && padc != '-') {
c010ca73:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ca77:	7e 3e                	jle    c010cab7 <vprintfmt+0x1f1>
c010ca79:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010ca7d:	74 38                	je     c010cab7 <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010ca7f:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010ca82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ca85:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca89:	89 34 24             	mov    %esi,(%esp)
c010ca8c:	e8 ed 03 00 00       	call   c010ce7e <strnlen>
c010ca91:	29 c3                	sub    %eax,%ebx
c010ca93:	89 d8                	mov    %ebx,%eax
c010ca95:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ca98:	eb 17                	jmp    c010cab1 <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010ca9a:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010ca9e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010caa1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010caa5:	89 04 24             	mov    %eax,(%esp)
c010caa8:	8b 45 08             	mov    0x8(%ebp),%eax
c010caab:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010caad:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010cab1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cab5:	7f e3                	jg     c010ca9a <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010cab7:	eb 38                	jmp    c010caf1 <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010cab9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010cabd:	74 1f                	je     c010cade <vprintfmt+0x218>
c010cabf:	83 fb 1f             	cmp    $0x1f,%ebx
c010cac2:	7e 05                	jle    c010cac9 <vprintfmt+0x203>
c010cac4:	83 fb 7e             	cmp    $0x7e,%ebx
c010cac7:	7e 15                	jle    c010cade <vprintfmt+0x218>
                    putch('?', putdat);
c010cac9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cacc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cad0:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010cad7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cada:	ff d0                	call   *%eax
c010cadc:	eb 0f                	jmp    c010caed <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010cade:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cae1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cae5:	89 1c 24             	mov    %ebx,(%esp)
c010cae8:	8b 45 08             	mov    0x8(%ebp),%eax
c010caeb:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010caed:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010caf1:	89 f0                	mov    %esi,%eax
c010caf3:	8d 70 01             	lea    0x1(%eax),%esi
c010caf6:	0f b6 00             	movzbl (%eax),%eax
c010caf9:	0f be d8             	movsbl %al,%ebx
c010cafc:	85 db                	test   %ebx,%ebx
c010cafe:	74 10                	je     c010cb10 <vprintfmt+0x24a>
c010cb00:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010cb04:	78 b3                	js     c010cab9 <vprintfmt+0x1f3>
c010cb06:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010cb0a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010cb0e:	79 a9                	jns    c010cab9 <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010cb10:	eb 17                	jmp    c010cb29 <vprintfmt+0x263>
                putch(' ', putdat);
c010cb12:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb15:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb19:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010cb20:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb23:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010cb25:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010cb29:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cb2d:	7f e3                	jg     c010cb12 <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c010cb2f:	e9 70 01 00 00       	jmp    c010cca4 <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010cb34:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cb37:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb3b:	8d 45 14             	lea    0x14(%ebp),%eax
c010cb3e:	89 04 24             	mov    %eax,(%esp)
c010cb41:	e8 0b fd ff ff       	call   c010c851 <getint>
c010cb46:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb49:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010cb4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cb52:	85 d2                	test   %edx,%edx
c010cb54:	79 26                	jns    c010cb7c <vprintfmt+0x2b6>
                putch('-', putdat);
c010cb56:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb59:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb5d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010cb64:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb67:	ff d0                	call   *%eax
                num = -(long long)num;
c010cb69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cb6f:	f7 d8                	neg    %eax
c010cb71:	83 d2 00             	adc    $0x0,%edx
c010cb74:	f7 da                	neg    %edx
c010cb76:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb79:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010cb7c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010cb83:	e9 a8 00 00 00       	jmp    c010cc30 <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010cb88:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cb8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb8f:	8d 45 14             	lea    0x14(%ebp),%eax
c010cb92:	89 04 24             	mov    %eax,(%esp)
c010cb95:	e8 68 fc ff ff       	call   c010c802 <getuint>
c010cb9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb9d:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010cba0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010cba7:	e9 84 00 00 00       	jmp    c010cc30 <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010cbac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cbaf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbb3:	8d 45 14             	lea    0x14(%ebp),%eax
c010cbb6:	89 04 24             	mov    %eax,(%esp)
c010cbb9:	e8 44 fc ff ff       	call   c010c802 <getuint>
c010cbbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cbc1:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010cbc4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010cbcb:	eb 63                	jmp    c010cc30 <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010cbcd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbd4:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010cbdb:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbde:	ff d0                	call   *%eax
            putch('x', putdat);
c010cbe0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbe3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbe7:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010cbee:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbf1:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010cbf3:	8b 45 14             	mov    0x14(%ebp),%eax
c010cbf6:	8d 50 04             	lea    0x4(%eax),%edx
c010cbf9:	89 55 14             	mov    %edx,0x14(%ebp)
c010cbfc:	8b 00                	mov    (%eax),%eax
c010cbfe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cc01:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010cc08:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010cc0f:	eb 1f                	jmp    c010cc30 <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010cc11:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cc14:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc18:	8d 45 14             	lea    0x14(%ebp),%eax
c010cc1b:	89 04 24             	mov    %eax,(%esp)
c010cc1e:	e8 df fb ff ff       	call   c010c802 <getuint>
c010cc23:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cc26:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010cc29:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010cc30:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010cc34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc37:	89 54 24 18          	mov    %edx,0x18(%esp)
c010cc3b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cc3e:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cc42:	89 44 24 10          	mov    %eax,0x10(%esp)
c010cc46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc49:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cc4c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cc50:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cc54:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc57:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc5e:	89 04 24             	mov    %eax,(%esp)
c010cc61:	e8 97 fa ff ff       	call   c010c6fd <printnum>
            break;
c010cc66:	eb 3c                	jmp    c010cca4 <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010cc68:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc6b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc6f:	89 1c 24             	mov    %ebx,(%esp)
c010cc72:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc75:	ff d0                	call   *%eax
            break;
c010cc77:	eb 2b                	jmp    c010cca4 <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010cc79:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc7c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc80:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010cc87:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc8a:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010cc8c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cc90:	eb 04                	jmp    c010cc96 <vprintfmt+0x3d0>
c010cc92:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cc96:	8b 45 10             	mov    0x10(%ebp),%eax
c010cc99:	83 e8 01             	sub    $0x1,%eax
c010cc9c:	0f b6 00             	movzbl (%eax),%eax
c010cc9f:	3c 25                	cmp    $0x25,%al
c010cca1:	75 ef                	jne    c010cc92 <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010cca3:	90                   	nop
        }
    }
c010cca4:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010cca5:	e9 3e fc ff ff       	jmp    c010c8e8 <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010ccaa:	83 c4 40             	add    $0x40,%esp
c010ccad:	5b                   	pop    %ebx
c010ccae:	5e                   	pop    %esi
c010ccaf:	5d                   	pop    %ebp
c010ccb0:	c3                   	ret    

c010ccb1 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010ccb1:	55                   	push   %ebp
c010ccb2:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010ccb4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ccb7:	8b 40 08             	mov    0x8(%eax),%eax
c010ccba:	8d 50 01             	lea    0x1(%eax),%edx
c010ccbd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ccc0:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010ccc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ccc6:	8b 10                	mov    (%eax),%edx
c010ccc8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cccb:	8b 40 04             	mov    0x4(%eax),%eax
c010ccce:	39 c2                	cmp    %eax,%edx
c010ccd0:	73 12                	jae    c010cce4 <sprintputch+0x33>
        *b->buf ++ = ch;
c010ccd2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ccd5:	8b 00                	mov    (%eax),%eax
c010ccd7:	8d 48 01             	lea    0x1(%eax),%ecx
c010ccda:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ccdd:	89 0a                	mov    %ecx,(%edx)
c010ccdf:	8b 55 08             	mov    0x8(%ebp),%edx
c010cce2:	88 10                	mov    %dl,(%eax)
    }
}
c010cce4:	5d                   	pop    %ebp
c010cce5:	c3                   	ret    

c010cce6 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010cce6:	55                   	push   %ebp
c010cce7:	89 e5                	mov    %esp,%ebp
c010cce9:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010ccec:	8d 45 14             	lea    0x14(%ebp),%eax
c010ccef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010ccf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccf5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ccf9:	8b 45 10             	mov    0x10(%ebp),%eax
c010ccfc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cd00:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd03:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd07:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd0a:	89 04 24             	mov    %eax,(%esp)
c010cd0d:	e8 08 00 00 00       	call   c010cd1a <vsnprintf>
c010cd12:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010cd15:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010cd18:	c9                   	leave  
c010cd19:	c3                   	ret    

c010cd1a <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010cd1a:	55                   	push   %ebp
c010cd1b:	89 e5                	mov    %esp,%ebp
c010cd1d:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010cd20:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd23:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cd26:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd29:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cd2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd2f:	01 d0                	add    %edx,%eax
c010cd31:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cd34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010cd3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010cd3f:	74 0a                	je     c010cd4b <vsnprintf+0x31>
c010cd41:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd47:	39 c2                	cmp    %eax,%edx
c010cd49:	76 07                	jbe    c010cd52 <vsnprintf+0x38>
        return -E_INVAL;
c010cd4b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010cd50:	eb 2a                	jmp    c010cd7c <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010cd52:	8b 45 14             	mov    0x14(%ebp),%eax
c010cd55:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cd59:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd5c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cd60:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010cd63:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd67:	c7 04 24 b1 cc 10 c0 	movl   $0xc010ccb1,(%esp)
c010cd6e:	e8 53 fb ff ff       	call   c010c8c6 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010cd73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd76:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010cd79:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010cd7c:	c9                   	leave  
c010cd7d:	c3                   	ret    

c010cd7e <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010cd7e:	55                   	push   %ebp
c010cd7f:	89 e5                	mov    %esp,%ebp
c010cd81:	57                   	push   %edi
c010cd82:	56                   	push   %esi
c010cd83:	53                   	push   %ebx
c010cd84:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010cd87:	a1 20 db 12 c0       	mov    0xc012db20,%eax
c010cd8c:	8b 15 24 db 12 c0    	mov    0xc012db24,%edx
c010cd92:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010cd98:	6b f0 05             	imul   $0x5,%eax,%esi
c010cd9b:	01 f7                	add    %esi,%edi
c010cd9d:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010cda2:	f7 e6                	mul    %esi
c010cda4:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010cda7:	89 f2                	mov    %esi,%edx
c010cda9:	83 c0 0b             	add    $0xb,%eax
c010cdac:	83 d2 00             	adc    $0x0,%edx
c010cdaf:	89 c7                	mov    %eax,%edi
c010cdb1:	83 e7 ff             	and    $0xffffffff,%edi
c010cdb4:	89 f9                	mov    %edi,%ecx
c010cdb6:	0f b7 da             	movzwl %dx,%ebx
c010cdb9:	89 0d 20 db 12 c0    	mov    %ecx,0xc012db20
c010cdbf:	89 1d 24 db 12 c0    	mov    %ebx,0xc012db24
    unsigned long long result = (next >> 12);
c010cdc5:	a1 20 db 12 c0       	mov    0xc012db20,%eax
c010cdca:	8b 15 24 db 12 c0    	mov    0xc012db24,%edx
c010cdd0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010cdd4:	c1 ea 0c             	shr    $0xc,%edx
c010cdd7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cdda:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010cddd:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010cde4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cde7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cdea:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cded:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010cdf0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cdf3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cdf6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cdfa:	74 1c                	je     c010ce18 <rand+0x9a>
c010cdfc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cdff:	ba 00 00 00 00       	mov    $0x0,%edx
c010ce04:	f7 75 dc             	divl   -0x24(%ebp)
c010ce07:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010ce0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ce0d:	ba 00 00 00 00       	mov    $0x0,%edx
c010ce12:	f7 75 dc             	divl   -0x24(%ebp)
c010ce15:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ce18:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ce1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ce1e:	f7 75 dc             	divl   -0x24(%ebp)
c010ce21:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010ce24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010ce27:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ce2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ce2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ce30:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010ce33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010ce36:	83 c4 24             	add    $0x24,%esp
c010ce39:	5b                   	pop    %ebx
c010ce3a:	5e                   	pop    %esi
c010ce3b:	5f                   	pop    %edi
c010ce3c:	5d                   	pop    %ebp
c010ce3d:	c3                   	ret    

c010ce3e <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010ce3e:	55                   	push   %ebp
c010ce3f:	89 e5                	mov    %esp,%ebp
    next = seed;
c010ce41:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce44:	ba 00 00 00 00       	mov    $0x0,%edx
c010ce49:	a3 20 db 12 c0       	mov    %eax,0xc012db20
c010ce4e:	89 15 24 db 12 c0    	mov    %edx,0xc012db24
}
c010ce54:	5d                   	pop    %ebp
c010ce55:	c3                   	ret    

c010ce56 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010ce56:	55                   	push   %ebp
c010ce57:	89 e5                	mov    %esp,%ebp
c010ce59:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010ce5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010ce63:	eb 04                	jmp    c010ce69 <strlen+0x13>
        cnt ++;
c010ce65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010ce69:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce6c:	8d 50 01             	lea    0x1(%eax),%edx
c010ce6f:	89 55 08             	mov    %edx,0x8(%ebp)
c010ce72:	0f b6 00             	movzbl (%eax),%eax
c010ce75:	84 c0                	test   %al,%al
c010ce77:	75 ec                	jne    c010ce65 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010ce79:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010ce7c:	c9                   	leave  
c010ce7d:	c3                   	ret    

c010ce7e <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010ce7e:	55                   	push   %ebp
c010ce7f:	89 e5                	mov    %esp,%ebp
c010ce81:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010ce84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010ce8b:	eb 04                	jmp    c010ce91 <strnlen+0x13>
        cnt ++;
c010ce8d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010ce91:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ce94:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010ce97:	73 10                	jae    c010cea9 <strnlen+0x2b>
c010ce99:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce9c:	8d 50 01             	lea    0x1(%eax),%edx
c010ce9f:	89 55 08             	mov    %edx,0x8(%ebp)
c010cea2:	0f b6 00             	movzbl (%eax),%eax
c010cea5:	84 c0                	test   %al,%al
c010cea7:	75 e4                	jne    c010ce8d <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010cea9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010ceac:	c9                   	leave  
c010cead:	c3                   	ret    

c010ceae <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010ceae:	55                   	push   %ebp
c010ceaf:	89 e5                	mov    %esp,%ebp
c010ceb1:	57                   	push   %edi
c010ceb2:	56                   	push   %esi
c010ceb3:	83 ec 20             	sub    $0x20,%esp
c010ceb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ceb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cebc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cebf:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010cec2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010cec5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cec8:	89 d1                	mov    %edx,%ecx
c010ceca:	89 c2                	mov    %eax,%edx
c010cecc:	89 ce                	mov    %ecx,%esi
c010cece:	89 d7                	mov    %edx,%edi
c010ced0:	ac                   	lods   %ds:(%esi),%al
c010ced1:	aa                   	stos   %al,%es:(%edi)
c010ced2:	84 c0                	test   %al,%al
c010ced4:	75 fa                	jne    c010ced0 <strcpy+0x22>
c010ced6:	89 fa                	mov    %edi,%edx
c010ced8:	89 f1                	mov    %esi,%ecx
c010ceda:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010cedd:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010cee0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010cee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010cee6:	83 c4 20             	add    $0x20,%esp
c010cee9:	5e                   	pop    %esi
c010ceea:	5f                   	pop    %edi
c010ceeb:	5d                   	pop    %ebp
c010ceec:	c3                   	ret    

c010ceed <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010ceed:	55                   	push   %ebp
c010ceee:	89 e5                	mov    %esp,%ebp
c010cef0:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010cef3:	8b 45 08             	mov    0x8(%ebp),%eax
c010cef6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010cef9:	eb 21                	jmp    c010cf1c <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010cefb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cefe:	0f b6 10             	movzbl (%eax),%edx
c010cf01:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010cf04:	88 10                	mov    %dl,(%eax)
c010cf06:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010cf09:	0f b6 00             	movzbl (%eax),%eax
c010cf0c:	84 c0                	test   %al,%al
c010cf0e:	74 04                	je     c010cf14 <strncpy+0x27>
            src ++;
c010cf10:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010cf14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010cf18:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010cf1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cf20:	75 d9                	jne    c010cefb <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010cf22:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010cf25:	c9                   	leave  
c010cf26:	c3                   	ret    

c010cf27 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010cf27:	55                   	push   %ebp
c010cf28:	89 e5                	mov    %esp,%ebp
c010cf2a:	57                   	push   %edi
c010cf2b:	56                   	push   %esi
c010cf2c:	83 ec 20             	sub    $0x20,%esp
c010cf2f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf32:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf35:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf38:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010cf3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cf3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf41:	89 d1                	mov    %edx,%ecx
c010cf43:	89 c2                	mov    %eax,%edx
c010cf45:	89 ce                	mov    %ecx,%esi
c010cf47:	89 d7                	mov    %edx,%edi
c010cf49:	ac                   	lods   %ds:(%esi),%al
c010cf4a:	ae                   	scas   %es:(%edi),%al
c010cf4b:	75 08                	jne    c010cf55 <strcmp+0x2e>
c010cf4d:	84 c0                	test   %al,%al
c010cf4f:	75 f8                	jne    c010cf49 <strcmp+0x22>
c010cf51:	31 c0                	xor    %eax,%eax
c010cf53:	eb 04                	jmp    c010cf59 <strcmp+0x32>
c010cf55:	19 c0                	sbb    %eax,%eax
c010cf57:	0c 01                	or     $0x1,%al
c010cf59:	89 fa                	mov    %edi,%edx
c010cf5b:	89 f1                	mov    %esi,%ecx
c010cf5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cf60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010cf63:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010cf66:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010cf69:	83 c4 20             	add    $0x20,%esp
c010cf6c:	5e                   	pop    %esi
c010cf6d:	5f                   	pop    %edi
c010cf6e:	5d                   	pop    %ebp
c010cf6f:	c3                   	ret    

c010cf70 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010cf70:	55                   	push   %ebp
c010cf71:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010cf73:	eb 0c                	jmp    c010cf81 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010cf75:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cf79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010cf7d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010cf81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cf85:	74 1a                	je     c010cfa1 <strncmp+0x31>
c010cf87:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf8a:	0f b6 00             	movzbl (%eax),%eax
c010cf8d:	84 c0                	test   %al,%al
c010cf8f:	74 10                	je     c010cfa1 <strncmp+0x31>
c010cf91:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf94:	0f b6 10             	movzbl (%eax),%edx
c010cf97:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf9a:	0f b6 00             	movzbl (%eax),%eax
c010cf9d:	38 c2                	cmp    %al,%dl
c010cf9f:	74 d4                	je     c010cf75 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010cfa1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cfa5:	74 18                	je     c010cfbf <strncmp+0x4f>
c010cfa7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfaa:	0f b6 00             	movzbl (%eax),%eax
c010cfad:	0f b6 d0             	movzbl %al,%edx
c010cfb0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfb3:	0f b6 00             	movzbl (%eax),%eax
c010cfb6:	0f b6 c0             	movzbl %al,%eax
c010cfb9:	29 c2                	sub    %eax,%edx
c010cfbb:	89 d0                	mov    %edx,%eax
c010cfbd:	eb 05                	jmp    c010cfc4 <strncmp+0x54>
c010cfbf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cfc4:	5d                   	pop    %ebp
c010cfc5:	c3                   	ret    

c010cfc6 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010cfc6:	55                   	push   %ebp
c010cfc7:	89 e5                	mov    %esp,%ebp
c010cfc9:	83 ec 04             	sub    $0x4,%esp
c010cfcc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfcf:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010cfd2:	eb 14                	jmp    c010cfe8 <strchr+0x22>
        if (*s == c) {
c010cfd4:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfd7:	0f b6 00             	movzbl (%eax),%eax
c010cfda:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010cfdd:	75 05                	jne    c010cfe4 <strchr+0x1e>
            return (char *)s;
c010cfdf:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfe2:	eb 13                	jmp    c010cff7 <strchr+0x31>
        }
        s ++;
c010cfe4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010cfe8:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfeb:	0f b6 00             	movzbl (%eax),%eax
c010cfee:	84 c0                	test   %al,%al
c010cff0:	75 e2                	jne    c010cfd4 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010cff2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cff7:	c9                   	leave  
c010cff8:	c3                   	ret    

c010cff9 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010cff9:	55                   	push   %ebp
c010cffa:	89 e5                	mov    %esp,%ebp
c010cffc:	83 ec 04             	sub    $0x4,%esp
c010cfff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d002:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d005:	eb 11                	jmp    c010d018 <strfind+0x1f>
        if (*s == c) {
c010d007:	8b 45 08             	mov    0x8(%ebp),%eax
c010d00a:	0f b6 00             	movzbl (%eax),%eax
c010d00d:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d010:	75 02                	jne    c010d014 <strfind+0x1b>
            break;
c010d012:	eb 0e                	jmp    c010d022 <strfind+0x29>
        }
        s ++;
c010d014:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010d018:	8b 45 08             	mov    0x8(%ebp),%eax
c010d01b:	0f b6 00             	movzbl (%eax),%eax
c010d01e:	84 c0                	test   %al,%al
c010d020:	75 e5                	jne    c010d007 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010d022:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d025:	c9                   	leave  
c010d026:	c3                   	ret    

c010d027 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010d027:	55                   	push   %ebp
c010d028:	89 e5                	mov    %esp,%ebp
c010d02a:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010d02d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010d034:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d03b:	eb 04                	jmp    c010d041 <strtol+0x1a>
        s ++;
c010d03d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d041:	8b 45 08             	mov    0x8(%ebp),%eax
c010d044:	0f b6 00             	movzbl (%eax),%eax
c010d047:	3c 20                	cmp    $0x20,%al
c010d049:	74 f2                	je     c010d03d <strtol+0x16>
c010d04b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d04e:	0f b6 00             	movzbl (%eax),%eax
c010d051:	3c 09                	cmp    $0x9,%al
c010d053:	74 e8                	je     c010d03d <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010d055:	8b 45 08             	mov    0x8(%ebp),%eax
c010d058:	0f b6 00             	movzbl (%eax),%eax
c010d05b:	3c 2b                	cmp    $0x2b,%al
c010d05d:	75 06                	jne    c010d065 <strtol+0x3e>
        s ++;
c010d05f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d063:	eb 15                	jmp    c010d07a <strtol+0x53>
    }
    else if (*s == '-') {
c010d065:	8b 45 08             	mov    0x8(%ebp),%eax
c010d068:	0f b6 00             	movzbl (%eax),%eax
c010d06b:	3c 2d                	cmp    $0x2d,%al
c010d06d:	75 0b                	jne    c010d07a <strtol+0x53>
        s ++, neg = 1;
c010d06f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d073:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010d07a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d07e:	74 06                	je     c010d086 <strtol+0x5f>
c010d080:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010d084:	75 24                	jne    c010d0aa <strtol+0x83>
c010d086:	8b 45 08             	mov    0x8(%ebp),%eax
c010d089:	0f b6 00             	movzbl (%eax),%eax
c010d08c:	3c 30                	cmp    $0x30,%al
c010d08e:	75 1a                	jne    c010d0aa <strtol+0x83>
c010d090:	8b 45 08             	mov    0x8(%ebp),%eax
c010d093:	83 c0 01             	add    $0x1,%eax
c010d096:	0f b6 00             	movzbl (%eax),%eax
c010d099:	3c 78                	cmp    $0x78,%al
c010d09b:	75 0d                	jne    c010d0aa <strtol+0x83>
        s += 2, base = 16;
c010d09d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010d0a1:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010d0a8:	eb 2a                	jmp    c010d0d4 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010d0aa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d0ae:	75 17                	jne    c010d0c7 <strtol+0xa0>
c010d0b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0b3:	0f b6 00             	movzbl (%eax),%eax
c010d0b6:	3c 30                	cmp    $0x30,%al
c010d0b8:	75 0d                	jne    c010d0c7 <strtol+0xa0>
        s ++, base = 8;
c010d0ba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d0be:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010d0c5:	eb 0d                	jmp    c010d0d4 <strtol+0xad>
    }
    else if (base == 0) {
c010d0c7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d0cb:	75 07                	jne    c010d0d4 <strtol+0xad>
        base = 10;
c010d0cd:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010d0d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0d7:	0f b6 00             	movzbl (%eax),%eax
c010d0da:	3c 2f                	cmp    $0x2f,%al
c010d0dc:	7e 1b                	jle    c010d0f9 <strtol+0xd2>
c010d0de:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0e1:	0f b6 00             	movzbl (%eax),%eax
c010d0e4:	3c 39                	cmp    $0x39,%al
c010d0e6:	7f 11                	jg     c010d0f9 <strtol+0xd2>
            dig = *s - '0';
c010d0e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0eb:	0f b6 00             	movzbl (%eax),%eax
c010d0ee:	0f be c0             	movsbl %al,%eax
c010d0f1:	83 e8 30             	sub    $0x30,%eax
c010d0f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d0f7:	eb 48                	jmp    c010d141 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010d0f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0fc:	0f b6 00             	movzbl (%eax),%eax
c010d0ff:	3c 60                	cmp    $0x60,%al
c010d101:	7e 1b                	jle    c010d11e <strtol+0xf7>
c010d103:	8b 45 08             	mov    0x8(%ebp),%eax
c010d106:	0f b6 00             	movzbl (%eax),%eax
c010d109:	3c 7a                	cmp    $0x7a,%al
c010d10b:	7f 11                	jg     c010d11e <strtol+0xf7>
            dig = *s - 'a' + 10;
c010d10d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d110:	0f b6 00             	movzbl (%eax),%eax
c010d113:	0f be c0             	movsbl %al,%eax
c010d116:	83 e8 57             	sub    $0x57,%eax
c010d119:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d11c:	eb 23                	jmp    c010d141 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010d11e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d121:	0f b6 00             	movzbl (%eax),%eax
c010d124:	3c 40                	cmp    $0x40,%al
c010d126:	7e 3d                	jle    c010d165 <strtol+0x13e>
c010d128:	8b 45 08             	mov    0x8(%ebp),%eax
c010d12b:	0f b6 00             	movzbl (%eax),%eax
c010d12e:	3c 5a                	cmp    $0x5a,%al
c010d130:	7f 33                	jg     c010d165 <strtol+0x13e>
            dig = *s - 'A' + 10;
c010d132:	8b 45 08             	mov    0x8(%ebp),%eax
c010d135:	0f b6 00             	movzbl (%eax),%eax
c010d138:	0f be c0             	movsbl %al,%eax
c010d13b:	83 e8 37             	sub    $0x37,%eax
c010d13e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010d141:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d144:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d147:	7c 02                	jl     c010d14b <strtol+0x124>
            break;
c010d149:	eb 1a                	jmp    c010d165 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010d14b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d14f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d152:	0f af 45 10          	imul   0x10(%ebp),%eax
c010d156:	89 c2                	mov    %eax,%edx
c010d158:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d15b:	01 d0                	add    %edx,%eax
c010d15d:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010d160:	e9 6f ff ff ff       	jmp    c010d0d4 <strtol+0xad>

    if (endptr) {
c010d165:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d169:	74 08                	je     c010d173 <strtol+0x14c>
        *endptr = (char *) s;
c010d16b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d16e:	8b 55 08             	mov    0x8(%ebp),%edx
c010d171:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010d173:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010d177:	74 07                	je     c010d180 <strtol+0x159>
c010d179:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d17c:	f7 d8                	neg    %eax
c010d17e:	eb 03                	jmp    c010d183 <strtol+0x15c>
c010d180:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010d183:	c9                   	leave  
c010d184:	c3                   	ret    

c010d185 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010d185:	55                   	push   %ebp
c010d186:	89 e5                	mov    %esp,%ebp
c010d188:	57                   	push   %edi
c010d189:	83 ec 24             	sub    $0x24,%esp
c010d18c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d18f:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010d192:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010d196:	8b 55 08             	mov    0x8(%ebp),%edx
c010d199:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010d19c:	88 45 f7             	mov    %al,-0x9(%ebp)
c010d19f:	8b 45 10             	mov    0x10(%ebp),%eax
c010d1a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010d1a5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010d1a8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010d1ac:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010d1af:	89 d7                	mov    %edx,%edi
c010d1b1:	f3 aa                	rep stos %al,%es:(%edi)
c010d1b3:	89 fa                	mov    %edi,%edx
c010d1b5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d1b8:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010d1bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010d1be:	83 c4 24             	add    $0x24,%esp
c010d1c1:	5f                   	pop    %edi
c010d1c2:	5d                   	pop    %ebp
c010d1c3:	c3                   	ret    

c010d1c4 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010d1c4:	55                   	push   %ebp
c010d1c5:	89 e5                	mov    %esp,%ebp
c010d1c7:	57                   	push   %edi
c010d1c8:	56                   	push   %esi
c010d1c9:	53                   	push   %ebx
c010d1ca:	83 ec 30             	sub    $0x30,%esp
c010d1cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d1d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d1d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d1d9:	8b 45 10             	mov    0x10(%ebp),%eax
c010d1dc:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010d1df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1e2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d1e5:	73 42                	jae    c010d229 <memmove+0x65>
c010d1e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d1ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d1f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d1f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d1f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d1f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d1fc:	c1 e8 02             	shr    $0x2,%eax
c010d1ff:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d201:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d204:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d207:	89 d7                	mov    %edx,%edi
c010d209:	89 c6                	mov    %eax,%esi
c010d20b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d20d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010d210:	83 e1 03             	and    $0x3,%ecx
c010d213:	74 02                	je     c010d217 <memmove+0x53>
c010d215:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d217:	89 f0                	mov    %esi,%eax
c010d219:	89 fa                	mov    %edi,%edx
c010d21b:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010d21e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d221:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d224:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d227:	eb 36                	jmp    c010d25f <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010d229:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d22c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d22f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d232:	01 c2                	add    %eax,%edx
c010d234:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d237:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010d23a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d23d:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010d240:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d243:	89 c1                	mov    %eax,%ecx
c010d245:	89 d8                	mov    %ebx,%eax
c010d247:	89 d6                	mov    %edx,%esi
c010d249:	89 c7                	mov    %eax,%edi
c010d24b:	fd                   	std    
c010d24c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d24e:	fc                   	cld    
c010d24f:	89 f8                	mov    %edi,%eax
c010d251:	89 f2                	mov    %esi,%edx
c010d253:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010d256:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010d259:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010d25c:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010d25f:	83 c4 30             	add    $0x30,%esp
c010d262:	5b                   	pop    %ebx
c010d263:	5e                   	pop    %esi
c010d264:	5f                   	pop    %edi
c010d265:	5d                   	pop    %ebp
c010d266:	c3                   	ret    

c010d267 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010d267:	55                   	push   %ebp
c010d268:	89 e5                	mov    %esp,%ebp
c010d26a:	57                   	push   %edi
c010d26b:	56                   	push   %esi
c010d26c:	83 ec 20             	sub    $0x20,%esp
c010d26f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d272:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d275:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d278:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d27b:	8b 45 10             	mov    0x10(%ebp),%eax
c010d27e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d281:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d284:	c1 e8 02             	shr    $0x2,%eax
c010d287:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d289:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d28c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d28f:	89 d7                	mov    %edx,%edi
c010d291:	89 c6                	mov    %eax,%esi
c010d293:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d295:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d298:	83 e1 03             	and    $0x3,%ecx
c010d29b:	74 02                	je     c010d29f <memcpy+0x38>
c010d29d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d29f:	89 f0                	mov    %esi,%eax
c010d2a1:	89 fa                	mov    %edi,%edx
c010d2a3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010d2a6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d2a9:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d2ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010d2af:	83 c4 20             	add    $0x20,%esp
c010d2b2:	5e                   	pop    %esi
c010d2b3:	5f                   	pop    %edi
c010d2b4:	5d                   	pop    %ebp
c010d2b5:	c3                   	ret    

c010d2b6 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010d2b6:	55                   	push   %ebp
c010d2b7:	89 e5                	mov    %esp,%ebp
c010d2b9:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010d2bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2bf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010d2c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2c5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010d2c8:	eb 30                	jmp    c010d2fa <memcmp+0x44>
        if (*s1 != *s2) {
c010d2ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d2cd:	0f b6 10             	movzbl (%eax),%edx
c010d2d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d2d3:	0f b6 00             	movzbl (%eax),%eax
c010d2d6:	38 c2                	cmp    %al,%dl
c010d2d8:	74 18                	je     c010d2f2 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d2da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d2dd:	0f b6 00             	movzbl (%eax),%eax
c010d2e0:	0f b6 d0             	movzbl %al,%edx
c010d2e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d2e6:	0f b6 00             	movzbl (%eax),%eax
c010d2e9:	0f b6 c0             	movzbl %al,%eax
c010d2ec:	29 c2                	sub    %eax,%edx
c010d2ee:	89 d0                	mov    %edx,%eax
c010d2f0:	eb 1a                	jmp    c010d30c <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010d2f2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d2f6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010d2fa:	8b 45 10             	mov    0x10(%ebp),%eax
c010d2fd:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d300:	89 55 10             	mov    %edx,0x10(%ebp)
c010d303:	85 c0                	test   %eax,%eax
c010d305:	75 c3                	jne    c010d2ca <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010d307:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d30c:	c9                   	leave  
c010d30d:	c3                   	ret    
