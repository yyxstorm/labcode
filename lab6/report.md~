# 操作系统Lab6实验报告

2012012617
计22
周恩泽

## 重要知识点及关系
Round Robin处理机调度算法，对应default_sched.c中的RR系列函数
Stride Scheduling处理机调度算法，对应default_sched_stride.c中的stride系列函数

## 未涉及重要知识点
其他处理机调度算法

## 练习0：填写已有实验
用meld。注意proc.c中的alloc_proc函数需要继续更新，初始化新加入proc_struct的内容，否则无法实现实验指导书说的“执行make grade，大部分测试用例应该通过。”

## 练习1: 使用 Round Robin 调度算法

### 请理解并分析sched_calss中各个函数指针的用法，并接合Round Robin 调度算法描ucore的调度执行过程
关键是看懂schedule函数。它将调度过程抽象化为在run_queue中出队、入队、选择下一个这三个过程，这三个过程以及另需的init和时钟共五个函数就是关于调度算法的全部内容，它们通过调用sched_class的五个对应函数指针执行实际代码，这样就让sched_class成为了一个统一接口，实现不同的调度算法只需要实现不同的sched_class就行。Round Robin是基准代码中默认的调度算法，实现了先进先出的调度队列，一次调度就是schedule函数通过default_sched_class调用RR_enqueue将当前运行的被打断进程加入队列尾，调用RR_pick_next获取队列的头作为下一个运行进程，然后调用RR_dequeue把这个进程出队。另外RR_proc_tick在每个时钟被调用，这样时间片归零的当前进程会被trap函数执行schedule交出cpu。

### 请在实验报告中简要说明如何设计实现”多级反馈队列调度算法“，给出概要设计，鼓励给出详细设计
多级反馈队列调度算法和Round Robin的区别基本就是把维护一个队列改成了维护多个不同优先级的队列。只要在proc_struct中加上一项标记当前优先级，然后在enqueue时候按优先级加入对应队列，dequeue时候从所在队列出队，pick_next时候按优先级依次搜索各个队列，找到不为空的一队返回其队首并将其优先级下调即可。

## 练习2: 实现 Stride Scheduling 调度算法

### 我的设计实现过程
搞清楚stride系列函数都是干嘛的，然后看注释来。注意要随时对照run_queue和proc_struct两个结构体，维护其中内容的定义，保证没有缺漏。
BIG_STRIDE的定义看实验指导书算就行。
trap_dispatch函数中时钟中断下面要调用sched_class_proc_tick(current)更新进程的时间片。为此需要修改sched.h和sched.c，让这个函数能被trap.c调用。

### 和标准答案的差别
注释手把手教的，差别不大。我是用skew_heap做的。在stride_enqueue函数中没有判断proc->time_slice的值是否合法，在stride_dequeue中维护了proc_rq的定义，另外所有++和--用前置版本提高效率。
